(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to2, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to2, key) && key !== except)
          __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to2;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/dayjs/dayjs.min.js
  var require_dayjs_min = __commonJS({
    "node_modules/dayjs/dayjs.min.js"(exports, module) {
      !function(t4, e3) {
        "object" == typeof exports && "undefined" != typeof module ? module.exports = e3() : "function" == typeof define && define.amd ? define(e3) : (t4 = "undefined" != typeof globalThis ? globalThis : t4 || self).dayjs = e3();
      }(exports, function() {
        "use strict";
        var t4 = 1e3, e3 = 6e4, n3 = 36e5, r3 = "millisecond", i3 = "second", s3 = "minute", u3 = "hour", a3 = "day", o3 = "week", c3 = "month", f3 = "quarter", h3 = "year", d3 = "date", l3 = "Invalid Date", $3 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y3 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M3 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t5) {
          var e4 = ["th", "st", "nd", "rd"], n4 = t5 % 100;
          return "[" + t5 + (e4[(n4 - 20) % 10] || e4[n4] || e4[0]) + "]";
        } }, m3 = function(t5, e4, n4) {
          var r4 = String(t5);
          return !r4 || r4.length >= e4 ? t5 : "" + Array(e4 + 1 - r4.length).join(n4) + t5;
        }, v3 = { s: m3, z: function(t5) {
          var e4 = -t5.utcOffset(), n4 = Math.abs(e4), r4 = Math.floor(n4 / 60), i4 = n4 % 60;
          return (e4 <= 0 ? "+" : "-") + m3(r4, 2, "0") + ":" + m3(i4, 2, "0");
        }, m: function t5(e4, n4) {
          if (e4.date() < n4.date()) return -t5(n4, e4);
          var r4 = 12 * (n4.year() - e4.year()) + (n4.month() - e4.month()), i4 = e4.clone().add(r4, c3), s4 = n4 - i4 < 0, u4 = e4.clone().add(r4 + (s4 ? -1 : 1), c3);
          return +(-(r4 + (n4 - i4) / (s4 ? i4 - u4 : u4 - i4)) || 0);
        }, a: function(t5) {
          return t5 < 0 ? Math.ceil(t5) || 0 : Math.floor(t5);
        }, p: function(t5) {
          return { M: c3, y: h3, w: o3, d: a3, D: d3, h: u3, m: s3, s: i3, ms: r3, Q: f3 }[t5] || String(t5 || "").toLowerCase().replace(/s$/, "");
        }, u: function(t5) {
          return void 0 === t5;
        } }, g3 = "en", D3 = {};
        D3[g3] = M3;
        var p3 = "$isDayjsObject", S3 = function(t5) {
          return t5 instanceof _3 || !(!t5 || !t5[p3]);
        }, w3 = function t5(e4, n4, r4) {
          var i4;
          if (!e4) return g3;
          if ("string" == typeof e4) {
            var s4 = e4.toLowerCase();
            D3[s4] && (i4 = s4), n4 && (D3[s4] = n4, i4 = s4);
            var u4 = e4.split("-");
            if (!i4 && u4.length > 1) return t5(u4[0]);
          } else {
            var a4 = e4.name;
            D3[a4] = e4, i4 = a4;
          }
          return !r4 && i4 && (g3 = i4), i4 || !r4 && g3;
        }, O3 = function(t5, e4) {
          if (S3(t5)) return t5.clone();
          var n4 = "object" == typeof e4 ? e4 : {};
          return n4.date = t5, n4.args = arguments, new _3(n4);
        }, b3 = v3;
        b3.l = w3, b3.i = S3, b3.w = function(t5, e4) {
          return O3(t5, { locale: e4.$L, utc: e4.$u, x: e4.$x, $offset: e4.$offset });
        };
        var _3 = function() {
          function M4(t5) {
            this.$L = w3(t5.locale, null, true), this.parse(t5), this.$x = this.$x || t5.x || {}, this[p3] = true;
          }
          var m4 = M4.prototype;
          return m4.parse = function(t5) {
            this.$d = function(t6) {
              var e4 = t6.date, n4 = t6.utc;
              if (null === e4) return /* @__PURE__ */ new Date(NaN);
              if (b3.u(e4)) return /* @__PURE__ */ new Date();
              if (e4 instanceof Date) return new Date(e4);
              if ("string" == typeof e4 && !/Z$/i.test(e4)) {
                var r4 = e4.match($3);
                if (r4) {
                  var i4 = r4[2] - 1 || 0, s4 = (r4[7] || "0").substring(0, 3);
                  return n4 ? new Date(Date.UTC(r4[1], i4, r4[3] || 1, r4[4] || 0, r4[5] || 0, r4[6] || 0, s4)) : new Date(r4[1], i4, r4[3] || 1, r4[4] || 0, r4[5] || 0, r4[6] || 0, s4);
                }
              }
              return new Date(e4);
            }(t5), this.init();
          }, m4.init = function() {
            var t5 = this.$d;
            this.$y = t5.getFullYear(), this.$M = t5.getMonth(), this.$D = t5.getDate(), this.$W = t5.getDay(), this.$H = t5.getHours(), this.$m = t5.getMinutes(), this.$s = t5.getSeconds(), this.$ms = t5.getMilliseconds();
          }, m4.$utils = function() {
            return b3;
          }, m4.isValid = function() {
            return !(this.$d.toString() === l3);
          }, m4.isSame = function(t5, e4) {
            var n4 = O3(t5);
            return this.startOf(e4) <= n4 && n4 <= this.endOf(e4);
          }, m4.isAfter = function(t5, e4) {
            return O3(t5) < this.startOf(e4);
          }, m4.isBefore = function(t5, e4) {
            return this.endOf(e4) < O3(t5);
          }, m4.$g = function(t5, e4, n4) {
            return b3.u(t5) ? this[e4] : this.set(n4, t5);
          }, m4.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
          }, m4.valueOf = function() {
            return this.$d.getTime();
          }, m4.startOf = function(t5, e4) {
            var n4 = this, r4 = !!b3.u(e4) || e4, f4 = b3.p(t5), l4 = function(t6, e5) {
              var i4 = b3.w(n4.$u ? Date.UTC(n4.$y, e5, t6) : new Date(n4.$y, e5, t6), n4);
              return r4 ? i4 : i4.endOf(a3);
            }, $4 = function(t6, e5) {
              return b3.w(n4.toDate()[t6].apply(n4.toDate("s"), (r4 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e5)), n4);
            }, y4 = this.$W, M5 = this.$M, m5 = this.$D, v4 = "set" + (this.$u ? "UTC" : "");
            switch (f4) {
              case h3:
                return r4 ? l4(1, 0) : l4(31, 11);
              case c3:
                return r4 ? l4(1, M5) : l4(0, M5 + 1);
              case o3:
                var g4 = this.$locale().weekStart || 0, D4 = (y4 < g4 ? y4 + 7 : y4) - g4;
                return l4(r4 ? m5 - D4 : m5 + (6 - D4), M5);
              case a3:
              case d3:
                return $4(v4 + "Hours", 0);
              case u3:
                return $4(v4 + "Minutes", 1);
              case s3:
                return $4(v4 + "Seconds", 2);
              case i3:
                return $4(v4 + "Milliseconds", 3);
              default:
                return this.clone();
            }
          }, m4.endOf = function(t5) {
            return this.startOf(t5, false);
          }, m4.$set = function(t5, e4) {
            var n4, o4 = b3.p(t5), f4 = "set" + (this.$u ? "UTC" : ""), l4 = (n4 = {}, n4[a3] = f4 + "Date", n4[d3] = f4 + "Date", n4[c3] = f4 + "Month", n4[h3] = f4 + "FullYear", n4[u3] = f4 + "Hours", n4[s3] = f4 + "Minutes", n4[i3] = f4 + "Seconds", n4[r3] = f4 + "Milliseconds", n4)[o4], $4 = o4 === a3 ? this.$D + (e4 - this.$W) : e4;
            if (o4 === c3 || o4 === h3) {
              var y4 = this.clone().set(d3, 1);
              y4.$d[l4]($4), y4.init(), this.$d = y4.set(d3, Math.min(this.$D, y4.daysInMonth())).$d;
            } else l4 && this.$d[l4]($4);
            return this.init(), this;
          }, m4.set = function(t5, e4) {
            return this.clone().$set(t5, e4);
          }, m4.get = function(t5) {
            return this[b3.p(t5)]();
          }, m4.add = function(r4, f4) {
            var d4, l4 = this;
            r4 = Number(r4);
            var $4 = b3.p(f4), y4 = function(t5) {
              var e4 = O3(l4);
              return b3.w(e4.date(e4.date() + Math.round(t5 * r4)), l4);
            };
            if ($4 === c3) return this.set(c3, this.$M + r4);
            if ($4 === h3) return this.set(h3, this.$y + r4);
            if ($4 === a3) return y4(1);
            if ($4 === o3) return y4(7);
            var M5 = (d4 = {}, d4[s3] = e3, d4[u3] = n3, d4[i3] = t4, d4)[$4] || 1, m5 = this.$d.getTime() + r4 * M5;
            return b3.w(m5, this);
          }, m4.subtract = function(t5, e4) {
            return this.add(-1 * t5, e4);
          }, m4.format = function(t5) {
            var e4 = this, n4 = this.$locale();
            if (!this.isValid()) return n4.invalidDate || l3;
            var r4 = t5 || "YYYY-MM-DDTHH:mm:ssZ", i4 = b3.z(this), s4 = this.$H, u4 = this.$m, a4 = this.$M, o4 = n4.weekdays, c4 = n4.months, f4 = n4.meridiem, h4 = function(t6, n5, i5, s5) {
              return t6 && (t6[n5] || t6(e4, r4)) || i5[n5].slice(0, s5);
            }, d4 = function(t6) {
              return b3.s(s4 % 12 || 12, t6, "0");
            }, $4 = f4 || function(t6, e5, n5) {
              var r5 = t6 < 12 ? "AM" : "PM";
              return n5 ? r5.toLowerCase() : r5;
            };
            return r4.replace(y3, function(t6, r5) {
              return r5 || function(t7) {
                switch (t7) {
                  case "YY":
                    return String(e4.$y).slice(-2);
                  case "YYYY":
                    return b3.s(e4.$y, 4, "0");
                  case "M":
                    return a4 + 1;
                  case "MM":
                    return b3.s(a4 + 1, 2, "0");
                  case "MMM":
                    return h4(n4.monthsShort, a4, c4, 3);
                  case "MMMM":
                    return h4(c4, a4);
                  case "D":
                    return e4.$D;
                  case "DD":
                    return b3.s(e4.$D, 2, "0");
                  case "d":
                    return String(e4.$W);
                  case "dd":
                    return h4(n4.weekdaysMin, e4.$W, o4, 2);
                  case "ddd":
                    return h4(n4.weekdaysShort, e4.$W, o4, 3);
                  case "dddd":
                    return o4[e4.$W];
                  case "H":
                    return String(s4);
                  case "HH":
                    return b3.s(s4, 2, "0");
                  case "h":
                    return d4(1);
                  case "hh":
                    return d4(2);
                  case "a":
                    return $4(s4, u4, true);
                  case "A":
                    return $4(s4, u4, false);
                  case "m":
                    return String(u4);
                  case "mm":
                    return b3.s(u4, 2, "0");
                  case "s":
                    return String(e4.$s);
                  case "ss":
                    return b3.s(e4.$s, 2, "0");
                  case "SSS":
                    return b3.s(e4.$ms, 3, "0");
                  case "Z":
                    return i4;
                }
                return null;
              }(t6) || i4.replace(":", "");
            });
          }, m4.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
          }, m4.diff = function(r4, d4, l4) {
            var $4, y4 = this, M5 = b3.p(d4), m5 = O3(r4), v4 = (m5.utcOffset() - this.utcOffset()) * e3, g4 = this - m5, D4 = function() {
              return b3.m(y4, m5);
            };
            switch (M5) {
              case h3:
                $4 = D4() / 12;
                break;
              case c3:
                $4 = D4();
                break;
              case f3:
                $4 = D4() / 3;
                break;
              case o3:
                $4 = (g4 - v4) / 6048e5;
                break;
              case a3:
                $4 = (g4 - v4) / 864e5;
                break;
              case u3:
                $4 = g4 / n3;
                break;
              case s3:
                $4 = g4 / e3;
                break;
              case i3:
                $4 = g4 / t4;
                break;
              default:
                $4 = g4;
            }
            return l4 ? $4 : b3.a($4);
          }, m4.daysInMonth = function() {
            return this.endOf(c3).$D;
          }, m4.$locale = function() {
            return D3[this.$L];
          }, m4.locale = function(t5, e4) {
            if (!t5) return this.$L;
            var n4 = this.clone(), r4 = w3(t5, e4, true);
            return r4 && (n4.$L = r4), n4;
          }, m4.clone = function() {
            return b3.w(this.$d, this);
          }, m4.toDate = function() {
            return new Date(this.valueOf());
          }, m4.toJSON = function() {
            return this.isValid() ? this.toISOString() : null;
          }, m4.toISOString = function() {
            return this.$d.toISOString();
          }, m4.toString = function() {
            return this.$d.toUTCString();
          }, M4;
        }(), k3 = _3.prototype;
        return O3.prototype = k3, [["$ms", r3], ["$s", i3], ["$m", s3], ["$H", u3], ["$W", a3], ["$M", c3], ["$y", h3], ["$D", d3]].forEach(function(t5) {
          k3[t5[1]] = function(e4) {
            return this.$g(e4, t5[0], t5[1]);
          };
        }), O3.extend = function(t5, e4) {
          return t5.$i || (t5(e4, _3, O3), t5.$i = true), O3;
        }, O3.locale = w3, O3.isDayjs = S3, O3.unix = function(t5) {
          return O3(1e3 * t5);
        }, O3.en = D3[g3], O3.Ls = D3, O3.p = {}, O3;
      });
    }
  });

  // node_modules/lesli-js/node_modules/dayjs/dayjs.min.js
  var require_dayjs_min2 = __commonJS({
    "node_modules/lesli-js/node_modules/dayjs/dayjs.min.js"(exports, module) {
      !function(t4, e3) {
        "object" == typeof exports && "undefined" != typeof module ? module.exports = e3() : "function" == typeof define && define.amd ? define(e3) : (t4 = "undefined" != typeof globalThis ? globalThis : t4 || self).dayjs = e3();
      }(exports, function() {
        "use strict";
        var t4 = 1e3, e3 = 6e4, n3 = 36e5, r3 = "millisecond", i3 = "second", s3 = "minute", u3 = "hour", a3 = "day", o3 = "week", f3 = "month", h3 = "quarter", c3 = "year", d3 = "date", $3 = "Invalid Date", l3 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y3 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M3 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, m3 = function(t5, e4, n4) {
          var r4 = String(t5);
          return !r4 || r4.length >= e4 ? t5 : "" + Array(e4 + 1 - r4.length).join(n4) + t5;
        }, g3 = { s: m3, z: function(t5) {
          var e4 = -t5.utcOffset(), n4 = Math.abs(e4), r4 = Math.floor(n4 / 60), i4 = n4 % 60;
          return (e4 <= 0 ? "+" : "-") + m3(r4, 2, "0") + ":" + m3(i4, 2, "0");
        }, m: function t5(e4, n4) {
          if (e4.date() < n4.date()) return -t5(n4, e4);
          var r4 = 12 * (n4.year() - e4.year()) + (n4.month() - e4.month()), i4 = e4.clone().add(r4, f3), s4 = n4 - i4 < 0, u4 = e4.clone().add(r4 + (s4 ? -1 : 1), f3);
          return +(-(r4 + (n4 - i4) / (s4 ? i4 - u4 : u4 - i4)) || 0);
        }, a: function(t5) {
          return t5 < 0 ? Math.ceil(t5) || 0 : Math.floor(t5);
        }, p: function(t5) {
          return { M: f3, y: c3, w: o3, d: a3, D: d3, h: u3, m: s3, s: i3, ms: r3, Q: h3 }[t5] || String(t5 || "").toLowerCase().replace(/s$/, "");
        }, u: function(t5) {
          return void 0 === t5;
        } }, D3 = "en", v3 = {};
        v3[D3] = M3;
        var p3 = function(t5) {
          return t5 instanceof _3;
        }, S3 = function(t5, e4, n4) {
          var r4;
          if (!t5) return D3;
          if ("string" == typeof t5) v3[t5] && (r4 = t5), e4 && (v3[t5] = e4, r4 = t5);
          else {
            var i4 = t5.name;
            v3[i4] = t5, r4 = i4;
          }
          return !n4 && r4 && (D3 = r4), r4 || !n4 && D3;
        }, w3 = function(t5, e4) {
          if (p3(t5)) return t5.clone();
          var n4 = "object" == typeof e4 ? e4 : {};
          return n4.date = t5, n4.args = arguments, new _3(n4);
        }, O3 = g3;
        O3.l = S3, O3.i = p3, O3.w = function(t5, e4) {
          return w3(t5, { locale: e4.$L, utc: e4.$u, x: e4.$x, $offset: e4.$offset });
        };
        var _3 = function() {
          function M4(t5) {
            this.$L = S3(t5.locale, null, true), this.parse(t5);
          }
          var m4 = M4.prototype;
          return m4.parse = function(t5) {
            this.$d = function(t6) {
              var e4 = t6.date, n4 = t6.utc;
              if (null === e4) return /* @__PURE__ */ new Date(NaN);
              if (O3.u(e4)) return /* @__PURE__ */ new Date();
              if (e4 instanceof Date) return new Date(e4);
              if ("string" == typeof e4 && !/Z$/i.test(e4)) {
                var r4 = e4.match(l3);
                if (r4) {
                  var i4 = r4[2] - 1 || 0, s4 = (r4[7] || "0").substring(0, 3);
                  return n4 ? new Date(Date.UTC(r4[1], i4, r4[3] || 1, r4[4] || 0, r4[5] || 0, r4[6] || 0, s4)) : new Date(r4[1], i4, r4[3] || 1, r4[4] || 0, r4[5] || 0, r4[6] || 0, s4);
                }
              }
              return new Date(e4);
            }(t5), this.$x = t5.x || {}, this.init();
          }, m4.init = function() {
            var t5 = this.$d;
            this.$y = t5.getFullYear(), this.$M = t5.getMonth(), this.$D = t5.getDate(), this.$W = t5.getDay(), this.$H = t5.getHours(), this.$m = t5.getMinutes(), this.$s = t5.getSeconds(), this.$ms = t5.getMilliseconds();
          }, m4.$utils = function() {
            return O3;
          }, m4.isValid = function() {
            return !(this.$d.toString() === $3);
          }, m4.isSame = function(t5, e4) {
            var n4 = w3(t5);
            return this.startOf(e4) <= n4 && n4 <= this.endOf(e4);
          }, m4.isAfter = function(t5, e4) {
            return w3(t5) < this.startOf(e4);
          }, m4.isBefore = function(t5, e4) {
            return this.endOf(e4) < w3(t5);
          }, m4.$g = function(t5, e4, n4) {
            return O3.u(t5) ? this[e4] : this.set(n4, t5);
          }, m4.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
          }, m4.valueOf = function() {
            return this.$d.getTime();
          }, m4.startOf = function(t5, e4) {
            var n4 = this, r4 = !!O3.u(e4) || e4, h4 = O3.p(t5), $4 = function(t6, e5) {
              var i4 = O3.w(n4.$u ? Date.UTC(n4.$y, e5, t6) : new Date(n4.$y, e5, t6), n4);
              return r4 ? i4 : i4.endOf(a3);
            }, l4 = function(t6, e5) {
              return O3.w(n4.toDate()[t6].apply(n4.toDate("s"), (r4 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e5)), n4);
            }, y4 = this.$W, M5 = this.$M, m5 = this.$D, g4 = "set" + (this.$u ? "UTC" : "");
            switch (h4) {
              case c3:
                return r4 ? $4(1, 0) : $4(31, 11);
              case f3:
                return r4 ? $4(1, M5) : $4(0, M5 + 1);
              case o3:
                var D4 = this.$locale().weekStart || 0, v4 = (y4 < D4 ? y4 + 7 : y4) - D4;
                return $4(r4 ? m5 - v4 : m5 + (6 - v4), M5);
              case a3:
              case d3:
                return l4(g4 + "Hours", 0);
              case u3:
                return l4(g4 + "Minutes", 1);
              case s3:
                return l4(g4 + "Seconds", 2);
              case i3:
                return l4(g4 + "Milliseconds", 3);
              default:
                return this.clone();
            }
          }, m4.endOf = function(t5) {
            return this.startOf(t5, false);
          }, m4.$set = function(t5, e4) {
            var n4, o4 = O3.p(t5), h4 = "set" + (this.$u ? "UTC" : ""), $4 = (n4 = {}, n4[a3] = h4 + "Date", n4[d3] = h4 + "Date", n4[f3] = h4 + "Month", n4[c3] = h4 + "FullYear", n4[u3] = h4 + "Hours", n4[s3] = h4 + "Minutes", n4[i3] = h4 + "Seconds", n4[r3] = h4 + "Milliseconds", n4)[o4], l4 = o4 === a3 ? this.$D + (e4 - this.$W) : e4;
            if (o4 === f3 || o4 === c3) {
              var y4 = this.clone().set(d3, 1);
              y4.$d[$4](l4), y4.init(), this.$d = y4.set(d3, Math.min(this.$D, y4.daysInMonth())).$d;
            } else $4 && this.$d[$4](l4);
            return this.init(), this;
          }, m4.set = function(t5, e4) {
            return this.clone().$set(t5, e4);
          }, m4.get = function(t5) {
            return this[O3.p(t5)]();
          }, m4.add = function(r4, h4) {
            var d4, $4 = this;
            r4 = Number(r4);
            var l4 = O3.p(h4), y4 = function(t5) {
              var e4 = w3($4);
              return O3.w(e4.date(e4.date() + Math.round(t5 * r4)), $4);
            };
            if (l4 === f3) return this.set(f3, this.$M + r4);
            if (l4 === c3) return this.set(c3, this.$y + r4);
            if (l4 === a3) return y4(1);
            if (l4 === o3) return y4(7);
            var M5 = (d4 = {}, d4[s3] = e3, d4[u3] = n3, d4[i3] = t4, d4)[l4] || 1, m5 = this.$d.getTime() + r4 * M5;
            return O3.w(m5, this);
          }, m4.subtract = function(t5, e4) {
            return this.add(-1 * t5, e4);
          }, m4.format = function(t5) {
            var e4 = this, n4 = this.$locale();
            if (!this.isValid()) return n4.invalidDate || $3;
            var r4 = t5 || "YYYY-MM-DDTHH:mm:ssZ", i4 = O3.z(this), s4 = this.$H, u4 = this.$m, a4 = this.$M, o4 = n4.weekdays, f4 = n4.months, h4 = function(t6, n5, i5, s5) {
              return t6 && (t6[n5] || t6(e4, r4)) || i5[n5].substr(0, s5);
            }, c4 = function(t6) {
              return O3.s(s4 % 12 || 12, t6, "0");
            }, d4 = n4.meridiem || function(t6, e5, n5) {
              var r5 = t6 < 12 ? "AM" : "PM";
              return n5 ? r5.toLowerCase() : r5;
            }, l4 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a4 + 1, MM: O3.s(a4 + 1, 2, "0"), MMM: h4(n4.monthsShort, a4, f4, 3), MMMM: h4(f4, a4), D: this.$D, DD: O3.s(this.$D, 2, "0"), d: String(this.$W), dd: h4(n4.weekdaysMin, this.$W, o4, 2), ddd: h4(n4.weekdaysShort, this.$W, o4, 3), dddd: o4[this.$W], H: String(s4), HH: O3.s(s4, 2, "0"), h: c4(1), hh: c4(2), a: d4(s4, u4, true), A: d4(s4, u4, false), m: String(u4), mm: O3.s(u4, 2, "0"), s: String(this.$s), ss: O3.s(this.$s, 2, "0"), SSS: O3.s(this.$ms, 3, "0"), Z: i4 };
            return r4.replace(y3, function(t6, e5) {
              return e5 || l4[t6] || i4.replace(":", "");
            });
          }, m4.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
          }, m4.diff = function(r4, d4, $4) {
            var l4, y4 = O3.p(d4), M5 = w3(r4), m5 = (M5.utcOffset() - this.utcOffset()) * e3, g4 = this - M5, D4 = O3.m(this, M5);
            return D4 = (l4 = {}, l4[c3] = D4 / 12, l4[f3] = D4, l4[h3] = D4 / 3, l4[o3] = (g4 - m5) / 6048e5, l4[a3] = (g4 - m5) / 864e5, l4[u3] = g4 / n3, l4[s3] = g4 / e3, l4[i3] = g4 / t4, l4)[y4] || g4, $4 ? D4 : O3.a(D4);
          }, m4.daysInMonth = function() {
            return this.endOf(f3).$D;
          }, m4.$locale = function() {
            return v3[this.$L];
          }, m4.locale = function(t5, e4) {
            if (!t5) return this.$L;
            var n4 = this.clone(), r4 = S3(t5, e4, true);
            return r4 && (n4.$L = r4), n4;
          }, m4.clone = function() {
            return O3.w(this.$d, this);
          }, m4.toDate = function() {
            return new Date(this.valueOf());
          }, m4.toJSON = function() {
            return this.isValid() ? this.toISOString() : null;
          }, m4.toISOString = function() {
            return this.$d.toISOString();
          }, m4.toString = function() {
            return this.$d.toUTCString();
          }, M4;
        }(), b3 = _3.prototype;
        return w3.prototype = b3, [["$ms", r3], ["$s", i3], ["$m", s3], ["$H", u3], ["$W", a3], ["$M", f3], ["$y", c3], ["$D", d3]].forEach(function(t5) {
          b3[t5[1]] = function(e4) {
            return this.$g(e4, t5[0], t5[1]);
          };
        }), w3.extend = function(t5, e4) {
          return t5.$i || (t5(e4, _3, w3), t5.$i = true), w3;
        }, w3.locale = S3, w3.isDayjs = p3, w3.unix = function(t5) {
          return w3(1e3 * t5);
        }, w3.en = v3[D3], w3.Ls = v3, w3.p = {}, w3;
      });
    }
  });

  // node_modules/lesli-js/src/debug/utils.js
  var require_utils = __commonJS({
    "node_modules/lesli-js/src/debug/utils.js"(exports, module) {
      var dayjs2 = require_dayjs_min2();
      var Utils = class {
        // · 
        buildDate() {
          return dayjs2().format("MM/DD HH:mm").toString();
        }
        // · 
        buildMessage(message, module2, level) {
          let newMessage = `[${this.buildDate()}] [${level.toUpperCase()}]`;
          if (module2) {
            newMessage += ` (${module2})`;
          }
          newMessage = newMessage.concat(" - ").concat(message);
          return newMessage;
        }
        // · 
        stylesForBrowser(type) {
          let lineheight = "1.5;";
          let fontsize = "14px;";
          let padding = "2px;";
          let info = "background-color:#3498db;color:#ffffff;";
          let warn2 = "background-color:#f1c40f;color:#000000;";
          let error2 = "background-color:#e74c3c;color:#ffffff;";
          let fatal = "background-color:#c0392b;color:#fff394;";
          let success = "background-color:##48c774;color:#000000;";
          let style = "";
          switch (type) {
            case "info":
              style = info;
              break;
            case "warn":
              style = warn2;
              break;
            case "error":
              style = error2;
              break;
            case "fatal":
              style = fatal;
              break;
            case "success":
              style = success;
              break;
          }
          style += "padding:" + padding;
          style += "font-size:" + fontsize;
          style += "line-height:" + lineheight;
          return style;
        }
        // · 
        print_r(data2, level = 1) {
          let isArray2 = Array.isArray(data2);
          let comma = ",";
          let string = "";
          let padding_key = "";
          let padding_prop = "";
          let newline = "\n";
          for (let i3 = 0; i3 < 4 * level; i3++) {
            padding_prop += " ";
          }
          if (level > 1) {
            padding_key = padding_prop.slice(0, padding_prop.length - 4);
          }
          if (typeof data2 == "object" && !Array.isArray(data2)) {
            string += padding_key + "{" + newline;
            for (let property in data2) {
              if (typeof data2[property] == "object") {
                string += padding_prop + property + ": " + this.print_r(data2[property], level + 1) + comma + newline;
              } else {
                string += padding_prop + property + ": " + data2[property] + comma + newline;
              }
            }
            string += padding_key + "}";
          }
          if (typeof data2 == "object" && Array.isArray(data2)) {
            string += "[" + newline;
            for (let property in data2) {
              if (typeof data2[property] == "object") {
                string += this.print_r(data2[property], level + 1) + comma + newline;
              } else {
                string += padding_prop + data2[property] + newline;
              }
            }
            string += padding_key + "]";
          }
          return string;
        }
      };
      module.exports = new Utils();
    }
  });

  // node_modules/lesli-js/src/debug/browser.js
  var require_browser = __commonJS({
    "node_modules/lesli-js/src/debug/browser.js"(exports, module) {
      var utils = require_utils();
      var BrowserDebugService = class {
        build(message, modulo, level) {
          return utils.buildMessage(message, modulo, level);
        }
        // · write information message
        log(message, modulo = null) {
          console.log(utils.buildMessage(message, modulo, "log"));
        }
        // · write information message
        msg(message, modulo = null) {
          console.log(utils.buildMessage(message, modulo, "msg"));
        }
        // · write informatie message
        info(message, modulo = null) {
          console.info("%c" + utils.buildMessage(message, modulo, "info"), utils.stylesForBrowser("info"));
        }
        // · write success message
        success(message, modulo = null) {
          console.log(utils.buildMessage(message, modulo, "msg"));
        }
        // · write warning message
        warn(message, modulo = null) {
          console.warn("%c" + utils.buildMessage(message, modulo, "warn"), utils.stylesForBrowser("warn"));
        }
        // · write warning message
        error(message, modulo = null) {
          console.error("%c" + utils.buildMessage(message, modulo, "error"), utils.stylesForBrowser("error"));
        }
        // · write warning message
        fatal(message, modulo = null) {
          console.error("%c" + utils.buildMessage(message, modulo, "error"), utils.stylesForBrowser("fatal"));
        }
        message(title, messages, more_information = null) {
          console.log("%c" + title, "color:#3689e6;font-size:35px;font-weight:600;line-height:1;");
          if (typeof messages === "string") messages = [messages];
          console.log("%c" + messages.join("\n"), "background-color:#ffffff;color:#1a1a1a;font-size:18px;font-weight:400;line-height:1.1;");
          if (more_information) {
            console.log("%c" + more_information, "background-color:#ffffff;color:#1a1a1a;font-size:14px;font-weight:400;line-height:2;");
          }
        }
        lesli_message_warning(title = "LESLI", support = "For mor information contact your system administrator") {
          this.message(title, [
            "This is a browser feature intended for developers.",
            "For security reasons, DO NOT copy or paste any information, text, or code here."
          ], support);
        }
      };
      module.exports = new BrowserDebugService();
    }
  });

  // node_modules/lesli-js/debug/browser.js
  var require_browser2 = __commonJS({
    "node_modules/lesli-js/debug/browser.js"(exports, module) {
      module.exports = require_browser();
    }
  });

  // node_modules/trix/dist/trix.esm.min.js
  var t = "2.1.15";
  var e = "[data-trix-attachment]";
  var i = { preview: { presentation: "gallery", caption: { name: true, size: true } }, file: { caption: { size: true } } };
  var n = { default: { tagName: "div", parse: false }, quote: { tagName: "blockquote", nestable: true }, heading1: { tagName: "h1", terminal: true, breakOnReturn: true, group: false }, code: { tagName: "pre", terminal: true, htmlAttributes: ["language"], text: { plaintext: true } }, bulletList: { tagName: "ul", parse: false }, bullet: { tagName: "li", listAttribute: "bulletList", group: false, nestable: true, test(t4) {
    return r(t4.parentNode) === n[this.listAttribute].tagName;
  } }, numberList: { tagName: "ol", parse: false }, number: { tagName: "li", listAttribute: "numberList", group: false, nestable: true, test(t4) {
    return r(t4.parentNode) === n[this.listAttribute].tagName;
  } }, attachmentGallery: { tagName: "div", exclusive: true, terminal: true, parse: false, group: false } };
  var r = (t4) => {
    var e3;
    return null == t4 || null === (e3 = t4.tagName) || void 0 === e3 ? void 0 : e3.toLowerCase();
  };
  var o = navigator.userAgent.match(/android\s([0-9]+.*Chrome)/i);
  var s = o && parseInt(o[1]);
  var a = { composesExistingText: /Android.*Chrome/.test(navigator.userAgent), recentAndroid: s && s > 12, samsungAndroid: s && navigator.userAgent.match(/Android.*SM-/), forcesObjectResizing: /Trident.*rv:11/.test(navigator.userAgent), supportsInputEvents: "undefined" != typeof InputEvent && ["data", "getTargetRanges", "inputType"].every((t4) => t4 in InputEvent.prototype) };
  var l = { ADD_ATTR: ["language"], SAFE_FOR_XML: false, RETURN_DOM: true };
  var c = { attachFiles: "Attach Files", bold: "Bold", bullets: "Bullets", byte: "Byte", bytes: "Bytes", captionPlaceholder: "Add a caption\u2026", code: "Code", heading1: "Heading", indent: "Increase Level", italic: "Italic", link: "Link", numbers: "Numbers", outdent: "Decrease Level", quote: "Quote", redo: "Redo", remove: "Remove", strike: "Strikethrough", undo: "Undo", unlink: "Unlink", url: "URL", urlPlaceholder: "Enter a URL\u2026", GB: "GB", KB: "KB", MB: "MB", PB: "PB", TB: "TB" };
  var u = [c.bytes, c.KB, c.MB, c.GB, c.TB, c.PB];
  var h = { prefix: "IEC", precision: 2, formatter(t4) {
    switch (t4) {
      case 0:
        return "0 ".concat(c.bytes);
      case 1:
        return "1 ".concat(c.byte);
      default:
        let e3;
        "SI" === this.prefix ? e3 = 1e3 : "IEC" === this.prefix && (e3 = 1024);
        const i3 = Math.floor(Math.log(t4) / Math.log(e3)), n3 = (t4 / Math.pow(e3, i3)).toFixed(this.precision).replace(/0*$/, "").replace(/\.$/, "");
        return "".concat(n3, " ").concat(u[i3]);
    }
  } };
  var d = "\uFEFF";
  var g = "\xA0";
  var m = function(t4) {
    for (const e3 in t4) {
      const i3 = t4[e3];
      this[e3] = i3;
    }
    return this;
  };
  var p = document.documentElement;
  var f = p.matches;
  var b = function(t4) {
    let { onElement: e3, matchingSelector: i3, withCallback: n3, inPhase: r3, preventDefault: o3, times: s3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    const a3 = e3 || p, l3 = i3, c3 = "capturing" === r3, u3 = function(t5) {
      null != s3 && 0 == --s3 && u3.destroy();
      const e4 = y(t5.target, { matchingSelector: l3 });
      null != e4 && (null == n3 || n3.call(e4, t5, e4), o3 && t5.preventDefault());
    };
    return u3.destroy = () => a3.removeEventListener(t4, u3, c3), a3.addEventListener(t4, u3, c3), u3;
  };
  var v = function(t4) {
    let { onElement: e3, bubbles: i3, cancelable: n3, attributes: r3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    const o3 = null != e3 ? e3 : p;
    i3 = false !== i3, n3 = false !== n3;
    const s3 = document.createEvent("Events");
    return s3.initEvent(t4, i3, n3), null != r3 && m.call(s3, r3), o3.dispatchEvent(s3);
  };
  var A = function(t4, e3) {
    if (1 === (null == t4 ? void 0 : t4.nodeType)) return f.call(t4, e3);
  };
  var y = function(t4) {
    let { matchingSelector: e3, untilNode: i3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    for (; t4 && t4.nodeType !== Node.ELEMENT_NODE; ) t4 = t4.parentNode;
    if (null != t4) {
      if (null == e3) return t4;
      if (t4.closest && null == i3) return t4.closest(e3);
      for (; t4 && t4 !== i3; ) {
        if (A(t4, e3)) return t4;
        t4 = t4.parentNode;
      }
    }
  };
  var x = (t4) => document.activeElement !== t4 && C(t4, document.activeElement);
  var C = function(t4, e3) {
    if (t4 && e3) for (; e3; ) {
      if (e3 === t4) return true;
      e3 = e3.parentNode;
    }
  };
  var E = function(t4) {
    var e3;
    if (null === (e3 = t4) || void 0 === e3 || !e3.parentNode) return;
    let i3 = 0;
    for (t4 = t4.previousSibling; t4; ) i3++, t4 = t4.previousSibling;
    return i3;
  };
  var S = (t4) => {
    var e3;
    return null == t4 || null === (e3 = t4.parentNode) || void 0 === e3 ? void 0 : e3.removeChild(t4);
  };
  var R = function(t4) {
    let { onlyNodesOfType: e3, usingFilter: i3, expandEntityReferences: n3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    const r3 = (() => {
      switch (e3) {
        case "element":
          return NodeFilter.SHOW_ELEMENT;
        case "text":
          return NodeFilter.SHOW_TEXT;
        case "comment":
          return NodeFilter.SHOW_COMMENT;
        default:
          return NodeFilter.SHOW_ALL;
      }
    })();
    return document.createTreeWalker(t4, r3, null != i3 ? i3 : null, true === n3);
  };
  var k = (t4) => {
    var e3;
    return null == t4 || null === (e3 = t4.tagName) || void 0 === e3 ? void 0 : e3.toLowerCase();
  };
  var T = function(t4) {
    let e3, i3, n3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    "object" == typeof t4 ? (n3 = t4, t4 = n3.tagName) : n3 = { attributes: n3 };
    const r3 = document.createElement(t4);
    if (null != n3.editable && (null == n3.attributes && (n3.attributes = {}), n3.attributes.contenteditable = n3.editable), n3.attributes) for (e3 in n3.attributes) i3 = n3.attributes[e3], r3.setAttribute(e3, i3);
    if (n3.style) for (e3 in n3.style) i3 = n3.style[e3], r3.style[e3] = i3;
    if (n3.data) for (e3 in n3.data) i3 = n3.data[e3], r3.dataset[e3] = i3;
    return n3.className && n3.className.split(" ").forEach((t5) => {
      r3.classList.add(t5);
    }), n3.textContent && (r3.textContent = n3.textContent), n3.childNodes && [].concat(n3.childNodes).forEach((t5) => {
      r3.appendChild(t5);
    }), r3;
  };
  var w;
  var L = function() {
    if (null != w) return w;
    w = [];
    for (const t4 in n) {
      const e3 = n[t4];
      e3.tagName && w.push(e3.tagName);
    }
    return w;
  };
  var D = (t4) => I(null == t4 ? void 0 : t4.firstChild);
  var N = function(t4) {
    let { strict: e3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { strict: true };
    return e3 ? I(t4) : I(t4) || !I(t4.firstChild) && function(t5) {
      return L().includes(k(t5)) && !L().includes(k(t5.firstChild));
    }(t4);
  };
  var I = (t4) => O(t4) && "block" === (null == t4 ? void 0 : t4.data);
  var O = (t4) => (null == t4 ? void 0 : t4.nodeType) === Node.COMMENT_NODE;
  var F = function(t4) {
    let { name: e3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (t4) return B(t4) ? t4.data === d ? !e3 || t4.parentNode.dataset.trixCursorTarget === e3 : void 0 : F(t4.firstChild);
  };
  var P = (t4) => A(t4, e);
  var M = (t4) => B(t4) && "" === (null == t4 ? void 0 : t4.data);
  var B = (t4) => (null == t4 ? void 0 : t4.nodeType) === Node.TEXT_NODE;
  var _ = { level2Enabled: true, getLevel() {
    return this.level2Enabled && a.supportsInputEvents ? 2 : 0;
  }, pickFiles(t4) {
    const e3 = T("input", { type: "file", multiple: true, hidden: true, id: this.fileInputId });
    e3.addEventListener("change", () => {
      t4(e3.files), S(e3);
    }), S(document.getElementById(this.fileInputId)), document.body.appendChild(e3), e3.click();
  } };
  var j2 = { removeBlankTableCells: false, tableCellSeparator: " | ", tableRowSeparator: "\n" };
  var W = { bold: { tagName: "strong", inheritable: true, parser(t4) {
    const e3 = window.getComputedStyle(t4);
    return "bold" === e3.fontWeight || e3.fontWeight >= 600;
  } }, italic: { tagName: "em", inheritable: true, parser: (t4) => "italic" === window.getComputedStyle(t4).fontStyle }, href: { groupTagName: "a", parser(t4) {
    const i3 = "a:not(".concat(e, ")"), n3 = t4.closest(i3);
    if (n3) return n3.getAttribute("href");
  } }, strike: { tagName: "del", inheritable: true }, frozen: { style: { backgroundColor: "highlight" } } };
  var U = { getDefaultHTML: () => '<div class="trix-button-row">\n      <span class="trix-button-group trix-button-group--text-tools" data-trix-button-group="text-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-bold" data-trix-attribute="bold" data-trix-key="b" title="'.concat(c.bold, '" tabindex="-1">').concat(c.bold, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-italic" data-trix-attribute="italic" data-trix-key="i" title="').concat(c.italic, '" tabindex="-1">').concat(c.italic, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-strike" data-trix-attribute="strike" title="').concat(c.strike, '" tabindex="-1">').concat(c.strike, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-link" data-trix-attribute="href" data-trix-action="link" data-trix-key="k" title="').concat(c.link, '" tabindex="-1">').concat(c.link, '</button>\n      </span>\n\n      <span class="trix-button-group trix-button-group--block-tools" data-trix-button-group="block-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-heading-1" data-trix-attribute="heading1" title="').concat(c.heading1, '" tabindex="-1">').concat(c.heading1, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-quote" data-trix-attribute="quote" title="').concat(c.quote, '" tabindex="-1">').concat(c.quote, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-code" data-trix-attribute="code" title="').concat(c.code, '" tabindex="-1">').concat(c.code, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-bullet-list" data-trix-attribute="bullet" title="').concat(c.bullets, '" tabindex="-1">').concat(c.bullets, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-number-list" data-trix-attribute="number" title="').concat(c.numbers, '" tabindex="-1">').concat(c.numbers, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-decrease-nesting-level" data-trix-action="decreaseNestingLevel" title="').concat(c.outdent, '" tabindex="-1">').concat(c.outdent, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-increase-nesting-level" data-trix-action="increaseNestingLevel" title="').concat(c.indent, '" tabindex="-1">').concat(c.indent, '</button>\n      </span>\n\n      <span class="trix-button-group trix-button-group--file-tools" data-trix-button-group="file-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-attach" data-trix-action="attachFiles" title="').concat(c.attachFiles, '" tabindex="-1">').concat(c.attachFiles, '</button>\n      </span>\n\n      <span class="trix-button-group-spacer"></span>\n\n      <span class="trix-button-group trix-button-group--history-tools" data-trix-button-group="history-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-undo" data-trix-action="undo" data-trix-key="z" title="').concat(c.undo, '" tabindex="-1">').concat(c.undo, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-redo" data-trix-action="redo" data-trix-key="shift+z" title="').concat(c.redo, '" tabindex="-1">').concat(c.redo, '</button>\n      </span>\n    </div>\n\n    <div class="trix-dialogs" data-trix-dialogs>\n      <div class="trix-dialog trix-dialog--link" data-trix-dialog="href" data-trix-dialog-attribute="href">\n        <div class="trix-dialog__link-fields">\n          <input type="url" name="href" class="trix-input trix-input--dialog" placeholder="').concat(c.urlPlaceholder, '" aria-label="').concat(c.url, '" data-trix-validate-href required data-trix-input>\n          <div class="trix-button-group">\n            <input type="button" class="trix-button trix-button--dialog" value="').concat(c.link, '" data-trix-method="setAttribute">\n            <input type="button" class="trix-button trix-button--dialog" value="').concat(c.unlink, '" data-trix-method="removeAttribute">\n          </div>\n        </div>\n      </div>\n    </div>') };
  var V = { interval: 5e3 };
  var z = Object.freeze({ __proto__: null, attachments: i, blockAttributes: n, browser: a, css: { attachment: "attachment", attachmentCaption: "attachment__caption", attachmentCaptionEditor: "attachment__caption-editor", attachmentMetadata: "attachment__metadata", attachmentMetadataContainer: "attachment__metadata-container", attachmentName: "attachment__name", attachmentProgress: "attachment__progress", attachmentSize: "attachment__size", attachmentToolbar: "attachment__toolbar", attachmentGallery: "attachment-gallery" }, dompurify: l, fileSize: h, input: _, keyNames: { 8: "backspace", 9: "tab", 13: "return", 27: "escape", 37: "left", 39: "right", 46: "delete", 68: "d", 72: "h", 79: "o" }, lang: c, parser: j2, textAttributes: W, toolbar: U, undo: V });
  var q = class {
    static proxyMethod(t4) {
      const { name: e3, toMethod: i3, toProperty: n3, optional: r3 } = H(t4);
      this.prototype[e3] = function() {
        let t5, o3;
        var s3, a3;
        i3 ? o3 = r3 ? null === (s3 = this[i3]) || void 0 === s3 ? void 0 : s3.call(this) : this[i3]() : n3 && (o3 = this[n3]);
        return r3 ? (t5 = null === (a3 = o3) || void 0 === a3 ? void 0 : a3[e3], t5 ? J.call(t5, o3, arguments) : void 0) : (t5 = o3[e3], J.call(t5, o3, arguments));
      };
    }
  };
  var H = function(t4) {
    const e3 = t4.match(K);
    if (!e3) throw new Error("can't parse @proxyMethod expression: ".concat(t4));
    const i3 = { name: e3[4] };
    return null != e3[2] ? i3.toMethod = e3[1] : i3.toProperty = e3[1], null != e3[3] && (i3.optional = true), i3;
  };
  var { apply: J } = Function.prototype;
  var K = new RegExp("^(.+?)(\\(\\))?(\\?)?\\.(.+?)$");
  var G;
  var Y;
  var X;
  var $ = class extends q {
    static box() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
      return t4 instanceof this ? t4 : this.fromUCS2String(null == t4 ? void 0 : t4.toString());
    }
    static fromUCS2String(t4) {
      return new this(t4, et(t4));
    }
    static fromCodepoints(t4) {
      return new this(it(t4), t4);
    }
    constructor(t4, e3) {
      super(...arguments), this.ucs2String = t4, this.codepoints = e3, this.length = this.codepoints.length, this.ucs2Length = this.ucs2String.length;
    }
    offsetToUCS2Offset(t4) {
      return it(this.codepoints.slice(0, Math.max(0, t4))).length;
    }
    offsetFromUCS2Offset(t4) {
      return et(this.ucs2String.slice(0, Math.max(0, t4))).length;
    }
    slice() {
      return this.constructor.fromCodepoints(this.codepoints.slice(...arguments));
    }
    charAt(t4) {
      return this.slice(t4, t4 + 1);
    }
    isEqualTo(t4) {
      return this.constructor.box(t4).ucs2String === this.ucs2String;
    }
    toJSON() {
      return this.ucs2String;
    }
    getCacheKey() {
      return this.ucs2String;
    }
    toString() {
      return this.ucs2String;
    }
  };
  var Z = 1 === (null === (G = Array.from) || void 0 === G ? void 0 : G.call(Array, "\u{1F47C}").length);
  var Q = null != (null === (Y = " ".codePointAt) || void 0 === Y ? void 0 : Y.call(" ", 0));
  var tt = " \u{1F47C}" === (null === (X = String.fromCodePoint) || void 0 === X ? void 0 : X.call(String, 32, 128124));
  var et;
  var it;
  et = Z && Q ? (t4) => Array.from(t4).map((t5) => t5.codePointAt(0)) : function(t4) {
    const e3 = [];
    let i3 = 0;
    const { length: n3 } = t4;
    for (; i3 < n3; ) {
      let r3 = t4.charCodeAt(i3++);
      if (55296 <= r3 && r3 <= 56319 && i3 < n3) {
        const e4 = t4.charCodeAt(i3++);
        56320 == (64512 & e4) ? r3 = ((1023 & r3) << 10) + (1023 & e4) + 65536 : i3--;
      }
      e3.push(r3);
    }
    return e3;
  }, it = tt ? (t4) => String.fromCodePoint(...Array.from(t4 || [])) : function(t4) {
    return (() => {
      const e3 = [];
      return Array.from(t4).forEach((t5) => {
        let i3 = "";
        t5 > 65535 && (t5 -= 65536, i3 += String.fromCharCode(t5 >>> 10 & 1023 | 55296), t5 = 56320 | 1023 & t5), e3.push(i3 + String.fromCharCode(t5));
      }), e3;
    })().join("");
  };
  var nt = 0;
  var rt = class extends q {
    static fromJSONString(t4) {
      return this.fromJSON(JSON.parse(t4));
    }
    constructor() {
      super(...arguments), this.id = ++nt;
    }
    hasSameConstructorAs(t4) {
      return this.constructor === (null == t4 ? void 0 : t4.constructor);
    }
    isEqualTo(t4) {
      return this === t4;
    }
    inspect() {
      const t4 = [], e3 = this.contentsForInspection() || {};
      for (const i3 in e3) {
        const n3 = e3[i3];
        t4.push("".concat(i3, "=").concat(n3));
      }
      return "#<".concat(this.constructor.name, ":").concat(this.id).concat(t4.length ? " ".concat(t4.join(", ")) : "", ">");
    }
    contentsForInspection() {
    }
    toJSONString() {
      return JSON.stringify(this);
    }
    toUTF16String() {
      return $.box(this);
    }
    getCacheKey() {
      return this.id.toString();
    }
  };
  var ot = function() {
    let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
    if (t4.length !== e3.length) return false;
    for (let i3 = 0; i3 < t4.length; i3++) {
      if (t4[i3] !== e3[i3]) return false;
    }
    return true;
  };
  var st = function(t4) {
    const e3 = t4.slice(0);
    for (var i3 = arguments.length, n3 = new Array(i3 > 1 ? i3 - 1 : 0), r3 = 1; r3 < i3; r3++) n3[r3 - 1] = arguments[r3];
    return e3.splice(...n3), e3;
  };
  var at = /[\u05BE\u05C0\u05C3\u05D0-\u05EA\u05F0-\u05F4\u061B\u061F\u0621-\u063A\u0640-\u064A\u066D\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D5\u06E5\u06E6\u200F\u202B\u202E\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE72\uFE74\uFE76-\uFEFC]/;
  var lt = function() {
    const t4 = T("input", { dir: "auto", name: "x", dirName: "x.dir" }), e3 = T("textarea", { dir: "auto", name: "y", dirName: "y.dir" }), i3 = T("form");
    i3.appendChild(t4), i3.appendChild(e3);
    const n3 = function() {
      try {
        return new FormData(i3).has(e3.dirName);
      } catch (t5) {
        return false;
      }
    }(), r3 = function() {
      try {
        return t4.matches(":dir(ltr),:dir(rtl)");
      } catch (t5) {
        return false;
      }
    }();
    return n3 ? function(t5) {
      return e3.value = t5, new FormData(i3).get(e3.dirName);
    } : r3 ? function(e4) {
      return t4.value = e4, t4.matches(":dir(rtl)") ? "rtl" : "ltr";
    } : function(t5) {
      const e4 = t5.trim().charAt(0);
      return at.test(e4) ? "rtl" : "ltr";
    };
  }();
  var ct = null;
  var ut = null;
  var ht = null;
  var dt = null;
  var gt = () => (ct || (ct = bt().concat(pt())), ct);
  var mt = (t4) => n[t4];
  var pt = () => (ut || (ut = Object.keys(n)), ut);
  var ft = (t4) => W[t4];
  var bt = () => (ht || (ht = Object.keys(W)), ht);
  var vt = function(t4, e3) {
    At(t4).textContent = e3.replace(/%t/g, t4);
  };
  var At = function(t4) {
    const e3 = document.createElement("style");
    e3.setAttribute("type", "text/css"), e3.setAttribute("data-tag-name", t4.toLowerCase());
    const i3 = yt();
    return i3 && e3.setAttribute("nonce", i3), document.head.insertBefore(e3, document.head.firstChild), e3;
  };
  var yt = function() {
    const t4 = xt("trix-csp-nonce") || xt("csp-nonce");
    if (t4) {
      const { nonce: e3, content: i3 } = t4;
      return "" == e3 ? i3 : e3;
    }
  };
  var xt = (t4) => document.head.querySelector("meta[name=".concat(t4, "]"));
  var Ct = { "application/x-trix-feature-detection": "test" };
  var Et = function(t4) {
    const e3 = t4.getData("text/plain"), i3 = t4.getData("text/html");
    if (!e3 || !i3) return null == e3 ? void 0 : e3.length;
    {
      const { body: t5 } = new DOMParser().parseFromString(i3, "text/html");
      if (t5.textContent === e3) return !t5.querySelector("*");
    }
  };
  var St = /Mac|^iP/.test(navigator.platform) ? (t4) => t4.metaKey : (t4) => t4.ctrlKey;
  var Rt = (t4) => setTimeout(t4, 1);
  var kt = function() {
    let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    const e3 = {};
    for (const i3 in t4) {
      const n3 = t4[i3];
      e3[i3] = n3;
    }
    return e3;
  };
  var Tt = function() {
    let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (Object.keys(t4).length !== Object.keys(e3).length) return false;
    for (const i3 in t4) {
      if (t4[i3] !== e3[i3]) return false;
    }
    return true;
  };
  var wt = function(t4) {
    if (null != t4) return Array.isArray(t4) || (t4 = [t4, t4]), [Nt(t4[0]), Nt(null != t4[1] ? t4[1] : t4[0])];
  };
  var Lt = function(t4) {
    if (null == t4) return;
    const [e3, i3] = wt(t4);
    return It(e3, i3);
  };
  var Dt = function(t4, e3) {
    if (null == t4 || null == e3) return;
    const [i3, n3] = wt(t4), [r3, o3] = wt(e3);
    return It(i3, r3) && It(n3, o3);
  };
  var Nt = function(t4) {
    return "number" == typeof t4 ? t4 : kt(t4);
  };
  var It = function(t4, e3) {
    return "number" == typeof t4 ? t4 === e3 : Tt(t4, e3);
  };
  var Ot = class extends q {
    constructor() {
      super(...arguments), this.update = this.update.bind(this), this.selectionManagers = [];
    }
    start() {
      this.started || (this.started = true, document.addEventListener("selectionchange", this.update, true));
    }
    stop() {
      if (this.started) return this.started = false, document.removeEventListener("selectionchange", this.update, true);
    }
    registerSelectionManager(t4) {
      if (!this.selectionManagers.includes(t4)) return this.selectionManagers.push(t4), this.start();
    }
    unregisterSelectionManager(t4) {
      if (this.selectionManagers = this.selectionManagers.filter((e3) => e3 !== t4), 0 === this.selectionManagers.length) return this.stop();
    }
    notifySelectionManagersOfSelectionChange() {
      return this.selectionManagers.map((t4) => t4.selectionDidChange());
    }
    update() {
      this.notifySelectionManagersOfSelectionChange();
    }
    reset() {
      this.update();
    }
  };
  var Ft = new Ot();
  var Pt = function() {
    const t4 = window.getSelection();
    if (t4.rangeCount > 0) return t4;
  };
  var Mt = function() {
    var t4;
    const e3 = null === (t4 = Pt()) || void 0 === t4 ? void 0 : t4.getRangeAt(0);
    if (e3 && !_t(e3)) return e3;
  };
  var Bt = function(t4) {
    const e3 = window.getSelection();
    return e3.removeAllRanges(), e3.addRange(t4), Ft.update();
  };
  var _t = (t4) => jt(t4.startContainer) || jt(t4.endContainer);
  var jt = (t4) => !Object.getPrototypeOf(t4);
  var Wt = (t4) => t4.replace(new RegExp("".concat(d), "g"), "").replace(new RegExp("".concat(g), "g"), " ");
  var Ut = new RegExp("[^\\S".concat(g, "]"));
  var Vt = (t4) => t4.replace(new RegExp("".concat(Ut.source), "g"), " ").replace(/\ {2,}/g, " ");
  var zt = function(t4, e3) {
    if (t4.isEqualTo(e3)) return ["", ""];
    const i3 = qt(t4, e3), { length: n3 } = i3.utf16String;
    let r3;
    if (n3) {
      const { offset: o3 } = i3, s3 = t4.codepoints.slice(0, o3).concat(t4.codepoints.slice(o3 + n3));
      r3 = qt(e3, $.fromCodepoints(s3));
    } else r3 = qt(e3, t4);
    return [i3.utf16String.toString(), r3.utf16String.toString()];
  };
  var qt = function(t4, e3) {
    let i3 = 0, n3 = t4.length, r3 = e3.length;
    for (; i3 < n3 && t4.charAt(i3).isEqualTo(e3.charAt(i3)); ) i3++;
    for (; n3 > i3 + 1 && t4.charAt(n3 - 1).isEqualTo(e3.charAt(r3 - 1)); ) n3--, r3--;
    return { utf16String: t4.slice(i3, n3), offset: i3 };
  };
  var Ht = class _Ht extends rt {
    static fromCommonAttributesOfObjects() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      if (!t4.length) return new this();
      let e3 = Yt(t4[0]), i3 = e3.getKeys();
      return t4.slice(1).forEach((t5) => {
        i3 = e3.getKeysCommonToHash(Yt(t5)), e3 = e3.slice(i3);
      }), e3;
    }
    static box(t4) {
      return Yt(t4);
    }
    constructor() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      super(...arguments), this.values = Gt(t4);
    }
    add(t4, e3) {
      return this.merge(Jt(t4, e3));
    }
    remove(t4) {
      return new _Ht(Gt(this.values, t4));
    }
    get(t4) {
      return this.values[t4];
    }
    has(t4) {
      return t4 in this.values;
    }
    merge(t4) {
      return new _Ht(Kt(this.values, Xt(t4)));
    }
    slice(t4) {
      const e3 = {};
      return Array.from(t4).forEach((t5) => {
        this.has(t5) && (e3[t5] = this.values[t5]);
      }), new _Ht(e3);
    }
    getKeys() {
      return Object.keys(this.values);
    }
    getKeysCommonToHash(t4) {
      return t4 = Yt(t4), this.getKeys().filter((e3) => this.values[e3] === t4.values[e3]);
    }
    isEqualTo(t4) {
      return ot(this.toArray(), Yt(t4).toArray());
    }
    isEmpty() {
      return 0 === this.getKeys().length;
    }
    toArray() {
      if (!this.array) {
        const t4 = [];
        for (const e3 in this.values) {
          const i3 = this.values[e3];
          t4.push(t4.push(e3, i3));
        }
        this.array = t4.slice(0);
      }
      return this.array;
    }
    toObject() {
      return Gt(this.values);
    }
    toJSON() {
      return this.toObject();
    }
    contentsForInspection() {
      return { values: JSON.stringify(this.values) };
    }
  };
  var Jt = function(t4, e3) {
    const i3 = {};
    return i3[t4] = e3, i3;
  };
  var Kt = function(t4, e3) {
    const i3 = Gt(t4);
    for (const t5 in e3) {
      const n3 = e3[t5];
      i3[t5] = n3;
    }
    return i3;
  };
  var Gt = function(t4, e3) {
    const i3 = {};
    return Object.keys(t4).sort().forEach((n3) => {
      n3 !== e3 && (i3[n3] = t4[n3]);
    }), i3;
  };
  var Yt = function(t4) {
    return t4 instanceof Ht ? t4 : new Ht(t4);
  };
  var Xt = function(t4) {
    return t4 instanceof Ht ? t4.values : t4;
  };
  var $t = class {
    static groupObjects() {
      let t4, e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], { depth: i3, asTree: n3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      n3 && null == i3 && (i3 = 0);
      const r3 = [];
      return Array.from(e3).forEach((e4) => {
        var o3;
        if (t4) {
          var s3, a3, l3;
          if (null !== (s3 = e4.canBeGrouped) && void 0 !== s3 && s3.call(e4, i3) && null !== (a3 = (l3 = t4[t4.length - 1]).canBeGroupedWith) && void 0 !== a3 && a3.call(l3, e4, i3)) return void t4.push(e4);
          r3.push(new this(t4, { depth: i3, asTree: n3 })), t4 = null;
        }
        null !== (o3 = e4.canBeGrouped) && void 0 !== o3 && o3.call(e4, i3) ? t4 = [e4] : r3.push(e4);
      }), t4 && r3.push(new this(t4, { depth: i3, asTree: n3 })), r3;
    }
    constructor() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], { depth: e3, asTree: i3 } = arguments.length > 1 ? arguments[1] : void 0;
      this.objects = t4, i3 && (this.depth = e3, this.objects = this.constructor.groupObjects(this.objects, { asTree: i3, depth: this.depth + 1 }));
    }
    getObjects() {
      return this.objects;
    }
    getDepth() {
      return this.depth;
    }
    getCacheKey() {
      const t4 = ["objectGroup"];
      return Array.from(this.getObjects()).forEach((e3) => {
        t4.push(e3.getCacheKey());
      }), t4.join("/");
    }
  };
  var Zt = class extends q {
    constructor() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), this.objects = {}, Array.from(t4).forEach((t5) => {
        const e3 = JSON.stringify(t5);
        null == this.objects[e3] && (this.objects[e3] = t5);
      });
    }
    find(t4) {
      const e3 = JSON.stringify(t4);
      return this.objects[e3];
    }
  };
  var Qt = class {
    constructor(t4) {
      this.reset(t4);
    }
    add(t4) {
      const e3 = te(t4);
      this.elements[e3] = t4;
    }
    remove(t4) {
      const e3 = te(t4), i3 = this.elements[e3];
      if (i3) return delete this.elements[e3], i3;
    }
    reset() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      return this.elements = {}, Array.from(t4).forEach((t5) => {
        this.add(t5);
      }), t4;
    }
  };
  var te = (t4) => t4.dataset.trixStoreKey;
  var ee = class extends q {
    isPerforming() {
      return true === this.performing;
    }
    hasPerformed() {
      return true === this.performed;
    }
    hasSucceeded() {
      return this.performed && this.succeeded;
    }
    hasFailed() {
      return this.performed && !this.succeeded;
    }
    getPromise() {
      return this.promise || (this.promise = new Promise((t4, e3) => (this.performing = true, this.perform((i3, n3) => {
        this.succeeded = i3, this.performing = false, this.performed = true, this.succeeded ? t4(n3) : e3(n3);
      })))), this.promise;
    }
    perform(t4) {
      return t4(false);
    }
    release() {
      var t4, e3;
      null === (t4 = this.promise) || void 0 === t4 || null === (e3 = t4.cancel) || void 0 === e3 || e3.call(t4), this.promise = null, this.performing = null, this.performed = null, this.succeeded = null;
    }
  };
  ee.proxyMethod("getPromise().then"), ee.proxyMethod("getPromise().catch");
  var ie = class extends q {
    constructor(t4) {
      let e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.object = t4, this.options = e3, this.childViews = [], this.rootView = this;
    }
    getNodes() {
      return this.nodes || (this.nodes = this.createNodes()), this.nodes.map((t4) => t4.cloneNode(true));
    }
    invalidate() {
      var t4;
      return this.nodes = null, this.childViews = [], null === (t4 = this.parentView) || void 0 === t4 ? void 0 : t4.invalidate();
    }
    invalidateViewForObject(t4) {
      var e3;
      return null === (e3 = this.findViewForObject(t4)) || void 0 === e3 ? void 0 : e3.invalidate();
    }
    findOrCreateCachedChildView(t4, e3, i3) {
      let n3 = this.getCachedViewForObject(e3);
      return n3 ? this.recordChildView(n3) : (n3 = this.createChildView(...arguments), this.cacheViewForObject(n3, e3)), n3;
    }
    createChildView(t4, e3) {
      let i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      e3 instanceof $t && (i3.viewClass = t4, t4 = ne);
      const n3 = new t4(e3, i3);
      return this.recordChildView(n3);
    }
    recordChildView(t4) {
      return t4.parentView = this, t4.rootView = this.rootView, this.childViews.push(t4), t4;
    }
    getAllChildViews() {
      let t4 = [];
      return this.childViews.forEach((e3) => {
        t4.push(e3), t4 = t4.concat(e3.getAllChildViews());
      }), t4;
    }
    findElement() {
      return this.findElementForObject(this.object);
    }
    findElementForObject(t4) {
      const e3 = null == t4 ? void 0 : t4.id;
      if (e3) return this.rootView.element.querySelector("[data-trix-id='".concat(e3, "']"));
    }
    findViewForObject(t4) {
      for (const e3 of this.getAllChildViews()) if (e3.object === t4) return e3;
    }
    getViewCache() {
      return this.rootView !== this ? this.rootView.getViewCache() : this.isViewCachingEnabled() ? (this.viewCache || (this.viewCache = {}), this.viewCache) : void 0;
    }
    isViewCachingEnabled() {
      return false !== this.shouldCacheViews;
    }
    enableViewCaching() {
      this.shouldCacheViews = true;
    }
    disableViewCaching() {
      this.shouldCacheViews = false;
    }
    getCachedViewForObject(t4) {
      var e3;
      return null === (e3 = this.getViewCache()) || void 0 === e3 ? void 0 : e3[t4.getCacheKey()];
    }
    cacheViewForObject(t4, e3) {
      const i3 = this.getViewCache();
      i3 && (i3[e3.getCacheKey()] = t4);
    }
    garbageCollectCachedViews() {
      const t4 = this.getViewCache();
      if (t4) {
        const e3 = this.getAllChildViews().concat(this).map((t5) => t5.object.getCacheKey());
        for (const i3 in t4) e3.includes(i3) || delete t4[i3];
      }
    }
  };
  var ne = class extends ie {
    constructor() {
      super(...arguments), this.objectGroup = this.object, this.viewClass = this.options.viewClass, delete this.options.viewClass;
    }
    getChildViews() {
      return this.childViews.length || Array.from(this.objectGroup.getObjects()).forEach((t4) => {
        this.findOrCreateCachedChildView(this.viewClass, t4, this.options);
      }), this.childViews;
    }
    createNodes() {
      const t4 = this.createContainerElement();
      return this.getChildViews().forEach((e3) => {
        Array.from(e3.getNodes()).forEach((e4) => {
          t4.appendChild(e4);
        });
      }), [t4];
    }
    createContainerElement() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.objectGroup.getDepth();
      return this.getChildViews()[0].createContainerElement(t4);
    }
  };
  var { entries: re, setPrototypeOf: oe, isFrozen: se, getPrototypeOf: ae, getOwnPropertyDescriptor: le } = Object;
  var { freeze: ce, seal: ue, create: he } = Object;
  var { apply: de, construct: ge } = "undefined" != typeof Reflect && Reflect;
  ce || (ce = function(t4) {
    return t4;
  }), ue || (ue = function(t4) {
    return t4;
  }), de || (de = function(t4, e3, i3) {
    return t4.apply(e3, i3);
  }), ge || (ge = function(t4, e3) {
    return new t4(...e3);
  });
  var me = Le(Array.prototype.forEach);
  var pe = Le(Array.prototype.lastIndexOf);
  var fe = Le(Array.prototype.pop);
  var be = Le(Array.prototype.push);
  var ve = Le(Array.prototype.splice);
  var Ae = Le(String.prototype.toLowerCase);
  var ye = Le(String.prototype.toString);
  var xe = Le(String.prototype.match);
  var Ce = Le(String.prototype.replace);
  var Ee = Le(String.prototype.indexOf);
  var Se = Le(String.prototype.trim);
  var Re = Le(Object.prototype.hasOwnProperty);
  var ke = Le(RegExp.prototype.test);
  var Te = (we = TypeError, function() {
    for (var t4 = arguments.length, e3 = new Array(t4), i3 = 0; i3 < t4; i3++) e3[i3] = arguments[i3];
    return ge(we, e3);
  });
  var we;
  function Le(t4) {
    return function(e3) {
      e3 instanceof RegExp && (e3.lastIndex = 0);
      for (var i3 = arguments.length, n3 = new Array(i3 > 1 ? i3 - 1 : 0), r3 = 1; r3 < i3; r3++) n3[r3 - 1] = arguments[r3];
      return de(t4, e3, n3);
    };
  }
  function De(t4, e3) {
    let i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : Ae;
    oe && oe(t4, null);
    let n3 = e3.length;
    for (; n3--; ) {
      let r3 = e3[n3];
      if ("string" == typeof r3) {
        const t5 = i3(r3);
        t5 !== r3 && (se(e3) || (e3[n3] = t5), r3 = t5);
      }
      t4[r3] = true;
    }
    return t4;
  }
  function Ne(t4) {
    for (let e3 = 0; e3 < t4.length; e3++) {
      Re(t4, e3) || (t4[e3] = null);
    }
    return t4;
  }
  function Ie(t4) {
    const e3 = he(null);
    for (const [i3, n3] of re(t4)) {
      Re(t4, i3) && (Array.isArray(n3) ? e3[i3] = Ne(n3) : n3 && "object" == typeof n3 && n3.constructor === Object ? e3[i3] = Ie(n3) : e3[i3] = n3);
    }
    return e3;
  }
  function Oe(t4, e3) {
    for (; null !== t4; ) {
      const i3 = le(t4, e3);
      if (i3) {
        if (i3.get) return Le(i3.get);
        if ("function" == typeof i3.value) return Le(i3.value);
      }
      t4 = ae(t4);
    }
    return function() {
      return null;
    };
  }
  var Fe = ce(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]);
  var Pe = ce(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]);
  var Me = ce(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]);
  var Be = ce(["animate", "color-profile", "cursor", "discard", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]);
  var _e = ce(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover", "mprescripts"]);
  var je = ce(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]);
  var We = ce(["#text"]);
  var Ue = ce(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "popover", "popovertarget", "popovertargetaction", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "wrap", "xmlns", "slot"]);
  var Ve = ce(["accent-height", "accumulate", "additive", "alignment-baseline", "amplitude", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "exponent", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "intercept", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "slope", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "tablevalues", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]);
  var ze = ce(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]);
  var qe = ce(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]);
  var He = ue(/\{\{[\w\W]*|[\w\W]*\}\}/gm);
  var Je = ue(/<%[\w\W]*|[\w\W]*%>/gm);
  var Ke = ue(/\$\{[\w\W]*/gm);
  var Ge = ue(/^data-[\-\w.\u00B7-\uFFFF]+$/);
  var Ye = ue(/^aria-[\-\w]+$/);
  var Xe = ue(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i);
  var $e = ue(/^(?:\w+script|data):/i);
  var Ze = ue(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g);
  var Qe = ue(/^html$/i);
  var ti = ue(/^[a-z][.\w]*(-[.\w]+)+$/i);
  var ei = Object.freeze({ __proto__: null, ARIA_ATTR: Ye, ATTR_WHITESPACE: Ze, CUSTOM_ELEMENT: ti, DATA_ATTR: Ge, DOCTYPE_NAME: Qe, ERB_EXPR: Je, IS_ALLOWED_URI: Xe, IS_SCRIPT_OR_DATA: $e, MUSTACHE_EXPR: He, TMPLIT_EXPR: Ke });
  var ii = 1;
  var ni = 3;
  var ri = 7;
  var oi = 8;
  var si = 9;
  var ai = function() {
    return "undefined" == typeof window ? null : window;
  };
  var li = function t2() {
    let e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ai();
    const i3 = (e4) => t2(e4);
    if (i3.version = "3.2.5", i3.removed = [], !e3 || !e3.document || e3.document.nodeType !== si || !e3.Element) return i3.isSupported = false, i3;
    let { document: n3 } = e3;
    const r3 = n3, o3 = r3.currentScript, { DocumentFragment: s3, HTMLTemplateElement: a3, Node: l3, Element: c3, NodeFilter: u3, NamedNodeMap: h3 = e3.NamedNodeMap || e3.MozNamedAttrMap, HTMLFormElement: d3, DOMParser: g3, trustedTypes: m3 } = e3, p3 = c3.prototype, f3 = Oe(p3, "cloneNode"), b3 = Oe(p3, "remove"), v3 = Oe(p3, "nextSibling"), A3 = Oe(p3, "childNodes"), y3 = Oe(p3, "parentNode");
    if ("function" == typeof a3) {
      const t4 = n3.createElement("template");
      t4.content && t4.content.ownerDocument && (n3 = t4.content.ownerDocument);
    }
    let x3, C3 = "";
    const { implementation: E3, createNodeIterator: S3, createDocumentFragment: R3, getElementsByTagName: k3 } = n3, { importNode: T3 } = r3;
    let w3 = { afterSanitizeAttributes: [], afterSanitizeElements: [], afterSanitizeShadowDOM: [], beforeSanitizeAttributes: [], beforeSanitizeElements: [], beforeSanitizeShadowDOM: [], uponSanitizeAttribute: [], uponSanitizeElement: [], uponSanitizeShadowNode: [] };
    i3.isSupported = "function" == typeof re && "function" == typeof y3 && E3 && void 0 !== E3.createHTMLDocument;
    const { MUSTACHE_EXPR: L3, ERB_EXPR: D3, TMPLIT_EXPR: N3, DATA_ATTR: I3, ARIA_ATTR: O3, IS_SCRIPT_OR_DATA: F3, ATTR_WHITESPACE: P3, CUSTOM_ELEMENT: M3 } = ei;
    let { IS_ALLOWED_URI: B3 } = ei, _3 = null;
    const j3 = De({}, [...Fe, ...Pe, ...Me, ..._e, ...We]);
    let W3 = null;
    const U3 = De({}, [...Ue, ...Ve, ...ze, ...qe]);
    let V3 = Object.seal(he(null, { tagNameCheck: { writable: true, configurable: false, enumerable: true, value: null }, attributeNameCheck: { writable: true, configurable: false, enumerable: true, value: null }, allowCustomizedBuiltInElements: { writable: true, configurable: false, enumerable: true, value: false } })), z3 = null, q3 = null, H3 = true, J3 = true, K3 = false, G3 = true, Y3 = false, X3 = true, $3 = false, Z3 = false, Q3 = false, tt3 = false, et3 = false, it3 = false, nt3 = true, rt3 = false, ot3 = true, st3 = false, at3 = {}, lt3 = null;
    const ct3 = De({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
    let ut3 = null;
    const ht3 = De({}, ["audio", "video", "img", "source", "image", "track"]);
    let dt3 = null;
    const gt3 = De({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]), mt3 = "http://www.w3.org/1998/Math/MathML", pt3 = "http://www.w3.org/2000/svg", ft3 = "http://www.w3.org/1999/xhtml";
    let bt3 = ft3, vt3 = false, At3 = null;
    const yt3 = De({}, [mt3, pt3, ft3], ye);
    let xt3 = De({}, ["mi", "mo", "mn", "ms", "mtext"]), Ct3 = De({}, ["annotation-xml"]);
    const Et3 = De({}, ["title", "style", "font", "a", "script"]);
    let St3 = null;
    const Rt3 = ["application/xhtml+xml", "text/html"];
    let kt3 = null, Tt3 = null;
    const wt3 = n3.createElement("form"), Lt3 = function(t4) {
      return t4 instanceof RegExp || t4 instanceof Function;
    }, Dt3 = function() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      if (!Tt3 || Tt3 !== t4) {
        if (t4 && "object" == typeof t4 || (t4 = {}), t4 = Ie(t4), St3 = -1 === Rt3.indexOf(t4.PARSER_MEDIA_TYPE) ? "text/html" : t4.PARSER_MEDIA_TYPE, kt3 = "application/xhtml+xml" === St3 ? ye : Ae, _3 = Re(t4, "ALLOWED_TAGS") ? De({}, t4.ALLOWED_TAGS, kt3) : j3, W3 = Re(t4, "ALLOWED_ATTR") ? De({}, t4.ALLOWED_ATTR, kt3) : U3, At3 = Re(t4, "ALLOWED_NAMESPACES") ? De({}, t4.ALLOWED_NAMESPACES, ye) : yt3, dt3 = Re(t4, "ADD_URI_SAFE_ATTR") ? De(Ie(gt3), t4.ADD_URI_SAFE_ATTR, kt3) : gt3, ut3 = Re(t4, "ADD_DATA_URI_TAGS") ? De(Ie(ht3), t4.ADD_DATA_URI_TAGS, kt3) : ht3, lt3 = Re(t4, "FORBID_CONTENTS") ? De({}, t4.FORBID_CONTENTS, kt3) : ct3, z3 = Re(t4, "FORBID_TAGS") ? De({}, t4.FORBID_TAGS, kt3) : {}, q3 = Re(t4, "FORBID_ATTR") ? De({}, t4.FORBID_ATTR, kt3) : {}, at3 = !!Re(t4, "USE_PROFILES") && t4.USE_PROFILES, H3 = false !== t4.ALLOW_ARIA_ATTR, J3 = false !== t4.ALLOW_DATA_ATTR, K3 = t4.ALLOW_UNKNOWN_PROTOCOLS || false, G3 = false !== t4.ALLOW_SELF_CLOSE_IN_ATTR, Y3 = t4.SAFE_FOR_TEMPLATES || false, X3 = false !== t4.SAFE_FOR_XML, $3 = t4.WHOLE_DOCUMENT || false, tt3 = t4.RETURN_DOM || false, et3 = t4.RETURN_DOM_FRAGMENT || false, it3 = t4.RETURN_TRUSTED_TYPE || false, Q3 = t4.FORCE_BODY || false, nt3 = false !== t4.SANITIZE_DOM, rt3 = t4.SANITIZE_NAMED_PROPS || false, ot3 = false !== t4.KEEP_CONTENT, st3 = t4.IN_PLACE || false, B3 = t4.ALLOWED_URI_REGEXP || Xe, bt3 = t4.NAMESPACE || ft3, xt3 = t4.MATHML_TEXT_INTEGRATION_POINTS || xt3, Ct3 = t4.HTML_INTEGRATION_POINTS || Ct3, V3 = t4.CUSTOM_ELEMENT_HANDLING || {}, t4.CUSTOM_ELEMENT_HANDLING && Lt3(t4.CUSTOM_ELEMENT_HANDLING.tagNameCheck) && (V3.tagNameCheck = t4.CUSTOM_ELEMENT_HANDLING.tagNameCheck), t4.CUSTOM_ELEMENT_HANDLING && Lt3(t4.CUSTOM_ELEMENT_HANDLING.attributeNameCheck) && (V3.attributeNameCheck = t4.CUSTOM_ELEMENT_HANDLING.attributeNameCheck), t4.CUSTOM_ELEMENT_HANDLING && "boolean" == typeof t4.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (V3.allowCustomizedBuiltInElements = t4.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements), Y3 && (J3 = false), et3 && (tt3 = true), at3 && (_3 = De({}, We), W3 = [], true === at3.html && (De(_3, Fe), De(W3, Ue)), true === at3.svg && (De(_3, Pe), De(W3, Ve), De(W3, qe)), true === at3.svgFilters && (De(_3, Me), De(W3, Ve), De(W3, qe)), true === at3.mathMl && (De(_3, _e), De(W3, ze), De(W3, qe))), t4.ADD_TAGS && (_3 === j3 && (_3 = Ie(_3)), De(_3, t4.ADD_TAGS, kt3)), t4.ADD_ATTR && (W3 === U3 && (W3 = Ie(W3)), De(W3, t4.ADD_ATTR, kt3)), t4.ADD_URI_SAFE_ATTR && De(dt3, t4.ADD_URI_SAFE_ATTR, kt3), t4.FORBID_CONTENTS && (lt3 === ct3 && (lt3 = Ie(lt3)), De(lt3, t4.FORBID_CONTENTS, kt3)), ot3 && (_3["#text"] = true), $3 && De(_3, ["html", "head", "body"]), _3.table && (De(_3, ["tbody"]), delete z3.tbody), t4.TRUSTED_TYPES_POLICY) {
          if ("function" != typeof t4.TRUSTED_TYPES_POLICY.createHTML) throw Te('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
          if ("function" != typeof t4.TRUSTED_TYPES_POLICY.createScriptURL) throw Te('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
          x3 = t4.TRUSTED_TYPES_POLICY, C3 = x3.createHTML("");
        } else void 0 === x3 && (x3 = function(t5, e4) {
          if ("object" != typeof t5 || "function" != typeof t5.createPolicy) return null;
          let i4 = null;
          const n4 = "data-tt-policy-suffix";
          e4 && e4.hasAttribute(n4) && (i4 = e4.getAttribute(n4));
          const r4 = "dompurify" + (i4 ? "#" + i4 : "");
          try {
            return t5.createPolicy(r4, { createHTML: (t6) => t6, createScriptURL: (t6) => t6 });
          } catch (t6) {
            return console.warn("TrustedTypes policy " + r4 + " could not be created."), null;
          }
        }(m3, o3)), null !== x3 && "string" == typeof C3 && (C3 = x3.createHTML(""));
        ce && ce(t4), Tt3 = t4;
      }
    }, Nt3 = De({}, [...Pe, ...Me, ...Be]), It3 = De({}, [..._e, ...je]), Ot3 = function(t4) {
      be(i3.removed, { element: t4 });
      try {
        y3(t4).removeChild(t4);
      } catch (e4) {
        b3(t4);
      }
    }, Ft3 = function(t4, e4) {
      try {
        be(i3.removed, { attribute: e4.getAttributeNode(t4), from: e4 });
      } catch (t5) {
        be(i3.removed, { attribute: null, from: e4 });
      }
      if (e4.removeAttribute(t4), "is" === t4) if (tt3 || et3) try {
        Ot3(e4);
      } catch (t5) {
      }
      else try {
        e4.setAttribute(t4, "");
      } catch (t5) {
      }
    }, Pt3 = function(t4) {
      let e4 = null, i4 = null;
      if (Q3) t4 = "<remove></remove>" + t4;
      else {
        const e5 = xe(t4, /^[\r\n\t ]+/);
        i4 = e5 && e5[0];
      }
      "application/xhtml+xml" === St3 && bt3 === ft3 && (t4 = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + t4 + "</body></html>");
      const r4 = x3 ? x3.createHTML(t4) : t4;
      if (bt3 === ft3) try {
        e4 = new g3().parseFromString(r4, St3);
      } catch (t5) {
      }
      if (!e4 || !e4.documentElement) {
        e4 = E3.createDocument(bt3, "template", null);
        try {
          e4.documentElement.innerHTML = vt3 ? C3 : r4;
        } catch (t5) {
        }
      }
      const o4 = e4.body || e4.documentElement;
      return t4 && i4 && o4.insertBefore(n3.createTextNode(i4), o4.childNodes[0] || null), bt3 === ft3 ? k3.call(e4, $3 ? "html" : "body")[0] : $3 ? e4.documentElement : o4;
    }, Mt3 = function(t4) {
      return S3.call(t4.ownerDocument || t4, t4, u3.SHOW_ELEMENT | u3.SHOW_COMMENT | u3.SHOW_TEXT | u3.SHOW_PROCESSING_INSTRUCTION | u3.SHOW_CDATA_SECTION, null);
    }, Bt3 = function(t4) {
      return t4 instanceof d3 && ("string" != typeof t4.nodeName || "string" != typeof t4.textContent || "function" != typeof t4.removeChild || !(t4.attributes instanceof h3) || "function" != typeof t4.removeAttribute || "function" != typeof t4.setAttribute || "string" != typeof t4.namespaceURI || "function" != typeof t4.insertBefore || "function" != typeof t4.hasChildNodes);
    }, _t3 = function(t4) {
      return "function" == typeof l3 && t4 instanceof l3;
    };
    function jt3(t4, e4, n4) {
      me(t4, (t5) => {
        t5.call(i3, e4, n4, Tt3);
      });
    }
    const Wt3 = function(t4) {
      let e4 = null;
      if (jt3(w3.beforeSanitizeElements, t4, null), Bt3(t4)) return Ot3(t4), true;
      const n4 = kt3(t4.nodeName);
      if (jt3(w3.uponSanitizeElement, t4, { tagName: n4, allowedTags: _3 }), t4.hasChildNodes() && !_t3(t4.firstElementChild) && ke(/<[/\w!]/g, t4.innerHTML) && ke(/<[/\w!]/g, t4.textContent)) return Ot3(t4), true;
      if (t4.nodeType === ri) return Ot3(t4), true;
      if (X3 && t4.nodeType === oi && ke(/<[/\w]/g, t4.data)) return Ot3(t4), true;
      if (!_3[n4] || z3[n4]) {
        if (!z3[n4] && Vt3(n4)) {
          if (V3.tagNameCheck instanceof RegExp && ke(V3.tagNameCheck, n4)) return false;
          if (V3.tagNameCheck instanceof Function && V3.tagNameCheck(n4)) return false;
        }
        if (ot3 && !lt3[n4]) {
          const e5 = y3(t4) || t4.parentNode, i4 = A3(t4) || t4.childNodes;
          if (i4 && e5) {
            for (let n5 = i4.length - 1; n5 >= 0; --n5) {
              const r4 = f3(i4[n5], true);
              r4.__removalCount = (t4.__removalCount || 0) + 1, e5.insertBefore(r4, v3(t4));
            }
          }
        }
        return Ot3(t4), true;
      }
      return t4 instanceof c3 && !function(t5) {
        let e5 = y3(t5);
        e5 && e5.tagName || (e5 = { namespaceURI: bt3, tagName: "template" });
        const i4 = Ae(t5.tagName), n5 = Ae(e5.tagName);
        return !!At3[t5.namespaceURI] && (t5.namespaceURI === pt3 ? e5.namespaceURI === ft3 ? "svg" === i4 : e5.namespaceURI === mt3 ? "svg" === i4 && ("annotation-xml" === n5 || xt3[n5]) : Boolean(Nt3[i4]) : t5.namespaceURI === mt3 ? e5.namespaceURI === ft3 ? "math" === i4 : e5.namespaceURI === pt3 ? "math" === i4 && Ct3[n5] : Boolean(It3[i4]) : t5.namespaceURI === ft3 ? !(e5.namespaceURI === pt3 && !Ct3[n5]) && !(e5.namespaceURI === mt3 && !xt3[n5]) && !It3[i4] && (Et3[i4] || !Nt3[i4]) : !("application/xhtml+xml" !== St3 || !At3[t5.namespaceURI]));
      }(t4) ? (Ot3(t4), true) : "noscript" !== n4 && "noembed" !== n4 && "noframes" !== n4 || !ke(/<\/no(script|embed|frames)/i, t4.innerHTML) ? (Y3 && t4.nodeType === ni && (e4 = t4.textContent, me([L3, D3, N3], (t5) => {
        e4 = Ce(e4, t5, " ");
      }), t4.textContent !== e4 && (be(i3.removed, { element: t4.cloneNode() }), t4.textContent = e4)), jt3(w3.afterSanitizeElements, t4, null), false) : (Ot3(t4), true);
    }, Ut3 = function(t4, e4, i4) {
      if (nt3 && ("id" === e4 || "name" === e4) && (i4 in n3 || i4 in wt3)) return false;
      if (J3 && !q3[e4] && ke(I3, e4)) ;
      else if (H3 && ke(O3, e4)) ;
      else if (!W3[e4] || q3[e4]) {
        if (!(Vt3(t4) && (V3.tagNameCheck instanceof RegExp && ke(V3.tagNameCheck, t4) || V3.tagNameCheck instanceof Function && V3.tagNameCheck(t4)) && (V3.attributeNameCheck instanceof RegExp && ke(V3.attributeNameCheck, e4) || V3.attributeNameCheck instanceof Function && V3.attributeNameCheck(e4)) || "is" === e4 && V3.allowCustomizedBuiltInElements && (V3.tagNameCheck instanceof RegExp && ke(V3.tagNameCheck, i4) || V3.tagNameCheck instanceof Function && V3.tagNameCheck(i4)))) return false;
      } else if (dt3[e4]) ;
      else if (ke(B3, Ce(i4, P3, ""))) ;
      else if ("src" !== e4 && "xlink:href" !== e4 && "href" !== e4 || "script" === t4 || 0 !== Ee(i4, "data:") || !ut3[t4]) {
        if (K3 && !ke(F3, Ce(i4, P3, ""))) ;
        else if (i4) return false;
      } else ;
      return true;
    }, Vt3 = function(t4) {
      return "annotation-xml" !== t4 && xe(t4, M3);
    }, zt3 = function(t4) {
      jt3(w3.beforeSanitizeAttributes, t4, null);
      const { attributes: e4 } = t4;
      if (!e4 || Bt3(t4)) return;
      const n4 = { attrName: "", attrValue: "", keepAttr: true, allowedAttributes: W3, forceKeepAttr: void 0 };
      let r4 = e4.length;
      for (; r4--; ) {
        const o4 = e4[r4], { name: s4, namespaceURI: a4, value: l4 } = o4, c4 = kt3(s4);
        let u4 = "value" === s4 ? l4 : Se(l4);
        if (n4.attrName = c4, n4.attrValue = u4, n4.keepAttr = true, n4.forceKeepAttr = void 0, jt3(w3.uponSanitizeAttribute, t4, n4), u4 = n4.attrValue, !rt3 || "id" !== c4 && "name" !== c4 || (Ft3(s4, t4), u4 = "user-content-" + u4), X3 && ke(/((--!?|])>)|<\/(style|title)/i, u4)) {
          Ft3(s4, t4);
          continue;
        }
        if (n4.forceKeepAttr) continue;
        if (Ft3(s4, t4), !n4.keepAttr) continue;
        if (!G3 && ke(/\/>/i, u4)) {
          Ft3(s4, t4);
          continue;
        }
        Y3 && me([L3, D3, N3], (t5) => {
          u4 = Ce(u4, t5, " ");
        });
        const h4 = kt3(t4.nodeName);
        if (Ut3(h4, c4, u4)) {
          if (x3 && "object" == typeof m3 && "function" == typeof m3.getAttributeType) if (a4) ;
          else switch (m3.getAttributeType(h4, c4)) {
            case "TrustedHTML":
              u4 = x3.createHTML(u4);
              break;
            case "TrustedScriptURL":
              u4 = x3.createScriptURL(u4);
          }
          try {
            a4 ? t4.setAttributeNS(a4, s4, u4) : t4.setAttribute(s4, u4), Bt3(t4) ? Ot3(t4) : fe(i3.removed);
          } catch (t5) {
          }
        }
      }
      jt3(w3.afterSanitizeAttributes, t4, null);
    }, qt3 = function t4(e4) {
      let i4 = null;
      const n4 = Mt3(e4);
      for (jt3(w3.beforeSanitizeShadowDOM, e4, null); i4 = n4.nextNode(); ) jt3(w3.uponSanitizeShadowNode, i4, null), Wt3(i4), zt3(i4), i4.content instanceof s3 && t4(i4.content);
      jt3(w3.afterSanitizeShadowDOM, e4, null);
    };
    return i3.sanitize = function(t4) {
      let e4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n4 = null, o4 = null, a4 = null, c4 = null;
      if (vt3 = !t4, vt3 && (t4 = "<!-->"), "string" != typeof t4 && !_t3(t4)) {
        if ("function" != typeof t4.toString) throw Te("toString is not a function");
        if ("string" != typeof (t4 = t4.toString())) throw Te("dirty is not a string, aborting");
      }
      if (!i3.isSupported) return t4;
      if (Z3 || Dt3(e4), i3.removed = [], "string" == typeof t4 && (st3 = false), st3) {
        if (t4.nodeName) {
          const e5 = kt3(t4.nodeName);
          if (!_3[e5] || z3[e5]) throw Te("root node is forbidden and cannot be sanitized in-place");
        }
      } else if (t4 instanceof l3) n4 = Pt3("<!---->"), o4 = n4.ownerDocument.importNode(t4, true), o4.nodeType === ii && "BODY" === o4.nodeName || "HTML" === o4.nodeName ? n4 = o4 : n4.appendChild(o4);
      else {
        if (!tt3 && !Y3 && !$3 && -1 === t4.indexOf("<")) return x3 && it3 ? x3.createHTML(t4) : t4;
        if (n4 = Pt3(t4), !n4) return tt3 ? null : it3 ? C3 : "";
      }
      n4 && Q3 && Ot3(n4.firstChild);
      const u4 = Mt3(st3 ? t4 : n4);
      for (; a4 = u4.nextNode(); ) Wt3(a4), zt3(a4), a4.content instanceof s3 && qt3(a4.content);
      if (st3) return t4;
      if (tt3) {
        if (et3) for (c4 = R3.call(n4.ownerDocument); n4.firstChild; ) c4.appendChild(n4.firstChild);
        else c4 = n4;
        return (W3.shadowroot || W3.shadowrootmode) && (c4 = T3.call(r3, c4, true)), c4;
      }
      let h4 = $3 ? n4.outerHTML : n4.innerHTML;
      return $3 && _3["!doctype"] && n4.ownerDocument && n4.ownerDocument.doctype && n4.ownerDocument.doctype.name && ke(Qe, n4.ownerDocument.doctype.name) && (h4 = "<!DOCTYPE " + n4.ownerDocument.doctype.name + ">\n" + h4), Y3 && me([L3, D3, N3], (t5) => {
        h4 = Ce(h4, t5, " ");
      }), x3 && it3 ? x3.createHTML(h4) : h4;
    }, i3.setConfig = function() {
      Dt3(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}), Z3 = true;
    }, i3.clearConfig = function() {
      Tt3 = null, Z3 = false;
    }, i3.isValidAttribute = function(t4, e4, i4) {
      Tt3 || Dt3({});
      const n4 = kt3(t4), r4 = kt3(e4);
      return Ut3(n4, r4, i4);
    }, i3.addHook = function(t4, e4) {
      "function" == typeof e4 && be(w3[t4], e4);
    }, i3.removeHook = function(t4, e4) {
      if (void 0 !== e4) {
        const i4 = pe(w3[t4], e4);
        return -1 === i4 ? void 0 : ve(w3[t4], i4, 1)[0];
      }
      return fe(w3[t4]);
    }, i3.removeHooks = function(t4) {
      w3[t4] = [];
    }, i3.removeAllHooks = function() {
      w3 = { afterSanitizeAttributes: [], afterSanitizeElements: [], afterSanitizeShadowDOM: [], beforeSanitizeAttributes: [], beforeSanitizeElements: [], beforeSanitizeShadowDOM: [], uponSanitizeAttribute: [], uponSanitizeElement: [], uponSanitizeShadowNode: [] };
    }, i3;
  }();
  li.addHook("uponSanitizeAttribute", function(t4, e3) {
    /^data-trix-/.test(e3.attrName) && (e3.forceKeepAttr = true);
  });
  var ci = "style href src width height language class".split(" ");
  var ui = "javascript:".split(" ");
  var hi = "script iframe form noscript".split(" ");
  var di = class extends q {
    static setHTML(t4, e3, i3) {
      const n3 = new this(e3, i3).sanitize(), r3 = n3.getHTML ? n3.getHTML() : n3.outerHTML;
      t4.innerHTML = r3;
    }
    static sanitize(t4, e3) {
      const i3 = new this(t4, e3);
      return i3.sanitize(), i3;
    }
    constructor(t4) {
      let { allowedAttributes: e3, forbiddenProtocols: i3, forbiddenElements: n3, purifyOptions: r3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.allowedAttributes = e3 || ci, this.forbiddenProtocols = i3 || ui, this.forbiddenElements = n3 || hi, this.purifyOptions = r3 || {}, this.body = gi(t4);
    }
    sanitize() {
      this.sanitizeElements(), this.normalizeListElementNesting();
      const t4 = Object.assign({}, l, this.purifyOptions);
      return li.setConfig(t4), this.body = li.sanitize(this.body), this.body;
    }
    getHTML() {
      return this.body.innerHTML;
    }
    getBody() {
      return this.body;
    }
    sanitizeElements() {
      const t4 = R(this.body), e3 = [];
      for (; t4.nextNode(); ) {
        const i3 = t4.currentNode;
        switch (i3.nodeType) {
          case Node.ELEMENT_NODE:
            this.elementIsRemovable(i3) ? e3.push(i3) : this.sanitizeElement(i3);
            break;
          case Node.COMMENT_NODE:
            e3.push(i3);
        }
      }
      return e3.forEach((t5) => S(t5)), this.body;
    }
    sanitizeElement(t4) {
      return t4.hasAttribute("href") && this.forbiddenProtocols.includes(t4.protocol) && t4.removeAttribute("href"), Array.from(t4.attributes).forEach((e3) => {
        let { name: i3 } = e3;
        this.allowedAttributes.includes(i3) || 0 === i3.indexOf("data-trix") || t4.removeAttribute(i3);
      }), t4;
    }
    normalizeListElementNesting() {
      return Array.from(this.body.querySelectorAll("ul,ol")).forEach((t4) => {
        const e3 = t4.previousElementSibling;
        e3 && "li" === k(e3) && e3.appendChild(t4);
      }), this.body;
    }
    elementIsRemovable(t4) {
      if ((null == t4 ? void 0 : t4.nodeType) === Node.ELEMENT_NODE) return this.elementIsForbidden(t4) || this.elementIsntSerializable(t4);
    }
    elementIsForbidden(t4) {
      return this.forbiddenElements.includes(k(t4));
    }
    elementIsntSerializable(t4) {
      return "false" === t4.getAttribute("data-trix-serialize") && !P(t4);
    }
  };
  var gi = function() {
    let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
    t4 = t4.replace(/<\/html[^>]*>[^]*$/i, "</html>");
    const e3 = document.implementation.createHTMLDocument("");
    return e3.documentElement.innerHTML = t4, Array.from(e3.head.querySelectorAll("style")).forEach((t5) => {
      e3.body.appendChild(t5);
    }), e3.body;
  };
  var { css: mi } = z;
  var pi = class extends ie {
    constructor() {
      super(...arguments), this.attachment = this.object, this.attachment.uploadProgressDelegate = this, this.attachmentPiece = this.options.piece;
    }
    createContentNodes() {
      return [];
    }
    createNodes() {
      let t4;
      const e3 = t4 = T({ tagName: "figure", className: this.getClassName(), data: this.getData(), editable: false }), i3 = this.getHref();
      return i3 && (t4 = T({ tagName: "a", editable: false, attributes: { href: i3, tabindex: -1 } }), e3.appendChild(t4)), this.attachment.hasContent() ? di.setHTML(t4, this.attachment.getContent()) : this.createContentNodes().forEach((e4) => {
        t4.appendChild(e4);
      }), t4.appendChild(this.createCaptionElement()), this.attachment.isPending() && (this.progressElement = T({ tagName: "progress", attributes: { class: mi.attachmentProgress, value: this.attachment.getUploadProgress(), max: 100 }, data: { trixMutable: true, trixStoreKey: ["progressElement", this.attachment.id].join("/") } }), e3.appendChild(this.progressElement)), [fi("left"), e3, fi("right")];
    }
    createCaptionElement() {
      const t4 = T({ tagName: "figcaption", className: mi.attachmentCaption }), e3 = this.attachmentPiece.getCaption();
      if (e3) t4.classList.add("".concat(mi.attachmentCaption, "--edited")), t4.textContent = e3;
      else {
        let e4, i3;
        const n3 = this.getCaptionConfig();
        if (n3.name && (e4 = this.attachment.getFilename()), n3.size && (i3 = this.attachment.getFormattedFilesize()), e4) {
          const i4 = T({ tagName: "span", className: mi.attachmentName, textContent: e4 });
          t4.appendChild(i4);
        }
        if (i3) {
          e4 && t4.appendChild(document.createTextNode(" "));
          const n4 = T({ tagName: "span", className: mi.attachmentSize, textContent: i3 });
          t4.appendChild(n4);
        }
      }
      return t4;
    }
    getClassName() {
      const t4 = [mi.attachment, "".concat(mi.attachment, "--").concat(this.attachment.getType())], e3 = this.attachment.getExtension();
      return e3 && t4.push("".concat(mi.attachment, "--").concat(e3)), t4.join(" ");
    }
    getData() {
      const t4 = { trixAttachment: JSON.stringify(this.attachment), trixContentType: this.attachment.getContentType(), trixId: this.attachment.id }, { attributes: e3 } = this.attachmentPiece;
      return e3.isEmpty() || (t4.trixAttributes = JSON.stringify(e3)), this.attachment.isPending() && (t4.trixSerialize = false), t4;
    }
    getHref() {
      if (!bi(this.attachment.getContent(), "a")) return this.attachment.getHref();
    }
    getCaptionConfig() {
      var t4;
      const e3 = this.attachment.getType(), n3 = kt(null === (t4 = i[e3]) || void 0 === t4 ? void 0 : t4.caption);
      return "file" === e3 && (n3.name = true), n3;
    }
    findProgressElement() {
      var t4;
      return null === (t4 = this.findElement()) || void 0 === t4 ? void 0 : t4.querySelector("progress");
    }
    attachmentDidChangeUploadProgress() {
      const t4 = this.attachment.getUploadProgress(), e3 = this.findProgressElement();
      e3 && (e3.value = t4);
    }
  };
  var fi = (t4) => T({ tagName: "span", textContent: d, data: { trixCursorTarget: t4, trixSerialize: false } });
  var bi = function(t4, e3) {
    const i3 = T("div");
    return di.setHTML(i3, t4 || ""), i3.querySelector(e3);
  };
  var vi = class extends pi {
    constructor() {
      super(...arguments), this.attachment.previewDelegate = this;
    }
    createContentNodes() {
      return this.image = T({ tagName: "img", attributes: { src: "" }, data: { trixMutable: true } }), this.refresh(this.image), [this.image];
    }
    createCaptionElement() {
      const t4 = super.createCaptionElement(...arguments);
      return t4.textContent || t4.setAttribute("data-trix-placeholder", c.captionPlaceholder), t4;
    }
    refresh(t4) {
      var e3;
      t4 || (t4 = null === (e3 = this.findElement()) || void 0 === e3 ? void 0 : e3.querySelector("img"));
      if (t4) return this.updateAttributesForImage(t4);
    }
    updateAttributesForImage(t4) {
      const e3 = this.attachment.getURL(), i3 = this.attachment.getPreviewURL();
      if (t4.src = i3 || e3, i3 === e3) t4.removeAttribute("data-trix-serialized-attributes");
      else {
        const i4 = JSON.stringify({ src: e3 });
        t4.setAttribute("data-trix-serialized-attributes", i4);
      }
      const n3 = this.attachment.getWidth(), r3 = this.attachment.getHeight();
      null != n3 && (t4.width = n3), null != r3 && (t4.height = r3);
      const o3 = ["imageElement", this.attachment.id, t4.src, t4.width, t4.height].join("/");
      t4.dataset.trixStoreKey = o3;
    }
    attachmentDidChangeAttributes() {
      return this.refresh(this.image), this.refresh();
    }
  };
  var Ai = class extends ie {
    constructor() {
      super(...arguments), this.piece = this.object, this.attributes = this.piece.getAttributes(), this.textConfig = this.options.textConfig, this.context = this.options.context, this.piece.attachment ? this.attachment = this.piece.attachment : this.string = this.piece.toString();
    }
    createNodes() {
      let t4 = this.attachment ? this.createAttachmentNodes() : this.createStringNodes();
      const e3 = this.createElement();
      if (e3) {
        const i3 = function(t5) {
          for (; null !== (e4 = t5) && void 0 !== e4 && e4.firstElementChild; ) {
            var e4;
            t5 = t5.firstElementChild;
          }
          return t5;
        }(e3);
        Array.from(t4).forEach((t5) => {
          i3.appendChild(t5);
        }), t4 = [e3];
      }
      return t4;
    }
    createAttachmentNodes() {
      const t4 = this.attachment.isPreviewable() ? vi : pi;
      return this.createChildView(t4, this.piece.attachment, { piece: this.piece }).getNodes();
    }
    createStringNodes() {
      var t4;
      if (null !== (t4 = this.textConfig) && void 0 !== t4 && t4.plaintext) return [document.createTextNode(this.string)];
      {
        const t5 = [], e3 = this.string.split("\n");
        for (let i3 = 0; i3 < e3.length; i3++) {
          const n3 = e3[i3];
          if (i3 > 0) {
            const e4 = T("br");
            t5.push(e4);
          }
          if (n3.length) {
            const e4 = document.createTextNode(this.preserveSpaces(n3));
            t5.push(e4);
          }
        }
        return t5;
      }
    }
    createElement() {
      let t4, e3, i3;
      const n3 = {};
      for (e3 in this.attributes) {
        i3 = this.attributes[e3];
        const o3 = ft(e3);
        if (o3) {
          if (o3.tagName) {
            var r3;
            const e4 = T(o3.tagName);
            r3 ? (r3.appendChild(e4), r3 = e4) : t4 = r3 = e4;
          }
          if (o3.styleProperty && (n3[o3.styleProperty] = i3), o3.style) for (e3 in o3.style) i3 = o3.style[e3], n3[e3] = i3;
        }
      }
      if (Object.keys(n3).length) for (e3 in t4 || (t4 = T("span")), n3) i3 = n3[e3], t4.style[e3] = i3;
      return t4;
    }
    createContainerElement() {
      for (const t4 in this.attributes) {
        const e3 = this.attributes[t4], i3 = ft(t4);
        if (i3 && i3.groupTagName) {
          const n3 = {};
          return n3[t4] = e3, T(i3.groupTagName, n3);
        }
      }
    }
    preserveSpaces(t4) {
      return this.context.isLast && (t4 = t4.replace(/\ $/, g)), t4 = t4.replace(/(\S)\ {3}(\S)/g, "$1 ".concat(g, " $2")).replace(/\ {2}/g, "".concat(g, " ")).replace(/\ {2}/g, " ".concat(g)), (this.context.isFirst || this.context.followsWhitespace) && (t4 = t4.replace(/^\ /, g)), t4;
    }
  };
  var yi = class extends ie {
    constructor() {
      super(...arguments), this.text = this.object, this.textConfig = this.options.textConfig;
    }
    createNodes() {
      const t4 = [], e3 = $t.groupObjects(this.getPieces()), i3 = e3.length - 1;
      for (let r3 = 0; r3 < e3.length; r3++) {
        const o3 = e3[r3], s3 = {};
        0 === r3 && (s3.isFirst = true), r3 === i3 && (s3.isLast = true), xi(n3) && (s3.followsWhitespace = true);
        const a3 = this.findOrCreateCachedChildView(Ai, o3, { textConfig: this.textConfig, context: s3 });
        t4.push(...Array.from(a3.getNodes() || []));
        var n3 = o3;
      }
      return t4;
    }
    getPieces() {
      return Array.from(this.text.getPieces()).filter((t4) => !t4.hasAttribute("blockBreak"));
    }
  };
  var xi = (t4) => /\s$/.test(null == t4 ? void 0 : t4.toString());
  var { css: Ci } = z;
  var Ei = class extends ie {
    constructor() {
      super(...arguments), this.block = this.object, this.attributes = this.block.getAttributes();
    }
    createNodes() {
      const t4 = [document.createComment("block")];
      if (this.block.isEmpty()) t4.push(T("br"));
      else {
        var e3;
        const i3 = null === (e3 = mt(this.block.getLastAttribute())) || void 0 === e3 ? void 0 : e3.text, n3 = this.findOrCreateCachedChildView(yi, this.block.text, { textConfig: i3 });
        t4.push(...Array.from(n3.getNodes() || [])), this.shouldAddExtraNewlineElement() && t4.push(T("br"));
      }
      if (this.attributes.length) return t4;
      {
        let e4;
        const { tagName: i3 } = n.default;
        this.block.isRTL() && (e4 = { dir: "rtl" });
        const r3 = T({ tagName: i3, attributes: e4 });
        return t4.forEach((t5) => r3.appendChild(t5)), [r3];
      }
    }
    createContainerElement(t4) {
      const e3 = {};
      let i3;
      const n3 = this.attributes[t4], { tagName: r3, htmlAttributes: o3 = [] } = mt(n3);
      if (0 === t4 && this.block.isRTL() && Object.assign(e3, { dir: "rtl" }), "attachmentGallery" === n3) {
        const t5 = this.block.getBlockBreakPosition();
        i3 = "".concat(Ci.attachmentGallery, " ").concat(Ci.attachmentGallery, "--").concat(t5);
      }
      return Object.entries(this.block.htmlAttributes).forEach((t5) => {
        let [i4, n4] = t5;
        o3.includes(i4) && (e3[i4] = n4);
      }), T({ tagName: r3, className: i3, attributes: e3 });
    }
    shouldAddExtraNewlineElement() {
      return /\n\n$/.test(this.block.toString());
    }
  };
  var Si = class extends ie {
    static render(t4) {
      const e3 = T("div"), i3 = new this(t4, { element: e3 });
      return i3.render(), i3.sync(), e3;
    }
    constructor() {
      super(...arguments), this.element = this.options.element, this.elementStore = new Qt(), this.setDocument(this.object);
    }
    setDocument(t4) {
      t4.isEqualTo(this.document) || (this.document = this.object = t4);
    }
    render() {
      if (this.childViews = [], this.shadowElement = T("div"), !this.document.isEmpty()) {
        const t4 = $t.groupObjects(this.document.getBlocks(), { asTree: true });
        Array.from(t4).forEach((t5) => {
          const e3 = this.findOrCreateCachedChildView(Ei, t5);
          Array.from(e3.getNodes()).map((t6) => this.shadowElement.appendChild(t6));
        });
      }
    }
    isSynced() {
      return ki(this.shadowElement, this.element);
    }
    sync() {
      const t4 = this.createDocumentFragmentForSync();
      for (; this.element.lastChild; ) this.element.removeChild(this.element.lastChild);
      return this.element.appendChild(t4), this.didSync();
    }
    didSync() {
      return this.elementStore.reset(Ri(this.element)), Rt(() => this.garbageCollectCachedViews());
    }
    createDocumentFragmentForSync() {
      const t4 = document.createDocumentFragment();
      return Array.from(this.shadowElement.childNodes).forEach((e3) => {
        t4.appendChild(e3.cloneNode(true));
      }), Array.from(Ri(t4)).forEach((t5) => {
        const e3 = this.elementStore.remove(t5);
        e3 && t5.parentNode.replaceChild(e3, t5);
      }), t4;
    }
  };
  var Ri = (t4) => t4.querySelectorAll("[data-trix-store-key]");
  var ki = (t4, e3) => Ti(t4.innerHTML) === Ti(e3.innerHTML);
  var Ti = (t4) => t4.replace(/&nbsp;/g, " ");
  function wi(t4) {
    var e3, i3;
    function n3(e4, i4) {
      try {
        var o3 = t4[e4](i4), s3 = o3.value, a3 = s3 instanceof Li;
        Promise.resolve(a3 ? s3.v : s3).then(function(i5) {
          if (a3) {
            var l3 = "return" === e4 ? "return" : "next";
            if (!s3.k || i5.done) return n3(l3, i5);
            i5 = t4[l3](i5).value;
          }
          r3(o3.done ? "return" : "normal", i5);
        }, function(t5) {
          n3("throw", t5);
        });
      } catch (t5) {
        r3("throw", t5);
      }
    }
    function r3(t5, r4) {
      switch (t5) {
        case "return":
          e3.resolve({ value: r4, done: true });
          break;
        case "throw":
          e3.reject(r4);
          break;
        default:
          e3.resolve({ value: r4, done: false });
      }
      (e3 = e3.next) ? n3(e3.key, e3.arg) : i3 = null;
    }
    this._invoke = function(t5, r4) {
      return new Promise(function(o3, s3) {
        var a3 = { key: t5, arg: r4, resolve: o3, reject: s3, next: null };
        i3 ? i3 = i3.next = a3 : (e3 = i3 = a3, n3(t5, r4));
      });
    }, "function" != typeof t4.return && (this.return = void 0);
  }
  function Li(t4, e3) {
    this.v = t4, this.k = e3;
  }
  function Di(t4, e3, i3) {
    return (e3 = Ni(e3)) in t4 ? Object.defineProperty(t4, e3, { value: i3, enumerable: true, configurable: true, writable: true }) : t4[e3] = i3, t4;
  }
  function Ni(t4) {
    var e3 = function(t5, e4) {
      if ("object" != typeof t5 || null === t5) return t5;
      var i3 = t5[Symbol.toPrimitive];
      if (void 0 !== i3) {
        var n3 = i3.call(t5, e4 || "default");
        if ("object" != typeof n3) return n3;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === e4 ? String : Number)(t5);
    }(t4, "string");
    return "symbol" == typeof e3 ? e3 : String(e3);
  }
  wi.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function() {
    return this;
  }, wi.prototype.next = function(t4) {
    return this._invoke("next", t4);
  }, wi.prototype.throw = function(t4) {
    return this._invoke("throw", t4);
  }, wi.prototype.return = function(t4) {
    return this._invoke("return", t4);
  };
  function Ii(t4, e3) {
    return Pi(t4, Fi(t4, e3, "get"));
  }
  function Oi(t4, e3, i3) {
    return Mi(t4, Fi(t4, e3, "set"), i3), i3;
  }
  function Fi(t4, e3, i3) {
    if (!e3.has(t4)) throw new TypeError("attempted to " + i3 + " private field on non-instance");
    return e3.get(t4);
  }
  function Pi(t4, e3) {
    return e3.get ? e3.get.call(t4) : e3.value;
  }
  function Mi(t4, e3, i3) {
    if (e3.set) e3.set.call(t4, i3);
    else {
      if (!e3.writable) throw new TypeError("attempted to set read only private field");
      e3.value = i3;
    }
  }
  function Bi(t4, e3, i3) {
    if (!e3.has(t4)) throw new TypeError("attempted to get private field on non-instance");
    return i3;
  }
  function _i(t4, e3) {
    if (e3.has(t4)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function ji(t4, e3, i3) {
    _i(t4, e3), e3.set(t4, i3);
  }
  var Wi = class extends rt {
    static registerType(t4, e3) {
      e3.type = t4, this.types[t4] = e3;
    }
    static fromJSON(t4) {
      const e3 = this.types[t4.type];
      if (e3) return e3.fromJSON(t4);
    }
    constructor(t4) {
      let e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.attributes = Ht.box(e3);
    }
    copyWithAttributes(t4) {
      return new this.constructor(this.getValue(), t4);
    }
    copyWithAdditionalAttributes(t4) {
      return this.copyWithAttributes(this.attributes.merge(t4));
    }
    copyWithoutAttribute(t4) {
      return this.copyWithAttributes(this.attributes.remove(t4));
    }
    copy() {
      return this.copyWithAttributes(this.attributes);
    }
    getAttribute(t4) {
      return this.attributes.get(t4);
    }
    getAttributesHash() {
      return this.attributes;
    }
    getAttributes() {
      return this.attributes.toObject();
    }
    hasAttribute(t4) {
      return this.attributes.has(t4);
    }
    hasSameStringValueAsPiece(t4) {
      return t4 && this.toString() === t4.toString();
    }
    hasSameAttributesAsPiece(t4) {
      return t4 && (this.attributes === t4.attributes || this.attributes.isEqualTo(t4.attributes));
    }
    isBlockBreak() {
      return false;
    }
    isEqualTo(t4) {
      return super.isEqualTo(...arguments) || this.hasSameConstructorAs(t4) && this.hasSameStringValueAsPiece(t4) && this.hasSameAttributesAsPiece(t4);
    }
    isEmpty() {
      return 0 === this.length;
    }
    isSerializable() {
      return true;
    }
    toJSON() {
      return { type: this.constructor.type, attributes: this.getAttributes() };
    }
    contentsForInspection() {
      return { type: this.constructor.type, attributes: this.attributes.inspect() };
    }
    canBeGrouped() {
      return this.hasAttribute("href");
    }
    canBeGroupedWith(t4) {
      return this.getAttribute("href") === t4.getAttribute("href");
    }
    getLength() {
      return this.length;
    }
    canBeConsolidatedWith(t4) {
      return false;
    }
  };
  Di(Wi, "types", {});
  var Ui = class extends ee {
    constructor(t4) {
      super(...arguments), this.url = t4;
    }
    perform(t4) {
      const e3 = new Image();
      e3.onload = () => (e3.width = this.width = e3.naturalWidth, e3.height = this.height = e3.naturalHeight, t4(true, e3)), e3.onerror = () => t4(false), e3.src = this.url;
    }
  };
  var Vi = class _Vi extends rt {
    static attachmentForFile(t4) {
      const e3 = new this(this.attributesForFile(t4));
      return e3.setFile(t4), e3;
    }
    static attributesForFile(t4) {
      return new Ht({ filename: t4.name, filesize: t4.size, contentType: t4.type });
    }
    static fromJSON(t4) {
      return new this(t4);
    }
    constructor() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      super(t4), this.releaseFile = this.releaseFile.bind(this), this.attributes = Ht.box(t4), this.didChangeAttributes();
    }
    getAttribute(t4) {
      return this.attributes.get(t4);
    }
    hasAttribute(t4) {
      return this.attributes.has(t4);
    }
    getAttributes() {
      return this.attributes.toObject();
    }
    setAttributes() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      const e3 = this.attributes.merge(t4);
      var i3, n3, r3, o3;
      if (!this.attributes.isEqualTo(e3)) return this.attributes = e3, this.didChangeAttributes(), null === (i3 = this.previewDelegate) || void 0 === i3 || null === (n3 = i3.attachmentDidChangeAttributes) || void 0 === n3 || n3.call(i3, this), null === (r3 = this.delegate) || void 0 === r3 || null === (o3 = r3.attachmentDidChangeAttributes) || void 0 === o3 ? void 0 : o3.call(r3, this);
    }
    didChangeAttributes() {
      if (this.isPreviewable()) return this.preloadURL();
    }
    isPending() {
      return null != this.file && !(this.getURL() || this.getHref());
    }
    isPreviewable() {
      return this.attributes.has("previewable") ? this.attributes.get("previewable") : _Vi.previewablePattern.test(this.getContentType());
    }
    getType() {
      return this.hasContent() ? "content" : this.isPreviewable() ? "preview" : "file";
    }
    getURL() {
      return this.attributes.get("url");
    }
    getHref() {
      return this.attributes.get("href");
    }
    getFilename() {
      return this.attributes.get("filename") || "";
    }
    getFilesize() {
      return this.attributes.get("filesize");
    }
    getFormattedFilesize() {
      const t4 = this.attributes.get("filesize");
      return "number" == typeof t4 ? h.formatter(t4) : "";
    }
    getExtension() {
      var t4;
      return null === (t4 = this.getFilename().match(/\.(\w+)$/)) || void 0 === t4 ? void 0 : t4[1].toLowerCase();
    }
    getContentType() {
      return this.attributes.get("contentType");
    }
    hasContent() {
      return this.attributes.has("content");
    }
    getContent() {
      return this.attributes.get("content");
    }
    getWidth() {
      return this.attributes.get("width");
    }
    getHeight() {
      return this.attributes.get("height");
    }
    getFile() {
      return this.file;
    }
    setFile(t4) {
      if (this.file = t4, this.isPreviewable()) return this.preloadFile();
    }
    releaseFile() {
      this.releasePreloadedFile(), this.file = null;
    }
    getUploadProgress() {
      return null != this.uploadProgress ? this.uploadProgress : 0;
    }
    setUploadProgress(t4) {
      var e3, i3;
      if (this.uploadProgress !== t4) return this.uploadProgress = t4, null === (e3 = this.uploadProgressDelegate) || void 0 === e3 || null === (i3 = e3.attachmentDidChangeUploadProgress) || void 0 === i3 ? void 0 : i3.call(e3, this);
    }
    toJSON() {
      return this.getAttributes();
    }
    getCacheKey() {
      return [super.getCacheKey(...arguments), this.attributes.getCacheKey(), this.getPreviewURL()].join("/");
    }
    getPreviewURL() {
      return this.previewURL || this.preloadingURL;
    }
    setPreviewURL(t4) {
      var e3, i3, n3, r3;
      if (t4 !== this.getPreviewURL()) return this.previewURL = t4, null === (e3 = this.previewDelegate) || void 0 === e3 || null === (i3 = e3.attachmentDidChangeAttributes) || void 0 === i3 || i3.call(e3, this), null === (n3 = this.delegate) || void 0 === n3 || null === (r3 = n3.attachmentDidChangePreviewURL) || void 0 === r3 ? void 0 : r3.call(n3, this);
    }
    preloadURL() {
      return this.preload(this.getURL(), this.releaseFile);
    }
    preloadFile() {
      if (this.file) return this.fileObjectURL = URL.createObjectURL(this.file), this.preload(this.fileObjectURL);
    }
    releasePreloadedFile() {
      this.fileObjectURL && (URL.revokeObjectURL(this.fileObjectURL), this.fileObjectURL = null);
    }
    preload(t4, e3) {
      if (t4 && t4 !== this.getPreviewURL()) {
        this.preloadingURL = t4;
        return new Ui(t4).then((i3) => {
          let { width: n3, height: r3 } = i3;
          return this.getWidth() && this.getHeight() || this.setAttributes({ width: n3, height: r3 }), this.preloadingURL = null, this.setPreviewURL(t4), null == e3 ? void 0 : e3();
        }).catch(() => (this.preloadingURL = null, null == e3 ? void 0 : e3()));
      }
    }
  };
  Di(Vi, "previewablePattern", /^image(\/(gif|png|webp|jpe?g)|$)/);
  var zi = class _zi extends Wi {
    static fromJSON(t4) {
      return new this(Vi.fromJSON(t4.attachment), t4.attributes);
    }
    constructor(t4) {
      super(...arguments), this.attachment = t4, this.length = 1, this.ensureAttachmentExclusivelyHasAttribute("href"), this.attachment.hasContent() || this.removeProhibitedAttributes();
    }
    ensureAttachmentExclusivelyHasAttribute(t4) {
      this.hasAttribute(t4) && (this.attachment.hasAttribute(t4) || this.attachment.setAttributes(this.attributes.slice([t4])), this.attributes = this.attributes.remove(t4));
    }
    removeProhibitedAttributes() {
      const t4 = this.attributes.slice(_zi.permittedAttributes);
      t4.isEqualTo(this.attributes) || (this.attributes = t4);
    }
    getValue() {
      return this.attachment;
    }
    isSerializable() {
      return !this.attachment.isPending();
    }
    getCaption() {
      return this.attributes.get("caption") || "";
    }
    isEqualTo(t4) {
      var e3;
      return super.isEqualTo(t4) && this.attachment.id === (null == t4 || null === (e3 = t4.attachment) || void 0 === e3 ? void 0 : e3.id);
    }
    toString() {
      return "\uFFFC";
    }
    toJSON() {
      const t4 = super.toJSON(...arguments);
      return t4.attachment = this.attachment, t4;
    }
    getCacheKey() {
      return [super.getCacheKey(...arguments), this.attachment.getCacheKey()].join("/");
    }
    toConsole() {
      return JSON.stringify(this.toString());
    }
  };
  Di(zi, "permittedAttributes", ["caption", "presentation"]), Wi.registerType("attachment", zi);
  var qi = class extends Wi {
    static fromJSON(t4) {
      return new this(t4.string, t4.attributes);
    }
    constructor(t4) {
      super(...arguments), this.string = ((t5) => t5.replace(/\r\n?/g, "\n"))(t4), this.length = this.string.length;
    }
    getValue() {
      return this.string;
    }
    toString() {
      return this.string.toString();
    }
    isBlockBreak() {
      return "\n" === this.toString() && true === this.getAttribute("blockBreak");
    }
    toJSON() {
      const t4 = super.toJSON(...arguments);
      return t4.string = this.string, t4;
    }
    canBeConsolidatedWith(t4) {
      return t4 && this.hasSameConstructorAs(t4) && this.hasSameAttributesAsPiece(t4);
    }
    consolidateWith(t4) {
      return new this.constructor(this.toString() + t4.toString(), this.attributes);
    }
    splitAtOffset(t4) {
      let e3, i3;
      return 0 === t4 ? (e3 = null, i3 = this) : t4 === this.length ? (e3 = this, i3 = null) : (e3 = new this.constructor(this.string.slice(0, t4), this.attributes), i3 = new this.constructor(this.string.slice(t4), this.attributes)), [e3, i3];
    }
    toConsole() {
      let { string: t4 } = this;
      return t4.length > 15 && (t4 = t4.slice(0, 14) + "\u2026"), JSON.stringify(t4.toString());
    }
  };
  Wi.registerType("string", qi);
  var Hi = class extends rt {
    static box(t4) {
      return t4 instanceof this ? t4 : new this(t4);
    }
    constructor() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), this.objects = t4.slice(0), this.length = this.objects.length;
    }
    indexOf(t4) {
      return this.objects.indexOf(t4);
    }
    splice() {
      for (var t4 = arguments.length, e3 = new Array(t4), i3 = 0; i3 < t4; i3++) e3[i3] = arguments[i3];
      return new this.constructor(st(this.objects, ...e3));
    }
    eachObject(t4) {
      return this.objects.map((e3, i3) => t4(e3, i3));
    }
    insertObjectAtIndex(t4, e3) {
      return this.splice(e3, 0, t4);
    }
    insertSplittableListAtIndex(t4, e3) {
      return this.splice(e3, 0, ...t4.objects);
    }
    insertSplittableListAtPosition(t4, e3) {
      const [i3, n3] = this.splitObjectAtPosition(e3);
      return new this.constructor(i3).insertSplittableListAtIndex(t4, n3);
    }
    editObjectAtIndex(t4, e3) {
      return this.replaceObjectAtIndex(e3(this.objects[t4]), t4);
    }
    replaceObjectAtIndex(t4, e3) {
      return this.splice(e3, 1, t4);
    }
    removeObjectAtIndex(t4) {
      return this.splice(t4, 1);
    }
    getObjectAtIndex(t4) {
      return this.objects[t4];
    }
    getSplittableListInRange(t4) {
      const [e3, i3, n3] = this.splitObjectsAtRange(t4);
      return new this.constructor(e3.slice(i3, n3 + 1));
    }
    selectSplittableList(t4) {
      const e3 = this.objects.filter((e4) => t4(e4));
      return new this.constructor(e3);
    }
    removeObjectsInRange(t4) {
      const [e3, i3, n3] = this.splitObjectsAtRange(t4);
      return new this.constructor(e3).splice(i3, n3 - i3 + 1);
    }
    transformObjectsInRange(t4, e3) {
      const [i3, n3, r3] = this.splitObjectsAtRange(t4), o3 = i3.map((t5, i4) => n3 <= i4 && i4 <= r3 ? e3(t5) : t5);
      return new this.constructor(o3);
    }
    splitObjectsAtRange(t4) {
      let e3, [i3, n3, r3] = this.splitObjectAtPosition(Ki(t4));
      return [i3, e3] = new this.constructor(i3).splitObjectAtPosition(Gi(t4) + r3), [i3, n3, e3 - 1];
    }
    getObjectAtPosition(t4) {
      const { index: e3 } = this.findIndexAndOffsetAtPosition(t4);
      return this.objects[e3];
    }
    splitObjectAtPosition(t4) {
      let e3, i3;
      const { index: n3, offset: r3 } = this.findIndexAndOffsetAtPosition(t4), o3 = this.objects.slice(0);
      if (null != n3) if (0 === r3) e3 = n3, i3 = 0;
      else {
        const t5 = this.getObjectAtIndex(n3), [s3, a3] = t5.splitAtOffset(r3);
        o3.splice(n3, 1, s3, a3), e3 = n3 + 1, i3 = s3.getLength() - r3;
      }
      else e3 = o3.length, i3 = 0;
      return [o3, e3, i3];
    }
    consolidate() {
      const t4 = [];
      let e3 = this.objects[0];
      return this.objects.slice(1).forEach((i3) => {
        var n3, r3;
        null !== (n3 = (r3 = e3).canBeConsolidatedWith) && void 0 !== n3 && n3.call(r3, i3) ? e3 = e3.consolidateWith(i3) : (t4.push(e3), e3 = i3);
      }), e3 && t4.push(e3), new this.constructor(t4);
    }
    consolidateFromIndexToIndex(t4, e3) {
      const i3 = this.objects.slice(0).slice(t4, e3 + 1), n3 = new this.constructor(i3).consolidate().toArray();
      return this.splice(t4, i3.length, ...n3);
    }
    findIndexAndOffsetAtPosition(t4) {
      let e3, i3 = 0;
      for (e3 = 0; e3 < this.objects.length; e3++) {
        const n3 = i3 + this.objects[e3].getLength();
        if (i3 <= t4 && t4 < n3) return { index: e3, offset: t4 - i3 };
        i3 = n3;
      }
      return { index: null, offset: null };
    }
    findPositionAtIndexAndOffset(t4, e3) {
      let i3 = 0;
      for (let n3 = 0; n3 < this.objects.length; n3++) {
        const r3 = this.objects[n3];
        if (n3 < t4) i3 += r3.getLength();
        else if (n3 === t4) {
          i3 += e3;
          break;
        }
      }
      return i3;
    }
    getEndPosition() {
      return null == this.endPosition && (this.endPosition = 0, this.objects.forEach((t4) => this.endPosition += t4.getLength())), this.endPosition;
    }
    toString() {
      return this.objects.join("");
    }
    toArray() {
      return this.objects.slice(0);
    }
    toJSON() {
      return this.toArray();
    }
    isEqualTo(t4) {
      return super.isEqualTo(...arguments) || Ji(this.objects, null == t4 ? void 0 : t4.objects);
    }
    contentsForInspection() {
      return { objects: "[".concat(this.objects.map((t4) => t4.inspect()).join(", "), "]") };
    }
  };
  var Ji = function(t4) {
    let e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
    if (t4.length !== e3.length) return false;
    let i3 = true;
    for (let n3 = 0; n3 < t4.length; n3++) {
      const r3 = t4[n3];
      i3 && !r3.isEqualTo(e3[n3]) && (i3 = false);
    }
    return i3;
  };
  var Ki = (t4) => t4[0];
  var Gi = (t4) => t4[1];
  var Yi = class extends rt {
    static textForAttachmentWithAttributes(t4, e3) {
      return new this([new zi(t4, e3)]);
    }
    static textForStringWithAttributes(t4, e3) {
      return new this([new qi(t4, e3)]);
    }
    static fromJSON(t4) {
      return new this(Array.from(t4).map((t5) => Wi.fromJSON(t5)));
    }
    constructor() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments);
      const e3 = t4.filter((t5) => !t5.isEmpty());
      this.pieceList = new Hi(e3);
    }
    copy() {
      return this.copyWithPieceList(this.pieceList);
    }
    copyWithPieceList(t4) {
      return new this.constructor(t4.consolidate().toArray());
    }
    copyUsingObjectMap(t4) {
      const e3 = this.getPieces().map((e4) => t4.find(e4) || e4);
      return new this.constructor(e3);
    }
    appendText(t4) {
      return this.insertTextAtPosition(t4, this.getLength());
    }
    insertTextAtPosition(t4, e3) {
      return this.copyWithPieceList(this.pieceList.insertSplittableListAtPosition(t4.pieceList, e3));
    }
    removeTextAtRange(t4) {
      return this.copyWithPieceList(this.pieceList.removeObjectsInRange(t4));
    }
    replaceTextAtRange(t4, e3) {
      return this.removeTextAtRange(e3).insertTextAtPosition(t4, e3[0]);
    }
    moveTextFromRangeToPosition(t4, e3) {
      if (t4[0] <= e3 && e3 <= t4[1]) return;
      const i3 = this.getTextAtRange(t4), n3 = i3.getLength();
      return t4[0] < e3 && (e3 -= n3), this.removeTextAtRange(t4).insertTextAtPosition(i3, e3);
    }
    addAttributeAtRange(t4, e3, i3) {
      const n3 = {};
      return n3[t4] = e3, this.addAttributesAtRange(n3, i3);
    }
    addAttributesAtRange(t4, e3) {
      return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e3, (e4) => e4.copyWithAdditionalAttributes(t4)));
    }
    removeAttributeAtRange(t4, e3) {
      return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e3, (e4) => e4.copyWithoutAttribute(t4)));
    }
    setAttributesAtRange(t4, e3) {
      return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e3, (e4) => e4.copyWithAttributes(t4)));
    }
    getAttributesAtPosition(t4) {
      var e3;
      return (null === (e3 = this.pieceList.getObjectAtPosition(t4)) || void 0 === e3 ? void 0 : e3.getAttributes()) || {};
    }
    getCommonAttributes() {
      const t4 = Array.from(this.pieceList.toArray()).map((t5) => t5.getAttributes());
      return Ht.fromCommonAttributesOfObjects(t4).toObject();
    }
    getCommonAttributesAtRange(t4) {
      return this.getTextAtRange(t4).getCommonAttributes() || {};
    }
    getExpandedRangeForAttributeAtOffset(t4, e3) {
      let i3, n3 = i3 = e3;
      const r3 = this.getLength();
      for (; n3 > 0 && this.getCommonAttributesAtRange([n3 - 1, i3])[t4]; ) n3--;
      for (; i3 < r3 && this.getCommonAttributesAtRange([e3, i3 + 1])[t4]; ) i3++;
      return [n3, i3];
    }
    getTextAtRange(t4) {
      return this.copyWithPieceList(this.pieceList.getSplittableListInRange(t4));
    }
    getStringAtRange(t4) {
      return this.pieceList.getSplittableListInRange(t4).toString();
    }
    getStringAtPosition(t4) {
      return this.getStringAtRange([t4, t4 + 1]);
    }
    startsWithString(t4) {
      return this.getStringAtRange([0, t4.length]) === t4;
    }
    endsWithString(t4) {
      const e3 = this.getLength();
      return this.getStringAtRange([e3 - t4.length, e3]) === t4;
    }
    getAttachmentPieces() {
      return this.pieceList.toArray().filter((t4) => !!t4.attachment);
    }
    getAttachments() {
      return this.getAttachmentPieces().map((t4) => t4.attachment);
    }
    getAttachmentAndPositionById(t4) {
      let e3 = 0;
      for (const n3 of this.pieceList.toArray()) {
        var i3;
        if ((null === (i3 = n3.attachment) || void 0 === i3 ? void 0 : i3.id) === t4) return { attachment: n3.attachment, position: e3 };
        e3 += n3.length;
      }
      return { attachment: null, position: null };
    }
    getAttachmentById(t4) {
      const { attachment: e3 } = this.getAttachmentAndPositionById(t4);
      return e3;
    }
    getRangeOfAttachment(t4) {
      const e3 = this.getAttachmentAndPositionById(t4.id), i3 = e3.position;
      if (t4 = e3.attachment) return [i3, i3 + 1];
    }
    updateAttributesForAttachment(t4, e3) {
      const i3 = this.getRangeOfAttachment(e3);
      return i3 ? this.addAttributesAtRange(t4, i3) : this;
    }
    getLength() {
      return this.pieceList.getEndPosition();
    }
    isEmpty() {
      return 0 === this.getLength();
    }
    isEqualTo(t4) {
      var e3;
      return super.isEqualTo(t4) || (null == t4 || null === (e3 = t4.pieceList) || void 0 === e3 ? void 0 : e3.isEqualTo(this.pieceList));
    }
    isBlockBreak() {
      return 1 === this.getLength() && this.pieceList.getObjectAtIndex(0).isBlockBreak();
    }
    eachPiece(t4) {
      return this.pieceList.eachObject(t4);
    }
    getPieces() {
      return this.pieceList.toArray();
    }
    getPieceAtPosition(t4) {
      return this.pieceList.getObjectAtPosition(t4);
    }
    contentsForInspection() {
      return { pieceList: this.pieceList.inspect() };
    }
    toSerializableText() {
      const t4 = this.pieceList.selectSplittableList((t5) => t5.isSerializable());
      return this.copyWithPieceList(t4);
    }
    toString() {
      return this.pieceList.toString();
    }
    toJSON() {
      return this.pieceList.toJSON();
    }
    toConsole() {
      return JSON.stringify(this.pieceList.toArray().map((t4) => JSON.parse(t4.toConsole())));
    }
    getDirection() {
      return lt(this.toString());
    }
    isRTL() {
      return "rtl" === this.getDirection();
    }
  };
  var Xi = class _Xi extends rt {
    static fromJSON(t4) {
      return new this(Yi.fromJSON(t4.text), t4.attributes, t4.htmlAttributes);
    }
    constructor(t4, e3, i3) {
      super(...arguments), this.text = $i(t4 || new Yi()), this.attributes = e3 || [], this.htmlAttributes = i3 || {};
    }
    isEmpty() {
      return this.text.isBlockBreak();
    }
    isEqualTo(t4) {
      return !!super.isEqualTo(t4) || this.text.isEqualTo(null == t4 ? void 0 : t4.text) && ot(this.attributes, null == t4 ? void 0 : t4.attributes) && Tt(this.htmlAttributes, null == t4 ? void 0 : t4.htmlAttributes);
    }
    copyWithText(t4) {
      return new _Xi(t4, this.attributes, this.htmlAttributes);
    }
    copyWithoutText() {
      return this.copyWithText(null);
    }
    copyWithAttributes(t4) {
      return new _Xi(this.text, t4, this.htmlAttributes);
    }
    copyWithoutAttributes() {
      return this.copyWithAttributes(null);
    }
    copyUsingObjectMap(t4) {
      const e3 = t4.find(this.text);
      return e3 ? this.copyWithText(e3) : this.copyWithText(this.text.copyUsingObjectMap(t4));
    }
    addAttribute(t4) {
      const e3 = this.attributes.concat(rn(t4));
      return this.copyWithAttributes(e3);
    }
    addHTMLAttribute(t4, e3) {
      const i3 = Object.assign({}, this.htmlAttributes, { [t4]: e3 });
      return new _Xi(this.text, this.attributes, i3);
    }
    removeAttribute(t4) {
      const { listAttribute: e3 } = mt(t4), i3 = sn(sn(this.attributes, t4), e3);
      return this.copyWithAttributes(i3);
    }
    removeLastAttribute() {
      return this.removeAttribute(this.getLastAttribute());
    }
    getLastAttribute() {
      return on(this.attributes);
    }
    getAttributes() {
      return this.attributes.slice(0);
    }
    getAttributeLevel() {
      return this.attributes.length;
    }
    getAttributeAtLevel(t4) {
      return this.attributes[t4 - 1];
    }
    hasAttribute(t4) {
      return this.attributes.includes(t4);
    }
    hasAttributes() {
      return this.getAttributeLevel() > 0;
    }
    getLastNestableAttribute() {
      return on(this.getNestableAttributes());
    }
    getNestableAttributes() {
      return this.attributes.filter((t4) => mt(t4).nestable);
    }
    getNestingLevel() {
      return this.getNestableAttributes().length;
    }
    decreaseNestingLevel() {
      const t4 = this.getLastNestableAttribute();
      return t4 ? this.removeAttribute(t4) : this;
    }
    increaseNestingLevel() {
      const t4 = this.getLastNestableAttribute();
      if (t4) {
        const e3 = this.attributes.lastIndexOf(t4), i3 = st(this.attributes, e3 + 1, 0, ...rn(t4));
        return this.copyWithAttributes(i3);
      }
      return this;
    }
    getListItemAttributes() {
      return this.attributes.filter((t4) => mt(t4).listAttribute);
    }
    isListItem() {
      var t4;
      return null === (t4 = mt(this.getLastAttribute())) || void 0 === t4 ? void 0 : t4.listAttribute;
    }
    isTerminalBlock() {
      var t4;
      return null === (t4 = mt(this.getLastAttribute())) || void 0 === t4 ? void 0 : t4.terminal;
    }
    breaksOnReturn() {
      var t4;
      return null === (t4 = mt(this.getLastAttribute())) || void 0 === t4 ? void 0 : t4.breakOnReturn;
    }
    findLineBreakInDirectionFromPosition(t4, e3) {
      const i3 = this.toString();
      let n3;
      switch (t4) {
        case "forward":
          n3 = i3.indexOf("\n", e3);
          break;
        case "backward":
          n3 = i3.slice(0, e3).lastIndexOf("\n");
      }
      if (-1 !== n3) return n3;
    }
    contentsForInspection() {
      return { text: this.text.inspect(), attributes: this.attributes };
    }
    toString() {
      return this.text.toString();
    }
    toJSON() {
      return { text: this.text, attributes: this.attributes, htmlAttributes: this.htmlAttributes };
    }
    getDirection() {
      return this.text.getDirection();
    }
    isRTL() {
      return this.text.isRTL();
    }
    getLength() {
      return this.text.getLength();
    }
    canBeConsolidatedWith(t4) {
      return !this.hasAttributes() && !t4.hasAttributes() && this.getDirection() === t4.getDirection();
    }
    consolidateWith(t4) {
      const e3 = Yi.textForStringWithAttributes("\n"), i3 = this.getTextWithoutBlockBreak().appendText(e3);
      return this.copyWithText(i3.appendText(t4.text));
    }
    splitAtOffset(t4) {
      let e3, i3;
      return 0 === t4 ? (e3 = null, i3 = this) : t4 === this.getLength() ? (e3 = this, i3 = null) : (e3 = this.copyWithText(this.text.getTextAtRange([0, t4])), i3 = this.copyWithText(this.text.getTextAtRange([t4, this.getLength()]))), [e3, i3];
    }
    getBlockBreakPosition() {
      return this.text.getLength() - 1;
    }
    getTextWithoutBlockBreak() {
      return en(this.text) ? this.text.getTextAtRange([0, this.getBlockBreakPosition()]) : this.text.copy();
    }
    canBeGrouped(t4) {
      return this.attributes[t4];
    }
    canBeGroupedWith(t4, e3) {
      const i3 = t4.getAttributes(), r3 = i3[e3], o3 = this.attributes[e3];
      return o3 === r3 && !(false === mt(o3).group && !(() => {
        if (!dt) {
          dt = [];
          for (const t5 in n) {
            const { listAttribute: e4 } = n[t5];
            null != e4 && dt.push(e4);
          }
        }
        return dt;
      })().includes(i3[e3 + 1])) && (this.getDirection() === t4.getDirection() || t4.isEmpty());
    }
  };
  var $i = function(t4) {
    return t4 = Zi(t4), t4 = tn(t4);
  };
  var Zi = function(t4) {
    let e3 = false;
    const i3 = t4.getPieces();
    let n3 = i3.slice(0, i3.length - 1);
    const r3 = i3[i3.length - 1];
    return r3 ? (n3 = n3.map((t5) => t5.isBlockBreak() ? (e3 = true, nn(t5)) : t5), e3 ? new Yi([...n3, r3]) : t4) : t4;
  };
  var Qi = Yi.textForStringWithAttributes("\n", { blockBreak: true });
  var tn = function(t4) {
    return en(t4) ? t4 : t4.appendText(Qi);
  };
  var en = function(t4) {
    const e3 = t4.getLength();
    if (0 === e3) return false;
    return t4.getTextAtRange([e3 - 1, e3]).isBlockBreak();
  };
  var nn = (t4) => t4.copyWithoutAttribute("blockBreak");
  var rn = function(t4) {
    const { listAttribute: e3 } = mt(t4);
    return e3 ? [e3, t4] : [t4];
  };
  var on = (t4) => t4.slice(-1)[0];
  var sn = function(t4, e3) {
    const i3 = t4.lastIndexOf(e3);
    return -1 === i3 ? t4 : st(t4, i3, 1);
  };
  var an = class extends rt {
    static fromJSON(t4) {
      return new this(Array.from(t4).map((t5) => Xi.fromJSON(t5)));
    }
    static fromString(t4, e3) {
      const i3 = Yi.textForStringWithAttributes(t4, e3);
      return new this([new Xi(i3)]);
    }
    constructor() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), 0 === t4.length && (t4 = [new Xi()]), this.blockList = Hi.box(t4);
    }
    isEmpty() {
      const t4 = this.getBlockAtIndex(0);
      return 1 === this.blockList.length && t4.isEmpty() && !t4.hasAttributes();
    }
    copy() {
      const t4 = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).consolidateBlocks ? this.blockList.consolidate().toArray() : this.blockList.toArray();
      return new this.constructor(t4);
    }
    copyUsingObjectsFromDocument(t4) {
      const e3 = new Zt(t4.getObjects());
      return this.copyUsingObjectMap(e3);
    }
    copyUsingObjectMap(t4) {
      const e3 = this.getBlocks().map((e4) => t4.find(e4) || e4.copyUsingObjectMap(t4));
      return new this.constructor(e3);
    }
    copyWithBaseBlockAttributes() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      const e3 = this.getBlocks().map((e4) => {
        const i3 = t4.concat(e4.getAttributes());
        return e4.copyWithAttributes(i3);
      });
      return new this.constructor(e3);
    }
    replaceBlock(t4, e3) {
      const i3 = this.blockList.indexOf(t4);
      return -1 === i3 ? this : new this.constructor(this.blockList.replaceObjectAtIndex(e3, i3));
    }
    insertDocumentAtRange(t4, e3) {
      const { blockList: i3 } = t4;
      e3 = wt(e3);
      let [n3] = e3;
      const { index: r3, offset: o3 } = this.locationFromPosition(n3);
      let s3 = this;
      const a3 = this.getBlockAtPosition(n3);
      return Lt(e3) && a3.isEmpty() && !a3.hasAttributes() ? s3 = new this.constructor(s3.blockList.removeObjectAtIndex(r3)) : a3.getBlockBreakPosition() === o3 && n3++, s3 = s3.removeTextAtRange(e3), new this.constructor(s3.blockList.insertSplittableListAtPosition(i3, n3));
    }
    mergeDocumentAtRange(t4, e3) {
      let i3, n3;
      e3 = wt(e3);
      const [r3] = e3, o3 = this.locationFromPosition(r3), s3 = this.getBlockAtIndex(o3.index).getAttributes(), a3 = t4.getBaseBlockAttributes(), l3 = s3.slice(-a3.length);
      if (ot(a3, l3)) {
        const e4 = s3.slice(0, -a3.length);
        i3 = t4.copyWithBaseBlockAttributes(e4);
      } else i3 = t4.copy({ consolidateBlocks: true }).copyWithBaseBlockAttributes(s3);
      const c3 = i3.getBlockCount(), u3 = i3.getBlockAtIndex(0);
      if (ot(s3, u3.getAttributes())) {
        const t5 = u3.getTextWithoutBlockBreak();
        if (n3 = this.insertTextAtRange(t5, e3), c3 > 1) {
          i3 = new this.constructor(i3.getBlocks().slice(1));
          const e4 = r3 + t5.getLength();
          n3 = n3.insertDocumentAtRange(i3, e4);
        }
      } else n3 = this.insertDocumentAtRange(i3, e3);
      return n3;
    }
    insertTextAtRange(t4, e3) {
      e3 = wt(e3);
      const [i3] = e3, { index: n3, offset: r3 } = this.locationFromPosition(i3), o3 = this.removeTextAtRange(e3);
      return new this.constructor(o3.blockList.editObjectAtIndex(n3, (e4) => e4.copyWithText(e4.text.insertTextAtPosition(t4, r3))));
    }
    removeTextAtRange(t4) {
      let e3;
      t4 = wt(t4);
      const [i3, n3] = t4;
      if (Lt(t4)) return this;
      const [r3, o3] = Array.from(this.locationRangeFromRange(t4)), s3 = r3.index, a3 = r3.offset, l3 = this.getBlockAtIndex(s3), c3 = o3.index, u3 = o3.offset, h3 = this.getBlockAtIndex(c3);
      if (n3 - i3 == 1 && l3.getBlockBreakPosition() === a3 && h3.getBlockBreakPosition() !== u3 && "\n" === h3.text.getStringAtPosition(u3)) e3 = this.blockList.editObjectAtIndex(c3, (t5) => t5.copyWithText(t5.text.removeTextAtRange([u3, u3 + 1])));
      else {
        let t5;
        const i4 = l3.text.getTextAtRange([0, a3]), n4 = h3.text.getTextAtRange([u3, h3.getLength()]), r4 = i4.appendText(n4);
        t5 = s3 !== c3 && 0 === a3 && l3.getAttributeLevel() >= h3.getAttributeLevel() ? h3.copyWithText(r4) : l3.copyWithText(r4);
        const o4 = c3 + 1 - s3;
        e3 = this.blockList.splice(s3, o4, t5);
      }
      return new this.constructor(e3);
    }
    moveTextFromRangeToPosition(t4, e3) {
      let i3;
      t4 = wt(t4);
      const [n3, r3] = t4;
      if (n3 <= e3 && e3 <= r3) return this;
      let o3 = this.getDocumentAtRange(t4), s3 = this.removeTextAtRange(t4);
      const a3 = n3 < e3;
      a3 && (e3 -= o3.getLength());
      const [l3, ...c3] = o3.getBlocks();
      return 0 === c3.length ? (i3 = l3.getTextWithoutBlockBreak(), a3 && (e3 += 1)) : i3 = l3.text, s3 = s3.insertTextAtRange(i3, e3), 0 === c3.length ? s3 : (o3 = new this.constructor(c3), e3 += i3.getLength(), s3.insertDocumentAtRange(o3, e3));
    }
    addAttributeAtRange(t4, e3, i3) {
      let { blockList: n3 } = this;
      return this.eachBlockAtRange(i3, (i4, r3, o3) => n3 = n3.editObjectAtIndex(o3, function() {
        return mt(t4) ? i4.addAttribute(t4, e3) : r3[0] === r3[1] ? i4 : i4.copyWithText(i4.text.addAttributeAtRange(t4, e3, r3));
      })), new this.constructor(n3);
    }
    addAttribute(t4, e3) {
      let { blockList: i3 } = this;
      return this.eachBlock((n3, r3) => i3 = i3.editObjectAtIndex(r3, () => n3.addAttribute(t4, e3))), new this.constructor(i3);
    }
    removeAttributeAtRange(t4, e3) {
      let { blockList: i3 } = this;
      return this.eachBlockAtRange(e3, function(e4, n3, r3) {
        mt(t4) ? i3 = i3.editObjectAtIndex(r3, () => e4.removeAttribute(t4)) : n3[0] !== n3[1] && (i3 = i3.editObjectAtIndex(r3, () => e4.copyWithText(e4.text.removeAttributeAtRange(t4, n3))));
      }), new this.constructor(i3);
    }
    updateAttributesForAttachment(t4, e3) {
      const i3 = this.getRangeOfAttachment(e3), [n3] = Array.from(i3), { index: r3 } = this.locationFromPosition(n3), o3 = this.getTextAtIndex(r3);
      return new this.constructor(this.blockList.editObjectAtIndex(r3, (i4) => i4.copyWithText(o3.updateAttributesForAttachment(t4, e3))));
    }
    removeAttributeForAttachment(t4, e3) {
      const i3 = this.getRangeOfAttachment(e3);
      return this.removeAttributeAtRange(t4, i3);
    }
    setHTMLAttributeAtPosition(t4, e3, i3) {
      const n3 = this.getBlockAtPosition(t4), r3 = n3.addHTMLAttribute(e3, i3);
      return this.replaceBlock(n3, r3);
    }
    insertBlockBreakAtRange(t4) {
      let e3;
      t4 = wt(t4);
      const [i3] = t4, { offset: n3 } = this.locationFromPosition(i3), r3 = this.removeTextAtRange(t4);
      return 0 === n3 && (e3 = [new Xi()]), new this.constructor(r3.blockList.insertSplittableListAtPosition(new Hi(e3), i3));
    }
    applyBlockAttributeAtRange(t4, e3, i3) {
      const n3 = this.expandRangeToLineBreaksAndSplitBlocks(i3);
      let r3 = n3.document;
      i3 = n3.range;
      const o3 = mt(t4);
      if (o3.listAttribute) {
        r3 = r3.removeLastListAttributeAtRange(i3, { exceptAttributeName: t4 });
        const e4 = r3.convertLineBreaksToBlockBreaksInRange(i3);
        r3 = e4.document, i3 = e4.range;
      } else r3 = o3.exclusive ? r3.removeBlockAttributesAtRange(i3) : o3.terminal ? r3.removeLastTerminalAttributeAtRange(i3) : r3.consolidateBlocksAtRange(i3);
      return r3.addAttributeAtRange(t4, e3, i3);
    }
    removeLastListAttributeAtRange(t4) {
      let e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, { blockList: i3 } = this;
      return this.eachBlockAtRange(t4, function(t5, n3, r3) {
        const o3 = t5.getLastAttribute();
        o3 && mt(o3).listAttribute && o3 !== e3.exceptAttributeName && (i3 = i3.editObjectAtIndex(r3, () => t5.removeAttribute(o3)));
      }), new this.constructor(i3);
    }
    removeLastTerminalAttributeAtRange(t4) {
      let { blockList: e3 } = this;
      return this.eachBlockAtRange(t4, function(t5, i3, n3) {
        const r3 = t5.getLastAttribute();
        r3 && mt(r3).terminal && (e3 = e3.editObjectAtIndex(n3, () => t5.removeAttribute(r3)));
      }), new this.constructor(e3);
    }
    removeBlockAttributesAtRange(t4) {
      let { blockList: e3 } = this;
      return this.eachBlockAtRange(t4, function(t5, i3, n3) {
        t5.hasAttributes() && (e3 = e3.editObjectAtIndex(n3, () => t5.copyWithoutAttributes()));
      }), new this.constructor(e3);
    }
    expandRangeToLineBreaksAndSplitBlocks(t4) {
      let e3;
      t4 = wt(t4);
      let [i3, n3] = t4;
      const r3 = this.locationFromPosition(i3), o3 = this.locationFromPosition(n3);
      let s3 = this;
      const a3 = s3.getBlockAtIndex(r3.index);
      if (r3.offset = a3.findLineBreakInDirectionFromPosition("backward", r3.offset), null != r3.offset && (e3 = s3.positionFromLocation(r3), s3 = s3.insertBlockBreakAtRange([e3, e3 + 1]), o3.index += 1, o3.offset -= s3.getBlockAtIndex(r3.index).getLength(), r3.index += 1), r3.offset = 0, 0 === o3.offset && o3.index > r3.index) o3.index -= 1, o3.offset = s3.getBlockAtIndex(o3.index).getBlockBreakPosition();
      else {
        const t5 = s3.getBlockAtIndex(o3.index);
        "\n" === t5.text.getStringAtRange([o3.offset - 1, o3.offset]) ? o3.offset -= 1 : o3.offset = t5.findLineBreakInDirectionFromPosition("forward", o3.offset), o3.offset !== t5.getBlockBreakPosition() && (e3 = s3.positionFromLocation(o3), s3 = s3.insertBlockBreakAtRange([e3, e3 + 1]));
      }
      return i3 = s3.positionFromLocation(r3), n3 = s3.positionFromLocation(o3), { document: s3, range: t4 = wt([i3, n3]) };
    }
    convertLineBreaksToBlockBreaksInRange(t4) {
      t4 = wt(t4);
      let [e3] = t4;
      const i3 = this.getStringAtRange(t4).slice(0, -1);
      let n3 = this;
      return i3.replace(/.*?\n/g, function(t5) {
        e3 += t5.length, n3 = n3.insertBlockBreakAtRange([e3 - 1, e3]);
      }), { document: n3, range: t4 };
    }
    consolidateBlocksAtRange(t4) {
      t4 = wt(t4);
      const [e3, i3] = t4, n3 = this.locationFromPosition(e3).index, r3 = this.locationFromPosition(i3).index;
      return new this.constructor(this.blockList.consolidateFromIndexToIndex(n3, r3));
    }
    getDocumentAtRange(t4) {
      t4 = wt(t4);
      const e3 = this.blockList.getSplittableListInRange(t4).toArray();
      return new this.constructor(e3);
    }
    getStringAtRange(t4) {
      let e3;
      const i3 = t4 = wt(t4);
      return i3[i3.length - 1] !== this.getLength() && (e3 = -1), this.getDocumentAtRange(t4).toString().slice(0, e3);
    }
    getBlockAtIndex(t4) {
      return this.blockList.getObjectAtIndex(t4);
    }
    getBlockAtPosition(t4) {
      const { index: e3 } = this.locationFromPosition(t4);
      return this.getBlockAtIndex(e3);
    }
    getTextAtIndex(t4) {
      var e3;
      return null === (e3 = this.getBlockAtIndex(t4)) || void 0 === e3 ? void 0 : e3.text;
    }
    getTextAtPosition(t4) {
      const { index: e3 } = this.locationFromPosition(t4);
      return this.getTextAtIndex(e3);
    }
    getPieceAtPosition(t4) {
      const { index: e3, offset: i3 } = this.locationFromPosition(t4);
      return this.getTextAtIndex(e3).getPieceAtPosition(i3);
    }
    getCharacterAtPosition(t4) {
      const { index: e3, offset: i3 } = this.locationFromPosition(t4);
      return this.getTextAtIndex(e3).getStringAtRange([i3, i3 + 1]);
    }
    getLength() {
      return this.blockList.getEndPosition();
    }
    getBlocks() {
      return this.blockList.toArray();
    }
    getBlockCount() {
      return this.blockList.length;
    }
    getEditCount() {
      return this.editCount;
    }
    eachBlock(t4) {
      return this.blockList.eachObject(t4);
    }
    eachBlockAtRange(t4, e3) {
      let i3, n3;
      t4 = wt(t4);
      const [r3, o3] = t4, s3 = this.locationFromPosition(r3), a3 = this.locationFromPosition(o3);
      if (s3.index === a3.index) return i3 = this.getBlockAtIndex(s3.index), n3 = [s3.offset, a3.offset], e3(i3, n3, s3.index);
      for (let t5 = s3.index; t5 <= a3.index; t5++) if (i3 = this.getBlockAtIndex(t5), i3) {
        switch (t5) {
          case s3.index:
            n3 = [s3.offset, i3.text.getLength()];
            break;
          case a3.index:
            n3 = [0, a3.offset];
            break;
          default:
            n3 = [0, i3.text.getLength()];
        }
        e3(i3, n3, t5);
      }
    }
    getCommonAttributesAtRange(t4) {
      t4 = wt(t4);
      const [e3] = t4;
      if (Lt(t4)) return this.getCommonAttributesAtPosition(e3);
      {
        const e4 = [], i3 = [];
        return this.eachBlockAtRange(t4, function(t5, n3) {
          if (n3[0] !== n3[1]) return e4.push(t5.text.getCommonAttributesAtRange(n3)), i3.push(ln(t5));
        }), Ht.fromCommonAttributesOfObjects(e4).merge(Ht.fromCommonAttributesOfObjects(i3)).toObject();
      }
    }
    getCommonAttributesAtPosition(t4) {
      let e3, i3;
      const { index: n3, offset: r3 } = this.locationFromPosition(t4), o3 = this.getBlockAtIndex(n3);
      if (!o3) return {};
      const s3 = ln(o3), a3 = o3.text.getAttributesAtPosition(r3), l3 = o3.text.getAttributesAtPosition(r3 - 1), c3 = Object.keys(W).filter((t5) => W[t5].inheritable);
      for (e3 in l3) i3 = l3[e3], (i3 === a3[e3] || c3.includes(e3)) && (s3[e3] = i3);
      return s3;
    }
    getRangeOfCommonAttributeAtPosition(t4, e3) {
      const { index: i3, offset: n3 } = this.locationFromPosition(e3), r3 = this.getTextAtIndex(i3), [o3, s3] = Array.from(r3.getExpandedRangeForAttributeAtOffset(t4, n3)), a3 = this.positionFromLocation({ index: i3, offset: o3 }), l3 = this.positionFromLocation({ index: i3, offset: s3 });
      return wt([a3, l3]);
    }
    getBaseBlockAttributes() {
      let t4 = this.getBlockAtIndex(0).getAttributes();
      for (let e3 = 1; e3 < this.getBlockCount(); e3++) {
        const i3 = this.getBlockAtIndex(e3).getAttributes(), n3 = Math.min(t4.length, i3.length);
        t4 = (() => {
          const e4 = [];
          for (let r3 = 0; r3 < n3 && i3[r3] === t4[r3]; r3++) e4.push(i3[r3]);
          return e4;
        })();
      }
      return t4;
    }
    getAttachmentById(t4) {
      for (const e3 of this.getAttachments()) if (e3.id === t4) return e3;
    }
    getAttachmentPieces() {
      let t4 = [];
      return this.blockList.eachObject((e3) => {
        let { text: i3 } = e3;
        return t4 = t4.concat(i3.getAttachmentPieces());
      }), t4;
    }
    getAttachments() {
      return this.getAttachmentPieces().map((t4) => t4.attachment);
    }
    getRangeOfAttachment(t4) {
      let e3 = 0;
      const i3 = this.blockList.toArray();
      for (let n3 = 0; n3 < i3.length; n3++) {
        const { text: r3 } = i3[n3], o3 = r3.getRangeOfAttachment(t4);
        if (o3) return wt([e3 + o3[0], e3 + o3[1]]);
        e3 += r3.getLength();
      }
    }
    getLocationRangeOfAttachment(t4) {
      const e3 = this.getRangeOfAttachment(t4);
      return this.locationRangeFromRange(e3);
    }
    getAttachmentPieceForAttachment(t4) {
      for (const e3 of this.getAttachmentPieces()) if (e3.attachment === t4) return e3;
    }
    findRangesForBlockAttribute(t4) {
      let e3 = 0;
      const i3 = [];
      return this.getBlocks().forEach((n3) => {
        const r3 = n3.getLength();
        n3.hasAttribute(t4) && i3.push([e3, e3 + r3]), e3 += r3;
      }), i3;
    }
    findRangesForTextAttribute(t4) {
      let { withValue: e3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i3 = 0, n3 = [];
      const r3 = [];
      return this.getPieces().forEach((o3) => {
        const s3 = o3.getLength();
        (function(i4) {
          return e3 ? i4.getAttribute(t4) === e3 : i4.hasAttribute(t4);
        })(o3) && (n3[1] === i3 ? n3[1] = i3 + s3 : r3.push(n3 = [i3, i3 + s3])), i3 += s3;
      }), r3;
    }
    locationFromPosition(t4) {
      const e3 = this.blockList.findIndexAndOffsetAtPosition(Math.max(0, t4));
      if (null != e3.index) return e3;
      {
        const t5 = this.getBlocks();
        return { index: t5.length - 1, offset: t5[t5.length - 1].getLength() };
      }
    }
    positionFromLocation(t4) {
      return this.blockList.findPositionAtIndexAndOffset(t4.index, t4.offset);
    }
    locationRangeFromPosition(t4) {
      return wt(this.locationFromPosition(t4));
    }
    locationRangeFromRange(t4) {
      if (!(t4 = wt(t4))) return;
      const [e3, i3] = Array.from(t4), n3 = this.locationFromPosition(e3), r3 = this.locationFromPosition(i3);
      return wt([n3, r3]);
    }
    rangeFromLocationRange(t4) {
      let e3;
      t4 = wt(t4);
      const i3 = this.positionFromLocation(t4[0]);
      return Lt(t4) || (e3 = this.positionFromLocation(t4[1])), wt([i3, e3]);
    }
    isEqualTo(t4) {
      return this.blockList.isEqualTo(null == t4 ? void 0 : t4.blockList);
    }
    getTexts() {
      return this.getBlocks().map((t4) => t4.text);
    }
    getPieces() {
      const t4 = [];
      return Array.from(this.getTexts()).forEach((e3) => {
        t4.push(...Array.from(e3.getPieces() || []));
      }), t4;
    }
    getObjects() {
      return this.getBlocks().concat(this.getTexts()).concat(this.getPieces());
    }
    toSerializableDocument() {
      const t4 = [];
      return this.blockList.eachObject((e3) => t4.push(e3.copyWithText(e3.text.toSerializableText()))), new this.constructor(t4);
    }
    toString() {
      return this.blockList.toString();
    }
    toJSON() {
      return this.blockList.toJSON();
    }
    toConsole() {
      return JSON.stringify(this.blockList.toArray().map((t4) => JSON.parse(t4.text.toConsole())));
    }
  };
  var ln = function(t4) {
    const e3 = {}, i3 = t4.getLastAttribute();
    return i3 && (e3[i3] = true), e3;
  };
  var cn = function(t4) {
    let e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    return { string: t4 = Wt(t4), attributes: e3, type: "string" };
  };
  var un = (t4, e3) => {
    try {
      return JSON.parse(t4.getAttribute("data-trix-".concat(e3)));
    } catch (t5) {
      return {};
    }
  };
  var hn = class extends q {
    static parse(t4, e3) {
      const i3 = new this(t4, e3);
      return i3.parse(), i3;
    }
    constructor(t4) {
      let { referenceElement: e3, purifyOptions: i3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.html = t4, this.referenceElement = e3, this.purifyOptions = i3, this.blocks = [], this.blockElements = [], this.processedElements = [];
    }
    getDocument() {
      return an.fromJSON(this.blocks);
    }
    parse() {
      try {
        this.createHiddenContainer(), di.setHTML(this.containerElement, this.html, { purifyOptions: this.purifyOptions });
        const t4 = R(this.containerElement, { usingFilter: pn });
        for (; t4.nextNode(); ) this.processNode(t4.currentNode);
        return this.translateBlockElementMarginsToNewlines();
      } finally {
        this.removeHiddenContainer();
      }
    }
    createHiddenContainer() {
      return this.referenceElement ? (this.containerElement = this.referenceElement.cloneNode(false), this.containerElement.removeAttribute("id"), this.containerElement.setAttribute("data-trix-internal", ""), this.containerElement.style.display = "none", this.referenceElement.parentNode.insertBefore(this.containerElement, this.referenceElement.nextSibling)) : (this.containerElement = T({ tagName: "div", style: { display: "none" } }), document.body.appendChild(this.containerElement));
    }
    removeHiddenContainer() {
      return S(this.containerElement);
    }
    processNode(t4) {
      switch (t4.nodeType) {
        case Node.TEXT_NODE:
          if (!this.isInsignificantTextNode(t4)) return this.appendBlockForTextNode(t4), this.processTextNode(t4);
          break;
        case Node.ELEMENT_NODE:
          return this.appendBlockForElement(t4), this.processElement(t4);
      }
    }
    appendBlockForTextNode(t4) {
      const e3 = t4.parentNode;
      if (e3 === this.currentBlockElement && this.isBlockElement(t4.previousSibling)) return this.appendStringWithAttributes("\n");
      if (e3 === this.containerElement || this.isBlockElement(e3)) {
        var i3;
        const t5 = this.getBlockAttributes(e3), n3 = this.getBlockHTMLAttributes(e3);
        ot(t5, null === (i3 = this.currentBlock) || void 0 === i3 ? void 0 : i3.attributes) || (this.currentBlock = this.appendBlockForAttributesWithElement(t5, e3, n3), this.currentBlockElement = e3);
      }
    }
    appendBlockForElement(t4) {
      const e3 = this.isBlockElement(t4), i3 = C(this.currentBlockElement, t4);
      if (e3 && !this.isBlockElement(t4.firstChild)) {
        if (!this.isInsignificantTextNode(t4.firstChild) || !this.isBlockElement(t4.firstElementChild)) {
          const e4 = this.getBlockAttributes(t4), n3 = this.getBlockHTMLAttributes(t4);
          if (t4.firstChild) {
            if (i3 && ot(e4, this.currentBlock.attributes)) return this.appendStringWithAttributes("\n");
            this.currentBlock = this.appendBlockForAttributesWithElement(e4, t4, n3), this.currentBlockElement = t4;
          }
        }
      } else if (this.currentBlockElement && !i3 && !e3) {
        const e4 = this.findParentBlockElement(t4);
        if (e4) return this.appendBlockForElement(e4);
        this.currentBlock = this.appendEmptyBlock(), this.currentBlockElement = null;
      }
    }
    findParentBlockElement(t4) {
      let { parentElement: e3 } = t4;
      for (; e3 && e3 !== this.containerElement; ) {
        if (this.isBlockElement(e3) && this.blockElements.includes(e3)) return e3;
        e3 = e3.parentElement;
      }
      return null;
    }
    processTextNode(t4) {
      let e3 = t4.data;
      var i3;
      dn(t4.parentNode) || (e3 = Vt(e3), vn(null === (i3 = t4.previousSibling) || void 0 === i3 ? void 0 : i3.textContent) && (e3 = fn(e3)));
      return this.appendStringWithAttributes(e3, this.getTextAttributes(t4.parentNode));
    }
    processElement(t4) {
      let e3;
      if (P(t4)) {
        if (e3 = un(t4, "attachment"), Object.keys(e3).length) {
          const i3 = this.getTextAttributes(t4);
          this.appendAttachmentWithAttributes(e3, i3), t4.innerHTML = "";
        }
        return this.processedElements.push(t4);
      }
      switch (k(t4)) {
        case "br":
          return this.isExtraBR(t4) || this.isBlockElement(t4.nextSibling) || this.appendStringWithAttributes("\n", this.getTextAttributes(t4)), this.processedElements.push(t4);
        case "img":
          e3 = { url: t4.getAttribute("src"), contentType: "image" };
          const i3 = ((t5) => {
            const e4 = t5.getAttribute("width"), i4 = t5.getAttribute("height"), n3 = {};
            return e4 && (n3.width = parseInt(e4, 10)), i4 && (n3.height = parseInt(i4, 10)), n3;
          })(t4);
          for (const t5 in i3) {
            const n3 = i3[t5];
            e3[t5] = n3;
          }
          return this.appendAttachmentWithAttributes(e3, this.getTextAttributes(t4)), this.processedElements.push(t4);
        case "tr":
          if (this.needsTableSeparator(t4)) return this.appendStringWithAttributes(j2.tableRowSeparator);
          break;
        case "td":
          if (this.needsTableSeparator(t4)) return this.appendStringWithAttributes(j2.tableCellSeparator);
      }
    }
    appendBlockForAttributesWithElement(t4, e3) {
      let i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      this.blockElements.push(e3);
      const n3 = function() {
        return { text: [], attributes: arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, htmlAttributes: arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {} };
      }(t4, i3);
      return this.blocks.push(n3), n3;
    }
    appendEmptyBlock() {
      return this.appendBlockForAttributesWithElement([], null);
    }
    appendStringWithAttributes(t4, e3) {
      return this.appendPiece(cn(t4, e3));
    }
    appendAttachmentWithAttributes(t4, e3) {
      return this.appendPiece(function(t5) {
        return { attachment: t5, attributes: arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, type: "attachment" };
      }(t4, e3));
    }
    appendPiece(t4) {
      return 0 === this.blocks.length && this.appendEmptyBlock(), this.blocks[this.blocks.length - 1].text.push(t4);
    }
    appendStringToTextAtIndex(t4, e3) {
      const { text: i3 } = this.blocks[e3], n3 = i3[i3.length - 1];
      if ("string" !== (null == n3 ? void 0 : n3.type)) return i3.push(cn(t4));
      n3.string += t4;
    }
    prependStringToTextAtIndex(t4, e3) {
      const { text: i3 } = this.blocks[e3], n3 = i3[0];
      if ("string" !== (null == n3 ? void 0 : n3.type)) return i3.unshift(cn(t4));
      n3.string = t4 + n3.string;
    }
    getTextAttributes(t4) {
      let e3;
      const i3 = {};
      for (const n3 in W) {
        const r3 = W[n3];
        if (r3.tagName && y(t4, { matchingSelector: r3.tagName, untilNode: this.containerElement })) i3[n3] = true;
        else if (r3.parser) {
          if (e3 = r3.parser(t4), e3) {
            let o3 = false;
            for (const i4 of this.findBlockElementAncestors(t4)) if (r3.parser(i4) === e3) {
              o3 = true;
              break;
            }
            o3 || (i3[n3] = e3);
          }
        } else r3.styleProperty && (e3 = t4.style[r3.styleProperty], e3 && (i3[n3] = e3));
      }
      if (P(t4)) {
        const n3 = un(t4, "attributes");
        for (const t5 in n3) e3 = n3[t5], i3[t5] = e3;
      }
      return i3;
    }
    getBlockAttributes(t4) {
      const e3 = [];
      for (; t4 && t4 !== this.containerElement; ) {
        for (const r3 in n) {
          const o3 = n[r3];
          var i3;
          if (false !== o3.parse) {
            if (k(t4) === o3.tagName) (null !== (i3 = o3.test) && void 0 !== i3 && i3.call(o3, t4) || !o3.test) && (e3.push(r3), o3.listAttribute && e3.push(o3.listAttribute));
          }
        }
        t4 = t4.parentNode;
      }
      return e3.reverse();
    }
    getBlockHTMLAttributes(t4) {
      const e3 = {}, i3 = Object.values(n).find((e4) => e4.tagName === k(t4));
      return ((null == i3 ? void 0 : i3.htmlAttributes) || []).forEach((i4) => {
        t4.hasAttribute(i4) && (e3[i4] = t4.getAttribute(i4));
      }), e3;
    }
    findBlockElementAncestors(t4) {
      const e3 = [];
      for (; t4 && t4 !== this.containerElement; ) {
        const i3 = k(t4);
        L().includes(i3) && e3.push(t4), t4 = t4.parentNode;
      }
      return e3;
    }
    isBlockElement(t4) {
      if ((null == t4 ? void 0 : t4.nodeType) === Node.ELEMENT_NODE && !P(t4) && !y(t4, { matchingSelector: "td", untilNode: this.containerElement })) return L().includes(k(t4)) || "block" === window.getComputedStyle(t4).display;
    }
    isInsignificantTextNode(t4) {
      if ((null == t4 ? void 0 : t4.nodeType) !== Node.TEXT_NODE) return;
      if (!bn(t4.data)) return;
      const { parentNode: e3, previousSibling: i3, nextSibling: n3 } = t4;
      return gn(e3.previousSibling) && !this.isBlockElement(e3.previousSibling) || dn(e3) ? void 0 : !i3 || this.isBlockElement(i3) || !n3 || this.isBlockElement(n3);
    }
    isExtraBR(t4) {
      return "br" === k(t4) && this.isBlockElement(t4.parentNode) && t4.parentNode.lastChild === t4;
    }
    needsTableSeparator(t4) {
      if (j2.removeBlankTableCells) {
        var e3;
        const i3 = null === (e3 = t4.previousSibling) || void 0 === e3 ? void 0 : e3.textContent;
        return i3 && /\S/.test(i3);
      }
      return t4.previousSibling;
    }
    translateBlockElementMarginsToNewlines() {
      const t4 = this.getMarginOfDefaultBlockElement();
      for (let e3 = 0; e3 < this.blocks.length; e3++) {
        const i3 = this.getMarginOfBlockElementAtIndex(e3);
        i3 && (i3.top > 2 * t4.top && this.prependStringToTextAtIndex("\n", e3), i3.bottom > 2 * t4.bottom && this.appendStringToTextAtIndex("\n", e3));
      }
    }
    getMarginOfBlockElementAtIndex(t4) {
      const e3 = this.blockElements[t4];
      if (e3 && e3.textContent && !L().includes(k(e3)) && !this.processedElements.includes(e3)) return mn(e3);
    }
    getMarginOfDefaultBlockElement() {
      const t4 = T(n.default.tagName);
      return this.containerElement.appendChild(t4), mn(t4);
    }
  };
  var dn = function(t4) {
    const { whiteSpace: e3 } = window.getComputedStyle(t4);
    return ["pre", "pre-wrap", "pre-line"].includes(e3);
  };
  var gn = (t4) => t4 && !vn(t4.textContent);
  var mn = function(t4) {
    const e3 = window.getComputedStyle(t4);
    if ("block" === e3.display) return { top: parseInt(e3.marginTop), bottom: parseInt(e3.marginBottom) };
  };
  var pn = function(t4) {
    return "style" === k(t4) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
  };
  var fn = (t4) => t4.replace(new RegExp("^".concat(Ut.source, "+")), "");
  var bn = (t4) => new RegExp("^".concat(Ut.source, "*$")).test(t4);
  var vn = (t4) => /\s$/.test(t4);
  var An = ["contenteditable", "data-trix-id", "data-trix-store-key", "data-trix-mutable", "data-trix-placeholder", "tabindex"];
  var yn = "data-trix-serialized-attributes";
  var xn = "[".concat(yn, "]");
  var Cn = new RegExp("<!--block-->", "g");
  var En = { "application/json": function(t4) {
    let e3;
    if (t4 instanceof an) e3 = t4;
    else {
      if (!(t4 instanceof HTMLElement)) throw new Error("unserializable object");
      e3 = hn.parse(t4.innerHTML).getDocument();
    }
    return e3.toSerializableDocument().toJSONString();
  }, "text/html": function(t4) {
    let e3;
    if (t4 instanceof an) e3 = Si.render(t4);
    else {
      if (!(t4 instanceof HTMLElement)) throw new Error("unserializable object");
      e3 = t4.cloneNode(true);
    }
    return Array.from(e3.querySelectorAll("[data-trix-serialize=false]")).forEach((t5) => {
      S(t5);
    }), An.forEach((t5) => {
      Array.from(e3.querySelectorAll("[".concat(t5, "]"))).forEach((e4) => {
        e4.removeAttribute(t5);
      });
    }), Array.from(e3.querySelectorAll(xn)).forEach((t5) => {
      try {
        const e4 = JSON.parse(t5.getAttribute(yn));
        t5.removeAttribute(yn);
        for (const i3 in e4) {
          const n3 = e4[i3];
          t5.setAttribute(i3, n3);
        }
      } catch (t6) {
      }
    }), e3.innerHTML.replace(Cn, "");
  } };
  var Sn = Object.freeze({ __proto__: null });
  var Rn = class extends q {
    constructor(t4, e3) {
      super(...arguments), this.attachmentManager = t4, this.attachment = e3, this.id = this.attachment.id, this.file = this.attachment.file;
    }
    remove() {
      return this.attachmentManager.requestRemovalOfAttachment(this.attachment);
    }
  };
  Rn.proxyMethod("attachment.getAttribute"), Rn.proxyMethod("attachment.hasAttribute"), Rn.proxyMethod("attachment.setAttribute"), Rn.proxyMethod("attachment.getAttributes"), Rn.proxyMethod("attachment.setAttributes"), Rn.proxyMethod("attachment.isPending"), Rn.proxyMethod("attachment.isPreviewable"), Rn.proxyMethod("attachment.getURL"), Rn.proxyMethod("attachment.getHref"), Rn.proxyMethod("attachment.getFilename"), Rn.proxyMethod("attachment.getFilesize"), Rn.proxyMethod("attachment.getFormattedFilesize"), Rn.proxyMethod("attachment.getExtension"), Rn.proxyMethod("attachment.getContentType"), Rn.proxyMethod("attachment.getFile"), Rn.proxyMethod("attachment.setFile"), Rn.proxyMethod("attachment.releaseFile"), Rn.proxyMethod("attachment.getUploadProgress"), Rn.proxyMethod("attachment.setUploadProgress");
  var kn = class extends q {
    constructor() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), this.managedAttachments = {}, Array.from(t4).forEach((t5) => {
        this.manageAttachment(t5);
      });
    }
    getAttachments() {
      const t4 = [];
      for (const e3 in this.managedAttachments) {
        const i3 = this.managedAttachments[e3];
        t4.push(i3);
      }
      return t4;
    }
    manageAttachment(t4) {
      return this.managedAttachments[t4.id] || (this.managedAttachments[t4.id] = new Rn(this, t4)), this.managedAttachments[t4.id];
    }
    attachmentIsManaged(t4) {
      return t4.id in this.managedAttachments;
    }
    requestRemovalOfAttachment(t4) {
      var e3, i3;
      if (this.attachmentIsManaged(t4)) return null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.attachmentManagerDidRequestRemovalOfAttachment) || void 0 === i3 ? void 0 : i3.call(e3, t4);
    }
    unmanageAttachment(t4) {
      const e3 = this.managedAttachments[t4.id];
      return delete this.managedAttachments[t4.id], e3;
    }
  };
  var Tn = class {
    constructor(t4) {
      this.composition = t4, this.document = this.composition.document;
      const e3 = this.composition.getSelectedRange();
      this.startPosition = e3[0], this.endPosition = e3[1], this.startLocation = this.document.locationFromPosition(this.startPosition), this.endLocation = this.document.locationFromPosition(this.endPosition), this.block = this.document.getBlockAtIndex(this.endLocation.index), this.breaksOnReturn = this.block.breaksOnReturn(), this.previousCharacter = this.block.text.getStringAtPosition(this.endLocation.offset - 1), this.nextCharacter = this.block.text.getStringAtPosition(this.endLocation.offset);
    }
    shouldInsertBlockBreak() {
      return this.block.hasAttributes() && this.block.isListItem() && !this.block.isEmpty() ? 0 !== this.startLocation.offset : this.breaksOnReturn && "\n" !== this.nextCharacter;
    }
    shouldBreakFormattedBlock() {
      return this.block.hasAttributes() && !this.block.isListItem() && (this.breaksOnReturn && "\n" === this.nextCharacter || "\n" === this.previousCharacter);
    }
    shouldDecreaseListLevel() {
      return this.block.hasAttributes() && this.block.isListItem() && this.block.isEmpty();
    }
    shouldPrependListItem() {
      return this.block.isListItem() && 0 === this.startLocation.offset && !this.block.isEmpty();
    }
    shouldRemoveLastBlockAttribute() {
      return this.block.hasAttributes() && !this.block.isListItem() && this.block.isEmpty();
    }
  };
  var wn = class extends q {
    constructor() {
      super(...arguments), this.document = new an(), this.attachments = [], this.currentAttributes = {}, this.revision = 0;
    }
    setDocument(t4) {
      var e3, i3;
      if (!t4.isEqualTo(this.document)) return this.document = t4, this.refreshAttachments(), this.revision++, null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.compositionDidChangeDocument) || void 0 === i3 ? void 0 : i3.call(e3, t4);
    }
    getSnapshot() {
      return { document: this.document, selectedRange: this.getSelectedRange() };
    }
    loadSnapshot(t4) {
      var e3, i3, n3, r3;
      let { document: o3, selectedRange: s3 } = t4;
      return null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.compositionWillLoadSnapshot) || void 0 === i3 || i3.call(e3), this.setDocument(null != o3 ? o3 : new an()), this.setSelection(null != s3 ? s3 : [0, 0]), null === (n3 = this.delegate) || void 0 === n3 || null === (r3 = n3.compositionDidLoadSnapshot) || void 0 === r3 ? void 0 : r3.call(n3);
    }
    insertText(t4) {
      let { updatePosition: e3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { updatePosition: true };
      const i3 = this.getSelectedRange();
      this.setDocument(this.document.insertTextAtRange(t4, i3));
      const n3 = i3[0], r3 = n3 + t4.getLength();
      return e3 && this.setSelection(r3), this.notifyDelegateOfInsertionAtRange([n3, r3]);
    }
    insertBlock() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Xi();
      const e3 = new an([t4]);
      return this.insertDocument(e3);
    }
    insertDocument() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new an();
      const e3 = this.getSelectedRange();
      this.setDocument(this.document.insertDocumentAtRange(t4, e3));
      const i3 = e3[0], n3 = i3 + t4.getLength();
      return this.setSelection(n3), this.notifyDelegateOfInsertionAtRange([i3, n3]);
    }
    insertString(t4, e3) {
      const i3 = this.getCurrentTextAttributes(), n3 = Yi.textForStringWithAttributes(t4, i3);
      return this.insertText(n3, e3);
    }
    insertBlockBreak() {
      const t4 = this.getSelectedRange();
      this.setDocument(this.document.insertBlockBreakAtRange(t4));
      const e3 = t4[0], i3 = e3 + 1;
      return this.setSelection(i3), this.notifyDelegateOfInsertionAtRange([e3, i3]);
    }
    insertLineBreak() {
      const t4 = new Tn(this);
      if (t4.shouldDecreaseListLevel()) return this.decreaseListLevel(), this.setSelection(t4.startPosition);
      if (t4.shouldPrependListItem()) {
        const e3 = new an([t4.block.copyWithoutText()]);
        return this.insertDocument(e3);
      }
      return t4.shouldInsertBlockBreak() ? this.insertBlockBreak() : t4.shouldRemoveLastBlockAttribute() ? this.removeLastBlockAttribute() : t4.shouldBreakFormattedBlock() ? this.breakFormattedBlock(t4) : this.insertString("\n");
    }
    insertHTML(t4) {
      const e3 = hn.parse(t4, { purifyOptions: { SAFE_FOR_XML: true } }).getDocument(), i3 = this.getSelectedRange();
      this.setDocument(this.document.mergeDocumentAtRange(e3, i3));
      const n3 = i3[0], r3 = n3 + e3.getLength() - 1;
      return this.setSelection(r3), this.notifyDelegateOfInsertionAtRange([n3, r3]);
    }
    replaceHTML(t4) {
      const e3 = hn.parse(t4).getDocument().copyUsingObjectsFromDocument(this.document), i3 = this.getLocationRange({ strict: false }), n3 = this.document.rangeFromLocationRange(i3);
      return this.setDocument(e3), this.setSelection(n3);
    }
    insertFile(t4) {
      return this.insertFiles([t4]);
    }
    insertFiles(t4) {
      const e3 = [];
      return Array.from(t4).forEach((t5) => {
        var i3;
        if (null !== (i3 = this.delegate) && void 0 !== i3 && i3.compositionShouldAcceptFile(t5)) {
          const i4 = Vi.attachmentForFile(t5);
          e3.push(i4);
        }
      }), this.insertAttachments(e3);
    }
    insertAttachment(t4) {
      return this.insertAttachments([t4]);
    }
    insertAttachments(t4) {
      let e3 = new Yi();
      return Array.from(t4).forEach((t5) => {
        var n3;
        const r3 = t5.getType(), o3 = null === (n3 = i[r3]) || void 0 === n3 ? void 0 : n3.presentation, s3 = this.getCurrentTextAttributes();
        o3 && (s3.presentation = o3);
        const a3 = Yi.textForAttachmentWithAttributes(t5, s3);
        e3 = e3.appendText(a3);
      }), this.insertText(e3);
    }
    shouldManageDeletingInDirection(t4) {
      const e3 = this.getLocationRange();
      if (Lt(e3)) {
        if ("backward" === t4 && 0 === e3[0].offset) return true;
        if (this.shouldManageMovingCursorInDirection(t4)) return true;
      } else if (e3[0].index !== e3[1].index) return true;
      return false;
    }
    deleteInDirection(t4) {
      let e3, i3, n3, { length: r3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      const o3 = this.getLocationRange();
      let s3 = this.getSelectedRange();
      const a3 = Lt(s3);
      if (a3 ? i3 = "backward" === t4 && 0 === o3[0].offset : n3 = o3[0].index !== o3[1].index, i3 && this.canDecreaseBlockAttributeLevel()) {
        const t5 = this.getBlock();
        if (t5.isListItem() ? this.decreaseListLevel() : this.decreaseBlockAttributeLevel(), this.setSelection(s3[0]), t5.isEmpty()) return false;
      }
      return a3 && (s3 = this.getExpandedRangeInDirection(t4, { length: r3 }), "backward" === t4 && (e3 = this.getAttachmentAtRange(s3))), e3 ? (this.editAttachment(e3), false) : (this.setDocument(this.document.removeTextAtRange(s3)), this.setSelection(s3[0]), !i3 && !n3 && void 0);
    }
    moveTextFromRange(t4) {
      const [e3] = Array.from(this.getSelectedRange());
      return this.setDocument(this.document.moveTextFromRangeToPosition(t4, e3)), this.setSelection(e3);
    }
    removeAttachment(t4) {
      const e3 = this.document.getRangeOfAttachment(t4);
      if (e3) return this.stopEditingAttachment(), this.setDocument(this.document.removeTextAtRange(e3)), this.setSelection(e3[0]);
    }
    removeLastBlockAttribute() {
      const [t4, e3] = Array.from(this.getSelectedRange()), i3 = this.document.getBlockAtPosition(e3);
      return this.removeCurrentAttribute(i3.getLastAttribute()), this.setSelection(t4);
    }
    insertPlaceholder() {
      return this.placeholderPosition = this.getPosition(), this.insertString(" ");
    }
    selectPlaceholder() {
      if (null != this.placeholderPosition) return this.setSelectedRange([this.placeholderPosition, this.placeholderPosition + 1]), this.getSelectedRange();
    }
    forgetPlaceholder() {
      this.placeholderPosition = null;
    }
    hasCurrentAttribute(t4) {
      const e3 = this.currentAttributes[t4];
      return null != e3 && false !== e3;
    }
    toggleCurrentAttribute(t4) {
      const e3 = !this.currentAttributes[t4];
      return e3 ? this.setCurrentAttribute(t4, e3) : this.removeCurrentAttribute(t4);
    }
    canSetCurrentAttribute(t4) {
      return mt(t4) ? this.canSetCurrentBlockAttribute(t4) : this.canSetCurrentTextAttribute(t4);
    }
    canSetCurrentTextAttribute(t4) {
      const e3 = this.getSelectedDocument();
      if (e3) {
        for (const t5 of Array.from(e3.getAttachments())) if (!t5.hasContent()) return false;
        return true;
      }
    }
    canSetCurrentBlockAttribute(t4) {
      const e3 = this.getBlock();
      if (e3) return !e3.isTerminalBlock();
    }
    setCurrentAttribute(t4, e3) {
      return mt(t4) ? this.setBlockAttribute(t4, e3) : (this.setTextAttribute(t4, e3), this.currentAttributes[t4] = e3, this.notifyDelegateOfCurrentAttributesChange());
    }
    setHTMLAtributeAtPosition(t4, e3, i3) {
      var n3;
      const r3 = this.document.getBlockAtPosition(t4), o3 = null === (n3 = mt(r3.getLastAttribute())) || void 0 === n3 ? void 0 : n3.htmlAttributes;
      if (r3 && null != o3 && o3.includes(e3)) {
        const n4 = this.document.setHTMLAttributeAtPosition(t4, e3, i3);
        this.setDocument(n4);
      }
    }
    setTextAttribute(t4, e3) {
      const i3 = this.getSelectedRange();
      if (!i3) return;
      const [n3, r3] = Array.from(i3);
      if (n3 !== r3) return this.setDocument(this.document.addAttributeAtRange(t4, e3, i3));
      if ("href" === t4) {
        const t5 = Yi.textForStringWithAttributes(e3, { href: e3 });
        return this.insertText(t5);
      }
    }
    setBlockAttribute(t4, e3) {
      const i3 = this.getSelectedRange();
      if (this.canSetCurrentAttribute(t4)) return this.setDocument(this.document.applyBlockAttributeAtRange(t4, e3, i3)), this.setSelection(i3);
    }
    removeCurrentAttribute(t4) {
      return mt(t4) ? (this.removeBlockAttribute(t4), this.updateCurrentAttributes()) : (this.removeTextAttribute(t4), delete this.currentAttributes[t4], this.notifyDelegateOfCurrentAttributesChange());
    }
    removeTextAttribute(t4) {
      const e3 = this.getSelectedRange();
      if (e3) return this.setDocument(this.document.removeAttributeAtRange(t4, e3));
    }
    removeBlockAttribute(t4) {
      const e3 = this.getSelectedRange();
      if (e3) return this.setDocument(this.document.removeAttributeAtRange(t4, e3));
    }
    canDecreaseNestingLevel() {
      var t4;
      return (null === (t4 = this.getBlock()) || void 0 === t4 ? void 0 : t4.getNestingLevel()) > 0;
    }
    canIncreaseNestingLevel() {
      var t4;
      const e3 = this.getBlock();
      if (e3) {
        if (null === (t4 = mt(e3.getLastNestableAttribute())) || void 0 === t4 || !t4.listAttribute) return e3.getNestingLevel() > 0;
        {
          const t5 = this.getPreviousBlock();
          if (t5) return function() {
            let t6 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
            return ot((arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []).slice(0, t6.length), t6);
          }(t5.getListItemAttributes(), e3.getListItemAttributes());
        }
      }
    }
    decreaseNestingLevel() {
      const t4 = this.getBlock();
      if (t4) return this.setDocument(this.document.replaceBlock(t4, t4.decreaseNestingLevel()));
    }
    increaseNestingLevel() {
      const t4 = this.getBlock();
      if (t4) return this.setDocument(this.document.replaceBlock(t4, t4.increaseNestingLevel()));
    }
    canDecreaseBlockAttributeLevel() {
      var t4;
      return (null === (t4 = this.getBlock()) || void 0 === t4 ? void 0 : t4.getAttributeLevel()) > 0;
    }
    decreaseBlockAttributeLevel() {
      var t4;
      const e3 = null === (t4 = this.getBlock()) || void 0 === t4 ? void 0 : t4.getLastAttribute();
      if (e3) return this.removeCurrentAttribute(e3);
    }
    decreaseListLevel() {
      let [t4] = Array.from(this.getSelectedRange());
      const { index: e3 } = this.document.locationFromPosition(t4);
      let i3 = e3;
      const n3 = this.getBlock().getAttributeLevel();
      let r3 = this.document.getBlockAtIndex(i3 + 1);
      for (; r3 && r3.isListItem() && !(r3.getAttributeLevel() <= n3); ) i3++, r3 = this.document.getBlockAtIndex(i3 + 1);
      t4 = this.document.positionFromLocation({ index: e3, offset: 0 });
      const o3 = this.document.positionFromLocation({ index: i3, offset: 0 });
      return this.setDocument(this.document.removeLastListAttributeAtRange([t4, o3]));
    }
    updateCurrentAttributes() {
      const t4 = this.getSelectedRange({ ignoreLock: true });
      if (t4) {
        const e3 = this.document.getCommonAttributesAtRange(t4);
        if (Array.from(gt()).forEach((t5) => {
          e3[t5] || this.canSetCurrentAttribute(t5) || (e3[t5] = false);
        }), !Tt(e3, this.currentAttributes)) return this.currentAttributes = e3, this.notifyDelegateOfCurrentAttributesChange();
      }
    }
    getCurrentAttributes() {
      return m.call({}, this.currentAttributes);
    }
    getCurrentTextAttributes() {
      const t4 = {};
      for (const e3 in this.currentAttributes) {
        const i3 = this.currentAttributes[e3];
        false !== i3 && ft(e3) && (t4[e3] = i3);
      }
      return t4;
    }
    freezeSelection() {
      return this.setCurrentAttribute("frozen", true);
    }
    thawSelection() {
      return this.removeCurrentAttribute("frozen");
    }
    hasFrozenSelection() {
      return this.hasCurrentAttribute("frozen");
    }
    setSelection(t4) {
      var e3;
      const i3 = this.document.locationRangeFromRange(t4);
      return null === (e3 = this.delegate) || void 0 === e3 ? void 0 : e3.compositionDidRequestChangingSelectionToLocationRange(i3);
    }
    getSelectedRange() {
      const t4 = this.getLocationRange();
      if (t4) return this.document.rangeFromLocationRange(t4);
    }
    setSelectedRange(t4) {
      const e3 = this.document.locationRangeFromRange(t4);
      return this.getSelectionManager().setLocationRange(e3);
    }
    getPosition() {
      const t4 = this.getLocationRange();
      if (t4) return this.document.positionFromLocation(t4[0]);
    }
    getLocationRange(t4) {
      return this.targetLocationRange ? this.targetLocationRange : this.getSelectionManager().getLocationRange(t4) || wt({ index: 0, offset: 0 });
    }
    withTargetLocationRange(t4, e3) {
      let i3;
      this.targetLocationRange = t4;
      try {
        i3 = e3();
      } finally {
        this.targetLocationRange = null;
      }
      return i3;
    }
    withTargetRange(t4, e3) {
      const i3 = this.document.locationRangeFromRange(t4);
      return this.withTargetLocationRange(i3, e3);
    }
    withTargetDOMRange(t4, e3) {
      const i3 = this.createLocationRangeFromDOMRange(t4, { strict: false });
      return this.withTargetLocationRange(i3, e3);
    }
    getExpandedRangeInDirection(t4) {
      let { length: e3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, [i3, n3] = Array.from(this.getSelectedRange());
      return "backward" === t4 ? e3 ? i3 -= e3 : i3 = this.translateUTF16PositionFromOffset(i3, -1) : e3 ? n3 += e3 : n3 = this.translateUTF16PositionFromOffset(n3, 1), wt([i3, n3]);
    }
    shouldManageMovingCursorInDirection(t4) {
      if (this.editingAttachment) return true;
      const e3 = this.getExpandedRangeInDirection(t4);
      return null != this.getAttachmentAtRange(e3);
    }
    moveCursorInDirection(t4) {
      let e3, i3;
      if (this.editingAttachment) i3 = this.document.getRangeOfAttachment(this.editingAttachment);
      else {
        const n3 = this.getSelectedRange();
        i3 = this.getExpandedRangeInDirection(t4), e3 = !Dt(n3, i3);
      }
      if ("backward" === t4 ? this.setSelectedRange(i3[0]) : this.setSelectedRange(i3[1]), e3) {
        const t5 = this.getAttachmentAtRange(i3);
        if (t5) return this.editAttachment(t5);
      }
    }
    expandSelectionInDirection(t4) {
      let { length: e3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      const i3 = this.getExpandedRangeInDirection(t4, { length: e3 });
      return this.setSelectedRange(i3);
    }
    expandSelectionForEditing() {
      if (this.hasCurrentAttribute("href")) return this.expandSelectionAroundCommonAttribute("href");
    }
    expandSelectionAroundCommonAttribute(t4) {
      const e3 = this.getPosition(), i3 = this.document.getRangeOfCommonAttributeAtPosition(t4, e3);
      return this.setSelectedRange(i3);
    }
    selectionContainsAttachments() {
      var t4;
      return (null === (t4 = this.getSelectedAttachments()) || void 0 === t4 ? void 0 : t4.length) > 0;
    }
    selectionIsInCursorTarget() {
      return this.editingAttachment || this.positionIsCursorTarget(this.getPosition());
    }
    positionIsCursorTarget(t4) {
      const e3 = this.document.locationFromPosition(t4);
      if (e3) return this.locationIsCursorTarget(e3);
    }
    positionIsBlockBreak(t4) {
      var e3;
      return null === (e3 = this.document.getPieceAtPosition(t4)) || void 0 === e3 ? void 0 : e3.isBlockBreak();
    }
    getSelectedDocument() {
      const t4 = this.getSelectedRange();
      if (t4) return this.document.getDocumentAtRange(t4);
    }
    getSelectedAttachments() {
      var t4;
      return null === (t4 = this.getSelectedDocument()) || void 0 === t4 ? void 0 : t4.getAttachments();
    }
    getAttachments() {
      return this.attachments.slice(0);
    }
    refreshAttachments() {
      const t4 = this.document.getAttachments(), { added: e3, removed: i3 } = function() {
        let t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
        const i4 = [], n3 = [], r3 = /* @__PURE__ */ new Set();
        t5.forEach((t6) => {
          r3.add(t6);
        });
        const o3 = /* @__PURE__ */ new Set();
        return e4.forEach((t6) => {
          o3.add(t6), r3.has(t6) || i4.push(t6);
        }), t5.forEach((t6) => {
          o3.has(t6) || n3.push(t6);
        }), { added: i4, removed: n3 };
      }(this.attachments, t4);
      return this.attachments = t4, Array.from(i3).forEach((t5) => {
        var e4, i4;
        t5.delegate = null, null === (e4 = this.delegate) || void 0 === e4 || null === (i4 = e4.compositionDidRemoveAttachment) || void 0 === i4 || i4.call(e4, t5);
      }), (() => {
        const t5 = [];
        return Array.from(e3).forEach((e4) => {
          var i4, n3;
          e4.delegate = this, t5.push(null === (i4 = this.delegate) || void 0 === i4 || null === (n3 = i4.compositionDidAddAttachment) || void 0 === n3 ? void 0 : n3.call(i4, e4));
        }), t5;
      })();
    }
    attachmentDidChangeAttributes(t4) {
      var e3, i3;
      return this.revision++, null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.compositionDidEditAttachment) || void 0 === i3 ? void 0 : i3.call(e3, t4);
    }
    attachmentDidChangePreviewURL(t4) {
      var e3, i3;
      return this.revision++, null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.compositionDidChangeAttachmentPreviewURL) || void 0 === i3 ? void 0 : i3.call(e3, t4);
    }
    editAttachment(t4, e3) {
      var i3, n3;
      if (t4 !== this.editingAttachment) return this.stopEditingAttachment(), this.editingAttachment = t4, null === (i3 = this.delegate) || void 0 === i3 || null === (n3 = i3.compositionDidStartEditingAttachment) || void 0 === n3 ? void 0 : n3.call(i3, this.editingAttachment, e3);
    }
    stopEditingAttachment() {
      var t4, e3;
      this.editingAttachment && (null === (t4 = this.delegate) || void 0 === t4 || null === (e3 = t4.compositionDidStopEditingAttachment) || void 0 === e3 || e3.call(t4, this.editingAttachment), this.editingAttachment = null);
    }
    updateAttributesForAttachment(t4, e3) {
      return this.setDocument(this.document.updateAttributesForAttachment(t4, e3));
    }
    removeAttributeForAttachment(t4, e3) {
      return this.setDocument(this.document.removeAttributeForAttachment(t4, e3));
    }
    breakFormattedBlock(t4) {
      let { document: e3 } = t4;
      const { block: i3 } = t4;
      let n3 = t4.startPosition, r3 = [n3 - 1, n3];
      i3.getBlockBreakPosition() === t4.startLocation.offset ? (i3.breaksOnReturn() && "\n" === t4.nextCharacter ? n3 += 1 : e3 = e3.removeTextAtRange(r3), r3 = [n3, n3]) : "\n" === t4.nextCharacter ? "\n" === t4.previousCharacter ? r3 = [n3 - 1, n3 + 1] : (r3 = [n3, n3 + 1], n3 += 1) : t4.startLocation.offset - 1 != 0 && (n3 += 1);
      const o3 = new an([i3.removeLastAttribute().copyWithoutText()]);
      return this.setDocument(e3.insertDocumentAtRange(o3, r3)), this.setSelection(n3);
    }
    getPreviousBlock() {
      const t4 = this.getLocationRange();
      if (t4) {
        const { index: e3 } = t4[0];
        if (e3 > 0) return this.document.getBlockAtIndex(e3 - 1);
      }
    }
    getBlock() {
      const t4 = this.getLocationRange();
      if (t4) return this.document.getBlockAtIndex(t4[0].index);
    }
    getAttachmentAtRange(t4) {
      const e3 = this.document.getDocumentAtRange(t4);
      if (e3.toString() === "".concat("\uFFFC", "\n")) return e3.getAttachments()[0];
    }
    notifyDelegateOfCurrentAttributesChange() {
      var t4, e3;
      return null === (t4 = this.delegate) || void 0 === t4 || null === (e3 = t4.compositionDidChangeCurrentAttributes) || void 0 === e3 ? void 0 : e3.call(t4, this.currentAttributes);
    }
    notifyDelegateOfInsertionAtRange(t4) {
      var e3, i3;
      return null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.compositionDidPerformInsertionAtRange) || void 0 === i3 ? void 0 : i3.call(e3, t4);
    }
    translateUTF16PositionFromOffset(t4, e3) {
      const i3 = this.document.toUTF16String(), n3 = i3.offsetFromUCS2Offset(t4);
      return i3.offsetToUCS2Offset(n3 + e3);
    }
  };
  wn.proxyMethod("getSelectionManager().getPointRange"), wn.proxyMethod("getSelectionManager().setLocationRangeFromPointRange"), wn.proxyMethod("getSelectionManager().createLocationRangeFromDOMRange"), wn.proxyMethod("getSelectionManager().locationIsCursorTarget"), wn.proxyMethod("getSelectionManager().selectionIsExpanded"), wn.proxyMethod("delegate?.getSelectionManager");
  var Ln = class extends q {
    constructor(t4) {
      super(...arguments), this.composition = t4, this.undoEntries = [], this.redoEntries = [];
    }
    recordUndoEntry(t4) {
      let { context: e3, consolidatable: i3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      const n3 = this.undoEntries.slice(-1)[0];
      if (!i3 || !Dn(n3, t4, e3)) {
        const i4 = this.createEntry({ description: t4, context: e3 });
        this.undoEntries.push(i4), this.redoEntries = [];
      }
    }
    undo() {
      const t4 = this.undoEntries.pop();
      if (t4) {
        const e3 = this.createEntry(t4);
        return this.redoEntries.push(e3), this.composition.loadSnapshot(t4.snapshot);
      }
    }
    redo() {
      const t4 = this.redoEntries.pop();
      if (t4) {
        const e3 = this.createEntry(t4);
        return this.undoEntries.push(e3), this.composition.loadSnapshot(t4.snapshot);
      }
    }
    canUndo() {
      return this.undoEntries.length > 0;
    }
    canRedo() {
      return this.redoEntries.length > 0;
    }
    createEntry() {
      let { description: t4, context: e3 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      return { description: null == t4 ? void 0 : t4.toString(), context: JSON.stringify(e3), snapshot: this.composition.getSnapshot() };
    }
  };
  var Dn = (t4, e3, i3) => (null == t4 ? void 0 : t4.description) === (null == e3 ? void 0 : e3.toString()) && (null == t4 ? void 0 : t4.context) === JSON.stringify(i3);
  var Nn = "attachmentGallery";
  var In = class {
    constructor(t4) {
      this.document = t4.document, this.selectedRange = t4.selectedRange;
    }
    perform() {
      return this.removeBlockAttribute(), this.applyBlockAttribute();
    }
    getSnapshot() {
      return { document: this.document, selectedRange: this.selectedRange };
    }
    removeBlockAttribute() {
      return this.findRangesOfBlocks().map((t4) => this.document = this.document.removeAttributeAtRange(Nn, t4));
    }
    applyBlockAttribute() {
      let t4 = 0;
      this.findRangesOfPieces().forEach((e3) => {
        e3[1] - e3[0] > 1 && (e3[0] += t4, e3[1] += t4, "\n" !== this.document.getCharacterAtPosition(e3[1]) && (this.document = this.document.insertBlockBreakAtRange(e3[1]), e3[1] < this.selectedRange[1] && this.moveSelectedRangeForward(), e3[1]++, t4++), 0 !== e3[0] && "\n" !== this.document.getCharacterAtPosition(e3[0] - 1) && (this.document = this.document.insertBlockBreakAtRange(e3[0]), e3[0] < this.selectedRange[0] && this.moveSelectedRangeForward(), e3[0]++, t4++), this.document = this.document.applyBlockAttributeAtRange(Nn, true, e3));
      });
    }
    findRangesOfBlocks() {
      return this.document.findRangesForBlockAttribute(Nn);
    }
    findRangesOfPieces() {
      return this.document.findRangesForTextAttribute("presentation", { withValue: "gallery" });
    }
    moveSelectedRangeForward() {
      this.selectedRange[0] += 1, this.selectedRange[1] += 1;
    }
  };
  var On = function(t4) {
    const e3 = new In(t4);
    return e3.perform(), e3.getSnapshot();
  };
  var Fn = [On];
  var Pn = class {
    constructor(t4, e3, i3) {
      this.insertFiles = this.insertFiles.bind(this), this.composition = t4, this.selectionManager = e3, this.element = i3, this.undoManager = new Ln(this.composition), this.filters = Fn.slice(0);
    }
    loadDocument(t4) {
      return this.loadSnapshot({ document: t4, selectedRange: [0, 0] });
    }
    loadHTML() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
      const e3 = hn.parse(t4, { referenceElement: this.element }).getDocument();
      return this.loadDocument(e3);
    }
    loadJSON(t4) {
      let { document: e3, selectedRange: i3 } = t4;
      return e3 = an.fromJSON(e3), this.loadSnapshot({ document: e3, selectedRange: i3 });
    }
    loadSnapshot(t4) {
      return this.undoManager = new Ln(this.composition), this.composition.loadSnapshot(t4);
    }
    getDocument() {
      return this.composition.document;
    }
    getSelectedDocument() {
      return this.composition.getSelectedDocument();
    }
    getSnapshot() {
      return this.composition.getSnapshot();
    }
    toJSON() {
      return this.getSnapshot();
    }
    deleteInDirection(t4) {
      return this.composition.deleteInDirection(t4);
    }
    insertAttachment(t4) {
      return this.composition.insertAttachment(t4);
    }
    insertAttachments(t4) {
      return this.composition.insertAttachments(t4);
    }
    insertDocument(t4) {
      return this.composition.insertDocument(t4);
    }
    insertFile(t4) {
      return this.composition.insertFile(t4);
    }
    insertFiles(t4) {
      return this.composition.insertFiles(t4);
    }
    insertHTML(t4) {
      return this.composition.insertHTML(t4);
    }
    insertString(t4) {
      return this.composition.insertString(t4);
    }
    insertText(t4) {
      return this.composition.insertText(t4);
    }
    insertLineBreak() {
      return this.composition.insertLineBreak();
    }
    getSelectedRange() {
      return this.composition.getSelectedRange();
    }
    getPosition() {
      return this.composition.getPosition();
    }
    getClientRectAtPosition(t4) {
      const e3 = this.getDocument().locationRangeFromRange([t4, t4 + 1]);
      return this.selectionManager.getClientRectAtLocationRange(e3);
    }
    expandSelectionInDirection(t4) {
      return this.composition.expandSelectionInDirection(t4);
    }
    moveCursorInDirection(t4) {
      return this.composition.moveCursorInDirection(t4);
    }
    setSelectedRange(t4) {
      return this.composition.setSelectedRange(t4);
    }
    activateAttribute(t4) {
      let e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
      return this.composition.setCurrentAttribute(t4, e3);
    }
    attributeIsActive(t4) {
      return this.composition.hasCurrentAttribute(t4);
    }
    canActivateAttribute(t4) {
      return this.composition.canSetCurrentAttribute(t4);
    }
    deactivateAttribute(t4) {
      return this.composition.removeCurrentAttribute(t4);
    }
    setHTMLAtributeAtPosition(t4, e3, i3) {
      this.composition.setHTMLAtributeAtPosition(t4, e3, i3);
    }
    canDecreaseNestingLevel() {
      return this.composition.canDecreaseNestingLevel();
    }
    canIncreaseNestingLevel() {
      return this.composition.canIncreaseNestingLevel();
    }
    decreaseNestingLevel() {
      if (this.canDecreaseNestingLevel()) return this.composition.decreaseNestingLevel();
    }
    increaseNestingLevel() {
      if (this.canIncreaseNestingLevel()) return this.composition.increaseNestingLevel();
    }
    canRedo() {
      return this.undoManager.canRedo();
    }
    canUndo() {
      return this.undoManager.canUndo();
    }
    recordUndoEntry(t4) {
      let { context: e3, consolidatable: i3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      return this.undoManager.recordUndoEntry(t4, { context: e3, consolidatable: i3 });
    }
    redo() {
      if (this.canRedo()) return this.undoManager.redo();
    }
    undo() {
      if (this.canUndo()) return this.undoManager.undo();
    }
  };
  var Mn = class {
    constructor(t4) {
      this.element = t4;
    }
    findLocationFromContainerAndOffset(t4, e3) {
      let { strict: i3 } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : { strict: true }, n3 = 0, r3 = false;
      const o3 = { index: 0, offset: 0 }, s3 = this.findAttachmentElementParentForNode(t4);
      s3 && (t4 = s3.parentNode, e3 = E(s3));
      const a3 = R(this.element, { usingFilter: Wn });
      for (; a3.nextNode(); ) {
        const s4 = a3.currentNode;
        if (s4 === t4 && B(t4)) {
          F(s4) || (o3.offset += e3);
          break;
        }
        if (s4.parentNode === t4) {
          if (n3++ === e3) break;
        } else if (!C(t4, s4) && n3 > 0) break;
        N(s4, { strict: i3 }) ? (r3 && o3.index++, o3.offset = 0, r3 = true) : o3.offset += Bn(s4);
      }
      return o3;
    }
    findContainerAndOffsetFromLocation(t4) {
      let e3, i3;
      if (0 === t4.index && 0 === t4.offset) {
        for (e3 = this.element, i3 = 0; e3.firstChild; ) if (e3 = e3.firstChild, D(e3)) {
          i3 = 1;
          break;
        }
        return [e3, i3];
      }
      let [n3, r3] = this.findNodeAndOffsetFromLocation(t4);
      if (n3) {
        if (B(n3)) 0 === Bn(n3) ? (e3 = n3.parentNode.parentNode, i3 = E(n3.parentNode), F(n3, { name: "right" }) && i3++) : (e3 = n3, i3 = t4.offset - r3);
        else {
          if (e3 = n3.parentNode, !N(n3.previousSibling) && !D(e3)) for (; n3 === e3.lastChild && (n3 = e3, e3 = e3.parentNode, !D(e3)); ) ;
          i3 = E(n3), 0 !== t4.offset && i3++;
        }
        return [e3, i3];
      }
    }
    findNodeAndOffsetFromLocation(t4) {
      let e3, i3, n3 = 0;
      for (const r3 of this.getSignificantNodesForIndex(t4.index)) {
        const o3 = Bn(r3);
        if (t4.offset <= n3 + o3) if (B(r3)) {
          if (e3 = r3, i3 = n3, t4.offset === i3 && F(e3)) break;
        } else e3 || (e3 = r3, i3 = n3);
        if (n3 += o3, n3 > t4.offset) break;
      }
      return [e3, i3];
    }
    findAttachmentElementParentForNode(t4) {
      for (; t4 && t4 !== this.element; ) {
        if (P(t4)) return t4;
        t4 = t4.parentNode;
      }
    }
    getSignificantNodesForIndex(t4) {
      const e3 = [], i3 = R(this.element, { usingFilter: _n });
      let n3 = false;
      for (; i3.nextNode(); ) {
        const o3 = i3.currentNode;
        var r3;
        if (I(o3)) {
          if (null != r3 ? r3++ : r3 = 0, r3 === t4) n3 = true;
          else if (n3) break;
        } else n3 && e3.push(o3);
      }
      return e3;
    }
  };
  var Bn = function(t4) {
    if (t4.nodeType === Node.TEXT_NODE) {
      if (F(t4)) return 0;
      return t4.textContent.length;
    }
    return "br" === k(t4) || P(t4) ? 1 : 0;
  };
  var _n = function(t4) {
    return jn(t4) === NodeFilter.FILTER_ACCEPT ? Wn(t4) : NodeFilter.FILTER_REJECT;
  };
  var jn = function(t4) {
    return M(t4) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
  };
  var Wn = function(t4) {
    return P(t4.parentNode) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
  };
  var Un = class {
    createDOMRangeFromPoint(t4) {
      let e3, { x: i3, y: n3 } = t4;
      if (document.caretPositionFromPoint) {
        const { offsetNode: t5, offset: r3 } = document.caretPositionFromPoint(i3, n3);
        return e3 = document.createRange(), e3.setStart(t5, r3), e3;
      }
      if (document.caretRangeFromPoint) return document.caretRangeFromPoint(i3, n3);
      if (document.body.createTextRange) {
        const t5 = Mt();
        try {
          const t6 = document.body.createTextRange();
          t6.moveToPoint(i3, n3), t6.select();
        } catch (t6) {
        }
        return e3 = Mt(), Bt(t5), e3;
      }
    }
    getClientRectsForDOMRange(t4) {
      const e3 = Array.from(t4.getClientRects());
      return [e3[0], e3[e3.length - 1]];
    }
  };
  var Vn = class extends q {
    constructor(t4) {
      super(...arguments), this.didMouseDown = this.didMouseDown.bind(this), this.selectionDidChange = this.selectionDidChange.bind(this), this.element = t4, this.locationMapper = new Mn(this.element), this.pointMapper = new Un(), this.lockCount = 0, b("mousedown", { onElement: this.element, withCallback: this.didMouseDown });
    }
    getLocationRange() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      return false === t4.strict ? this.createLocationRangeFromDOMRange(Mt()) : t4.ignoreLock ? this.currentLocationRange : this.lockedLocationRange ? this.lockedLocationRange : this.currentLocationRange;
    }
    setLocationRange(t4) {
      if (this.lockedLocationRange) return;
      t4 = wt(t4);
      const e3 = this.createDOMRangeFromLocationRange(t4);
      e3 && (Bt(e3), this.updateCurrentLocationRange(t4));
    }
    setLocationRangeFromPointRange(t4) {
      t4 = wt(t4);
      const e3 = this.getLocationAtPoint(t4[0]), i3 = this.getLocationAtPoint(t4[1]);
      this.setLocationRange([e3, i3]);
    }
    getClientRectAtLocationRange(t4) {
      const e3 = this.createDOMRangeFromLocationRange(t4);
      if (e3) return this.getClientRectsForDOMRange(e3)[1];
    }
    locationIsCursorTarget(t4) {
      const e3 = Array.from(this.findNodeAndOffsetFromLocation(t4))[0];
      return F(e3);
    }
    lock() {
      0 == this.lockCount++ && (this.updateCurrentLocationRange(), this.lockedLocationRange = this.getLocationRange());
    }
    unlock() {
      if (0 == --this.lockCount) {
        const { lockedLocationRange: t4 } = this;
        if (this.lockedLocationRange = null, null != t4) return this.setLocationRange(t4);
      }
    }
    clearSelection() {
      var t4;
      return null === (t4 = Pt()) || void 0 === t4 ? void 0 : t4.removeAllRanges();
    }
    selectionIsCollapsed() {
      var t4;
      return true === (null === (t4 = Mt()) || void 0 === t4 ? void 0 : t4.collapsed);
    }
    selectionIsExpanded() {
      return !this.selectionIsCollapsed();
    }
    createLocationRangeFromDOMRange(t4, e3) {
      if (null == t4 || !this.domRangeWithinElement(t4)) return;
      const i3 = this.findLocationFromContainerAndOffset(t4.startContainer, t4.startOffset, e3);
      if (!i3) return;
      const n3 = t4.collapsed ? void 0 : this.findLocationFromContainerAndOffset(t4.endContainer, t4.endOffset, e3);
      return wt([i3, n3]);
    }
    didMouseDown() {
      return this.pauseTemporarily();
    }
    pauseTemporarily() {
      let t4;
      this.paused = true;
      const e3 = () => {
        if (this.paused = false, clearTimeout(i3), Array.from(t4).forEach((t5) => {
          t5.destroy();
        }), C(document, this.element)) return this.selectionDidChange();
      }, i3 = setTimeout(e3, 200);
      t4 = ["mousemove", "keydown"].map((t5) => b(t5, { onElement: document, withCallback: e3 }));
    }
    selectionDidChange() {
      if (!this.paused && !x(this.element)) return this.updateCurrentLocationRange();
    }
    updateCurrentLocationRange(t4) {
      var e3, i3;
      if ((null != t4 ? t4 : t4 = this.createLocationRangeFromDOMRange(Mt())) && !Dt(t4, this.currentLocationRange)) return this.currentLocationRange = t4, null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.locationRangeDidChange) || void 0 === i3 ? void 0 : i3.call(e3, this.currentLocationRange.slice(0));
    }
    createDOMRangeFromLocationRange(t4) {
      const e3 = this.findContainerAndOffsetFromLocation(t4[0]), i3 = Lt(t4) ? e3 : this.findContainerAndOffsetFromLocation(t4[1]) || e3;
      if (null != e3 && null != i3) {
        const t5 = document.createRange();
        return t5.setStart(...Array.from(e3 || [])), t5.setEnd(...Array.from(i3 || [])), t5;
      }
    }
    getLocationAtPoint(t4) {
      const e3 = this.createDOMRangeFromPoint(t4);
      var i3;
      if (e3) return null === (i3 = this.createLocationRangeFromDOMRange(e3)) || void 0 === i3 ? void 0 : i3[0];
    }
    domRangeWithinElement(t4) {
      return t4.collapsed ? C(this.element, t4.startContainer) : C(this.element, t4.startContainer) && C(this.element, t4.endContainer);
    }
  };
  Vn.proxyMethod("locationMapper.findLocationFromContainerAndOffset"), Vn.proxyMethod("locationMapper.findContainerAndOffsetFromLocation"), Vn.proxyMethod("locationMapper.findNodeAndOffsetFromLocation"), Vn.proxyMethod("pointMapper.createDOMRangeFromPoint"), Vn.proxyMethod("pointMapper.getClientRectsForDOMRange");
  var zn = Object.freeze({ __proto__: null, Attachment: Vi, AttachmentManager: kn, AttachmentPiece: zi, Block: Xi, Composition: wn, Document: an, Editor: Pn, HTMLParser: hn, HTMLSanitizer: di, LineBreakInsertion: Tn, LocationMapper: Mn, ManagedAttachment: Rn, Piece: Wi, PointMapper: Un, SelectionManager: Vn, SplittableList: Hi, StringPiece: qi, Text: Yi, UndoManager: Ln });
  var qn = Object.freeze({ __proto__: null, ObjectView: ie, AttachmentView: pi, BlockView: Ei, DocumentView: Si, PieceView: Ai, PreviewableAttachmentView: vi, TextView: yi });
  var { lang: Hn, css: Jn, keyNames: Kn } = z;
  var Gn = function(t4) {
    return function() {
      const e3 = t4.apply(this, arguments);
      e3.do(), this.undos || (this.undos = []), this.undos.push(e3.undo);
    };
  };
  var Yn = class extends q {
    constructor(t4, e3, i3) {
      let n3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
      super(...arguments), Di(this, "makeElementMutable", Gn(() => ({ do: () => {
        this.element.dataset.trixMutable = true;
      }, undo: () => delete this.element.dataset.trixMutable }))), Di(this, "addToolbar", Gn(() => {
        const t5 = T({ tagName: "div", className: Jn.attachmentToolbar, data: { trixMutable: true }, childNodes: T({ tagName: "div", className: "trix-button-row", childNodes: T({ tagName: "span", className: "trix-button-group trix-button-group--actions", childNodes: T({ tagName: "button", className: "trix-button trix-button--remove", textContent: Hn.remove, attributes: { title: Hn.remove }, data: { trixAction: "remove" } }) }) }) });
        return this.attachment.isPreviewable() && t5.appendChild(T({ tagName: "div", className: Jn.attachmentMetadataContainer, childNodes: T({ tagName: "span", className: Jn.attachmentMetadata, childNodes: [T({ tagName: "span", className: Jn.attachmentName, textContent: this.attachment.getFilename(), attributes: { title: this.attachment.getFilename() } }), T({ tagName: "span", className: Jn.attachmentSize, textContent: this.attachment.getFormattedFilesize() })] }) })), b("click", { onElement: t5, withCallback: this.didClickToolbar }), b("click", { onElement: t5, matchingSelector: "[data-trix-action]", withCallback: this.didClickActionButton }), v("trix-attachment-before-toolbar", { onElement: this.element, attributes: { toolbar: t5, attachment: this.attachment } }), { do: () => this.element.appendChild(t5), undo: () => S(t5) };
      })), Di(this, "installCaptionEditor", Gn(() => {
        const t5 = T({ tagName: "textarea", className: Jn.attachmentCaptionEditor, attributes: { placeholder: Hn.captionPlaceholder }, data: { trixMutable: true } });
        t5.value = this.attachmentPiece.getCaption();
        const e4 = t5.cloneNode();
        e4.classList.add("trix-autoresize-clone"), e4.tabIndex = -1;
        const i4 = function() {
          e4.value = t5.value, t5.style.height = e4.scrollHeight + "px";
        };
        b("input", { onElement: t5, withCallback: i4 }), b("input", { onElement: t5, withCallback: this.didInputCaption }), b("keydown", { onElement: t5, withCallback: this.didKeyDownCaption }), b("change", { onElement: t5, withCallback: this.didChangeCaption }), b("blur", { onElement: t5, withCallback: this.didBlurCaption });
        const n4 = this.element.querySelector("figcaption"), r3 = n4.cloneNode();
        return { do: () => {
          if (n4.style.display = "none", r3.appendChild(t5), r3.appendChild(e4), r3.classList.add("".concat(Jn.attachmentCaption, "--editing")), n4.parentElement.insertBefore(r3, n4), i4(), this.options.editCaption) return Rt(() => t5.focus());
        }, undo() {
          S(r3), n4.style.display = null;
        } };
      })), this.didClickToolbar = this.didClickToolbar.bind(this), this.didClickActionButton = this.didClickActionButton.bind(this), this.didKeyDownCaption = this.didKeyDownCaption.bind(this), this.didInputCaption = this.didInputCaption.bind(this), this.didChangeCaption = this.didChangeCaption.bind(this), this.didBlurCaption = this.didBlurCaption.bind(this), this.attachmentPiece = t4, this.element = e3, this.container = i3, this.options = n3, this.attachment = this.attachmentPiece.attachment, "a" === k(this.element) && (this.element = this.element.firstChild), this.install();
    }
    install() {
      this.makeElementMutable(), this.addToolbar(), this.attachment.isPreviewable() && this.installCaptionEditor();
    }
    uninstall() {
      var t4;
      let e3 = this.undos.pop();
      for (this.savePendingCaption(); e3; ) e3(), e3 = this.undos.pop();
      null === (t4 = this.delegate) || void 0 === t4 || t4.didUninstallAttachmentEditor(this);
    }
    savePendingCaption() {
      if (null != this.pendingCaption) {
        const r3 = this.pendingCaption;
        var t4, e3, i3, n3;
        if (this.pendingCaption = null, r3) null === (t4 = this.delegate) || void 0 === t4 || null === (e3 = t4.attachmentEditorDidRequestUpdatingAttributesForAttachment) || void 0 === e3 || e3.call(t4, { caption: r3 }, this.attachment);
        else null === (i3 = this.delegate) || void 0 === i3 || null === (n3 = i3.attachmentEditorDidRequestRemovingAttributeForAttachment) || void 0 === n3 || n3.call(i3, "caption", this.attachment);
      }
    }
    didClickToolbar(t4) {
      return t4.preventDefault(), t4.stopPropagation();
    }
    didClickActionButton(t4) {
      var e3;
      if ("remove" === t4.target.getAttribute("data-trix-action")) return null === (e3 = this.delegate) || void 0 === e3 ? void 0 : e3.attachmentEditorDidRequestRemovalOfAttachment(this.attachment);
    }
    didKeyDownCaption(t4) {
      var e3, i3;
      if ("return" === Kn[t4.keyCode]) return t4.preventDefault(), this.savePendingCaption(), null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.attachmentEditorDidRequestDeselectingAttachment) || void 0 === i3 ? void 0 : i3.call(e3, this.attachment);
    }
    didInputCaption(t4) {
      this.pendingCaption = t4.target.value.replace(/\s/g, " ").trim();
    }
    didChangeCaption(t4) {
      return this.savePendingCaption();
    }
    didBlurCaption(t4) {
      return this.savePendingCaption();
    }
  };
  var Xn = class extends q {
    constructor(t4, i3) {
      super(...arguments), this.didFocus = this.didFocus.bind(this), this.didBlur = this.didBlur.bind(this), this.didClickAttachment = this.didClickAttachment.bind(this), this.element = t4, this.composition = i3, this.documentView = new Si(this.composition.document, { element: this.element }), b("focus", { onElement: this.element, withCallback: this.didFocus }), b("blur", { onElement: this.element, withCallback: this.didBlur }), b("click", { onElement: this.element, matchingSelector: "a[contenteditable=false]", preventDefault: true }), b("mousedown", { onElement: this.element, matchingSelector: e, withCallback: this.didClickAttachment }), b("click", { onElement: this.element, matchingSelector: "a".concat(e), preventDefault: true });
    }
    didFocus(t4) {
      var e3;
      const i3 = () => {
        var t5, e4;
        if (!this.focused) return this.focused = true, null === (t5 = this.delegate) || void 0 === t5 || null === (e4 = t5.compositionControllerDidFocus) || void 0 === e4 ? void 0 : e4.call(t5);
      };
      return (null === (e3 = this.blurPromise) || void 0 === e3 ? void 0 : e3.then(i3)) || i3();
    }
    didBlur(t4) {
      this.blurPromise = new Promise((t5) => Rt(() => {
        var e3, i3;
        x(this.element) || (this.focused = null, null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.compositionControllerDidBlur) || void 0 === i3 || i3.call(e3));
        return this.blurPromise = null, t5();
      }));
    }
    didClickAttachment(t4, e3) {
      var i3, n3;
      const r3 = this.findAttachmentForElement(e3), o3 = !!y(t4.target, { matchingSelector: "figcaption" });
      return null === (i3 = this.delegate) || void 0 === i3 || null === (n3 = i3.compositionControllerDidSelectAttachment) || void 0 === n3 ? void 0 : n3.call(i3, r3, { editCaption: o3 });
    }
    getSerializableElement() {
      return this.isEditingAttachment() ? this.documentView.shadowElement : this.element;
    }
    render() {
      var t4, e3, i3, n3, r3, o3;
      (this.revision !== this.composition.revision && (this.documentView.setDocument(this.composition.document), this.documentView.render(), this.revision = this.composition.revision), this.canSyncDocumentView() && !this.documentView.isSynced()) && (null === (i3 = this.delegate) || void 0 === i3 || null === (n3 = i3.compositionControllerWillSyncDocumentView) || void 0 === n3 || n3.call(i3), this.documentView.sync(), null === (r3 = this.delegate) || void 0 === r3 || null === (o3 = r3.compositionControllerDidSyncDocumentView) || void 0 === o3 || o3.call(r3));
      return null === (t4 = this.delegate) || void 0 === t4 || null === (e3 = t4.compositionControllerDidRender) || void 0 === e3 ? void 0 : e3.call(t4);
    }
    rerenderViewForObject(t4) {
      return this.invalidateViewForObject(t4), this.render();
    }
    invalidateViewForObject(t4) {
      return this.documentView.invalidateViewForObject(t4);
    }
    isViewCachingEnabled() {
      return this.documentView.isViewCachingEnabled();
    }
    enableViewCaching() {
      return this.documentView.enableViewCaching();
    }
    disableViewCaching() {
      return this.documentView.disableViewCaching();
    }
    refreshViewCache() {
      return this.documentView.garbageCollectCachedViews();
    }
    isEditingAttachment() {
      return !!this.attachmentEditor;
    }
    installAttachmentEditorForAttachment(t4, e3) {
      var i3;
      if ((null === (i3 = this.attachmentEditor) || void 0 === i3 ? void 0 : i3.attachment) === t4) return;
      const n3 = this.documentView.findElementForObject(t4);
      if (!n3) return;
      this.uninstallAttachmentEditor();
      const r3 = this.composition.document.getAttachmentPieceForAttachment(t4);
      this.attachmentEditor = new Yn(r3, n3, this.element, e3), this.attachmentEditor.delegate = this;
    }
    uninstallAttachmentEditor() {
      var t4;
      return null === (t4 = this.attachmentEditor) || void 0 === t4 ? void 0 : t4.uninstall();
    }
    didUninstallAttachmentEditor() {
      return this.attachmentEditor = null, this.render();
    }
    attachmentEditorDidRequestUpdatingAttributesForAttachment(t4, e3) {
      var i3, n3;
      return null === (i3 = this.delegate) || void 0 === i3 || null === (n3 = i3.compositionControllerWillUpdateAttachment) || void 0 === n3 || n3.call(i3, e3), this.composition.updateAttributesForAttachment(t4, e3);
    }
    attachmentEditorDidRequestRemovingAttributeForAttachment(t4, e3) {
      var i3, n3;
      return null === (i3 = this.delegate) || void 0 === i3 || null === (n3 = i3.compositionControllerWillUpdateAttachment) || void 0 === n3 || n3.call(i3, e3), this.composition.removeAttributeForAttachment(t4, e3);
    }
    attachmentEditorDidRequestRemovalOfAttachment(t4) {
      var e3, i3;
      return null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.compositionControllerDidRequestRemovalOfAttachment) || void 0 === i3 ? void 0 : i3.call(e3, t4);
    }
    attachmentEditorDidRequestDeselectingAttachment(t4) {
      var e3, i3;
      return null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.compositionControllerDidRequestDeselectingAttachment) || void 0 === i3 ? void 0 : i3.call(e3, t4);
    }
    canSyncDocumentView() {
      return !this.isEditingAttachment();
    }
    findAttachmentForElement(t4) {
      return this.composition.document.getAttachmentById(parseInt(t4.dataset.trixId, 10));
    }
  };
  var $n = class extends q {
  };
  var Zn = "data-trix-mutable";
  var Qn = "[".concat(Zn, "]");
  var tr = { attributes: true, childList: true, characterData: true, characterDataOldValue: true, subtree: true };
  var er = class extends q {
    constructor(t4) {
      super(t4), this.didMutate = this.didMutate.bind(this), this.element = t4, this.observer = new window.MutationObserver(this.didMutate), this.start();
    }
    start() {
      return this.reset(), this.observer.observe(this.element, tr);
    }
    stop() {
      return this.observer.disconnect();
    }
    didMutate(t4) {
      var e3, i3;
      if (this.mutations.push(...Array.from(this.findSignificantMutations(t4) || [])), this.mutations.length) return null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.elementDidMutate) || void 0 === i3 || i3.call(e3, this.getMutationSummary()), this.reset();
    }
    reset() {
      this.mutations = [];
    }
    findSignificantMutations(t4) {
      return t4.filter((t5) => this.mutationIsSignificant(t5));
    }
    mutationIsSignificant(t4) {
      if (this.nodeIsMutable(t4.target)) return false;
      for (const e3 of Array.from(this.nodesModifiedByMutation(t4))) if (this.nodeIsSignificant(e3)) return true;
      return false;
    }
    nodeIsSignificant(t4) {
      return t4 !== this.element && !this.nodeIsMutable(t4) && !M(t4);
    }
    nodeIsMutable(t4) {
      return y(t4, { matchingSelector: Qn });
    }
    nodesModifiedByMutation(t4) {
      const e3 = [];
      switch (t4.type) {
        case "attributes":
          t4.attributeName !== Zn && e3.push(t4.target);
          break;
        case "characterData":
          e3.push(t4.target.parentNode), e3.push(t4.target);
          break;
        case "childList":
          e3.push(...Array.from(t4.addedNodes || [])), e3.push(...Array.from(t4.removedNodes || []));
      }
      return e3;
    }
    getMutationSummary() {
      return this.getTextMutationSummary();
    }
    getTextMutationSummary() {
      const { additions: t4, deletions: e3 } = this.getTextChangesFromCharacterData(), i3 = this.getTextChangesFromChildList();
      Array.from(i3.additions).forEach((e4) => {
        Array.from(t4).includes(e4) || t4.push(e4);
      }), e3.push(...Array.from(i3.deletions || []));
      const n3 = {}, r3 = t4.join("");
      r3 && (n3.textAdded = r3);
      const o3 = e3.join("");
      return o3 && (n3.textDeleted = o3), n3;
    }
    getMutationsByType(t4) {
      return Array.from(this.mutations).filter((e3) => e3.type === t4);
    }
    getTextChangesFromChildList() {
      let t4, e3;
      const i3 = [], n3 = [];
      Array.from(this.getMutationsByType("childList")).forEach((t5) => {
        i3.push(...Array.from(t5.addedNodes || [])), n3.push(...Array.from(t5.removedNodes || []));
      });
      0 === i3.length && 1 === n3.length && I(n3[0]) ? (t4 = [], e3 = ["\n"]) : (t4 = ir(i3), e3 = ir(n3));
      const r3 = t4.filter((t5, i4) => t5 !== e3[i4]).map(Wt), o3 = e3.filter((e4, i4) => e4 !== t4[i4]).map(Wt);
      return { additions: r3, deletions: o3 };
    }
    getTextChangesFromCharacterData() {
      let t4, e3;
      const i3 = this.getMutationsByType("characterData");
      if (i3.length) {
        const n3 = i3[0], r3 = i3[i3.length - 1], o3 = function(t5, e4) {
          let i4, n4;
          return t5 = $.box(t5), (e4 = $.box(e4)).length < t5.length ? [n4, i4] = zt(t5, e4) : [i4, n4] = zt(e4, t5), { added: i4, removed: n4 };
        }(Wt(n3.oldValue), Wt(r3.target.data));
        t4 = o3.added, e3 = o3.removed;
      }
      return { additions: t4 ? [t4] : [], deletions: e3 ? [e3] : [] };
    }
  };
  var ir = function() {
    let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
    const e3 = [];
    for (const i3 of Array.from(t4)) switch (i3.nodeType) {
      case Node.TEXT_NODE:
        e3.push(i3.data);
        break;
      case Node.ELEMENT_NODE:
        "br" === k(i3) ? e3.push("\n") : e3.push(...Array.from(ir(i3.childNodes) || []));
    }
    return e3;
  };
  var nr = class extends ee {
    constructor(t4) {
      super(...arguments), this.file = t4;
    }
    perform(t4) {
      const e3 = new FileReader();
      return e3.onerror = () => t4(false), e3.onload = () => {
        e3.onerror = null;
        try {
          e3.abort();
        } catch (t5) {
        }
        return t4(true, this.file);
      }, e3.readAsArrayBuffer(this.file);
    }
  };
  var rr = class {
    constructor(t4) {
      this.element = t4;
    }
    shouldIgnore(t4) {
      return !!a.samsungAndroid && (this.previousEvent = this.event, this.event = t4, this.checkSamsungKeyboardBuggyModeStart(), this.checkSamsungKeyboardBuggyModeEnd(), this.buggyMode);
    }
    checkSamsungKeyboardBuggyModeStart() {
      this.insertingLongTextAfterUnidentifiedChar() && or(this.element.innerText, this.event.data) && (this.buggyMode = true, this.event.preventDefault());
    }
    checkSamsungKeyboardBuggyModeEnd() {
      this.buggyMode && "insertText" !== this.event.inputType && (this.buggyMode = false);
    }
    insertingLongTextAfterUnidentifiedChar() {
      var t4;
      return this.isBeforeInputInsertText() && this.previousEventWasUnidentifiedKeydown() && (null === (t4 = this.event.data) || void 0 === t4 ? void 0 : t4.length) > 50;
    }
    isBeforeInputInsertText() {
      return "beforeinput" === this.event.type && "insertText" === this.event.inputType;
    }
    previousEventWasUnidentifiedKeydown() {
      var t4, e3;
      return "keydown" === (null === (t4 = this.previousEvent) || void 0 === t4 ? void 0 : t4.type) && "Unidentified" === (null === (e3 = this.previousEvent) || void 0 === e3 ? void 0 : e3.key);
    }
  };
  var or = (t4, e3) => ar(t4) === ar(e3);
  var sr = new RegExp("(".concat("\uFFFC", "|").concat(d, "|").concat(g, "|\\s)+"), "g");
  var ar = (t4) => t4.replace(sr, " ").trim();
  var lr = class extends q {
    constructor(t4) {
      super(...arguments), this.element = t4, this.mutationObserver = new er(this.element), this.mutationObserver.delegate = this, this.flakyKeyboardDetector = new rr(this.element);
      for (const t5 in this.constructor.events) b(t5, { onElement: this.element, withCallback: this.handlerFor(t5) });
    }
    elementDidMutate(t4) {
    }
    editorWillSyncDocumentView() {
      return this.mutationObserver.stop();
    }
    editorDidSyncDocumentView() {
      return this.mutationObserver.start();
    }
    requestRender() {
      var t4, e3;
      return null === (t4 = this.delegate) || void 0 === t4 || null === (e3 = t4.inputControllerDidRequestRender) || void 0 === e3 ? void 0 : e3.call(t4);
    }
    requestReparse() {
      var t4, e3;
      return null === (t4 = this.delegate) || void 0 === t4 || null === (e3 = t4.inputControllerDidRequestReparse) || void 0 === e3 || e3.call(t4), this.requestRender();
    }
    attachFiles(t4) {
      const e3 = Array.from(t4).map((t5) => new nr(t5));
      return Promise.all(e3).then((t5) => {
        this.handleInput(function() {
          var e4, i3;
          return null === (e4 = this.delegate) || void 0 === e4 || e4.inputControllerWillAttachFiles(), null === (i3 = this.responder) || void 0 === i3 || i3.insertFiles(t5), this.requestRender();
        });
      });
    }
    handlerFor(t4) {
      return (e3) => {
        e3.defaultPrevented || this.handleInput(() => {
          if (!x(this.element)) {
            if (this.flakyKeyboardDetector.shouldIgnore(e3)) return;
            this.eventName = t4, this.constructor.events[t4].call(this, e3);
          }
        });
      };
    }
    handleInput(t4) {
      try {
        var e3;
        null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillHandleInput(), t4.call(this);
      } finally {
        var i3;
        null === (i3 = this.delegate) || void 0 === i3 || i3.inputControllerDidHandleInput();
      }
    }
    createLinkHTML(t4, e3) {
      const i3 = document.createElement("a");
      return i3.href = t4, i3.textContent = e3 || t4, i3.outerHTML;
    }
  };
  var cr;
  Di(lr, "events", {});
  var { browser: ur, keyNames: hr } = z;
  var dr = 0;
  var gr = class extends lr {
    constructor() {
      super(...arguments), this.resetInputSummary();
    }
    setInputSummary() {
      let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      this.inputSummary.eventName = this.eventName;
      for (const e3 in t4) {
        const i3 = t4[e3];
        this.inputSummary[e3] = i3;
      }
      return this.inputSummary;
    }
    resetInputSummary() {
      this.inputSummary = {};
    }
    reset() {
      return this.resetInputSummary(), Ft.reset();
    }
    elementDidMutate(t4) {
      var e3, i3;
      return this.isComposing() ? null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.inputControllerDidAllowUnhandledInput) || void 0 === i3 ? void 0 : i3.call(e3) : this.handleInput(function() {
        return this.mutationIsSignificant(t4) && (this.mutationIsExpected(t4) ? this.requestRender() : this.requestReparse()), this.reset();
      });
    }
    mutationIsExpected(t4) {
      let { textAdded: e3, textDeleted: i3 } = t4;
      if (this.inputSummary.preferDocument) return true;
      const n3 = null != e3 ? e3 === this.inputSummary.textAdded : !this.inputSummary.textAdded, r3 = null != i3 ? this.inputSummary.didDelete : !this.inputSummary.didDelete, o3 = ["\n", " \n"].includes(e3) && !n3, s3 = "\n" === i3 && !r3;
      if (o3 && !s3 || s3 && !o3) {
        const t5 = this.getSelectedRange();
        if (t5) {
          var a3;
          const i4 = o3 ? e3.replace(/\n$/, "").length || -1 : (null == e3 ? void 0 : e3.length) || 1;
          if (null !== (a3 = this.responder) && void 0 !== a3 && a3.positionIsBlockBreak(t5[1] + i4)) return true;
        }
      }
      return n3 && r3;
    }
    mutationIsSignificant(t4) {
      var e3;
      const i3 = Object.keys(t4).length > 0, n3 = "" === (null === (e3 = this.compositionInput) || void 0 === e3 ? void 0 : e3.getEndData());
      return i3 || !n3;
    }
    getCompositionInput() {
      if (this.isComposing()) return this.compositionInput;
      this.compositionInput = new vr(this);
    }
    isComposing() {
      return this.compositionInput && !this.compositionInput.isEnded();
    }
    deleteInDirection(t4, e3) {
      var i3;
      return false !== (null === (i3 = this.responder) || void 0 === i3 ? void 0 : i3.deleteInDirection(t4)) ? this.setInputSummary({ didDelete: true }) : e3 ? (e3.preventDefault(), this.requestRender()) : void 0;
    }
    serializeSelectionToDataTransfer(t4) {
      var e3;
      if (!function(t5) {
        if (null == t5 || !t5.setData) return false;
        for (const e4 in Ct) {
          const i4 = Ct[e4];
          try {
            if (t5.setData(e4, i4), !t5.getData(e4) === i4) return false;
          } catch (t6) {
            return false;
          }
        }
        return true;
      }(t4)) return;
      const i3 = null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.getSelectedDocument().toSerializableDocument();
      return t4.setData("application/x-trix-document", JSON.stringify(i3)), t4.setData("text/html", Si.render(i3).innerHTML), t4.setData("text/plain", i3.toString().replace(/\n$/, "")), true;
    }
    canAcceptDataTransfer(t4) {
      const e3 = {};
      return Array.from((null == t4 ? void 0 : t4.types) || []).forEach((t5) => {
        e3[t5] = true;
      }), e3.Files || e3["application/x-trix-document"] || e3["text/html"] || e3["text/plain"];
    }
    getPastedHTMLUsingHiddenElement(t4) {
      const e3 = this.getSelectedRange(), i3 = { position: "absolute", left: "".concat(window.pageXOffset, "px"), top: "".concat(window.pageYOffset, "px"), opacity: 0 }, n3 = T({ style: i3, tagName: "div", editable: true });
      return document.body.appendChild(n3), n3.focus(), requestAnimationFrame(() => {
        const i4 = n3.innerHTML;
        return S(n3), this.setSelectedRange(e3), t4(i4);
      });
    }
  };
  Di(gr, "events", { keydown(t4) {
    this.isComposing() || this.resetInputSummary(), this.inputSummary.didInput = true;
    const e3 = hr[t4.keyCode];
    if (e3) {
      var i3;
      let n4 = this.keys;
      ["ctrl", "alt", "shift", "meta"].forEach((e4) => {
        var i4;
        t4["".concat(e4, "Key")] && ("ctrl" === e4 && (e4 = "control"), n4 = null === (i4 = n4) || void 0 === i4 ? void 0 : i4[e4]);
      }), null != (null === (i3 = n4) || void 0 === i3 ? void 0 : i3[e3]) && (this.setInputSummary({ keyName: e3 }), Ft.reset(), n4[e3].call(this, t4));
    }
    if (St(t4)) {
      const e4 = String.fromCharCode(t4.keyCode).toLowerCase();
      if (e4) {
        var n3;
        const i4 = ["alt", "shift"].map((e5) => {
          if (t4["".concat(e5, "Key")]) return e5;
        }).filter((t5) => t5);
        i4.push(e4), null !== (n3 = this.delegate) && void 0 !== n3 && n3.inputControllerDidReceiveKeyboardCommand(i4) && t4.preventDefault();
      }
    }
  }, keypress(t4) {
    if (null != this.inputSummary.eventName) return;
    if (t4.metaKey) return;
    if (t4.ctrlKey && !t4.altKey) return;
    const e3 = fr(t4);
    var i3, n3;
    return e3 ? (null === (i3 = this.delegate) || void 0 === i3 || i3.inputControllerWillPerformTyping(), null === (n3 = this.responder) || void 0 === n3 || n3.insertString(e3), this.setInputSummary({ textAdded: e3, didDelete: this.selectionIsExpanded() })) : void 0;
  }, textInput(t4) {
    const { data: e3 } = t4, { textAdded: i3 } = this.inputSummary;
    if (i3 && i3 !== e3 && i3.toUpperCase() === e3) {
      var n3;
      const t5 = this.getSelectedRange();
      return this.setSelectedRange([t5[0], t5[1] + i3.length]), null === (n3 = this.responder) || void 0 === n3 || n3.insertString(e3), this.setInputSummary({ textAdded: e3 }), this.setSelectedRange(t5);
    }
  }, dragenter(t4) {
    t4.preventDefault();
  }, dragstart(t4) {
    var e3, i3;
    return this.serializeSelectionToDataTransfer(t4.dataTransfer), this.draggedRange = this.getSelectedRange(), null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.inputControllerDidStartDrag) || void 0 === i3 ? void 0 : i3.call(e3);
  }, dragover(t4) {
    if (this.draggedRange || this.canAcceptDataTransfer(t4.dataTransfer)) {
      t4.preventDefault();
      const n3 = { x: t4.clientX, y: t4.clientY };
      var e3, i3;
      if (!Tt(n3, this.draggingPoint)) return this.draggingPoint = n3, null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.inputControllerDidReceiveDragOverPoint) || void 0 === i3 ? void 0 : i3.call(e3, this.draggingPoint);
    }
  }, dragend(t4) {
    var e3, i3;
    null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.inputControllerDidCancelDrag) || void 0 === i3 || i3.call(e3), this.draggedRange = null, this.draggingPoint = null;
  }, drop(t4) {
    var e3, i3;
    t4.preventDefault();
    const n3 = null === (e3 = t4.dataTransfer) || void 0 === e3 ? void 0 : e3.files, r3 = t4.dataTransfer.getData("application/x-trix-document"), o3 = { x: t4.clientX, y: t4.clientY };
    if (null === (i3 = this.responder) || void 0 === i3 || i3.setLocationRangeFromPointRange(o3), null != n3 && n3.length) this.attachFiles(n3);
    else if (this.draggedRange) {
      var s3, a3;
      null === (s3 = this.delegate) || void 0 === s3 || s3.inputControllerWillMoveText(), null === (a3 = this.responder) || void 0 === a3 || a3.moveTextFromRange(this.draggedRange), this.draggedRange = null, this.requestRender();
    } else if (r3) {
      var l3;
      const t5 = an.fromJSONString(r3);
      null === (l3 = this.responder) || void 0 === l3 || l3.insertDocument(t5), this.requestRender();
    }
    this.draggedRange = null, this.draggingPoint = null;
  }, cut(t4) {
    var e3, i3;
    if (null !== (e3 = this.responder) && void 0 !== e3 && e3.selectionIsExpanded() && (this.serializeSelectionToDataTransfer(t4.clipboardData) && t4.preventDefault(), null === (i3 = this.delegate) || void 0 === i3 || i3.inputControllerWillCutText(), this.deleteInDirection("backward"), t4.defaultPrevented)) return this.requestRender();
  }, copy(t4) {
    var e3;
    null !== (e3 = this.responder) && void 0 !== e3 && e3.selectionIsExpanded() && this.serializeSelectionToDataTransfer(t4.clipboardData) && t4.preventDefault();
  }, paste(t4) {
    const e3 = t4.clipboardData || t4.testClipboardData, i3 = { clipboard: e3 };
    if (!e3 || br(t4)) return void this.getPastedHTMLUsingHiddenElement((t5) => {
      var e4, n4, r4;
      return i3.type = "text/html", i3.html = t5, null === (e4 = this.delegate) || void 0 === e4 || e4.inputControllerWillPaste(i3), null === (n4 = this.responder) || void 0 === n4 || n4.insertHTML(i3.html), this.requestRender(), null === (r4 = this.delegate) || void 0 === r4 ? void 0 : r4.inputControllerDidPaste(i3);
    });
    const n3 = e3.getData("URL"), r3 = e3.getData("text/html"), o3 = e3.getData("public.url-name");
    if (n3) {
      var s3, a3, l3;
      let t5;
      i3.type = "text/html", t5 = o3 ? Vt(o3).trim() : n3, i3.html = this.createLinkHTML(n3, t5), null === (s3 = this.delegate) || void 0 === s3 || s3.inputControllerWillPaste(i3), this.setInputSummary({ textAdded: t5, didDelete: this.selectionIsExpanded() }), null === (a3 = this.responder) || void 0 === a3 || a3.insertHTML(i3.html), this.requestRender(), null === (l3 = this.delegate) || void 0 === l3 || l3.inputControllerDidPaste(i3);
    } else if (Et(e3)) {
      var c3, u3, h3;
      i3.type = "text/plain", i3.string = e3.getData("text/plain"), null === (c3 = this.delegate) || void 0 === c3 || c3.inputControllerWillPaste(i3), this.setInputSummary({ textAdded: i3.string, didDelete: this.selectionIsExpanded() }), null === (u3 = this.responder) || void 0 === u3 || u3.insertString(i3.string), this.requestRender(), null === (h3 = this.delegate) || void 0 === h3 || h3.inputControllerDidPaste(i3);
    } else if (r3) {
      var d3, g3, m3;
      i3.type = "text/html", i3.html = r3, null === (d3 = this.delegate) || void 0 === d3 || d3.inputControllerWillPaste(i3), null === (g3 = this.responder) || void 0 === g3 || g3.insertHTML(i3.html), this.requestRender(), null === (m3 = this.delegate) || void 0 === m3 || m3.inputControllerDidPaste(i3);
    } else if (Array.from(e3.types).includes("Files")) {
      var p3, f3;
      const t5 = null === (p3 = e3.items) || void 0 === p3 || null === (p3 = p3[0]) || void 0 === p3 || null === (f3 = p3.getAsFile) || void 0 === f3 ? void 0 : f3.call(p3);
      if (t5) {
        var b3, v3, A3;
        const e4 = mr(t5);
        !t5.name && e4 && (t5.name = "pasted-file-".concat(++dr, ".").concat(e4)), i3.type = "File", i3.file = t5, null === (b3 = this.delegate) || void 0 === b3 || b3.inputControllerWillAttachFiles(), null === (v3 = this.responder) || void 0 === v3 || v3.insertFile(i3.file), this.requestRender(), null === (A3 = this.delegate) || void 0 === A3 || A3.inputControllerDidPaste(i3);
      }
    }
    t4.preventDefault();
  }, compositionstart(t4) {
    return this.getCompositionInput().start(t4.data);
  }, compositionupdate(t4) {
    return this.getCompositionInput().update(t4.data);
  }, compositionend(t4) {
    return this.getCompositionInput().end(t4.data);
  }, beforeinput(t4) {
    this.inputSummary.didInput = true;
  }, input(t4) {
    return this.inputSummary.didInput = true, t4.stopPropagation();
  } }), Di(gr, "keys", { backspace(t4) {
    var e3;
    return null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPerformTyping(), this.deleteInDirection("backward", t4);
  }, delete(t4) {
    var e3;
    return null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPerformTyping(), this.deleteInDirection("forward", t4);
  }, return(t4) {
    var e3, i3;
    return this.setInputSummary({ preferDocument: true }), null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPerformTyping(), null === (i3 = this.responder) || void 0 === i3 ? void 0 : i3.insertLineBreak();
  }, tab(t4) {
    var e3, i3;
    null !== (e3 = this.responder) && void 0 !== e3 && e3.canIncreaseNestingLevel() && (null === (i3 = this.responder) || void 0 === i3 || i3.increaseNestingLevel(), this.requestRender(), t4.preventDefault());
  }, left(t4) {
    var e3;
    if (this.selectionIsInCursorTarget()) return t4.preventDefault(), null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.moveCursorInDirection("backward");
  }, right(t4) {
    var e3;
    if (this.selectionIsInCursorTarget()) return t4.preventDefault(), null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.moveCursorInDirection("forward");
  }, control: { d(t4) {
    var e3;
    return null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPerformTyping(), this.deleteInDirection("forward", t4);
  }, h(t4) {
    var e3;
    return null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPerformTyping(), this.deleteInDirection("backward", t4);
  }, o(t4) {
    var e3, i3;
    return t4.preventDefault(), null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPerformTyping(), null === (i3 = this.responder) || void 0 === i3 || i3.insertString("\n", { updatePosition: false }), this.requestRender();
  } }, shift: { return(t4) {
    var e3, i3;
    null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPerformTyping(), null === (i3 = this.responder) || void 0 === i3 || i3.insertString("\n"), this.requestRender(), t4.preventDefault();
  }, tab(t4) {
    var e3, i3;
    null !== (e3 = this.responder) && void 0 !== e3 && e3.canDecreaseNestingLevel() && (null === (i3 = this.responder) || void 0 === i3 || i3.decreaseNestingLevel(), this.requestRender(), t4.preventDefault());
  }, left(t4) {
    if (this.selectionIsInCursorTarget()) return t4.preventDefault(), this.expandSelectionInDirection("backward");
  }, right(t4) {
    if (this.selectionIsInCursorTarget()) return t4.preventDefault(), this.expandSelectionInDirection("forward");
  } }, alt: { backspace(t4) {
    var e3;
    return this.setInputSummary({ preferDocument: false }), null === (e3 = this.delegate) || void 0 === e3 ? void 0 : e3.inputControllerWillPerformTyping();
  } }, meta: { backspace(t4) {
    var e3;
    return this.setInputSummary({ preferDocument: false }), null === (e3 = this.delegate) || void 0 === e3 ? void 0 : e3.inputControllerWillPerformTyping();
  } } }), gr.proxyMethod("responder?.getSelectedRange"), gr.proxyMethod("responder?.setSelectedRange"), gr.proxyMethod("responder?.expandSelectionInDirection"), gr.proxyMethod("responder?.selectionIsInCursorTarget"), gr.proxyMethod("responder?.selectionIsExpanded");
  var mr = (t4) => {
    var e3;
    return null === (e3 = t4.type) || void 0 === e3 || null === (e3 = e3.match(/\/(\w+)$/)) || void 0 === e3 ? void 0 : e3[1];
  };
  var pr = !(null === (cr = " ".codePointAt) || void 0 === cr || !cr.call(" ", 0));
  var fr = function(t4) {
    if (t4.key && pr && t4.key.codePointAt(0) === t4.keyCode) return t4.key;
    {
      let e3;
      if (null === t4.which ? e3 = t4.keyCode : 0 !== t4.which && 0 !== t4.charCode && (e3 = t4.charCode), null != e3 && "escape" !== hr[e3]) return $.fromCodepoints([e3]).toString();
    }
  };
  var br = function(t4) {
    const e3 = t4.clipboardData;
    if (e3) {
      if (e3.types.includes("text/html")) {
        for (const t5 of e3.types) {
          const i3 = /^CorePasteboardFlavorType/.test(t5), n3 = /^dyn\./.test(t5) && e3.getData(t5);
          if (i3 || n3) return true;
        }
        return false;
      }
      {
        const t5 = e3.types.includes("com.apple.webarchive"), i3 = e3.types.includes("com.apple.flat-rtfd");
        return t5 || i3;
      }
    }
  };
  var vr = class extends q {
    constructor(t4) {
      super(...arguments), this.inputController = t4, this.responder = this.inputController.responder, this.delegate = this.inputController.delegate, this.inputSummary = this.inputController.inputSummary, this.data = {};
    }
    start(t4) {
      if (this.data.start = t4, this.isSignificant()) {
        var e3, i3;
        if ("keypress" === this.inputSummary.eventName && this.inputSummary.textAdded) null === (i3 = this.responder) || void 0 === i3 || i3.deleteInDirection("left");
        this.selectionIsExpanded() || (this.insertPlaceholder(), this.requestRender()), this.range = null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.getSelectedRange();
      }
    }
    update(t4) {
      if (this.data.update = t4, this.isSignificant()) {
        const t5 = this.selectPlaceholder();
        t5 && (this.forgetPlaceholder(), this.range = t5);
      }
    }
    end(t4) {
      return this.data.end = t4, this.isSignificant() ? (this.forgetPlaceholder(), this.canApplyToDocument() ? (this.setInputSummary({ preferDocument: true, didInput: false }), null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPerformTyping(), null === (i3 = this.responder) || void 0 === i3 || i3.setSelectedRange(this.range), null === (n3 = this.responder) || void 0 === n3 || n3.insertString(this.data.end), null === (r3 = this.responder) || void 0 === r3 ? void 0 : r3.setSelectedRange(this.range[0] + this.data.end.length)) : null != this.data.start || null != this.data.update ? (this.requestReparse(), this.inputController.reset()) : void 0) : this.inputController.reset();
      var e3, i3, n3, r3;
    }
    getEndData() {
      return this.data.end;
    }
    isEnded() {
      return null != this.getEndData();
    }
    isSignificant() {
      return !ur.composesExistingText || this.inputSummary.didInput;
    }
    canApplyToDocument() {
      var t4, e3;
      return 0 === (null === (t4 = this.data.start) || void 0 === t4 ? void 0 : t4.length) && (null === (e3 = this.data.end) || void 0 === e3 ? void 0 : e3.length) > 0 && this.range;
    }
  };
  vr.proxyMethod("inputController.setInputSummary"), vr.proxyMethod("inputController.requestRender"), vr.proxyMethod("inputController.requestReparse"), vr.proxyMethod("responder?.selectionIsExpanded"), vr.proxyMethod("responder?.insertPlaceholder"), vr.proxyMethod("responder?.selectPlaceholder"), vr.proxyMethod("responder?.forgetPlaceholder");
  var Ar = class extends lr {
    constructor() {
      super(...arguments), this.render = this.render.bind(this);
    }
    elementDidMutate() {
      return this.scheduledRender ? this.composing ? null === (t4 = this.delegate) || void 0 === t4 || null === (e3 = t4.inputControllerDidAllowUnhandledInput) || void 0 === e3 ? void 0 : e3.call(t4) : void 0 : this.reparse();
      var t4, e3;
    }
    scheduleRender() {
      return this.scheduledRender ? this.scheduledRender : this.scheduledRender = requestAnimationFrame(this.render);
    }
    render() {
      var t4, e3;
      (cancelAnimationFrame(this.scheduledRender), this.scheduledRender = null, this.composing) || (null === (e3 = this.delegate) || void 0 === e3 || e3.render());
      null === (t4 = this.afterRender) || void 0 === t4 || t4.call(this), this.afterRender = null;
    }
    reparse() {
      var t4;
      return null === (t4 = this.delegate) || void 0 === t4 ? void 0 : t4.reparse();
    }
    insertString() {
      var t4;
      let e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", i3 = arguments.length > 1 ? arguments[1] : void 0;
      return null === (t4 = this.delegate) || void 0 === t4 || t4.inputControllerWillPerformTyping(), this.withTargetDOMRange(function() {
        var t5;
        return null === (t5 = this.responder) || void 0 === t5 ? void 0 : t5.insertString(e3, i3);
      });
    }
    toggleAttributeIfSupported(t4) {
      var e3;
      if (gt().includes(t4)) return null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPerformFormatting(t4), this.withTargetDOMRange(function() {
        var e4;
        return null === (e4 = this.responder) || void 0 === e4 ? void 0 : e4.toggleCurrentAttribute(t4);
      });
    }
    activateAttributeIfSupported(t4, e3) {
      var i3;
      if (gt().includes(t4)) return null === (i3 = this.delegate) || void 0 === i3 || i3.inputControllerWillPerformFormatting(t4), this.withTargetDOMRange(function() {
        var i4;
        return null === (i4 = this.responder) || void 0 === i4 ? void 0 : i4.setCurrentAttribute(t4, e3);
      });
    }
    deleteInDirection(t4) {
      let { recordUndoEntry: e3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { recordUndoEntry: true };
      var i3;
      e3 && (null === (i3 = this.delegate) || void 0 === i3 || i3.inputControllerWillPerformTyping());
      const n3 = () => {
        var e4;
        return null === (e4 = this.responder) || void 0 === e4 ? void 0 : e4.deleteInDirection(t4);
      }, r3 = this.getTargetDOMRange({ minLength: this.composing ? 1 : 2 });
      return r3 ? this.withTargetDOMRange(r3, n3) : n3();
    }
    withTargetDOMRange(t4, e3) {
      var i3;
      return "function" == typeof t4 && (e3 = t4, t4 = this.getTargetDOMRange()), t4 ? null === (i3 = this.responder) || void 0 === i3 ? void 0 : i3.withTargetDOMRange(t4, e3.bind(this)) : (Ft.reset(), e3.call(this));
    }
    getTargetDOMRange() {
      var t4, e3;
      let { minLength: i3 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { minLength: 0 };
      const n3 = null === (t4 = (e3 = this.event).getTargetRanges) || void 0 === t4 ? void 0 : t4.call(e3);
      if (n3 && n3.length) {
        const t5 = yr(n3[0]);
        if (0 === i3 || t5.toString().length >= i3) return t5;
      }
    }
    withEvent(t4, e3) {
      let i3;
      this.event = t4;
      try {
        i3 = e3.call(this);
      } finally {
        this.event = null;
      }
      return i3;
    }
  };
  Di(Ar, "events", { keydown(t4) {
    if (St(t4)) {
      var e3;
      const i3 = Rr(t4);
      null !== (e3 = this.delegate) && void 0 !== e3 && e3.inputControllerDidReceiveKeyboardCommand(i3) && t4.preventDefault();
    } else {
      let e4 = t4.key;
      t4.altKey && (e4 += "+Alt"), t4.shiftKey && (e4 += "+Shift");
      const i3 = this.constructor.keys[e4];
      if (i3) return this.withEvent(t4, i3);
    }
  }, paste(t4) {
    var e3;
    let i3;
    const n3 = null === (e3 = t4.clipboardData) || void 0 === e3 ? void 0 : e3.getData("URL");
    return Er(t4) ? (t4.preventDefault(), this.attachFiles(t4.clipboardData.files)) : Sr(t4) ? (t4.preventDefault(), i3 = { type: "text/plain", string: t4.clipboardData.getData("text/plain") }, null === (r3 = this.delegate) || void 0 === r3 || r3.inputControllerWillPaste(i3), null === (o3 = this.responder) || void 0 === o3 || o3.insertString(i3.string), this.render(), null === (s3 = this.delegate) || void 0 === s3 ? void 0 : s3.inputControllerDidPaste(i3)) : n3 ? (t4.preventDefault(), i3 = { type: "text/html", html: this.createLinkHTML(n3) }, null === (a3 = this.delegate) || void 0 === a3 || a3.inputControllerWillPaste(i3), null === (l3 = this.responder) || void 0 === l3 || l3.insertHTML(i3.html), this.render(), null === (c3 = this.delegate) || void 0 === c3 ? void 0 : c3.inputControllerDidPaste(i3)) : void 0;
    var r3, o3, s3, a3, l3, c3;
  }, beforeinput(t4) {
    const e3 = this.constructor.inputTypes[t4.inputType], i3 = (n3 = t4, !(!/iPhone|iPad/.test(navigator.userAgent) || n3.inputType && "insertParagraph" !== n3.inputType));
    var n3;
    e3 && (this.withEvent(t4, e3), i3 || this.scheduleRender()), i3 && this.render();
  }, input(t4) {
    Ft.reset();
  }, dragstart(t4) {
    var e3, i3;
    null !== (e3 = this.responder) && void 0 !== e3 && e3.selectionContainsAttachments() && (t4.dataTransfer.setData("application/x-trix-dragging", true), this.dragging = { range: null === (i3 = this.responder) || void 0 === i3 ? void 0 : i3.getSelectedRange(), point: kr(t4) });
  }, dragenter(t4) {
    xr(t4) && t4.preventDefault();
  }, dragover(t4) {
    if (this.dragging) {
      t4.preventDefault();
      const i3 = kr(t4);
      var e3;
      if (!Tt(i3, this.dragging.point)) return this.dragging.point = i3, null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.setLocationRangeFromPointRange(i3);
    } else xr(t4) && t4.preventDefault();
  }, drop(t4) {
    var e3, i3;
    if (this.dragging) return t4.preventDefault(), null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillMoveText(), null === (i3 = this.responder) || void 0 === i3 || i3.moveTextFromRange(this.dragging.range), this.dragging = null, this.scheduleRender();
    if (xr(t4)) {
      var n3;
      t4.preventDefault();
      const e4 = kr(t4);
      return null === (n3 = this.responder) || void 0 === n3 || n3.setLocationRangeFromPointRange(e4), this.attachFiles(t4.dataTransfer.files);
    }
  }, dragend() {
    var t4;
    this.dragging && (null === (t4 = this.responder) || void 0 === t4 || t4.setSelectedRange(this.dragging.range), this.dragging = null);
  }, compositionend(t4) {
    this.composing && (this.composing = false, a.recentAndroid || this.scheduleRender());
  } }), Di(Ar, "keys", { ArrowLeft() {
    var t4, e3;
    if (null !== (t4 = this.responder) && void 0 !== t4 && t4.shouldManageMovingCursorInDirection("backward")) return this.event.preventDefault(), null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.moveCursorInDirection("backward");
  }, ArrowRight() {
    var t4, e3;
    if (null !== (t4 = this.responder) && void 0 !== t4 && t4.shouldManageMovingCursorInDirection("forward")) return this.event.preventDefault(), null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.moveCursorInDirection("forward");
  }, Backspace() {
    var t4, e3, i3;
    if (null !== (t4 = this.responder) && void 0 !== t4 && t4.shouldManageDeletingInDirection("backward")) return this.event.preventDefault(), null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPerformTyping(), null === (i3 = this.responder) || void 0 === i3 || i3.deleteInDirection("backward"), this.render();
  }, Tab() {
    var t4, e3;
    if (null !== (t4 = this.responder) && void 0 !== t4 && t4.canIncreaseNestingLevel()) return this.event.preventDefault(), null === (e3 = this.responder) || void 0 === e3 || e3.increaseNestingLevel(), this.render();
  }, "Tab+Shift"() {
    var t4, e3;
    if (null !== (t4 = this.responder) && void 0 !== t4 && t4.canDecreaseNestingLevel()) return this.event.preventDefault(), null === (e3 = this.responder) || void 0 === e3 || e3.decreaseNestingLevel(), this.render();
  } }), Di(Ar, "inputTypes", { deleteByComposition() {
    return this.deleteInDirection("backward", { recordUndoEntry: false });
  }, deleteByCut() {
    return this.deleteInDirection("backward");
  }, deleteByDrag() {
    return this.event.preventDefault(), this.withTargetDOMRange(function() {
      var t4;
      this.deleteByDragRange = null === (t4 = this.responder) || void 0 === t4 ? void 0 : t4.getSelectedRange();
    });
  }, deleteCompositionText() {
    return this.deleteInDirection("backward", { recordUndoEntry: false });
  }, deleteContent() {
    return this.deleteInDirection("backward");
  }, deleteContentBackward() {
    return this.deleteInDirection("backward");
  }, deleteContentForward() {
    return this.deleteInDirection("forward");
  }, deleteEntireSoftLine() {
    return this.deleteInDirection("forward");
  }, deleteHardLineBackward() {
    return this.deleteInDirection("backward");
  }, deleteHardLineForward() {
    return this.deleteInDirection("forward");
  }, deleteSoftLineBackward() {
    return this.deleteInDirection("backward");
  }, deleteSoftLineForward() {
    return this.deleteInDirection("forward");
  }, deleteWordBackward() {
    return this.deleteInDirection("backward");
  }, deleteWordForward() {
    return this.deleteInDirection("forward");
  }, formatBackColor() {
    return this.activateAttributeIfSupported("backgroundColor", this.event.data);
  }, formatBold() {
    return this.toggleAttributeIfSupported("bold");
  }, formatFontColor() {
    return this.activateAttributeIfSupported("color", this.event.data);
  }, formatFontName() {
    return this.activateAttributeIfSupported("font", this.event.data);
  }, formatIndent() {
    var t4;
    if (null !== (t4 = this.responder) && void 0 !== t4 && t4.canIncreaseNestingLevel()) return this.withTargetDOMRange(function() {
      var t5;
      return null === (t5 = this.responder) || void 0 === t5 ? void 0 : t5.increaseNestingLevel();
    });
  }, formatItalic() {
    return this.toggleAttributeIfSupported("italic");
  }, formatJustifyCenter() {
    return this.toggleAttributeIfSupported("justifyCenter");
  }, formatJustifyFull() {
    return this.toggleAttributeIfSupported("justifyFull");
  }, formatJustifyLeft() {
    return this.toggleAttributeIfSupported("justifyLeft");
  }, formatJustifyRight() {
    return this.toggleAttributeIfSupported("justifyRight");
  }, formatOutdent() {
    var t4;
    if (null !== (t4 = this.responder) && void 0 !== t4 && t4.canDecreaseNestingLevel()) return this.withTargetDOMRange(function() {
      var t5;
      return null === (t5 = this.responder) || void 0 === t5 ? void 0 : t5.decreaseNestingLevel();
    });
  }, formatRemove() {
    this.withTargetDOMRange(function() {
      for (const i3 in null === (t4 = this.responder) || void 0 === t4 ? void 0 : t4.getCurrentAttributes()) {
        var t4, e3;
        null === (e3 = this.responder) || void 0 === e3 || e3.removeCurrentAttribute(i3);
      }
    });
  }, formatSetBlockTextDirection() {
    return this.activateAttributeIfSupported("blockDir", this.event.data);
  }, formatSetInlineTextDirection() {
    return this.activateAttributeIfSupported("textDir", this.event.data);
  }, formatStrikeThrough() {
    return this.toggleAttributeIfSupported("strike");
  }, formatSubscript() {
    return this.toggleAttributeIfSupported("sub");
  }, formatSuperscript() {
    return this.toggleAttributeIfSupported("sup");
  }, formatUnderline() {
    return this.toggleAttributeIfSupported("underline");
  }, historyRedo() {
    var t4;
    return null === (t4 = this.delegate) || void 0 === t4 ? void 0 : t4.inputControllerWillPerformRedo();
  }, historyUndo() {
    var t4;
    return null === (t4 = this.delegate) || void 0 === t4 ? void 0 : t4.inputControllerWillPerformUndo();
  }, insertCompositionText() {
    return this.composing = true, this.insertString(this.event.data);
  }, insertFromComposition() {
    return this.composing = false, this.insertString(this.event.data);
  }, insertFromDrop() {
    const t4 = this.deleteByDragRange;
    var e3;
    if (t4) return this.deleteByDragRange = null, null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillMoveText(), this.withTargetDOMRange(function() {
      var e4;
      return null === (e4 = this.responder) || void 0 === e4 ? void 0 : e4.moveTextFromRange(t4);
    });
  }, insertFromPaste() {
    const { dataTransfer: t4 } = this.event, e3 = { dataTransfer: t4 }, i3 = t4.getData("URL"), n3 = t4.getData("text/html");
    if (i3) {
      var r3;
      let n4;
      this.event.preventDefault(), e3.type = "text/html";
      const o4 = t4.getData("public.url-name");
      n4 = o4 ? Vt(o4).trim() : i3, e3.html = this.createLinkHTML(i3, n4), null === (r3 = this.delegate) || void 0 === r3 || r3.inputControllerWillPaste(e3), this.withTargetDOMRange(function() {
        var t5;
        return null === (t5 = this.responder) || void 0 === t5 ? void 0 : t5.insertHTML(e3.html);
      }), this.afterRender = () => {
        var t5;
        return null === (t5 = this.delegate) || void 0 === t5 ? void 0 : t5.inputControllerDidPaste(e3);
      };
    } else if (Et(t4)) {
      var o3;
      e3.type = "text/plain", e3.string = t4.getData("text/plain"), null === (o3 = this.delegate) || void 0 === o3 || o3.inputControllerWillPaste(e3), this.withTargetDOMRange(function() {
        var t5;
        return null === (t5 = this.responder) || void 0 === t5 ? void 0 : t5.insertString(e3.string);
      }), this.afterRender = () => {
        var t5;
        return null === (t5 = this.delegate) || void 0 === t5 ? void 0 : t5.inputControllerDidPaste(e3);
      };
    } else if (Cr(this.event)) {
      var s3;
      e3.type = "File", e3.file = t4.files[0], null === (s3 = this.delegate) || void 0 === s3 || s3.inputControllerWillPaste(e3), this.withTargetDOMRange(function() {
        var t5;
        return null === (t5 = this.responder) || void 0 === t5 ? void 0 : t5.insertFile(e3.file);
      }), this.afterRender = () => {
        var t5;
        return null === (t5 = this.delegate) || void 0 === t5 ? void 0 : t5.inputControllerDidPaste(e3);
      };
    } else if (n3) {
      var a3;
      this.event.preventDefault(), e3.type = "text/html", e3.html = n3, null === (a3 = this.delegate) || void 0 === a3 || a3.inputControllerWillPaste(e3), this.withTargetDOMRange(function() {
        var t5;
        return null === (t5 = this.responder) || void 0 === t5 ? void 0 : t5.insertHTML(e3.html);
      }), this.afterRender = () => {
        var t5;
        return null === (t5 = this.delegate) || void 0 === t5 ? void 0 : t5.inputControllerDidPaste(e3);
      };
    }
  }, insertFromYank() {
    return this.insertString(this.event.data);
  }, insertLineBreak() {
    return this.insertString("\n");
  }, insertLink() {
    return this.activateAttributeIfSupported("href", this.event.data);
  }, insertOrderedList() {
    return this.toggleAttributeIfSupported("number");
  }, insertParagraph() {
    var t4;
    return null === (t4 = this.delegate) || void 0 === t4 || t4.inputControllerWillPerformTyping(), this.withTargetDOMRange(function() {
      var t5;
      return null === (t5 = this.responder) || void 0 === t5 ? void 0 : t5.insertLineBreak();
    });
  }, insertReplacementText() {
    const t4 = this.event.dataTransfer.getData("text/plain"), e3 = this.event.getTargetRanges()[0];
    this.withTargetDOMRange(e3, () => {
      this.insertString(t4, { updatePosition: false });
    });
  }, insertText() {
    var t4;
    return this.insertString(this.event.data || (null === (t4 = this.event.dataTransfer) || void 0 === t4 ? void 0 : t4.getData("text/plain")));
  }, insertTranspose() {
    return this.insertString(this.event.data);
  }, insertUnorderedList() {
    return this.toggleAttributeIfSupported("bullet");
  } });
  var yr = function(t4) {
    const e3 = document.createRange();
    return e3.setStart(t4.startContainer, t4.startOffset), e3.setEnd(t4.endContainer, t4.endOffset), e3;
  };
  var xr = (t4) => {
    var e3;
    return Array.from((null === (e3 = t4.dataTransfer) || void 0 === e3 ? void 0 : e3.types) || []).includes("Files");
  };
  var Cr = (t4) => {
    var e3;
    return (null === (e3 = t4.dataTransfer.files) || void 0 === e3 ? void 0 : e3[0]) && !Er(t4) && !((t5) => {
      let { dataTransfer: e4 } = t5;
      return e4.types.includes("Files") && e4.types.includes("text/html") && e4.getData("text/html").includes("urn:schemas-microsoft-com:office:office");
    })(t4);
  };
  var Er = function(t4) {
    const e3 = t4.clipboardData;
    if (e3) {
      return Array.from(e3.types).filter((t5) => t5.match(/file/i)).length === e3.types.length && e3.files.length >= 1;
    }
  };
  var Sr = function(t4) {
    const e3 = t4.clipboardData;
    if (e3) return e3.types.includes("text/plain") && 1 === e3.types.length;
  };
  var Rr = function(t4) {
    const e3 = [];
    return t4.altKey && e3.push("alt"), t4.shiftKey && e3.push("shift"), e3.push(t4.key), e3;
  };
  var kr = (t4) => ({ x: t4.clientX, y: t4.clientY });
  var Tr = "[data-trix-attribute]";
  var wr = "[data-trix-action]";
  var Lr = "".concat(Tr, ", ").concat(wr);
  var Dr = "[data-trix-dialog]";
  var Nr = "".concat(Dr, "[data-trix-active]");
  var Ir = "".concat(Dr, " [data-trix-method]");
  var Or = "".concat(Dr, " [data-trix-input]");
  var Fr = (t4, e3) => (e3 || (e3 = Mr(t4)), t4.querySelector("[data-trix-input][name='".concat(e3, "']")));
  var Pr = (t4) => t4.getAttribute("data-trix-action");
  var Mr = (t4) => t4.getAttribute("data-trix-attribute") || t4.getAttribute("data-trix-dialog-attribute");
  var Br = class extends q {
    constructor(t4) {
      super(t4), this.didClickActionButton = this.didClickActionButton.bind(this), this.didClickAttributeButton = this.didClickAttributeButton.bind(this), this.didClickDialogButton = this.didClickDialogButton.bind(this), this.didKeyDownDialogInput = this.didKeyDownDialogInput.bind(this), this.element = t4, this.attributes = {}, this.actions = {}, this.resetDialogInputs(), b("mousedown", { onElement: this.element, matchingSelector: wr, withCallback: this.didClickActionButton }), b("mousedown", { onElement: this.element, matchingSelector: Tr, withCallback: this.didClickAttributeButton }), b("click", { onElement: this.element, matchingSelector: Lr, preventDefault: true }), b("click", { onElement: this.element, matchingSelector: Ir, withCallback: this.didClickDialogButton }), b("keydown", { onElement: this.element, matchingSelector: Or, withCallback: this.didKeyDownDialogInput });
    }
    didClickActionButton(t4, e3) {
      var i3;
      null === (i3 = this.delegate) || void 0 === i3 || i3.toolbarDidClickButton(), t4.preventDefault();
      const n3 = Pr(e3);
      return this.getDialog(n3) ? this.toggleDialog(n3) : null === (r3 = this.delegate) || void 0 === r3 ? void 0 : r3.toolbarDidInvokeAction(n3, e3);
      var r3;
    }
    didClickAttributeButton(t4, e3) {
      var i3;
      null === (i3 = this.delegate) || void 0 === i3 || i3.toolbarDidClickButton(), t4.preventDefault();
      const n3 = Mr(e3);
      var r3;
      this.getDialog(n3) ? this.toggleDialog(n3) : null === (r3 = this.delegate) || void 0 === r3 || r3.toolbarDidToggleAttribute(n3);
      return this.refreshAttributeButtons();
    }
    didClickDialogButton(t4, e3) {
      const i3 = y(e3, { matchingSelector: Dr });
      return this[e3.getAttribute("data-trix-method")].call(this, i3);
    }
    didKeyDownDialogInput(t4, e3) {
      if (13 === t4.keyCode) {
        t4.preventDefault();
        const i3 = e3.getAttribute("name"), n3 = this.getDialog(i3);
        this.setAttribute(n3);
      }
      if (27 === t4.keyCode) return t4.preventDefault(), this.hideDialog();
    }
    updateActions(t4) {
      return this.actions = t4, this.refreshActionButtons();
    }
    refreshActionButtons() {
      return this.eachActionButton((t4, e3) => {
        t4.disabled = false === this.actions[e3];
      });
    }
    eachActionButton(t4) {
      return Array.from(this.element.querySelectorAll(wr)).map((e3) => t4(e3, Pr(e3)));
    }
    updateAttributes(t4) {
      return this.attributes = t4, this.refreshAttributeButtons();
    }
    refreshAttributeButtons() {
      return this.eachAttributeButton((t4, e3) => (t4.disabled = false === this.attributes[e3], this.attributes[e3] || this.dialogIsVisible(e3) ? (t4.setAttribute("data-trix-active", ""), t4.classList.add("trix-active")) : (t4.removeAttribute("data-trix-active"), t4.classList.remove("trix-active"))));
    }
    eachAttributeButton(t4) {
      return Array.from(this.element.querySelectorAll(Tr)).map((e3) => t4(e3, Mr(e3)));
    }
    applyKeyboardCommand(t4) {
      const e3 = JSON.stringify(t4.sort());
      for (const t5 of Array.from(this.element.querySelectorAll("[data-trix-key]"))) {
        const i3 = t5.getAttribute("data-trix-key").split("+");
        if (JSON.stringify(i3.sort()) === e3) return v("mousedown", { onElement: t5 }), true;
      }
      return false;
    }
    dialogIsVisible(t4) {
      const e3 = this.getDialog(t4);
      if (e3) return e3.hasAttribute("data-trix-active");
    }
    toggleDialog(t4) {
      return this.dialogIsVisible(t4) ? this.hideDialog() : this.showDialog(t4);
    }
    showDialog(t4) {
      var e3, i3;
      this.hideDialog(), null === (e3 = this.delegate) || void 0 === e3 || e3.toolbarWillShowDialog();
      const n3 = this.getDialog(t4);
      n3.setAttribute("data-trix-active", ""), n3.classList.add("trix-active"), Array.from(n3.querySelectorAll("input[disabled]")).forEach((t5) => {
        t5.removeAttribute("disabled");
      });
      const r3 = Mr(n3);
      if (r3) {
        const e4 = Fr(n3, t4);
        e4 && (e4.value = this.attributes[r3] || "", e4.select());
      }
      return null === (i3 = this.delegate) || void 0 === i3 ? void 0 : i3.toolbarDidShowDialog(t4);
    }
    setAttribute(t4) {
      var e3;
      const i3 = Mr(t4), n3 = Fr(t4, i3);
      return !n3.willValidate || (n3.setCustomValidity(""), n3.checkValidity() && this.isSafeAttribute(n3)) ? (null === (e3 = this.delegate) || void 0 === e3 || e3.toolbarDidUpdateAttribute(i3, n3.value), this.hideDialog()) : (n3.setCustomValidity("Invalid value"), n3.setAttribute("data-trix-validate", ""), n3.classList.add("trix-validate"), n3.focus());
    }
    isSafeAttribute(t4) {
      return !t4.hasAttribute("data-trix-validate-href") || li.isValidAttribute("a", "href", t4.value);
    }
    removeAttribute(t4) {
      var e3;
      const i3 = Mr(t4);
      return null === (e3 = this.delegate) || void 0 === e3 || e3.toolbarDidRemoveAttribute(i3), this.hideDialog();
    }
    hideDialog() {
      const t4 = this.element.querySelector(Nr);
      var e3;
      if (t4) return t4.removeAttribute("data-trix-active"), t4.classList.remove("trix-active"), this.resetDialogInputs(), null === (e3 = this.delegate) || void 0 === e3 ? void 0 : e3.toolbarDidHideDialog(((t5) => t5.getAttribute("data-trix-dialog"))(t4));
    }
    resetDialogInputs() {
      Array.from(this.element.querySelectorAll(Or)).forEach((t4) => {
        t4.setAttribute("disabled", "disabled"), t4.removeAttribute("data-trix-validate"), t4.classList.remove("trix-validate");
      });
    }
    getDialog(t4) {
      return this.element.querySelector("[data-trix-dialog=".concat(t4, "]"));
    }
  };
  var _r = class extends $n {
    constructor(t4) {
      let { editorElement: e3, document: i3, html: n3 } = t4;
      super(...arguments), this.editorElement = e3, this.selectionManager = new Vn(this.editorElement), this.selectionManager.delegate = this, this.composition = new wn(), this.composition.delegate = this, this.attachmentManager = new kn(this.composition.getAttachments()), this.attachmentManager.delegate = this, this.inputController = 2 === _.getLevel() ? new Ar(this.editorElement) : new gr(this.editorElement), this.inputController.delegate = this, this.inputController.responder = this.composition, this.compositionController = new Xn(this.editorElement, this.composition), this.compositionController.delegate = this, this.toolbarController = new Br(this.editorElement.toolbarElement), this.toolbarController.delegate = this, this.editor = new Pn(this.composition, this.selectionManager, this.editorElement), i3 ? this.editor.loadDocument(i3) : this.editor.loadHTML(n3);
    }
    registerSelectionManager() {
      return Ft.registerSelectionManager(this.selectionManager);
    }
    unregisterSelectionManager() {
      return Ft.unregisterSelectionManager(this.selectionManager);
    }
    render() {
      return this.compositionController.render();
    }
    reparse() {
      return this.composition.replaceHTML(this.editorElement.innerHTML);
    }
    compositionDidChangeDocument(t4) {
      if (this.notifyEditorElement("document-change"), !this.handlingInput) return this.render();
    }
    compositionDidChangeCurrentAttributes(t4) {
      return this.currentAttributes = t4, this.toolbarController.updateAttributes(this.currentAttributes), this.updateCurrentActions(), this.notifyEditorElement("attributes-change", { attributes: this.currentAttributes });
    }
    compositionDidPerformInsertionAtRange(t4) {
      this.pasting && (this.pastedRange = t4);
    }
    compositionShouldAcceptFile(t4) {
      return this.notifyEditorElement("file-accept", { file: t4 });
    }
    compositionDidAddAttachment(t4) {
      const e3 = this.attachmentManager.manageAttachment(t4);
      return this.notifyEditorElement("attachment-add", { attachment: e3 });
    }
    compositionDidEditAttachment(t4) {
      this.compositionController.rerenderViewForObject(t4);
      const e3 = this.attachmentManager.manageAttachment(t4);
      return this.notifyEditorElement("attachment-edit", { attachment: e3 }), this.notifyEditorElement("change");
    }
    compositionDidChangeAttachmentPreviewURL(t4) {
      return this.compositionController.invalidateViewForObject(t4), this.notifyEditorElement("change");
    }
    compositionDidRemoveAttachment(t4) {
      const e3 = this.attachmentManager.unmanageAttachment(t4);
      return this.notifyEditorElement("attachment-remove", { attachment: e3 });
    }
    compositionDidStartEditingAttachment(t4, e3) {
      return this.attachmentLocationRange = this.composition.document.getLocationRangeOfAttachment(t4), this.compositionController.installAttachmentEditorForAttachment(t4, e3), this.selectionManager.setLocationRange(this.attachmentLocationRange);
    }
    compositionDidStopEditingAttachment(t4) {
      this.compositionController.uninstallAttachmentEditor(), this.attachmentLocationRange = null;
    }
    compositionDidRequestChangingSelectionToLocationRange(t4) {
      if (!this.loadingSnapshot || this.isFocused()) return this.requestedLocationRange = t4, this.compositionRevisionWhenLocationRangeRequested = this.composition.revision, this.handlingInput ? void 0 : this.render();
    }
    compositionWillLoadSnapshot() {
      this.loadingSnapshot = true;
    }
    compositionDidLoadSnapshot() {
      this.compositionController.refreshViewCache(), this.render(), this.loadingSnapshot = false;
    }
    getSelectionManager() {
      return this.selectionManager;
    }
    attachmentManagerDidRequestRemovalOfAttachment(t4) {
      return this.removeAttachment(t4);
    }
    compositionControllerWillSyncDocumentView() {
      return this.inputController.editorWillSyncDocumentView(), this.selectionManager.lock(), this.selectionManager.clearSelection();
    }
    compositionControllerDidSyncDocumentView() {
      return this.inputController.editorDidSyncDocumentView(), this.selectionManager.unlock(), this.updateCurrentActions(), this.notifyEditorElement("sync");
    }
    compositionControllerDidRender() {
      this.requestedLocationRange && (this.compositionRevisionWhenLocationRangeRequested === this.composition.revision && this.selectionManager.setLocationRange(this.requestedLocationRange), this.requestedLocationRange = null, this.compositionRevisionWhenLocationRangeRequested = null), this.renderedCompositionRevision !== this.composition.revision && (this.runEditorFilters(), this.composition.updateCurrentAttributes(), this.notifyEditorElement("render")), this.renderedCompositionRevision = this.composition.revision;
    }
    compositionControllerDidFocus() {
      return this.isFocusedInvisibly() && this.setLocationRange({ index: 0, offset: 0 }), this.toolbarController.hideDialog(), this.notifyEditorElement("focus");
    }
    compositionControllerDidBlur() {
      return this.notifyEditorElement("blur");
    }
    compositionControllerDidSelectAttachment(t4, e3) {
      return this.toolbarController.hideDialog(), this.composition.editAttachment(t4, e3);
    }
    compositionControllerDidRequestDeselectingAttachment(t4) {
      const e3 = this.attachmentLocationRange || this.composition.document.getLocationRangeOfAttachment(t4);
      return this.selectionManager.setLocationRange(e3[1]);
    }
    compositionControllerWillUpdateAttachment(t4) {
      return this.editor.recordUndoEntry("Edit Attachment", { context: t4.id, consolidatable: true });
    }
    compositionControllerDidRequestRemovalOfAttachment(t4) {
      return this.removeAttachment(t4);
    }
    inputControllerWillHandleInput() {
      this.handlingInput = true, this.requestedRender = false;
    }
    inputControllerDidRequestRender() {
      this.requestedRender = true;
    }
    inputControllerDidHandleInput() {
      if (this.handlingInput = false, this.requestedRender) return this.requestedRender = false, this.render();
    }
    inputControllerDidAllowUnhandledInput() {
      return this.notifyEditorElement("change");
    }
    inputControllerDidRequestReparse() {
      return this.reparse();
    }
    inputControllerWillPerformTyping() {
      return this.recordTypingUndoEntry();
    }
    inputControllerWillPerformFormatting(t4) {
      return this.recordFormattingUndoEntry(t4);
    }
    inputControllerWillCutText() {
      return this.editor.recordUndoEntry("Cut");
    }
    inputControllerWillPaste(t4) {
      return this.editor.recordUndoEntry("Paste"), this.pasting = true, this.notifyEditorElement("before-paste", { paste: t4 });
    }
    inputControllerDidPaste(t4) {
      return t4.range = this.pastedRange, this.pastedRange = null, this.pasting = null, this.notifyEditorElement("paste", { paste: t4 });
    }
    inputControllerWillMoveText() {
      return this.editor.recordUndoEntry("Move");
    }
    inputControllerWillAttachFiles() {
      return this.editor.recordUndoEntry("Drop Files");
    }
    inputControllerWillPerformUndo() {
      return this.editor.undo();
    }
    inputControllerWillPerformRedo() {
      return this.editor.redo();
    }
    inputControllerDidReceiveKeyboardCommand(t4) {
      return this.toolbarController.applyKeyboardCommand(t4);
    }
    inputControllerDidStartDrag() {
      this.locationRangeBeforeDrag = this.selectionManager.getLocationRange();
    }
    inputControllerDidReceiveDragOverPoint(t4) {
      return this.selectionManager.setLocationRangeFromPointRange(t4);
    }
    inputControllerDidCancelDrag() {
      this.selectionManager.setLocationRange(this.locationRangeBeforeDrag), this.locationRangeBeforeDrag = null;
    }
    locationRangeDidChange(t4) {
      return this.composition.updateCurrentAttributes(), this.updateCurrentActions(), this.attachmentLocationRange && !Dt(this.attachmentLocationRange, t4) && this.composition.stopEditingAttachment(), this.notifyEditorElement("selection-change");
    }
    toolbarDidClickButton() {
      if (!this.getLocationRange()) return this.setLocationRange({ index: 0, offset: 0 });
    }
    toolbarDidInvokeAction(t4, e3) {
      return this.invokeAction(t4, e3);
    }
    toolbarDidToggleAttribute(t4) {
      if (this.recordFormattingUndoEntry(t4), this.composition.toggleCurrentAttribute(t4), this.render(), !this.selectionFrozen) return this.editorElement.focus();
    }
    toolbarDidUpdateAttribute(t4, e3) {
      if (this.recordFormattingUndoEntry(t4), this.composition.setCurrentAttribute(t4, e3), this.render(), !this.selectionFrozen) return this.editorElement.focus();
    }
    toolbarDidRemoveAttribute(t4) {
      if (this.recordFormattingUndoEntry(t4), this.composition.removeCurrentAttribute(t4), this.render(), !this.selectionFrozen) return this.editorElement.focus();
    }
    toolbarWillShowDialog(t4) {
      return this.composition.expandSelectionForEditing(), this.freezeSelection();
    }
    toolbarDidShowDialog(t4) {
      return this.notifyEditorElement("toolbar-dialog-show", { dialogName: t4 });
    }
    toolbarDidHideDialog(t4) {
      return this.thawSelection(), this.editorElement.focus(), this.notifyEditorElement("toolbar-dialog-hide", { dialogName: t4 });
    }
    freezeSelection() {
      if (!this.selectionFrozen) return this.selectionManager.lock(), this.composition.freezeSelection(), this.selectionFrozen = true, this.render();
    }
    thawSelection() {
      if (this.selectionFrozen) return this.composition.thawSelection(), this.selectionManager.unlock(), this.selectionFrozen = false, this.render();
    }
    canInvokeAction(t4) {
      return !!this.actionIsExternal(t4) || !(null === (e3 = this.actions[t4]) || void 0 === e3 || null === (e3 = e3.test) || void 0 === e3 || !e3.call(this));
      var e3;
    }
    invokeAction(t4, e3) {
      return this.actionIsExternal(t4) ? this.notifyEditorElement("action-invoke", { actionName: t4, invokingElement: e3 }) : null === (i3 = this.actions[t4]) || void 0 === i3 || null === (i3 = i3.perform) || void 0 === i3 ? void 0 : i3.call(this);
      var i3;
    }
    actionIsExternal(t4) {
      return /^x-./.test(t4);
    }
    getCurrentActions() {
      const t4 = {};
      for (const e3 in this.actions) t4[e3] = this.canInvokeAction(e3);
      return t4;
    }
    updateCurrentActions() {
      const t4 = this.getCurrentActions();
      if (!Tt(t4, this.currentActions)) return this.currentActions = t4, this.toolbarController.updateActions(this.currentActions), this.notifyEditorElement("actions-change", { actions: this.currentActions });
    }
    runEditorFilters() {
      let t4 = this.composition.getSnapshot();
      if (Array.from(this.editor.filters).forEach((e4) => {
        const { document: i4, selectedRange: n3 } = t4;
        t4 = e4.call(this.editor, t4) || {}, t4.document || (t4.document = i4), t4.selectedRange || (t4.selectedRange = n3);
      }), e3 = t4, i3 = this.composition.getSnapshot(), !Dt(e3.selectedRange, i3.selectedRange) || !e3.document.isEqualTo(i3.document)) return this.composition.loadSnapshot(t4);
      var e3, i3;
    }
    updateInputElement() {
      const t4 = function(t5, e3) {
        const i3 = En[e3];
        if (i3) return i3(t5);
        throw new Error("unknown content type: ".concat(e3));
      }(this.compositionController.getSerializableElement(), "text/html");
      return this.editorElement.setFormValue(t4);
    }
    notifyEditorElement(t4, e3) {
      switch (t4) {
        case "document-change":
          this.documentChangedSinceLastRender = true;
          break;
        case "render":
          this.documentChangedSinceLastRender && (this.documentChangedSinceLastRender = false, this.notifyEditorElement("change"));
          break;
        case "change":
        case "attachment-add":
        case "attachment-edit":
        case "attachment-remove":
          this.updateInputElement();
      }
      return this.editorElement.notify(t4, e3);
    }
    removeAttachment(t4) {
      return this.editor.recordUndoEntry("Delete Attachment"), this.composition.removeAttachment(t4), this.render();
    }
    recordFormattingUndoEntry(t4) {
      const e3 = mt(t4), i3 = this.selectionManager.getLocationRange();
      if (e3 || !Lt(i3)) return this.editor.recordUndoEntry("Formatting", { context: this.getUndoContext(), consolidatable: true });
    }
    recordTypingUndoEntry() {
      return this.editor.recordUndoEntry("Typing", { context: this.getUndoContext(this.currentAttributes), consolidatable: true });
    }
    getUndoContext() {
      for (var t4 = arguments.length, e3 = new Array(t4), i3 = 0; i3 < t4; i3++) e3[i3] = arguments[i3];
      return [this.getLocationContext(), this.getTimeContext(), ...Array.from(e3)];
    }
    getLocationContext() {
      const t4 = this.selectionManager.getLocationRange();
      return Lt(t4) ? t4[0].index : t4;
    }
    getTimeContext() {
      return V.interval > 0 ? Math.floor((/* @__PURE__ */ new Date()).getTime() / V.interval) : 0;
    }
    isFocused() {
      var t4;
      return this.editorElement === (null === (t4 = this.editorElement.ownerDocument) || void 0 === t4 ? void 0 : t4.activeElement);
    }
    isFocusedInvisibly() {
      return this.isFocused() && !this.getLocationRange();
    }
    get actions() {
      return this.constructor.actions;
    }
  };
  Di(_r, "actions", { undo: { test() {
    return this.editor.canUndo();
  }, perform() {
    return this.editor.undo();
  } }, redo: { test() {
    return this.editor.canRedo();
  }, perform() {
    return this.editor.redo();
  } }, link: { test() {
    return this.editor.canActivateAttribute("href");
  } }, increaseNestingLevel: { test() {
    return this.editor.canIncreaseNestingLevel();
  }, perform() {
    return this.editor.increaseNestingLevel() && this.render();
  } }, decreaseNestingLevel: { test() {
    return this.editor.canDecreaseNestingLevel();
  }, perform() {
    return this.editor.decreaseNestingLevel() && this.render();
  } }, attachFiles: { test: () => true, perform() {
    return _.pickFiles(this.editor.insertFiles);
  } } }), _r.proxyMethod("getSelectionManager().setLocationRange"), _r.proxyMethod("getSelectionManager().getLocationRange");
  var jr = Object.freeze({ __proto__: null, AttachmentEditorController: Yn, CompositionController: Xn, Controller: $n, EditorController: _r, InputController: lr, Level0InputController: gr, Level2InputController: Ar, ToolbarController: Br });
  var Wr = Object.freeze({ __proto__: null, MutationObserver: er, SelectionChangeObserver: Ot });
  var Ur = Object.freeze({ __proto__: null, FileVerificationOperation: nr, ImagePreloadOperation: Ui });
  vt("trix-toolbar", "%t {\n  display: block;\n}\n\n%t {\n  white-space: nowrap;\n}\n\n%t [data-trix-dialog] {\n  display: none;\n}\n\n%t [data-trix-dialog][data-trix-active] {\n  display: block;\n}\n\n%t [data-trix-dialog] [data-trix-validate]:invalid {\n  background-color: #ffdddd;\n}");
  var Vr = class extends HTMLElement {
    connectedCallback() {
      "" === this.innerHTML && (this.innerHTML = U.getDefaultHTML());
    }
  };
  var zr = 0;
  var qr = function(t4) {
    if (!t4.hasAttribute("contenteditable")) return t4.setAttribute("contenteditable", ""), function(t5) {
      let e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      return e3.times = 1, b(t5, e3);
    }("focus", { onElement: t4, withCallback: () => Hr(t4) });
  };
  var Hr = function(t4) {
    return Jr(t4), Kr(t4);
  };
  var Jr = function(t4) {
    var e3, i3;
    if (null !== (e3 = (i3 = document).queryCommandSupported) && void 0 !== e3 && e3.call(i3, "enableObjectResizing")) return document.execCommand("enableObjectResizing", false, false), b("mscontrolselect", { onElement: t4, preventDefault: true });
  };
  var Kr = function(t4) {
    var e3, i3;
    if (null !== (e3 = (i3 = document).queryCommandSupported) && void 0 !== e3 && e3.call(i3, "DefaultParagraphSeparator")) {
      const { tagName: t5 } = n.default;
      if (["div", "p"].includes(t5)) return document.execCommand("DefaultParagraphSeparator", false, t5);
    }
  };
  var Gr = a.forcesObjectResizing ? { display: "inline", width: "auto" } : { display: "inline-block", width: "1px" };
  vt("trix-editor", "%t {\n    display: block;\n}\n\n%t:empty::before {\n    content: attr(placeholder);\n    color: graytext;\n    cursor: text;\n    pointer-events: none;\n    white-space: pre-line;\n}\n\n%t a[contenteditable=false] {\n    cursor: text;\n}\n\n%t img {\n    max-width: 100%;\n    height: auto;\n}\n\n%t ".concat(e, " figcaption textarea {\n    resize: none;\n}\n\n%t ").concat(e, " figcaption textarea.trix-autoresize-clone {\n    position: absolute;\n    left: -9999px;\n    max-height: 0px;\n}\n\n%t ").concat(e, " figcaption[data-trix-placeholder]:empty::before {\n    content: attr(data-trix-placeholder);\n    color: graytext;\n}\n\n%t [data-trix-cursor-target] {\n    display: ").concat(Gr.display, " !important;\n    width: ").concat(Gr.width, " !important;\n    padding: 0 !important;\n    margin: 0 !important;\n    border: none !important;\n}\n\n%t [data-trix-cursor-target=left] {\n    vertical-align: top !important;\n    margin-left: -1px !important;\n}\n\n%t [data-trix-cursor-target=right] {\n    vertical-align: bottom !important;\n    margin-right: -1px !important;\n}"));
  var Yr = /* @__PURE__ */ new WeakMap();
  var Xr = /* @__PURE__ */ new WeakSet();
  var $r = class {
    constructor(t4) {
      var e3, i3;
      _i(e3 = this, i3 = Xr), i3.add(e3), ji(this, Yr, { writable: true, value: void 0 }), this.element = t4, Oi(this, Yr, t4.attachInternals());
    }
    connectedCallback() {
      Bi(this, Xr, Zr).call(this);
    }
    disconnectedCallback() {
    }
    get labels() {
      return Ii(this, Yr).labels;
    }
    get disabled() {
      var t4;
      return null === (t4 = this.element.inputElement) || void 0 === t4 ? void 0 : t4.disabled;
    }
    set disabled(t4) {
      this.element.toggleAttribute("disabled", t4);
    }
    get required() {
      return this.element.hasAttribute("required");
    }
    set required(t4) {
      this.element.toggleAttribute("required", t4), Bi(this, Xr, Zr).call(this);
    }
    get validity() {
      return Ii(this, Yr).validity;
    }
    get validationMessage() {
      return Ii(this, Yr).validationMessage;
    }
    get willValidate() {
      return Ii(this, Yr).willValidate;
    }
    setFormValue(t4) {
      Bi(this, Xr, Zr).call(this);
    }
    checkValidity() {
      return Ii(this, Yr).checkValidity();
    }
    reportValidity() {
      return Ii(this, Yr).reportValidity();
    }
    setCustomValidity(t4) {
      Bi(this, Xr, Zr).call(this, t4);
    }
  };
  function Zr() {
    let t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
    const { required: e3, value: i3 } = this.element, n3 = e3 && !i3, r3 = !!t4, o3 = T("input", { required: e3 }), s3 = t4 || o3.validationMessage;
    Ii(this, Yr).setValidity({ valueMissing: n3, customError: r3 }, s3);
  }
  var Qr = /* @__PURE__ */ new WeakMap();
  var to = /* @__PURE__ */ new WeakMap();
  var eo = /* @__PURE__ */ new WeakMap();
  var io = class {
    constructor(t4) {
      ji(this, Qr, { writable: true, value: void 0 }), ji(this, to, { writable: true, value: (t5) => {
        t5.defaultPrevented || t5.target === this.element.form && this.element.reset();
      } }), ji(this, eo, { writable: true, value: (t5) => {
        if (t5.defaultPrevented) return;
        if (this.element.contains(t5.target)) return;
        const e3 = y(t5.target, { matchingSelector: "label" });
        e3 && Array.from(this.labels).includes(e3) && this.element.focus();
      } }), this.element = t4;
    }
    connectedCallback() {
      Oi(this, Qr, function(t4) {
        if (t4.hasAttribute("aria-label") || t4.hasAttribute("aria-labelledby")) return;
        const e3 = function() {
          const e4 = Array.from(t4.labels).map((e5) => {
            if (!e5.contains(t4)) return e5.textContent;
          }).filter((t5) => t5), i3 = e4.join(" ");
          return i3 ? t4.setAttribute("aria-label", i3) : t4.removeAttribute("aria-label");
        };
        return e3(), b("focus", { onElement: t4, withCallback: e3 });
      }(this.element)), window.addEventListener("reset", Ii(this, to), false), window.addEventListener("click", Ii(this, eo), false);
    }
    disconnectedCallback() {
      var t4;
      null === (t4 = Ii(this, Qr)) || void 0 === t4 || t4.destroy(), window.removeEventListener("reset", Ii(this, to), false), window.removeEventListener("click", Ii(this, eo), false);
    }
    get labels() {
      const t4 = [];
      this.element.id && this.element.ownerDocument && t4.push(...Array.from(this.element.ownerDocument.querySelectorAll("label[for='".concat(this.element.id, "']")) || []));
      const e3 = y(this.element, { matchingSelector: "label" });
      return e3 && [this.element, null].includes(e3.control) && t4.push(e3), t4;
    }
    get disabled() {
      return console.warn("This browser does not support the [disabled] attribute for trix-editor elements."), false;
    }
    set disabled(t4) {
      console.warn("This browser does not support the [disabled] attribute for trix-editor elements.");
    }
    get required() {
      return console.warn("This browser does not support the [required] attribute for trix-editor elements."), false;
    }
    set required(t4) {
      console.warn("This browser does not support the [required] attribute for trix-editor elements.");
    }
    get validity() {
      return console.warn("This browser does not support the validity property for trix-editor elements."), null;
    }
    get validationMessage() {
      return console.warn("This browser does not support the validationMessage property for trix-editor elements."), "";
    }
    get willValidate() {
      return console.warn("This browser does not support the willValidate property for trix-editor elements."), false;
    }
    setFormValue(t4) {
    }
    checkValidity() {
      return console.warn("This browser does not support checkValidity() for trix-editor elements."), true;
    }
    reportValidity() {
      return console.warn("This browser does not support reportValidity() for trix-editor elements."), true;
    }
    setCustomValidity(t4) {
      console.warn("This browser does not support setCustomValidity(validationMessage) for trix-editor elements.");
    }
  };
  var no = /* @__PURE__ */ new WeakMap();
  var ro = class extends HTMLElement {
    constructor() {
      super(), ji(this, no, { writable: true, value: void 0 }), Oi(this, no, this.constructor.formAssociated ? new $r(this) : new io(this));
    }
    get trixId() {
      return this.hasAttribute("trix-id") ? this.getAttribute("trix-id") : (this.setAttribute("trix-id", ++zr), this.trixId);
    }
    get labels() {
      return Ii(this, no).labels;
    }
    get disabled() {
      return Ii(this, no).disabled;
    }
    set disabled(t4) {
      Ii(this, no).disabled = t4;
    }
    get required() {
      return Ii(this, no).required;
    }
    set required(t4) {
      Ii(this, no).required = t4;
    }
    get validity() {
      return Ii(this, no).validity;
    }
    get validationMessage() {
      return Ii(this, no).validationMessage;
    }
    get willValidate() {
      return Ii(this, no).willValidate;
    }
    get type() {
      return this.localName;
    }
    get toolbarElement() {
      var t4;
      if (this.hasAttribute("toolbar")) return null === (t4 = this.ownerDocument) || void 0 === t4 ? void 0 : t4.getElementById(this.getAttribute("toolbar"));
      if (this.parentNode) {
        const t5 = "trix-toolbar-".concat(this.trixId);
        return this.setAttribute("toolbar", t5), this.internalToolbar = T("trix-toolbar", { id: t5 }), this.parentNode.insertBefore(this.internalToolbar, this), this.internalToolbar;
      }
    }
    get form() {
      var t4;
      return null === (t4 = this.inputElement) || void 0 === t4 ? void 0 : t4.form;
    }
    get inputElement() {
      var t4;
      if (this.hasAttribute("input")) return null === (t4 = this.ownerDocument) || void 0 === t4 ? void 0 : t4.getElementById(this.getAttribute("input"));
      if (this.parentNode) {
        const t5 = "trix-input-".concat(this.trixId);
        this.setAttribute("input", t5);
        const e3 = T("input", { type: "hidden", id: t5 });
        return this.parentNode.insertBefore(e3, this.nextElementSibling), e3;
      }
    }
    get editor() {
      var t4;
      return null === (t4 = this.editorController) || void 0 === t4 ? void 0 : t4.editor;
    }
    get name() {
      var t4;
      return null === (t4 = this.inputElement) || void 0 === t4 ? void 0 : t4.name;
    }
    get value() {
      var t4;
      return null === (t4 = this.inputElement) || void 0 === t4 ? void 0 : t4.value;
    }
    set value(t4) {
      var e3;
      this.defaultValue = t4, null === (e3 = this.editor) || void 0 === e3 || e3.loadHTML(this.defaultValue);
    }
    attributeChangedCallback(t4, e3, i3) {
      "connected" === t4 && this.isConnected && null != e3 && e3 !== i3 && requestAnimationFrame(() => this.reconnect());
    }
    notify(t4, e3) {
      if (this.editorController) return v("trix-".concat(t4), { onElement: this, attributes: e3 });
    }
    setFormValue(t4) {
      this.inputElement && (this.inputElement.value = t4, Ii(this, no).setFormValue(t4));
    }
    connectedCallback() {
      this.hasAttribute("data-trix-internal") || (qr(this), function(t4) {
        if (!t4.hasAttribute("role")) t4.setAttribute("role", "textbox");
      }(this), this.editorController || (v("trix-before-initialize", { onElement: this }), this.editorController = new _r({ editorElement: this, html: this.defaultValue = this.value }), requestAnimationFrame(() => v("trix-initialize", { onElement: this }))), this.editorController.registerSelectionManager(), Ii(this, no).connectedCallback(), this.toggleAttribute("connected", true), function(t4) {
        if (!document.querySelector(":focus") && t4.hasAttribute("autofocus") && document.querySelector("[autofocus]") === t4) t4.focus();
      }(this));
    }
    disconnectedCallback() {
      var t4;
      null === (t4 = this.editorController) || void 0 === t4 || t4.unregisterSelectionManager(), Ii(this, no).disconnectedCallback(), this.toggleAttribute("connected", false);
    }
    reconnect() {
      this.removeInternalToolbar(), this.disconnectedCallback(), this.connectedCallback();
    }
    removeInternalToolbar() {
      var t4;
      null === (t4 = this.internalToolbar) || void 0 === t4 || t4.remove(), this.internalToolbar = null;
    }
    checkValidity() {
      return Ii(this, no).checkValidity();
    }
    reportValidity() {
      return Ii(this, no).reportValidity();
    }
    setCustomValidity(t4) {
      Ii(this, no).setCustomValidity(t4);
    }
    formDisabledCallback(t4) {
      this.inputElement && (this.inputElement.disabled = t4), this.toggleAttribute("contenteditable", !t4);
    }
    formResetCallback() {
      this.reset();
    }
    reset() {
      this.value = this.defaultValue;
    }
  };
  Di(ro, "formAssociated", "ElementInternals" in window), Di(ro, "observedAttributes", ["connected"]);
  var oo = { VERSION: t, config: z, core: Sn, models: zn, views: qn, controllers: jr, observers: Wr, operations: Ur, elements: Object.freeze({ __proto__: null, TrixEditorElement: ro, TrixToolbarElement: Vr }), filters: Object.freeze({ __proto__: null, Filter: In, attachmentGalleryFilter: On }) };
  Object.assign(oo, zn), window.Trix = oo, setTimeout(function() {
    customElements.get("trix-toolbar") || customElements.define("trix-toolbar", Vr), customElements.get("trix-editor") || customElements.define("trix-editor", ro);
  }, 0);

  // lib/lesli_assets_js/application.js
  var import_dayjs = __toESM(require_dayjs_min());

  // node_modules/alpinejs/dist/module.esm.js
  var flushPending = false;
  var flushing = false;
  var queue = [];
  var lastFlushedIndex = -1;
  function scheduler(callback) {
    queueJob(callback);
  }
  function queueJob(job) {
    if (!queue.includes(job))
      queue.push(job);
    queueFlush();
  }
  function dequeueJob(job) {
    let index = queue.indexOf(job);
    if (index !== -1 && index > lastFlushedIndex)
      queue.splice(index, 1);
  }
  function queueFlush() {
    if (!flushing && !flushPending) {
      flushPending = true;
      queueMicrotask(flushJobs);
    }
  }
  function flushJobs() {
    flushPending = false;
    flushing = true;
    for (let i3 = 0; i3 < queue.length; i3++) {
      queue[i3]();
      lastFlushedIndex = i3;
    }
    queue.length = 0;
    lastFlushedIndex = -1;
    flushing = false;
  }
  var reactive;
  var effect;
  var release;
  var raw;
  var shouldSchedule = true;
  function disableEffectScheduling(callback) {
    shouldSchedule = false;
    callback();
    shouldSchedule = true;
  }
  function setReactivityEngine(engine) {
    reactive = engine.reactive;
    release = engine.release;
    effect = (callback) => engine.effect(callback, { scheduler: (task) => {
      if (shouldSchedule) {
        scheduler(task);
      } else {
        task();
      }
    } });
    raw = engine.raw;
  }
  function overrideEffect(override) {
    effect = override;
  }
  function elementBoundEffect(el) {
    let cleanup2 = () => {
    };
    let wrappedEffect = (callback) => {
      let effectReference = effect(callback);
      if (!el._x_effects) {
        el._x_effects = /* @__PURE__ */ new Set();
        el._x_runEffects = () => {
          el._x_effects.forEach((i3) => i3());
        };
      }
      el._x_effects.add(effectReference);
      cleanup2 = () => {
        if (effectReference === void 0)
          return;
        el._x_effects.delete(effectReference);
        release(effectReference);
      };
      return effectReference;
    };
    return [wrappedEffect, () => {
      cleanup2();
    }];
  }
  function watch(getter, callback) {
    let firstTime = true;
    let oldValue;
    let effectReference = effect(() => {
      let value = getter();
      JSON.stringify(value);
      if (!firstTime) {
        queueMicrotask(() => {
          callback(value, oldValue);
          oldValue = value;
        });
      } else {
        oldValue = value;
      }
      firstTime = false;
    });
    return () => release(effectReference);
  }
  var onAttributeAddeds = [];
  var onElRemoveds = [];
  var onElAddeds = [];
  function onElAdded(callback) {
    onElAddeds.push(callback);
  }
  function onElRemoved(el, callback) {
    if (typeof callback === "function") {
      if (!el._x_cleanups)
        el._x_cleanups = [];
      el._x_cleanups.push(callback);
    } else {
      callback = el;
      onElRemoveds.push(callback);
    }
  }
  function onAttributesAdded(callback) {
    onAttributeAddeds.push(callback);
  }
  function onAttributeRemoved(el, name, callback) {
    if (!el._x_attributeCleanups)
      el._x_attributeCleanups = {};
    if (!el._x_attributeCleanups[name])
      el._x_attributeCleanups[name] = [];
    el._x_attributeCleanups[name].push(callback);
  }
  function cleanupAttributes(el, names) {
    if (!el._x_attributeCleanups)
      return;
    Object.entries(el._x_attributeCleanups).forEach(([name, value]) => {
      if (names === void 0 || names.includes(name)) {
        value.forEach((i3) => i3());
        delete el._x_attributeCleanups[name];
      }
    });
  }
  function cleanupElement(el) {
    el._x_effects?.forEach(dequeueJob);
    while (el._x_cleanups?.length)
      el._x_cleanups.pop()();
  }
  var observer = new MutationObserver(onMutate);
  var currentlyObserving = false;
  function startObservingMutations() {
    observer.observe(document, { subtree: true, childList: true, attributes: true, attributeOldValue: true });
    currentlyObserving = true;
  }
  function stopObservingMutations() {
    flushObserver();
    observer.disconnect();
    currentlyObserving = false;
  }
  var queuedMutations = [];
  function flushObserver() {
    let records = observer.takeRecords();
    queuedMutations.push(() => records.length > 0 && onMutate(records));
    let queueLengthWhenTriggered = queuedMutations.length;
    queueMicrotask(() => {
      if (queuedMutations.length === queueLengthWhenTriggered) {
        while (queuedMutations.length > 0)
          queuedMutations.shift()();
      }
    });
  }
  function mutateDom(callback) {
    if (!currentlyObserving)
      return callback();
    stopObservingMutations();
    let result = callback();
    startObservingMutations();
    return result;
  }
  var isCollecting = false;
  var deferredMutations = [];
  function deferMutations() {
    isCollecting = true;
  }
  function flushAndStopDeferringMutations() {
    isCollecting = false;
    onMutate(deferredMutations);
    deferredMutations = [];
  }
  function onMutate(mutations) {
    if (isCollecting) {
      deferredMutations = deferredMutations.concat(mutations);
      return;
    }
    let addedNodes = [];
    let removedNodes = /* @__PURE__ */ new Set();
    let addedAttributes = /* @__PURE__ */ new Map();
    let removedAttributes = /* @__PURE__ */ new Map();
    for (let i3 = 0; i3 < mutations.length; i3++) {
      if (mutations[i3].target._x_ignoreMutationObserver)
        continue;
      if (mutations[i3].type === "childList") {
        mutations[i3].removedNodes.forEach((node) => {
          if (node.nodeType !== 1)
            return;
          if (!node._x_marker)
            return;
          removedNodes.add(node);
        });
        mutations[i3].addedNodes.forEach((node) => {
          if (node.nodeType !== 1)
            return;
          if (removedNodes.has(node)) {
            removedNodes.delete(node);
            return;
          }
          if (node._x_marker)
            return;
          addedNodes.push(node);
        });
      }
      if (mutations[i3].type === "attributes") {
        let el = mutations[i3].target;
        let name = mutations[i3].attributeName;
        let oldValue = mutations[i3].oldValue;
        let add2 = () => {
          if (!addedAttributes.has(el))
            addedAttributes.set(el, []);
          addedAttributes.get(el).push({ name, value: el.getAttribute(name) });
        };
        let remove = () => {
          if (!removedAttributes.has(el))
            removedAttributes.set(el, []);
          removedAttributes.get(el).push(name);
        };
        if (el.hasAttribute(name) && oldValue === null) {
          add2();
        } else if (el.hasAttribute(name)) {
          remove();
          add2();
        } else {
          remove();
        }
      }
    }
    removedAttributes.forEach((attrs, el) => {
      cleanupAttributes(el, attrs);
    });
    addedAttributes.forEach((attrs, el) => {
      onAttributeAddeds.forEach((i3) => i3(el, attrs));
    });
    for (let node of removedNodes) {
      if (addedNodes.some((i3) => i3.contains(node)))
        continue;
      onElRemoveds.forEach((i3) => i3(node));
    }
    for (let node of addedNodes) {
      if (!node.isConnected)
        continue;
      onElAddeds.forEach((i3) => i3(node));
    }
    addedNodes = null;
    removedNodes = null;
    addedAttributes = null;
    removedAttributes = null;
  }
  function scope(node) {
    return mergeProxies(closestDataStack(node));
  }
  function addScopeToNode(node, data2, referenceNode) {
    node._x_dataStack = [data2, ...closestDataStack(referenceNode || node)];
    return () => {
      node._x_dataStack = node._x_dataStack.filter((i3) => i3 !== data2);
    };
  }
  function closestDataStack(node) {
    if (node._x_dataStack)
      return node._x_dataStack;
    if (typeof ShadowRoot === "function" && node instanceof ShadowRoot) {
      return closestDataStack(node.host);
    }
    if (!node.parentNode) {
      return [];
    }
    return closestDataStack(node.parentNode);
  }
  function mergeProxies(objects) {
    return new Proxy({ objects }, mergeProxyTrap);
  }
  var mergeProxyTrap = {
    ownKeys({ objects }) {
      return Array.from(
        new Set(objects.flatMap((i3) => Object.keys(i3)))
      );
    },
    has({ objects }, name) {
      if (name == Symbol.unscopables)
        return false;
      return objects.some(
        (obj) => Object.prototype.hasOwnProperty.call(obj, name) || Reflect.has(obj, name)
      );
    },
    get({ objects }, name, thisProxy) {
      if (name == "toJSON")
        return collapseProxies;
      return Reflect.get(
        objects.find(
          (obj) => Reflect.has(obj, name)
        ) || {},
        name,
        thisProxy
      );
    },
    set({ objects }, name, value, thisProxy) {
      const target = objects.find(
        (obj) => Object.prototype.hasOwnProperty.call(obj, name)
      ) || objects[objects.length - 1];
      const descriptor = Object.getOwnPropertyDescriptor(target, name);
      if (descriptor?.set && descriptor?.get)
        return descriptor.set.call(thisProxy, value) || true;
      return Reflect.set(target, name, value);
    }
  };
  function collapseProxies() {
    let keys = Reflect.ownKeys(this);
    return keys.reduce((acc, key) => {
      acc[key] = Reflect.get(this, key);
      return acc;
    }, {});
  }
  function initInterceptors(data2) {
    let isObject2 = (val) => typeof val === "object" && !Array.isArray(val) && val !== null;
    let recurse = (obj, basePath = "") => {
      Object.entries(Object.getOwnPropertyDescriptors(obj)).forEach(([key, { value, enumerable }]) => {
        if (enumerable === false || value === void 0)
          return;
        if (typeof value === "object" && value !== null && value.__v_skip)
          return;
        let path = basePath === "" ? key : `${basePath}.${key}`;
        if (typeof value === "object" && value !== null && value._x_interceptor) {
          obj[key] = value.initialize(data2, path, key);
        } else {
          if (isObject2(value) && value !== obj && !(value instanceof Element)) {
            recurse(value, path);
          }
        }
      });
    };
    return recurse(data2);
  }
  function interceptor(callback, mutateObj = () => {
  }) {
    let obj = {
      initialValue: void 0,
      _x_interceptor: true,
      initialize(data2, path, key) {
        return callback(this.initialValue, () => get(data2, path), (value) => set(data2, path, value), path, key);
      }
    };
    mutateObj(obj);
    return (initialValue) => {
      if (typeof initialValue === "object" && initialValue !== null && initialValue._x_interceptor) {
        let initialize = obj.initialize.bind(obj);
        obj.initialize = (data2, path, key) => {
          let innerValue = initialValue.initialize(data2, path, key);
          obj.initialValue = innerValue;
          return initialize(data2, path, key);
        };
      } else {
        obj.initialValue = initialValue;
      }
      return obj;
    };
  }
  function get(obj, path) {
    return path.split(".").reduce((carry, segment) => carry[segment], obj);
  }
  function set(obj, path, value) {
    if (typeof path === "string")
      path = path.split(".");
    if (path.length === 1)
      obj[path[0]] = value;
    else if (path.length === 0)
      throw error;
    else {
      if (obj[path[0]])
        return set(obj[path[0]], path.slice(1), value);
      else {
        obj[path[0]] = {};
        return set(obj[path[0]], path.slice(1), value);
      }
    }
  }
  var magics = {};
  function magic(name, callback) {
    magics[name] = callback;
  }
  function injectMagics(obj, el) {
    let memoizedUtilities = getUtilities(el);
    Object.entries(magics).forEach(([name, callback]) => {
      Object.defineProperty(obj, `$${name}`, {
        get() {
          return callback(el, memoizedUtilities);
        },
        enumerable: false
      });
    });
    return obj;
  }
  function getUtilities(el) {
    let [utilities, cleanup2] = getElementBoundUtilities(el);
    let utils = { interceptor, ...utilities };
    onElRemoved(el, cleanup2);
    return utils;
  }
  function tryCatch(el, expression, callback, ...args) {
    try {
      return callback(...args);
    } catch (e3) {
      handleError(e3, el, expression);
    }
  }
  function handleError(error2, el, expression = void 0) {
    error2 = Object.assign(
      error2 ?? { message: "No error message given." },
      { el, expression }
    );
    console.warn(`Alpine Expression Error: ${error2.message}

${expression ? 'Expression: "' + expression + '"\n\n' : ""}`, el);
    setTimeout(() => {
      throw error2;
    }, 0);
  }
  var shouldAutoEvaluateFunctions = true;
  function dontAutoEvaluateFunctions(callback) {
    let cache = shouldAutoEvaluateFunctions;
    shouldAutoEvaluateFunctions = false;
    let result = callback();
    shouldAutoEvaluateFunctions = cache;
    return result;
  }
  function evaluate(el, expression, extras = {}) {
    let result;
    evaluateLater(el, expression)((value) => result = value, extras);
    return result;
  }
  function evaluateLater(...args) {
    return theEvaluatorFunction(...args);
  }
  var theEvaluatorFunction = normalEvaluator;
  function setEvaluator(newEvaluator) {
    theEvaluatorFunction = newEvaluator;
  }
  function normalEvaluator(el, expression) {
    let overriddenMagics = {};
    injectMagics(overriddenMagics, el);
    let dataStack = [overriddenMagics, ...closestDataStack(el)];
    let evaluator = typeof expression === "function" ? generateEvaluatorFromFunction(dataStack, expression) : generateEvaluatorFromString(dataStack, expression, el);
    return tryCatch.bind(null, el, expression, evaluator);
  }
  function generateEvaluatorFromFunction(dataStack, func) {
    return (receiver = () => {
    }, { scope: scope2 = {}, params = [] } = {}) => {
      let result = func.apply(mergeProxies([scope2, ...dataStack]), params);
      runIfTypeOfFunction(receiver, result);
    };
  }
  var evaluatorMemo = {};
  function generateFunctionFromString(expression, el) {
    if (evaluatorMemo[expression]) {
      return evaluatorMemo[expression];
    }
    let AsyncFunction = Object.getPrototypeOf(async function() {
    }).constructor;
    let rightSideSafeExpression = /^[\n\s]*if.*\(.*\)/.test(expression.trim()) || /^(let|const)\s/.test(expression.trim()) ? `(async()=>{ ${expression} })()` : expression;
    const safeAsyncFunction = () => {
      try {
        let func2 = new AsyncFunction(
          ["__self", "scope"],
          `with (scope) { __self.result = ${rightSideSafeExpression} }; __self.finished = true; return __self.result;`
        );
        Object.defineProperty(func2, "name", {
          value: `[Alpine] ${expression}`
        });
        return func2;
      } catch (error2) {
        handleError(error2, el, expression);
        return Promise.resolve();
      }
    };
    let func = safeAsyncFunction();
    evaluatorMemo[expression] = func;
    return func;
  }
  function generateEvaluatorFromString(dataStack, expression, el) {
    let func = generateFunctionFromString(expression, el);
    return (receiver = () => {
    }, { scope: scope2 = {}, params = [] } = {}) => {
      func.result = void 0;
      func.finished = false;
      let completeScope = mergeProxies([scope2, ...dataStack]);
      if (typeof func === "function") {
        let promise = func(func, completeScope).catch((error2) => handleError(error2, el, expression));
        if (func.finished) {
          runIfTypeOfFunction(receiver, func.result, completeScope, params, el);
          func.result = void 0;
        } else {
          promise.then((result) => {
            runIfTypeOfFunction(receiver, result, completeScope, params, el);
          }).catch((error2) => handleError(error2, el, expression)).finally(() => func.result = void 0);
        }
      }
    };
  }
  function runIfTypeOfFunction(receiver, value, scope2, params, el) {
    if (shouldAutoEvaluateFunctions && typeof value === "function") {
      let result = value.apply(scope2, params);
      if (result instanceof Promise) {
        result.then((i3) => runIfTypeOfFunction(receiver, i3, scope2, params)).catch((error2) => handleError(error2, el, value));
      } else {
        receiver(result);
      }
    } else if (typeof value === "object" && value instanceof Promise) {
      value.then((i3) => receiver(i3));
    } else {
      receiver(value);
    }
  }
  var prefixAsString = "x-";
  function prefix(subject = "") {
    return prefixAsString + subject;
  }
  function setPrefix(newPrefix) {
    prefixAsString = newPrefix;
  }
  var directiveHandlers = {};
  function directive(name, callback) {
    directiveHandlers[name] = callback;
    return {
      before(directive2) {
        if (!directiveHandlers[directive2]) {
          console.warn(String.raw`Cannot find directive \`${directive2}\`. \`${name}\` will use the default order of execution`);
          return;
        }
        const pos = directiveOrder.indexOf(directive2);
        directiveOrder.splice(pos >= 0 ? pos : directiveOrder.indexOf("DEFAULT"), 0, name);
      }
    };
  }
  function directiveExists(name) {
    return Object.keys(directiveHandlers).includes(name);
  }
  function directives(el, attributes, originalAttributeOverride) {
    attributes = Array.from(attributes);
    if (el._x_virtualDirectives) {
      let vAttributes = Object.entries(el._x_virtualDirectives).map(([name, value]) => ({ name, value }));
      let staticAttributes = attributesOnly(vAttributes);
      vAttributes = vAttributes.map((attribute) => {
        if (staticAttributes.find((attr) => attr.name === attribute.name)) {
          return {
            name: `x-bind:${attribute.name}`,
            value: `"${attribute.value}"`
          };
        }
        return attribute;
      });
      attributes = attributes.concat(vAttributes);
    }
    let transformedAttributeMap = {};
    let directives2 = attributes.map(toTransformedAttributes((newName, oldName) => transformedAttributeMap[newName] = oldName)).filter(outNonAlpineAttributes).map(toParsedDirectives(transformedAttributeMap, originalAttributeOverride)).sort(byPriority);
    return directives2.map((directive2) => {
      return getDirectiveHandler(el, directive2);
    });
  }
  function attributesOnly(attributes) {
    return Array.from(attributes).map(toTransformedAttributes()).filter((attr) => !outNonAlpineAttributes(attr));
  }
  var isDeferringHandlers = false;
  var directiveHandlerStacks = /* @__PURE__ */ new Map();
  var currentHandlerStackKey = Symbol();
  function deferHandlingDirectives(callback) {
    isDeferringHandlers = true;
    let key = Symbol();
    currentHandlerStackKey = key;
    directiveHandlerStacks.set(key, []);
    let flushHandlers = () => {
      while (directiveHandlerStacks.get(key).length)
        directiveHandlerStacks.get(key).shift()();
      directiveHandlerStacks.delete(key);
    };
    let stopDeferring = () => {
      isDeferringHandlers = false;
      flushHandlers();
    };
    callback(flushHandlers);
    stopDeferring();
  }
  function getElementBoundUtilities(el) {
    let cleanups = [];
    let cleanup2 = (callback) => cleanups.push(callback);
    let [effect3, cleanupEffect] = elementBoundEffect(el);
    cleanups.push(cleanupEffect);
    let utilities = {
      Alpine: alpine_default,
      effect: effect3,
      cleanup: cleanup2,
      evaluateLater: evaluateLater.bind(evaluateLater, el),
      evaluate: evaluate.bind(evaluate, el)
    };
    let doCleanup = () => cleanups.forEach((i3) => i3());
    return [utilities, doCleanup];
  }
  function getDirectiveHandler(el, directive2) {
    let noop = () => {
    };
    let handler4 = directiveHandlers[directive2.type] || noop;
    let [utilities, cleanup2] = getElementBoundUtilities(el);
    onAttributeRemoved(el, directive2.original, cleanup2);
    let fullHandler = () => {
      if (el._x_ignore || el._x_ignoreSelf)
        return;
      handler4.inline && handler4.inline(el, directive2, utilities);
      handler4 = handler4.bind(handler4, el, directive2, utilities);
      isDeferringHandlers ? directiveHandlerStacks.get(currentHandlerStackKey).push(handler4) : handler4();
    };
    fullHandler.runCleanups = cleanup2;
    return fullHandler;
  }
  var startingWith = (subject, replacement) => ({ name, value }) => {
    if (name.startsWith(subject))
      name = name.replace(subject, replacement);
    return { name, value };
  };
  var into = (i3) => i3;
  function toTransformedAttributes(callback = () => {
  }) {
    return ({ name, value }) => {
      let { name: newName, value: newValue } = attributeTransformers.reduce((carry, transform) => {
        return transform(carry);
      }, { name, value });
      if (newName !== name)
        callback(newName, name);
      return { name: newName, value: newValue };
    };
  }
  var attributeTransformers = [];
  function mapAttributes(callback) {
    attributeTransformers.push(callback);
  }
  function outNonAlpineAttributes({ name }) {
    return alpineAttributeRegex().test(name);
  }
  var alpineAttributeRegex = () => new RegExp(`^${prefixAsString}([^:^.]+)\\b`);
  function toParsedDirectives(transformedAttributeMap, originalAttributeOverride) {
    return ({ name, value }) => {
      let typeMatch = name.match(alpineAttributeRegex());
      let valueMatch = name.match(/:([a-zA-Z0-9\-_:]+)/);
      let modifiers = name.match(/\.[^.\]]+(?=[^\]]*$)/g) || [];
      let original = originalAttributeOverride || transformedAttributeMap[name] || name;
      return {
        type: typeMatch ? typeMatch[1] : null,
        value: valueMatch ? valueMatch[1] : null,
        modifiers: modifiers.map((i3) => i3.replace(".", "")),
        expression: value,
        original
      };
    };
  }
  var DEFAULT = "DEFAULT";
  var directiveOrder = [
    "ignore",
    "ref",
    "data",
    "id",
    "anchor",
    "bind",
    "init",
    "for",
    "model",
    "modelable",
    "transition",
    "show",
    "if",
    DEFAULT,
    "teleport"
  ];
  function byPriority(a3, b3) {
    let typeA = directiveOrder.indexOf(a3.type) === -1 ? DEFAULT : a3.type;
    let typeB = directiveOrder.indexOf(b3.type) === -1 ? DEFAULT : b3.type;
    return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);
  }
  function dispatch(el, name, detail = {}) {
    el.dispatchEvent(
      new CustomEvent(name, {
        detail,
        bubbles: true,
        // Allows events to pass the shadow DOM barrier.
        composed: true,
        cancelable: true
      })
    );
  }
  function walk(el, callback) {
    if (typeof ShadowRoot === "function" && el instanceof ShadowRoot) {
      Array.from(el.children).forEach((el2) => walk(el2, callback));
      return;
    }
    let skip = false;
    callback(el, () => skip = true);
    if (skip)
      return;
    let node = el.firstElementChild;
    while (node) {
      walk(node, callback, false);
      node = node.nextElementSibling;
    }
  }
  function warn(message, ...args) {
    console.warn(`Alpine Warning: ${message}`, ...args);
  }
  var started = false;
  function start() {
    if (started)
      warn("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems.");
    started = true;
    if (!document.body)
      warn("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?");
    dispatch(document, "alpine:init");
    dispatch(document, "alpine:initializing");
    startObservingMutations();
    onElAdded((el) => initTree(el, walk));
    onElRemoved((el) => destroyTree(el));
    onAttributesAdded((el, attrs) => {
      directives(el, attrs).forEach((handle) => handle());
    });
    let outNestedComponents = (el) => !closestRoot(el.parentElement, true);
    Array.from(document.querySelectorAll(allSelectors().join(","))).filter(outNestedComponents).forEach((el) => {
      initTree(el);
    });
    dispatch(document, "alpine:initialized");
    setTimeout(() => {
      warnAboutMissingPlugins();
    });
  }
  var rootSelectorCallbacks = [];
  var initSelectorCallbacks = [];
  function rootSelectors() {
    return rootSelectorCallbacks.map((fn2) => fn2());
  }
  function allSelectors() {
    return rootSelectorCallbacks.concat(initSelectorCallbacks).map((fn2) => fn2());
  }
  function addRootSelector(selectorCallback) {
    rootSelectorCallbacks.push(selectorCallback);
  }
  function addInitSelector(selectorCallback) {
    initSelectorCallbacks.push(selectorCallback);
  }
  function closestRoot(el, includeInitSelectors = false) {
    return findClosest(el, (element) => {
      const selectors = includeInitSelectors ? allSelectors() : rootSelectors();
      if (selectors.some((selector) => element.matches(selector)))
        return true;
    });
  }
  function findClosest(el, callback) {
    if (!el)
      return;
    if (callback(el))
      return el;
    if (el._x_teleportBack)
      el = el._x_teleportBack;
    if (!el.parentElement)
      return;
    return findClosest(el.parentElement, callback);
  }
  function isRoot(el) {
    return rootSelectors().some((selector) => el.matches(selector));
  }
  var initInterceptors2 = [];
  function interceptInit(callback) {
    initInterceptors2.push(callback);
  }
  var markerDispenser = 1;
  function initTree(el, walker = walk, intercept = () => {
  }) {
    if (findClosest(el, (i3) => i3._x_ignore))
      return;
    deferHandlingDirectives(() => {
      walker(el, (el2, skip) => {
        if (el2._x_marker)
          return;
        intercept(el2, skip);
        initInterceptors2.forEach((i3) => i3(el2, skip));
        directives(el2, el2.attributes).forEach((handle) => handle());
        if (!el2._x_ignore)
          el2._x_marker = markerDispenser++;
        el2._x_ignore && skip();
      });
    });
  }
  function destroyTree(root, walker = walk) {
    walker(root, (el) => {
      cleanupElement(el);
      cleanupAttributes(el);
      delete el._x_marker;
    });
  }
  function warnAboutMissingPlugins() {
    let pluginDirectives = [
      ["ui", "dialog", ["[x-dialog], [x-popover]"]],
      ["anchor", "anchor", ["[x-anchor]"]],
      ["sort", "sort", ["[x-sort]"]]
    ];
    pluginDirectives.forEach(([plugin2, directive2, selectors]) => {
      if (directiveExists(directive2))
        return;
      selectors.some((selector) => {
        if (document.querySelector(selector)) {
          warn(`found "${selector}", but missing ${plugin2} plugin`);
          return true;
        }
      });
    });
  }
  var tickStack = [];
  var isHolding = false;
  function nextTick(callback = () => {
  }) {
    queueMicrotask(() => {
      isHolding || setTimeout(() => {
        releaseNextTicks();
      });
    });
    return new Promise((res) => {
      tickStack.push(() => {
        callback();
        res();
      });
    });
  }
  function releaseNextTicks() {
    isHolding = false;
    while (tickStack.length)
      tickStack.shift()();
  }
  function holdNextTicks() {
    isHolding = true;
  }
  function setClasses(el, value) {
    if (Array.isArray(value)) {
      return setClassesFromString(el, value.join(" "));
    } else if (typeof value === "object" && value !== null) {
      return setClassesFromObject(el, value);
    } else if (typeof value === "function") {
      return setClasses(el, value());
    }
    return setClassesFromString(el, value);
  }
  function setClassesFromString(el, classString) {
    let split = (classString2) => classString2.split(" ").filter(Boolean);
    let missingClasses = (classString2) => classString2.split(" ").filter((i3) => !el.classList.contains(i3)).filter(Boolean);
    let addClassesAndReturnUndo = (classes) => {
      el.classList.add(...classes);
      return () => {
        el.classList.remove(...classes);
      };
    };
    classString = classString === true ? classString = "" : classString || "";
    return addClassesAndReturnUndo(missingClasses(classString));
  }
  function setClassesFromObject(el, classObject) {
    let split = (classString) => classString.split(" ").filter(Boolean);
    let forAdd = Object.entries(classObject).flatMap(([classString, bool]) => bool ? split(classString) : false).filter(Boolean);
    let forRemove = Object.entries(classObject).flatMap(([classString, bool]) => !bool ? split(classString) : false).filter(Boolean);
    let added = [];
    let removed = [];
    forRemove.forEach((i3) => {
      if (el.classList.contains(i3)) {
        el.classList.remove(i3);
        removed.push(i3);
      }
    });
    forAdd.forEach((i3) => {
      if (!el.classList.contains(i3)) {
        el.classList.add(i3);
        added.push(i3);
      }
    });
    return () => {
      removed.forEach((i3) => el.classList.add(i3));
      added.forEach((i3) => el.classList.remove(i3));
    };
  }
  function setStyles(el, value) {
    if (typeof value === "object" && value !== null) {
      return setStylesFromObject(el, value);
    }
    return setStylesFromString(el, value);
  }
  function setStylesFromObject(el, value) {
    let previousStyles = {};
    Object.entries(value).forEach(([key, value2]) => {
      previousStyles[key] = el.style[key];
      if (!key.startsWith("--")) {
        key = kebabCase(key);
      }
      el.style.setProperty(key, value2);
    });
    setTimeout(() => {
      if (el.style.length === 0) {
        el.removeAttribute("style");
      }
    });
    return () => {
      setStyles(el, previousStyles);
    };
  }
  function setStylesFromString(el, value) {
    let cache = el.getAttribute("style", value);
    el.setAttribute("style", value);
    return () => {
      el.setAttribute("style", cache || "");
    };
  }
  function kebabCase(subject) {
    return subject.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  }
  function once(callback, fallback = () => {
  }) {
    let called = false;
    return function() {
      if (!called) {
        called = true;
        callback.apply(this, arguments);
      } else {
        fallback.apply(this, arguments);
      }
    };
  }
  directive("transition", (el, { value, modifiers, expression }, { evaluate: evaluate2 }) => {
    if (typeof expression === "function")
      expression = evaluate2(expression);
    if (expression === false)
      return;
    if (!expression || typeof expression === "boolean") {
      registerTransitionsFromHelper(el, modifiers, value);
    } else {
      registerTransitionsFromClassString(el, expression, value);
    }
  });
  function registerTransitionsFromClassString(el, classString, stage) {
    registerTransitionObject(el, setClasses, "");
    let directiveStorageMap = {
      "enter": (classes) => {
        el._x_transition.enter.during = classes;
      },
      "enter-start": (classes) => {
        el._x_transition.enter.start = classes;
      },
      "enter-end": (classes) => {
        el._x_transition.enter.end = classes;
      },
      "leave": (classes) => {
        el._x_transition.leave.during = classes;
      },
      "leave-start": (classes) => {
        el._x_transition.leave.start = classes;
      },
      "leave-end": (classes) => {
        el._x_transition.leave.end = classes;
      }
    };
    directiveStorageMap[stage](classString);
  }
  function registerTransitionsFromHelper(el, modifiers, stage) {
    registerTransitionObject(el, setStyles);
    let doesntSpecify = !modifiers.includes("in") && !modifiers.includes("out") && !stage;
    let transitioningIn = doesntSpecify || modifiers.includes("in") || ["enter"].includes(stage);
    let transitioningOut = doesntSpecify || modifiers.includes("out") || ["leave"].includes(stage);
    if (modifiers.includes("in") && !doesntSpecify) {
      modifiers = modifiers.filter((i3, index) => index < modifiers.indexOf("out"));
    }
    if (modifiers.includes("out") && !doesntSpecify) {
      modifiers = modifiers.filter((i3, index) => index > modifiers.indexOf("out"));
    }
    let wantsAll = !modifiers.includes("opacity") && !modifiers.includes("scale");
    let wantsOpacity = wantsAll || modifiers.includes("opacity");
    let wantsScale = wantsAll || modifiers.includes("scale");
    let opacityValue = wantsOpacity ? 0 : 1;
    let scaleValue = wantsScale ? modifierValue(modifiers, "scale", 95) / 100 : 1;
    let delay = modifierValue(modifiers, "delay", 0) / 1e3;
    let origin = modifierValue(modifiers, "origin", "center");
    let property = "opacity, transform";
    let durationIn = modifierValue(modifiers, "duration", 150) / 1e3;
    let durationOut = modifierValue(modifiers, "duration", 75) / 1e3;
    let easing = `cubic-bezier(0.4, 0.0, 0.2, 1)`;
    if (transitioningIn) {
      el._x_transition.enter.during = {
        transformOrigin: origin,
        transitionDelay: `${delay}s`,
        transitionProperty: property,
        transitionDuration: `${durationIn}s`,
        transitionTimingFunction: easing
      };
      el._x_transition.enter.start = {
        opacity: opacityValue,
        transform: `scale(${scaleValue})`
      };
      el._x_transition.enter.end = {
        opacity: 1,
        transform: `scale(1)`
      };
    }
    if (transitioningOut) {
      el._x_transition.leave.during = {
        transformOrigin: origin,
        transitionDelay: `${delay}s`,
        transitionProperty: property,
        transitionDuration: `${durationOut}s`,
        transitionTimingFunction: easing
      };
      el._x_transition.leave.start = {
        opacity: 1,
        transform: `scale(1)`
      };
      el._x_transition.leave.end = {
        opacity: opacityValue,
        transform: `scale(${scaleValue})`
      };
    }
  }
  function registerTransitionObject(el, setFunction, defaultValue = {}) {
    if (!el._x_transition)
      el._x_transition = {
        enter: { during: defaultValue, start: defaultValue, end: defaultValue },
        leave: { during: defaultValue, start: defaultValue, end: defaultValue },
        in(before = () => {
        }, after = () => {
        }) {
          transition(el, setFunction, {
            during: this.enter.during,
            start: this.enter.start,
            end: this.enter.end
          }, before, after);
        },
        out(before = () => {
        }, after = () => {
        }) {
          transition(el, setFunction, {
            during: this.leave.during,
            start: this.leave.start,
            end: this.leave.end
          }, before, after);
        }
      };
  }
  window.Element.prototype._x_toggleAndCascadeWithTransitions = function(el, value, show, hide) {
    const nextTick2 = document.visibilityState === "visible" ? requestAnimationFrame : setTimeout;
    let clickAwayCompatibleShow = () => nextTick2(show);
    if (value) {
      if (el._x_transition && (el._x_transition.enter || el._x_transition.leave)) {
        el._x_transition.enter && (Object.entries(el._x_transition.enter.during).length || Object.entries(el._x_transition.enter.start).length || Object.entries(el._x_transition.enter.end).length) ? el._x_transition.in(show) : clickAwayCompatibleShow();
      } else {
        el._x_transition ? el._x_transition.in(show) : clickAwayCompatibleShow();
      }
      return;
    }
    el._x_hidePromise = el._x_transition ? new Promise((resolve, reject) => {
      el._x_transition.out(() => {
      }, () => resolve(hide));
      el._x_transitioning && el._x_transitioning.beforeCancel(() => reject({ isFromCancelledTransition: true }));
    }) : Promise.resolve(hide);
    queueMicrotask(() => {
      let closest = closestHide(el);
      if (closest) {
        if (!closest._x_hideChildren)
          closest._x_hideChildren = [];
        closest._x_hideChildren.push(el);
      } else {
        nextTick2(() => {
          let hideAfterChildren = (el2) => {
            let carry = Promise.all([
              el2._x_hidePromise,
              ...(el2._x_hideChildren || []).map(hideAfterChildren)
            ]).then(([i3]) => i3?.());
            delete el2._x_hidePromise;
            delete el2._x_hideChildren;
            return carry;
          };
          hideAfterChildren(el).catch((e3) => {
            if (!e3.isFromCancelledTransition)
              throw e3;
          });
        });
      }
    });
  };
  function closestHide(el) {
    let parent = el.parentNode;
    if (!parent)
      return;
    return parent._x_hidePromise ? parent : closestHide(parent);
  }
  function transition(el, setFunction, { during, start: start2, end } = {}, before = () => {
  }, after = () => {
  }) {
    if (el._x_transitioning)
      el._x_transitioning.cancel();
    if (Object.keys(during).length === 0 && Object.keys(start2).length === 0 && Object.keys(end).length === 0) {
      before();
      after();
      return;
    }
    let undoStart, undoDuring, undoEnd;
    performTransition(el, {
      start() {
        undoStart = setFunction(el, start2);
      },
      during() {
        undoDuring = setFunction(el, during);
      },
      before,
      end() {
        undoStart();
        undoEnd = setFunction(el, end);
      },
      after,
      cleanup() {
        undoDuring();
        undoEnd();
      }
    });
  }
  function performTransition(el, stages) {
    let interrupted, reachedBefore, reachedEnd;
    let finish = once(() => {
      mutateDom(() => {
        interrupted = true;
        if (!reachedBefore)
          stages.before();
        if (!reachedEnd) {
          stages.end();
          releaseNextTicks();
        }
        stages.after();
        if (el.isConnected)
          stages.cleanup();
        delete el._x_transitioning;
      });
    });
    el._x_transitioning = {
      beforeCancels: [],
      beforeCancel(callback) {
        this.beforeCancels.push(callback);
      },
      cancel: once(function() {
        while (this.beforeCancels.length) {
          this.beforeCancels.shift()();
        }
        ;
        finish();
      }),
      finish
    };
    mutateDom(() => {
      stages.start();
      stages.during();
    });
    holdNextTicks();
    requestAnimationFrame(() => {
      if (interrupted)
        return;
      let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, "").replace("s", "")) * 1e3;
      let delay = Number(getComputedStyle(el).transitionDelay.replace(/,.*/, "").replace("s", "")) * 1e3;
      if (duration === 0)
        duration = Number(getComputedStyle(el).animationDuration.replace("s", "")) * 1e3;
      mutateDom(() => {
        stages.before();
      });
      reachedBefore = true;
      requestAnimationFrame(() => {
        if (interrupted)
          return;
        mutateDom(() => {
          stages.end();
        });
        releaseNextTicks();
        setTimeout(el._x_transitioning.finish, duration + delay);
        reachedEnd = true;
      });
    });
  }
  function modifierValue(modifiers, key, fallback) {
    if (modifiers.indexOf(key) === -1)
      return fallback;
    const rawValue = modifiers[modifiers.indexOf(key) + 1];
    if (!rawValue)
      return fallback;
    if (key === "scale") {
      if (isNaN(rawValue))
        return fallback;
    }
    if (key === "duration" || key === "delay") {
      let match = rawValue.match(/([0-9]+)ms/);
      if (match)
        return match[1];
    }
    if (key === "origin") {
      if (["top", "right", "left", "center", "bottom"].includes(modifiers[modifiers.indexOf(key) + 2])) {
        return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(" ");
      }
    }
    return rawValue;
  }
  var isCloning = false;
  function skipDuringClone(callback, fallback = () => {
  }) {
    return (...args) => isCloning ? fallback(...args) : callback(...args);
  }
  function onlyDuringClone(callback) {
    return (...args) => isCloning && callback(...args);
  }
  var interceptors = [];
  function interceptClone(callback) {
    interceptors.push(callback);
  }
  function cloneNode(from, to2) {
    interceptors.forEach((i3) => i3(from, to2));
    isCloning = true;
    dontRegisterReactiveSideEffects(() => {
      initTree(to2, (el, callback) => {
        callback(el, () => {
        });
      });
    });
    isCloning = false;
  }
  var isCloningLegacy = false;
  function clone(oldEl, newEl) {
    if (!newEl._x_dataStack)
      newEl._x_dataStack = oldEl._x_dataStack;
    isCloning = true;
    isCloningLegacy = true;
    dontRegisterReactiveSideEffects(() => {
      cloneTree(newEl);
    });
    isCloning = false;
    isCloningLegacy = false;
  }
  function cloneTree(el) {
    let hasRunThroughFirstEl = false;
    let shallowWalker = (el2, callback) => {
      walk(el2, (el3, skip) => {
        if (hasRunThroughFirstEl && isRoot(el3))
          return skip();
        hasRunThroughFirstEl = true;
        callback(el3, skip);
      });
    };
    initTree(el, shallowWalker);
  }
  function dontRegisterReactiveSideEffects(callback) {
    let cache = effect;
    overrideEffect((callback2, el) => {
      let storedEffect = cache(callback2);
      release(storedEffect);
      return () => {
      };
    });
    callback();
    overrideEffect(cache);
  }
  function bind(el, name, value, modifiers = []) {
    if (!el._x_bindings)
      el._x_bindings = reactive({});
    el._x_bindings[name] = value;
    name = modifiers.includes("camel") ? camelCase(name) : name;
    switch (name) {
      case "value":
        bindInputValue(el, value);
        break;
      case "style":
        bindStyles(el, value);
        break;
      case "class":
        bindClasses(el, value);
        break;
      case "selected":
      case "checked":
        bindAttributeAndProperty(el, name, value);
        break;
      default:
        bindAttribute(el, name, value);
        break;
    }
  }
  function bindInputValue(el, value) {
    if (isRadio(el)) {
      if (el.attributes.value === void 0) {
        el.value = value;
      }
      if (window.fromModel) {
        if (typeof value === "boolean") {
          el.checked = safeParseBoolean(el.value) === value;
        } else {
          el.checked = checkedAttrLooseCompare(el.value, value);
        }
      }
    } else if (isCheckbox(el)) {
      if (Number.isInteger(value)) {
        el.value = value;
      } else if (!Array.isArray(value) && typeof value !== "boolean" && ![null, void 0].includes(value)) {
        el.value = String(value);
      } else {
        if (Array.isArray(value)) {
          el.checked = value.some((val) => checkedAttrLooseCompare(val, el.value));
        } else {
          el.checked = !!value;
        }
      }
    } else if (el.tagName === "SELECT") {
      updateSelect(el, value);
    } else {
      if (el.value === value)
        return;
      el.value = value === void 0 ? "" : value;
    }
  }
  function bindClasses(el, value) {
    if (el._x_undoAddedClasses)
      el._x_undoAddedClasses();
    el._x_undoAddedClasses = setClasses(el, value);
  }
  function bindStyles(el, value) {
    if (el._x_undoAddedStyles)
      el._x_undoAddedStyles();
    el._x_undoAddedStyles = setStyles(el, value);
  }
  function bindAttributeAndProperty(el, name, value) {
    bindAttribute(el, name, value);
    setPropertyIfChanged(el, name, value);
  }
  function bindAttribute(el, name, value) {
    if ([null, void 0, false].includes(value) && attributeShouldntBePreservedIfFalsy(name)) {
      el.removeAttribute(name);
    } else {
      if (isBooleanAttr(name))
        value = name;
      setIfChanged(el, name, value);
    }
  }
  function setIfChanged(el, attrName, value) {
    if (el.getAttribute(attrName) != value) {
      el.setAttribute(attrName, value);
    }
  }
  function setPropertyIfChanged(el, propName, value) {
    if (el[propName] !== value) {
      el[propName] = value;
    }
  }
  function updateSelect(el, value) {
    const arrayWrappedValue = [].concat(value).map((value2) => {
      return value2 + "";
    });
    Array.from(el.options).forEach((option) => {
      option.selected = arrayWrappedValue.includes(option.value);
    });
  }
  function camelCase(subject) {
    return subject.toLowerCase().replace(/-(\w)/g, (match, char) => char.toUpperCase());
  }
  function checkedAttrLooseCompare(valueA, valueB) {
    return valueA == valueB;
  }
  function safeParseBoolean(rawValue) {
    if ([1, "1", "true", "on", "yes", true].includes(rawValue)) {
      return true;
    }
    if ([0, "0", "false", "off", "no", false].includes(rawValue)) {
      return false;
    }
    return rawValue ? Boolean(rawValue) : null;
  }
  var booleanAttributes = /* @__PURE__ */ new Set([
    "allowfullscreen",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "controls",
    "default",
    "defer",
    "disabled",
    "formnovalidate",
    "inert",
    "ismap",
    "itemscope",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected",
    "shadowrootclonable",
    "shadowrootdelegatesfocus",
    "shadowrootserializable"
  ]);
  function isBooleanAttr(attrName) {
    return booleanAttributes.has(attrName);
  }
  function attributeShouldntBePreservedIfFalsy(name) {
    return !["aria-pressed", "aria-checked", "aria-expanded", "aria-selected"].includes(name);
  }
  function getBinding(el, name, fallback) {
    if (el._x_bindings && el._x_bindings[name] !== void 0)
      return el._x_bindings[name];
    return getAttributeBinding(el, name, fallback);
  }
  function extractProp(el, name, fallback, extract = true) {
    if (el._x_bindings && el._x_bindings[name] !== void 0)
      return el._x_bindings[name];
    if (el._x_inlineBindings && el._x_inlineBindings[name] !== void 0) {
      let binding = el._x_inlineBindings[name];
      binding.extract = extract;
      return dontAutoEvaluateFunctions(() => {
        return evaluate(el, binding.expression);
      });
    }
    return getAttributeBinding(el, name, fallback);
  }
  function getAttributeBinding(el, name, fallback) {
    let attr = el.getAttribute(name);
    if (attr === null)
      return typeof fallback === "function" ? fallback() : fallback;
    if (attr === "")
      return true;
    if (isBooleanAttr(name)) {
      return !![name, "true"].includes(attr);
    }
    return attr;
  }
  function isCheckbox(el) {
    return el.type === "checkbox" || el.localName === "ui-checkbox" || el.localName === "ui-switch";
  }
  function isRadio(el) {
    return el.type === "radio" || el.localName === "ui-radio";
  }
  function debounce(func, wait) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        func.apply(context, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
  function throttle(func, limit) {
    let inThrottle;
    return function() {
      let context = this, args = arguments;
      if (!inThrottle) {
        func.apply(context, args);
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
      }
    };
  }
  function entangle({ get: outerGet, set: outerSet }, { get: innerGet, set: innerSet }) {
    let firstRun = true;
    let outerHash;
    let innerHash;
    let reference = effect(() => {
      let outer = outerGet();
      let inner = innerGet();
      if (firstRun) {
        innerSet(cloneIfObject(outer));
        firstRun = false;
      } else {
        let outerHashLatest = JSON.stringify(outer);
        let innerHashLatest = JSON.stringify(inner);
        if (outerHashLatest !== outerHash) {
          innerSet(cloneIfObject(outer));
        } else if (outerHashLatest !== innerHashLatest) {
          outerSet(cloneIfObject(inner));
        } else {
        }
      }
      outerHash = JSON.stringify(outerGet());
      innerHash = JSON.stringify(innerGet());
    });
    return () => {
      release(reference);
    };
  }
  function cloneIfObject(value) {
    return typeof value === "object" ? JSON.parse(JSON.stringify(value)) : value;
  }
  function plugin(callback) {
    let callbacks = Array.isArray(callback) ? callback : [callback];
    callbacks.forEach((i3) => i3(alpine_default));
  }
  var stores = {};
  var isReactive = false;
  function store(name, value) {
    if (!isReactive) {
      stores = reactive(stores);
      isReactive = true;
    }
    if (value === void 0) {
      return stores[name];
    }
    stores[name] = value;
    initInterceptors(stores[name]);
    if (typeof value === "object" && value !== null && value.hasOwnProperty("init") && typeof value.init === "function") {
      stores[name].init();
    }
  }
  function getStores() {
    return stores;
  }
  var binds = {};
  function bind2(name, bindings) {
    let getBindings = typeof bindings !== "function" ? () => bindings : bindings;
    if (name instanceof Element) {
      return applyBindingsObject(name, getBindings());
    } else {
      binds[name] = getBindings;
    }
    return () => {
    };
  }
  function injectBindingProviders(obj) {
    Object.entries(binds).forEach(([name, callback]) => {
      Object.defineProperty(obj, name, {
        get() {
          return (...args) => {
            return callback(...args);
          };
        }
      });
    });
    return obj;
  }
  function applyBindingsObject(el, obj, original) {
    let cleanupRunners = [];
    while (cleanupRunners.length)
      cleanupRunners.pop()();
    let attributes = Object.entries(obj).map(([name, value]) => ({ name, value }));
    let staticAttributes = attributesOnly(attributes);
    attributes = attributes.map((attribute) => {
      if (staticAttributes.find((attr) => attr.name === attribute.name)) {
        return {
          name: `x-bind:${attribute.name}`,
          value: `"${attribute.value}"`
        };
      }
      return attribute;
    });
    directives(el, attributes, original).map((handle) => {
      cleanupRunners.push(handle.runCleanups);
      handle();
    });
    return () => {
      while (cleanupRunners.length)
        cleanupRunners.pop()();
    };
  }
  var datas = {};
  function data(name, callback) {
    datas[name] = callback;
  }
  function injectDataProviders(obj, context) {
    Object.entries(datas).forEach(([name, callback]) => {
      Object.defineProperty(obj, name, {
        get() {
          return (...args) => {
            return callback.bind(context)(...args);
          };
        },
        enumerable: false
      });
    });
    return obj;
  }
  var Alpine = {
    get reactive() {
      return reactive;
    },
    get release() {
      return release;
    },
    get effect() {
      return effect;
    },
    get raw() {
      return raw;
    },
    version: "3.14.9",
    flushAndStopDeferringMutations,
    dontAutoEvaluateFunctions,
    disableEffectScheduling,
    startObservingMutations,
    stopObservingMutations,
    setReactivityEngine,
    onAttributeRemoved,
    onAttributesAdded,
    closestDataStack,
    skipDuringClone,
    onlyDuringClone,
    addRootSelector,
    addInitSelector,
    interceptClone,
    addScopeToNode,
    deferMutations,
    mapAttributes,
    evaluateLater,
    interceptInit,
    setEvaluator,
    mergeProxies,
    extractProp,
    findClosest,
    onElRemoved,
    closestRoot,
    destroyTree,
    interceptor,
    // INTERNAL: not public API and is subject to change without major release.
    transition,
    // INTERNAL
    setStyles,
    // INTERNAL
    mutateDom,
    directive,
    entangle,
    throttle,
    debounce,
    evaluate,
    initTree,
    nextTick,
    prefixed: prefix,
    prefix: setPrefix,
    plugin,
    magic,
    store,
    start,
    clone,
    // INTERNAL
    cloneNode,
    // INTERNAL
    bound: getBinding,
    $data: scope,
    watch,
    walk,
    data,
    bind: bind2
  };
  var alpine_default = Alpine;
  function makeMap(str, expectsLowerCase) {
    const map = /* @__PURE__ */ Object.create(null);
    const list = str.split(",");
    for (let i3 = 0; i3 < list.length; i3++) {
      map[list[i3]] = true;
    }
    return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];
  }
  var specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
  var isBooleanAttr2 = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
  var EMPTY_OBJ = true ? Object.freeze({}) : {};
  var EMPTY_ARR = true ? Object.freeze([]) : [];
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var hasOwn = (val, key) => hasOwnProperty.call(val, key);
  var isArray = Array.isArray;
  var isMap = (val) => toTypeString(val) === "[object Map]";
  var isString = (val) => typeof val === "string";
  var isSymbol = (val) => typeof val === "symbol";
  var isObject = (val) => val !== null && typeof val === "object";
  var objectToString = Object.prototype.toString;
  var toTypeString = (value) => objectToString.call(value);
  var toRawType = (value) => {
    return toTypeString(value).slice(8, -1);
  };
  var isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
  var cacheStringFunction = (fn2) => {
    const cache = /* @__PURE__ */ Object.create(null);
    return (str) => {
      const hit = cache[str];
      return hit || (cache[str] = fn2(str));
    };
  };
  var camelizeRE = /-(\w)/g;
  var camelize = cacheStringFunction((str) => {
    return str.replace(camelizeRE, (_3, c3) => c3 ? c3.toUpperCase() : "");
  });
  var hyphenateRE = /\B([A-Z])/g;
  var hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
  var capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
  var toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
  var hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);
  var targetMap = /* @__PURE__ */ new WeakMap();
  var effectStack = [];
  var activeEffect;
  var ITERATE_KEY = Symbol(true ? "iterate" : "");
  var MAP_KEY_ITERATE_KEY = Symbol(true ? "Map key iterate" : "");
  function isEffect(fn2) {
    return fn2 && fn2._isEffect === true;
  }
  function effect2(fn2, options = EMPTY_OBJ) {
    if (isEffect(fn2)) {
      fn2 = fn2.raw;
    }
    const effect3 = createReactiveEffect(fn2, options);
    if (!options.lazy) {
      effect3();
    }
    return effect3;
  }
  function stop(effect3) {
    if (effect3.active) {
      cleanup(effect3);
      if (effect3.options.onStop) {
        effect3.options.onStop();
      }
      effect3.active = false;
    }
  }
  var uid = 0;
  function createReactiveEffect(fn2, options) {
    const effect3 = function reactiveEffect() {
      if (!effect3.active) {
        return fn2();
      }
      if (!effectStack.includes(effect3)) {
        cleanup(effect3);
        try {
          enableTracking();
          effectStack.push(effect3);
          activeEffect = effect3;
          return fn2();
        } finally {
          effectStack.pop();
          resetTracking();
          activeEffect = effectStack[effectStack.length - 1];
        }
      }
    };
    effect3.id = uid++;
    effect3.allowRecurse = !!options.allowRecurse;
    effect3._isEffect = true;
    effect3.active = true;
    effect3.raw = fn2;
    effect3.deps = [];
    effect3.options = options;
    return effect3;
  }
  function cleanup(effect3) {
    const { deps } = effect3;
    if (deps.length) {
      for (let i3 = 0; i3 < deps.length; i3++) {
        deps[i3].delete(effect3);
      }
      deps.length = 0;
    }
  }
  var shouldTrack = true;
  var trackStack = [];
  function pauseTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = false;
  }
  function enableTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = true;
  }
  function resetTracking() {
    const last = trackStack.pop();
    shouldTrack = last === void 0 ? true : last;
  }
  function track(target, type, key) {
    if (!shouldTrack || activeEffect === void 0) {
      return;
    }
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = /* @__PURE__ */ new Set());
    }
    if (!dep.has(activeEffect)) {
      dep.add(activeEffect);
      activeEffect.deps.push(dep);
      if (activeEffect.options.onTrack) {
        activeEffect.options.onTrack({
          effect: activeEffect,
          target,
          type,
          key
        });
      }
    }
  }
  function trigger(target, type, key, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) {
      return;
    }
    const effects = /* @__PURE__ */ new Set();
    const add2 = (effectsToAdd) => {
      if (effectsToAdd) {
        effectsToAdd.forEach((effect3) => {
          if (effect3 !== activeEffect || effect3.allowRecurse) {
            effects.add(effect3);
          }
        });
      }
    };
    if (type === "clear") {
      depsMap.forEach(add2);
    } else if (key === "length" && isArray(target)) {
      depsMap.forEach((dep, key2) => {
        if (key2 === "length" || key2 >= newValue) {
          add2(dep);
        }
      });
    } else {
      if (key !== void 0) {
        add2(depsMap.get(key));
      }
      switch (type) {
        case "add":
          if (!isArray(target)) {
            add2(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              add2(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          } else if (isIntegerKey(key)) {
            add2(depsMap.get("length"));
          }
          break;
        case "delete":
          if (!isArray(target)) {
            add2(depsMap.get(ITERATE_KEY));
            if (isMap(target)) {
              add2(depsMap.get(MAP_KEY_ITERATE_KEY));
            }
          }
          break;
        case "set":
          if (isMap(target)) {
            add2(depsMap.get(ITERATE_KEY));
          }
          break;
      }
    }
    const run = (effect3) => {
      if (effect3.options.onTrigger) {
        effect3.options.onTrigger({
          effect: effect3,
          target,
          key,
          type,
          newValue,
          oldValue,
          oldTarget
        });
      }
      if (effect3.options.scheduler) {
        effect3.options.scheduler(effect3);
      } else {
        effect3();
      }
    };
    effects.forEach(run);
  }
  var isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
  var builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));
  var get2 = /* @__PURE__ */ createGetter();
  var readonlyGet = /* @__PURE__ */ createGetter(true);
  var arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
  function createArrayInstrumentations() {
    const instrumentations = {};
    ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
      instrumentations[key] = function(...args) {
        const arr = toRaw(this);
        for (let i3 = 0, l3 = this.length; i3 < l3; i3++) {
          track(arr, "get", i3 + "");
        }
        const res = arr[key](...args);
        if (res === -1 || res === false) {
          return arr[key](...args.map(toRaw));
        } else {
          return res;
        }
      };
    });
    ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
      instrumentations[key] = function(...args) {
        pauseTracking();
        const res = toRaw(this)[key].apply(this, args);
        resetTracking();
        return res;
      };
    });
    return instrumentations;
  }
  function createGetter(isReadonly = false, shallow = false) {
    return function get3(target, key, receiver) {
      if (key === "__v_isReactive") {
        return !isReadonly;
      } else if (key === "__v_isReadonly") {
        return isReadonly;
      } else if (key === "__v_raw" && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
        return target;
      }
      const targetIsArray = isArray(target);
      if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      const res = Reflect.get(target, key, receiver);
      if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
        return res;
      }
      if (!isReadonly) {
        track(target, "get", key);
      }
      if (shallow) {
        return res;
      }
      if (isRef(res)) {
        const shouldUnwrap = !targetIsArray || !isIntegerKey(key);
        return shouldUnwrap ? res.value : res;
      }
      if (isObject(res)) {
        return isReadonly ? readonly(res) : reactive2(res);
      }
      return res;
    };
  }
  var set2 = /* @__PURE__ */ createSetter();
  function createSetter(shallow = false) {
    return function set3(target, key, value, receiver) {
      let oldValue = target[key];
      if (!shallow) {
        value = toRaw(value);
        oldValue = toRaw(oldValue);
        if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
          oldValue.value = value;
          return true;
        }
      }
      const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
      const result = Reflect.set(target, key, value, receiver);
      if (target === toRaw(receiver)) {
        if (!hadKey) {
          trigger(target, "add", key, value);
        } else if (hasChanged(value, oldValue)) {
          trigger(target, "set", key, value, oldValue);
        }
      }
      return result;
    };
  }
  function deleteProperty(target, key) {
    const hadKey = hasOwn(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
      trigger(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  function has(target, key) {
    const result = Reflect.has(target, key);
    if (!isSymbol(key) || !builtInSymbols.has(key)) {
      track(target, "has", key);
    }
    return result;
  }
  function ownKeys(target) {
    track(target, "iterate", isArray(target) ? "length" : ITERATE_KEY);
    return Reflect.ownKeys(target);
  }
  var mutableHandlers = {
    get: get2,
    set: set2,
    deleteProperty,
    has,
    ownKeys
  };
  var readonlyHandlers = {
    get: readonlyGet,
    set(target, key) {
      if (true) {
        console.warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
      }
      return true;
    },
    deleteProperty(target, key) {
      if (true) {
        console.warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
      }
      return true;
    }
  };
  var toReactive = (value) => isObject(value) ? reactive2(value) : value;
  var toReadonly = (value) => isObject(value) ? readonly(value) : value;
  var toShallow = (value) => value;
  var getProto = (v3) => Reflect.getPrototypeOf(v3);
  function get$1(target, key, isReadonly = false, isShallow = false) {
    target = target[
      "__v_raw"
      /* RAW */
    ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) {
      !isReadonly && track(rawTarget, "get", key);
    }
    !isReadonly && track(rawTarget, "get", rawKey);
    const { has: has2 } = getProto(rawTarget);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    if (has2.call(rawTarget, key)) {
      return wrap(target.get(key));
    } else if (has2.call(rawTarget, rawKey)) {
      return wrap(target.get(rawKey));
    } else if (target !== rawTarget) {
      target.get(key);
    }
  }
  function has$1(key, isReadonly = false) {
    const target = this[
      "__v_raw"
      /* RAW */
    ];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (key !== rawKey) {
      !isReadonly && track(rawTarget, "has", key);
    }
    !isReadonly && track(rawTarget, "has", rawKey);
    return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
  }
  function size(target, isReadonly = false) {
    target = target[
      "__v_raw"
      /* RAW */
    ];
    !isReadonly && track(toRaw(target), "iterate", ITERATE_KEY);
    return Reflect.get(target, "size", target);
  }
  function add(value) {
    value = toRaw(value);
    const target = toRaw(this);
    const proto = getProto(target);
    const hadKey = proto.has.call(target, value);
    if (!hadKey) {
      target.add(value);
      trigger(target, "add", value, value);
    }
    return this;
  }
  function set$1(key, value) {
    value = toRaw(value);
    const target = toRaw(this);
    const { has: has2, get: get3 } = getProto(target);
    let hadKey = has2.call(target, key);
    if (!hadKey) {
      key = toRaw(key);
      hadKey = has2.call(target, key);
    } else if (true) {
      checkIdentityKeys(target, has2, key);
    }
    const oldValue = get3.call(target, key);
    target.set(key, value);
    if (!hadKey) {
      trigger(target, "add", key, value);
    } else if (hasChanged(value, oldValue)) {
      trigger(target, "set", key, value, oldValue);
    }
    return this;
  }
  function deleteEntry(key) {
    const target = toRaw(this);
    const { has: has2, get: get3 } = getProto(target);
    let hadKey = has2.call(target, key);
    if (!hadKey) {
      key = toRaw(key);
      hadKey = has2.call(target, key);
    } else if (true) {
      checkIdentityKeys(target, has2, key);
    }
    const oldValue = get3 ? get3.call(target, key) : void 0;
    const result = target.delete(key);
    if (hadKey) {
      trigger(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  function clear() {
    const target = toRaw(this);
    const hadItems = target.size !== 0;
    const oldTarget = true ? isMap(target) ? new Map(target) : new Set(target) : void 0;
    const result = target.clear();
    if (hadItems) {
      trigger(target, "clear", void 0, void 0, oldTarget);
    }
    return result;
  }
  function createForEach(isReadonly, isShallow) {
    return function forEach(callback, thisArg) {
      const observed = this;
      const target = observed[
        "__v_raw"
        /* RAW */
      ];
      const rawTarget = toRaw(target);
      const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
      !isReadonly && track(rawTarget, "iterate", ITERATE_KEY);
      return target.forEach((value, key) => {
        return callback.call(thisArg, wrap(value), wrap(key), observed);
      });
    };
  }
  function createIterableMethod(method, isReadonly, isShallow) {
    return function(...args) {
      const target = this[
        "__v_raw"
        /* RAW */
      ];
      const rawTarget = toRaw(target);
      const targetIsMap = isMap(rawTarget);
      const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
      const isKeyOnly = method === "keys" && targetIsMap;
      const innerIterator = target[method](...args);
      const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
      !isReadonly && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
      return {
        // iterator protocol
        next() {
          const { value, done } = innerIterator.next();
          return done ? { value, done } : {
            value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
            done
          };
        },
        // iterable protocol
        [Symbol.iterator]() {
          return this;
        }
      };
    };
  }
  function createReadonlyMethod(type) {
    return function(...args) {
      if (true) {
        const key = args[0] ? `on key "${args[0]}" ` : ``;
        console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
      }
      return type === "delete" ? false : this;
    };
  }
  function createInstrumentations() {
    const mutableInstrumentations2 = {
      get(key) {
        return get$1(this, key);
      },
      get size() {
        return size(this);
      },
      has: has$1,
      add,
      set: set$1,
      delete: deleteEntry,
      clear,
      forEach: createForEach(false, false)
    };
    const shallowInstrumentations2 = {
      get(key) {
        return get$1(this, key, false, true);
      },
      get size() {
        return size(this);
      },
      has: has$1,
      add,
      set: set$1,
      delete: deleteEntry,
      clear,
      forEach: createForEach(false, true)
    };
    const readonlyInstrumentations2 = {
      get(key) {
        return get$1(this, key, true);
      },
      get size() {
        return size(this, true);
      },
      has(key) {
        return has$1.call(this, key, true);
      },
      add: createReadonlyMethod(
        "add"
        /* ADD */
      ),
      set: createReadonlyMethod(
        "set"
        /* SET */
      ),
      delete: createReadonlyMethod(
        "delete"
        /* DELETE */
      ),
      clear: createReadonlyMethod(
        "clear"
        /* CLEAR */
      ),
      forEach: createForEach(true, false)
    };
    const shallowReadonlyInstrumentations2 = {
      get(key) {
        return get$1(this, key, true, true);
      },
      get size() {
        return size(this, true);
      },
      has(key) {
        return has$1.call(this, key, true);
      },
      add: createReadonlyMethod(
        "add"
        /* ADD */
      ),
      set: createReadonlyMethod(
        "set"
        /* SET */
      ),
      delete: createReadonlyMethod(
        "delete"
        /* DELETE */
      ),
      clear: createReadonlyMethod(
        "clear"
        /* CLEAR */
      ),
      forEach: createForEach(true, true)
    };
    const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
    iteratorMethods.forEach((method) => {
      mutableInstrumentations2[method] = createIterableMethod(method, false, false);
      readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
      shallowInstrumentations2[method] = createIterableMethod(method, false, true);
      shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
    });
    return [
      mutableInstrumentations2,
      readonlyInstrumentations2,
      shallowInstrumentations2,
      shallowReadonlyInstrumentations2
    ];
  }
  var [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
  function createInstrumentationGetter(isReadonly, shallow) {
    const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;
    return (target, key, receiver) => {
      if (key === "__v_isReactive") {
        return !isReadonly;
      } else if (key === "__v_isReadonly") {
        return isReadonly;
      } else if (key === "__v_raw") {
        return target;
      }
      return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
    };
  }
  var mutableCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(false, false)
  };
  var readonlyCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(true, false)
  };
  function checkIdentityKeys(target, has2, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has2.call(target, rawKey)) {
      const type = toRawType(target);
      console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
    }
  }
  var reactiveMap = /* @__PURE__ */ new WeakMap();
  var shallowReactiveMap = /* @__PURE__ */ new WeakMap();
  var readonlyMap = /* @__PURE__ */ new WeakMap();
  var shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
  function targetTypeMap(rawType) {
    switch (rawType) {
      case "Object":
      case "Array":
        return 1;
      case "Map":
      case "Set":
      case "WeakMap":
      case "WeakSet":
        return 2;
      default:
        return 0;
    }
  }
  function getTargetType(value) {
    return value[
      "__v_skip"
      /* SKIP */
    ] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
  }
  function reactive2(target) {
    if (target && target[
      "__v_isReadonly"
      /* IS_READONLY */
    ]) {
      return target;
    }
    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
  }
  function readonly(target) {
    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
  }
  function createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {
    if (!isObject(target)) {
      if (true) {
        console.warn(`value cannot be made reactive: ${String(target)}`);
      }
      return target;
    }
    if (target[
      "__v_raw"
      /* RAW */
    ] && !(isReadonly && target[
      "__v_isReactive"
      /* IS_REACTIVE */
    ])) {
      return target;
    }
    const existingProxy = proxyMap.get(target);
    if (existingProxy) {
      return existingProxy;
    }
    const targetType = getTargetType(target);
    if (targetType === 0) {
      return target;
    }
    const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
    proxyMap.set(target, proxy);
    return proxy;
  }
  function toRaw(observed) {
    return observed && toRaw(observed[
      "__v_raw"
      /* RAW */
    ]) || observed;
  }
  function isRef(r3) {
    return Boolean(r3 && r3.__v_isRef === true);
  }
  magic("nextTick", () => nextTick);
  magic("dispatch", (el) => dispatch.bind(dispatch, el));
  magic("watch", (el, { evaluateLater: evaluateLater2, cleanup: cleanup2 }) => (key, callback) => {
    let evaluate2 = evaluateLater2(key);
    let getter = () => {
      let value;
      evaluate2((i3) => value = i3);
      return value;
    };
    let unwatch = watch(getter, callback);
    cleanup2(unwatch);
  });
  magic("store", getStores);
  magic("data", (el) => scope(el));
  magic("root", (el) => closestRoot(el));
  magic("refs", (el) => {
    if (el._x_refs_proxy)
      return el._x_refs_proxy;
    el._x_refs_proxy = mergeProxies(getArrayOfRefObject(el));
    return el._x_refs_proxy;
  });
  function getArrayOfRefObject(el) {
    let refObjects = [];
    findClosest(el, (i3) => {
      if (i3._x_refs)
        refObjects.push(i3._x_refs);
    });
    return refObjects;
  }
  var globalIdMemo = {};
  function findAndIncrementId(name) {
    if (!globalIdMemo[name])
      globalIdMemo[name] = 0;
    return ++globalIdMemo[name];
  }
  function closestIdRoot(el, name) {
    return findClosest(el, (element) => {
      if (element._x_ids && element._x_ids[name])
        return true;
    });
  }
  function setIdRoot(el, name) {
    if (!el._x_ids)
      el._x_ids = {};
    if (!el._x_ids[name])
      el._x_ids[name] = findAndIncrementId(name);
  }
  magic("id", (el, { cleanup: cleanup2 }) => (name, key = null) => {
    let cacheKey = `${name}${key ? `-${key}` : ""}`;
    return cacheIdByNameOnElement(el, cacheKey, cleanup2, () => {
      let root = closestIdRoot(el, name);
      let id = root ? root._x_ids[name] : findAndIncrementId(name);
      return key ? `${name}-${id}-${key}` : `${name}-${id}`;
    });
  });
  interceptClone((from, to2) => {
    if (from._x_id) {
      to2._x_id = from._x_id;
    }
  });
  function cacheIdByNameOnElement(el, cacheKey, cleanup2, callback) {
    if (!el._x_id)
      el._x_id = {};
    if (el._x_id[cacheKey])
      return el._x_id[cacheKey];
    let output = callback();
    el._x_id[cacheKey] = output;
    cleanup2(() => {
      delete el._x_id[cacheKey];
    });
    return output;
  }
  magic("el", (el) => el);
  warnMissingPluginMagic("Focus", "focus", "focus");
  warnMissingPluginMagic("Persist", "persist", "persist");
  function warnMissingPluginMagic(name, magicName, slug) {
    magic(magicName, (el) => warn(`You can't use [$${magicName}] without first installing the "${name}" plugin here: https://alpinejs.dev/plugins/${slug}`, el));
  }
  directive("modelable", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2, cleanup: cleanup2 }) => {
    let func = evaluateLater2(expression);
    let innerGet = () => {
      let result;
      func((i3) => result = i3);
      return result;
    };
    let evaluateInnerSet = evaluateLater2(`${expression} = __placeholder`);
    let innerSet = (val) => evaluateInnerSet(() => {
    }, { scope: { "__placeholder": val } });
    let initialValue = innerGet();
    innerSet(initialValue);
    queueMicrotask(() => {
      if (!el._x_model)
        return;
      el._x_removeModelListeners["default"]();
      let outerGet = el._x_model.get;
      let outerSet = el._x_model.set;
      let releaseEntanglement = entangle(
        {
          get() {
            return outerGet();
          },
          set(value) {
            outerSet(value);
          }
        },
        {
          get() {
            return innerGet();
          },
          set(value) {
            innerSet(value);
          }
        }
      );
      cleanup2(releaseEntanglement);
    });
  });
  directive("teleport", (el, { modifiers, expression }, { cleanup: cleanup2 }) => {
    if (el.tagName.toLowerCase() !== "template")
      warn("x-teleport can only be used on a <template> tag", el);
    let target = getTarget(expression);
    let clone2 = el.content.cloneNode(true).firstElementChild;
    el._x_teleport = clone2;
    clone2._x_teleportBack = el;
    el.setAttribute("data-teleport-template", true);
    clone2.setAttribute("data-teleport-target", true);
    if (el._x_forwardEvents) {
      el._x_forwardEvents.forEach((eventName) => {
        clone2.addEventListener(eventName, (e3) => {
          e3.stopPropagation();
          el.dispatchEvent(new e3.constructor(e3.type, e3));
        });
      });
    }
    addScopeToNode(clone2, {}, el);
    let placeInDom = (clone3, target2, modifiers2) => {
      if (modifiers2.includes("prepend")) {
        target2.parentNode.insertBefore(clone3, target2);
      } else if (modifiers2.includes("append")) {
        target2.parentNode.insertBefore(clone3, target2.nextSibling);
      } else {
        target2.appendChild(clone3);
      }
    };
    mutateDom(() => {
      placeInDom(clone2, target, modifiers);
      skipDuringClone(() => {
        initTree(clone2);
      })();
    });
    el._x_teleportPutBack = () => {
      let target2 = getTarget(expression);
      mutateDom(() => {
        placeInDom(el._x_teleport, target2, modifiers);
      });
    };
    cleanup2(
      () => mutateDom(() => {
        clone2.remove();
        destroyTree(clone2);
      })
    );
  });
  var teleportContainerDuringClone = document.createElement("div");
  function getTarget(expression) {
    let target = skipDuringClone(() => {
      return document.querySelector(expression);
    }, () => {
      return teleportContainerDuringClone;
    })();
    if (!target)
      warn(`Cannot find x-teleport element for selector: "${expression}"`);
    return target;
  }
  var handler = () => {
  };
  handler.inline = (el, { modifiers }, { cleanup: cleanup2 }) => {
    modifiers.includes("self") ? el._x_ignoreSelf = true : el._x_ignore = true;
    cleanup2(() => {
      modifiers.includes("self") ? delete el._x_ignoreSelf : delete el._x_ignore;
    });
  };
  directive("ignore", handler);
  directive("effect", skipDuringClone((el, { expression }, { effect: effect3 }) => {
    effect3(evaluateLater(el, expression));
  }));
  function on2(el, event, modifiers, callback) {
    let listenerTarget = el;
    let handler4 = (e3) => callback(e3);
    let options = {};
    let wrapHandler = (callback2, wrapper) => (e3) => wrapper(callback2, e3);
    if (modifiers.includes("dot"))
      event = dotSyntax(event);
    if (modifiers.includes("camel"))
      event = camelCase2(event);
    if (modifiers.includes("passive"))
      options.passive = true;
    if (modifiers.includes("capture"))
      options.capture = true;
    if (modifiers.includes("window"))
      listenerTarget = window;
    if (modifiers.includes("document"))
      listenerTarget = document;
    if (modifiers.includes("debounce")) {
      let nextModifier = modifiers[modifiers.indexOf("debounce") + 1] || "invalid-wait";
      let wait = isNumeric(nextModifier.split("ms")[0]) ? Number(nextModifier.split("ms")[0]) : 250;
      handler4 = debounce(handler4, wait);
    }
    if (modifiers.includes("throttle")) {
      let nextModifier = modifiers[modifiers.indexOf("throttle") + 1] || "invalid-wait";
      let wait = isNumeric(nextModifier.split("ms")[0]) ? Number(nextModifier.split("ms")[0]) : 250;
      handler4 = throttle(handler4, wait);
    }
    if (modifiers.includes("prevent"))
      handler4 = wrapHandler(handler4, (next, e3) => {
        e3.preventDefault();
        next(e3);
      });
    if (modifiers.includes("stop"))
      handler4 = wrapHandler(handler4, (next, e3) => {
        e3.stopPropagation();
        next(e3);
      });
    if (modifiers.includes("once")) {
      handler4 = wrapHandler(handler4, (next, e3) => {
        next(e3);
        listenerTarget.removeEventListener(event, handler4, options);
      });
    }
    if (modifiers.includes("away") || modifiers.includes("outside")) {
      listenerTarget = document;
      handler4 = wrapHandler(handler4, (next, e3) => {
        if (el.contains(e3.target))
          return;
        if (e3.target.isConnected === false)
          return;
        if (el.offsetWidth < 1 && el.offsetHeight < 1)
          return;
        if (el._x_isShown === false)
          return;
        next(e3);
      });
    }
    if (modifiers.includes("self"))
      handler4 = wrapHandler(handler4, (next, e3) => {
        e3.target === el && next(e3);
      });
    if (isKeyEvent(event) || isClickEvent(event)) {
      handler4 = wrapHandler(handler4, (next, e3) => {
        if (isListeningForASpecificKeyThatHasntBeenPressed(e3, modifiers)) {
          return;
        }
        next(e3);
      });
    }
    listenerTarget.addEventListener(event, handler4, options);
    return () => {
      listenerTarget.removeEventListener(event, handler4, options);
    };
  }
  function dotSyntax(subject) {
    return subject.replace(/-/g, ".");
  }
  function camelCase2(subject) {
    return subject.toLowerCase().replace(/-(\w)/g, (match, char) => char.toUpperCase());
  }
  function isNumeric(subject) {
    return !Array.isArray(subject) && !isNaN(subject);
  }
  function kebabCase2(subject) {
    if ([" ", "_"].includes(
      subject
    ))
      return subject;
    return subject.replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[_\s]/, "-").toLowerCase();
  }
  function isKeyEvent(event) {
    return ["keydown", "keyup"].includes(event);
  }
  function isClickEvent(event) {
    return ["contextmenu", "click", "mouse"].some((i3) => event.includes(i3));
  }
  function isListeningForASpecificKeyThatHasntBeenPressed(e3, modifiers) {
    let keyModifiers = modifiers.filter((i3) => {
      return !["window", "document", "prevent", "stop", "once", "capture", "self", "away", "outside", "passive"].includes(i3);
    });
    if (keyModifiers.includes("debounce")) {
      let debounceIndex = keyModifiers.indexOf("debounce");
      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || "invalid-wait").split("ms")[0]) ? 2 : 1);
    }
    if (keyModifiers.includes("throttle")) {
      let debounceIndex = keyModifiers.indexOf("throttle");
      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || "invalid-wait").split("ms")[0]) ? 2 : 1);
    }
    if (keyModifiers.length === 0)
      return false;
    if (keyModifiers.length === 1 && keyToModifiers(e3.key).includes(keyModifiers[0]))
      return false;
    const systemKeyModifiers = ["ctrl", "shift", "alt", "meta", "cmd", "super"];
    const selectedSystemKeyModifiers = systemKeyModifiers.filter((modifier) => keyModifiers.includes(modifier));
    keyModifiers = keyModifiers.filter((i3) => !selectedSystemKeyModifiers.includes(i3));
    if (selectedSystemKeyModifiers.length > 0) {
      const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter((modifier) => {
        if (modifier === "cmd" || modifier === "super")
          modifier = "meta";
        return e3[`${modifier}Key`];
      });
      if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {
        if (isClickEvent(e3.type))
          return false;
        if (keyToModifiers(e3.key).includes(keyModifiers[0]))
          return false;
      }
    }
    return true;
  }
  function keyToModifiers(key) {
    if (!key)
      return [];
    key = kebabCase2(key);
    let modifierToKeyMap = {
      "ctrl": "control",
      "slash": "/",
      "space": " ",
      "spacebar": " ",
      "cmd": "meta",
      "esc": "escape",
      "up": "arrow-up",
      "down": "arrow-down",
      "left": "arrow-left",
      "right": "arrow-right",
      "period": ".",
      "comma": ",",
      "equal": "=",
      "minus": "-",
      "underscore": "_"
    };
    modifierToKeyMap[key] = key;
    return Object.keys(modifierToKeyMap).map((modifier) => {
      if (modifierToKeyMap[modifier] === key)
        return modifier;
    }).filter((modifier) => modifier);
  }
  directive("model", (el, { modifiers, expression }, { effect: effect3, cleanup: cleanup2 }) => {
    let scopeTarget = el;
    if (modifiers.includes("parent")) {
      scopeTarget = el.parentNode;
    }
    let evaluateGet = evaluateLater(scopeTarget, expression);
    let evaluateSet;
    if (typeof expression === "string") {
      evaluateSet = evaluateLater(scopeTarget, `${expression} = __placeholder`);
    } else if (typeof expression === "function" && typeof expression() === "string") {
      evaluateSet = evaluateLater(scopeTarget, `${expression()} = __placeholder`);
    } else {
      evaluateSet = () => {
      };
    }
    let getValue = () => {
      let result;
      evaluateGet((value) => result = value);
      return isGetterSetter(result) ? result.get() : result;
    };
    let setValue = (value) => {
      let result;
      evaluateGet((value2) => result = value2);
      if (isGetterSetter(result)) {
        result.set(value);
      } else {
        evaluateSet(() => {
        }, {
          scope: { "__placeholder": value }
        });
      }
    };
    if (typeof expression === "string" && el.type === "radio") {
      mutateDom(() => {
        if (!el.hasAttribute("name"))
          el.setAttribute("name", expression);
      });
    }
    var event = el.tagName.toLowerCase() === "select" || ["checkbox", "radio"].includes(el.type) || modifiers.includes("lazy") ? "change" : "input";
    let removeListener = isCloning ? () => {
    } : on2(el, event, modifiers, (e3) => {
      setValue(getInputValue(el, modifiers, e3, getValue()));
    });
    if (modifiers.includes("fill")) {
      if ([void 0, null, ""].includes(getValue()) || isCheckbox(el) && Array.isArray(getValue()) || el.tagName.toLowerCase() === "select" && el.multiple) {
        setValue(
          getInputValue(el, modifiers, { target: el }, getValue())
        );
      }
    }
    if (!el._x_removeModelListeners)
      el._x_removeModelListeners = {};
    el._x_removeModelListeners["default"] = removeListener;
    cleanup2(() => el._x_removeModelListeners["default"]());
    if (el.form) {
      let removeResetListener = on2(el.form, "reset", [], (e3) => {
        nextTick(() => el._x_model && el._x_model.set(getInputValue(el, modifiers, { target: el }, getValue())));
      });
      cleanup2(() => removeResetListener());
    }
    el._x_model = {
      get() {
        return getValue();
      },
      set(value) {
        setValue(value);
      }
    };
    el._x_forceModelUpdate = (value) => {
      if (value === void 0 && typeof expression === "string" && expression.match(/\./))
        value = "";
      window.fromModel = true;
      mutateDom(() => bind(el, "value", value));
      delete window.fromModel;
    };
    effect3(() => {
      let value = getValue();
      if (modifiers.includes("unintrusive") && document.activeElement.isSameNode(el))
        return;
      el._x_forceModelUpdate(value);
    });
  });
  function getInputValue(el, modifiers, event, currentValue) {
    return mutateDom(() => {
      if (event instanceof CustomEvent && event.detail !== void 0)
        return event.detail !== null && event.detail !== void 0 ? event.detail : event.target.value;
      else if (isCheckbox(el)) {
        if (Array.isArray(currentValue)) {
          let newValue = null;
          if (modifiers.includes("number")) {
            newValue = safeParseNumber(event.target.value);
          } else if (modifiers.includes("boolean")) {
            newValue = safeParseBoolean(event.target.value);
          } else {
            newValue = event.target.value;
          }
          return event.target.checked ? currentValue.includes(newValue) ? currentValue : currentValue.concat([newValue]) : currentValue.filter((el2) => !checkedAttrLooseCompare2(el2, newValue));
        } else {
          return event.target.checked;
        }
      } else if (el.tagName.toLowerCase() === "select" && el.multiple) {
        if (modifiers.includes("number")) {
          return Array.from(event.target.selectedOptions).map((option) => {
            let rawValue = option.value || option.text;
            return safeParseNumber(rawValue);
          });
        } else if (modifiers.includes("boolean")) {
          return Array.from(event.target.selectedOptions).map((option) => {
            let rawValue = option.value || option.text;
            return safeParseBoolean(rawValue);
          });
        }
        return Array.from(event.target.selectedOptions).map((option) => {
          return option.value || option.text;
        });
      } else {
        let newValue;
        if (isRadio(el)) {
          if (event.target.checked) {
            newValue = event.target.value;
          } else {
            newValue = currentValue;
          }
        } else {
          newValue = event.target.value;
        }
        if (modifiers.includes("number")) {
          return safeParseNumber(newValue);
        } else if (modifiers.includes("boolean")) {
          return safeParseBoolean(newValue);
        } else if (modifiers.includes("trim")) {
          return newValue.trim();
        } else {
          return newValue;
        }
      }
    });
  }
  function safeParseNumber(rawValue) {
    let number = rawValue ? parseFloat(rawValue) : null;
    return isNumeric2(number) ? number : rawValue;
  }
  function checkedAttrLooseCompare2(valueA, valueB) {
    return valueA == valueB;
  }
  function isNumeric2(subject) {
    return !Array.isArray(subject) && !isNaN(subject);
  }
  function isGetterSetter(value) {
    return value !== null && typeof value === "object" && typeof value.get === "function" && typeof value.set === "function";
  }
  directive("cloak", (el) => queueMicrotask(() => mutateDom(() => el.removeAttribute(prefix("cloak")))));
  addInitSelector(() => `[${prefix("init")}]`);
  directive("init", skipDuringClone((el, { expression }, { evaluate: evaluate2 }) => {
    if (typeof expression === "string") {
      return !!expression.trim() && evaluate2(expression, {}, false);
    }
    return evaluate2(expression, {}, false);
  }));
  directive("text", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {
    let evaluate2 = evaluateLater2(expression);
    effect3(() => {
      evaluate2((value) => {
        mutateDom(() => {
          el.textContent = value;
        });
      });
    });
  });
  directive("html", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {
    let evaluate2 = evaluateLater2(expression);
    effect3(() => {
      evaluate2((value) => {
        mutateDom(() => {
          el.innerHTML = value;
          el._x_ignoreSelf = true;
          initTree(el);
          delete el._x_ignoreSelf;
        });
      });
    });
  });
  mapAttributes(startingWith(":", into(prefix("bind:"))));
  var handler2 = (el, { value, modifiers, expression, original }, { effect: effect3, cleanup: cleanup2 }) => {
    if (!value) {
      let bindingProviders = {};
      injectBindingProviders(bindingProviders);
      let getBindings = evaluateLater(el, expression);
      getBindings((bindings) => {
        applyBindingsObject(el, bindings, original);
      }, { scope: bindingProviders });
      return;
    }
    if (value === "key")
      return storeKeyForXFor(el, expression);
    if (el._x_inlineBindings && el._x_inlineBindings[value] && el._x_inlineBindings[value].extract) {
      return;
    }
    let evaluate2 = evaluateLater(el, expression);
    effect3(() => evaluate2((result) => {
      if (result === void 0 && typeof expression === "string" && expression.match(/\./)) {
        result = "";
      }
      mutateDom(() => bind(el, value, result, modifiers));
    }));
    cleanup2(() => {
      el._x_undoAddedClasses && el._x_undoAddedClasses();
      el._x_undoAddedStyles && el._x_undoAddedStyles();
    });
  };
  handler2.inline = (el, { value, modifiers, expression }) => {
    if (!value)
      return;
    if (!el._x_inlineBindings)
      el._x_inlineBindings = {};
    el._x_inlineBindings[value] = { expression, extract: false };
  };
  directive("bind", handler2);
  function storeKeyForXFor(el, expression) {
    el._x_keyExpression = expression;
  }
  addRootSelector(() => `[${prefix("data")}]`);
  directive("data", (el, { expression }, { cleanup: cleanup2 }) => {
    if (shouldSkipRegisteringDataDuringClone(el))
      return;
    expression = expression === "" ? "{}" : expression;
    let magicContext = {};
    injectMagics(magicContext, el);
    let dataProviderContext = {};
    injectDataProviders(dataProviderContext, magicContext);
    let data2 = evaluate(el, expression, { scope: dataProviderContext });
    if (data2 === void 0 || data2 === true)
      data2 = {};
    injectMagics(data2, el);
    let reactiveData = reactive(data2);
    initInterceptors(reactiveData);
    let undo = addScopeToNode(el, reactiveData);
    reactiveData["init"] && evaluate(el, reactiveData["init"]);
    cleanup2(() => {
      reactiveData["destroy"] && evaluate(el, reactiveData["destroy"]);
      undo();
    });
  });
  interceptClone((from, to2) => {
    if (from._x_dataStack) {
      to2._x_dataStack = from._x_dataStack;
      to2.setAttribute("data-has-alpine-state", true);
    }
  });
  function shouldSkipRegisteringDataDuringClone(el) {
    if (!isCloning)
      return false;
    if (isCloningLegacy)
      return true;
    return el.hasAttribute("data-has-alpine-state");
  }
  directive("show", (el, { modifiers, expression }, { effect: effect3 }) => {
    let evaluate2 = evaluateLater(el, expression);
    if (!el._x_doHide)
      el._x_doHide = () => {
        mutateDom(() => {
          el.style.setProperty("display", "none", modifiers.includes("important") ? "important" : void 0);
        });
      };
    if (!el._x_doShow)
      el._x_doShow = () => {
        mutateDom(() => {
          if (el.style.length === 1 && el.style.display === "none") {
            el.removeAttribute("style");
          } else {
            el.style.removeProperty("display");
          }
        });
      };
    let hide = () => {
      el._x_doHide();
      el._x_isShown = false;
    };
    let show = () => {
      el._x_doShow();
      el._x_isShown = true;
    };
    let clickAwayCompatibleShow = () => setTimeout(show);
    let toggle = once(
      (value) => value ? show() : hide(),
      (value) => {
        if (typeof el._x_toggleAndCascadeWithTransitions === "function") {
          el._x_toggleAndCascadeWithTransitions(el, value, show, hide);
        } else {
          value ? clickAwayCompatibleShow() : hide();
        }
      }
    );
    let oldValue;
    let firstTime = true;
    effect3(() => evaluate2((value) => {
      if (!firstTime && value === oldValue)
        return;
      if (modifiers.includes("immediate"))
        value ? clickAwayCompatibleShow() : hide();
      toggle(value);
      oldValue = value;
      firstTime = false;
    }));
  });
  directive("for", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {
    let iteratorNames = parseForExpression(expression);
    let evaluateItems = evaluateLater(el, iteratorNames.items);
    let evaluateKey = evaluateLater(
      el,
      // the x-bind:key expression is stored for our use instead of evaluated.
      el._x_keyExpression || "index"
    );
    el._x_prevKeys = [];
    el._x_lookup = {};
    effect3(() => loop(el, iteratorNames, evaluateItems, evaluateKey));
    cleanup2(() => {
      Object.values(el._x_lookup).forEach((el2) => mutateDom(
        () => {
          destroyTree(el2);
          el2.remove();
        }
      ));
      delete el._x_prevKeys;
      delete el._x_lookup;
    });
  });
  function loop(el, iteratorNames, evaluateItems, evaluateKey) {
    let isObject2 = (i3) => typeof i3 === "object" && !Array.isArray(i3);
    let templateEl = el;
    evaluateItems((items) => {
      if (isNumeric3(items) && items >= 0) {
        items = Array.from(Array(items).keys(), (i3) => i3 + 1);
      }
      if (items === void 0)
        items = [];
      let lookup = el._x_lookup;
      let prevKeys = el._x_prevKeys;
      let scopes = [];
      let keys = [];
      if (isObject2(items)) {
        items = Object.entries(items).map(([key, value]) => {
          let scope2 = getIterationScopeVariables(iteratorNames, value, key, items);
          evaluateKey((value2) => {
            if (keys.includes(value2))
              warn("Duplicate key on x-for", el);
            keys.push(value2);
          }, { scope: { index: key, ...scope2 } });
          scopes.push(scope2);
        });
      } else {
        for (let i3 = 0; i3 < items.length; i3++) {
          let scope2 = getIterationScopeVariables(iteratorNames, items[i3], i3, items);
          evaluateKey((value) => {
            if (keys.includes(value))
              warn("Duplicate key on x-for", el);
            keys.push(value);
          }, { scope: { index: i3, ...scope2 } });
          scopes.push(scope2);
        }
      }
      let adds = [];
      let moves = [];
      let removes = [];
      let sames = [];
      for (let i3 = 0; i3 < prevKeys.length; i3++) {
        let key = prevKeys[i3];
        if (keys.indexOf(key) === -1)
          removes.push(key);
      }
      prevKeys = prevKeys.filter((key) => !removes.includes(key));
      let lastKey = "template";
      for (let i3 = 0; i3 < keys.length; i3++) {
        let key = keys[i3];
        let prevIndex = prevKeys.indexOf(key);
        if (prevIndex === -1) {
          prevKeys.splice(i3, 0, key);
          adds.push([lastKey, i3]);
        } else if (prevIndex !== i3) {
          let keyInSpot = prevKeys.splice(i3, 1)[0];
          let keyForSpot = prevKeys.splice(prevIndex - 1, 1)[0];
          prevKeys.splice(i3, 0, keyForSpot);
          prevKeys.splice(prevIndex, 0, keyInSpot);
          moves.push([keyInSpot, keyForSpot]);
        } else {
          sames.push(key);
        }
        lastKey = key;
      }
      for (let i3 = 0; i3 < removes.length; i3++) {
        let key = removes[i3];
        if (!(key in lookup))
          continue;
        mutateDom(() => {
          destroyTree(lookup[key]);
          lookup[key].remove();
        });
        delete lookup[key];
      }
      for (let i3 = 0; i3 < moves.length; i3++) {
        let [keyInSpot, keyForSpot] = moves[i3];
        let elInSpot = lookup[keyInSpot];
        let elForSpot = lookup[keyForSpot];
        let marker = document.createElement("div");
        mutateDom(() => {
          if (!elForSpot)
            warn(`x-for ":key" is undefined or invalid`, templateEl, keyForSpot, lookup);
          elForSpot.after(marker);
          elInSpot.after(elForSpot);
          elForSpot._x_currentIfEl && elForSpot.after(elForSpot._x_currentIfEl);
          marker.before(elInSpot);
          elInSpot._x_currentIfEl && elInSpot.after(elInSpot._x_currentIfEl);
          marker.remove();
        });
        elForSpot._x_refreshXForScope(scopes[keys.indexOf(keyForSpot)]);
      }
      for (let i3 = 0; i3 < adds.length; i3++) {
        let [lastKey2, index] = adds[i3];
        let lastEl = lastKey2 === "template" ? templateEl : lookup[lastKey2];
        if (lastEl._x_currentIfEl)
          lastEl = lastEl._x_currentIfEl;
        let scope2 = scopes[index];
        let key = keys[index];
        let clone2 = document.importNode(templateEl.content, true).firstElementChild;
        let reactiveScope = reactive(scope2);
        addScopeToNode(clone2, reactiveScope, templateEl);
        clone2._x_refreshXForScope = (newScope) => {
          Object.entries(newScope).forEach(([key2, value]) => {
            reactiveScope[key2] = value;
          });
        };
        mutateDom(() => {
          lastEl.after(clone2);
          skipDuringClone(() => initTree(clone2))();
        });
        if (typeof key === "object") {
          warn("x-for key cannot be an object, it must be a string or an integer", templateEl);
        }
        lookup[key] = clone2;
      }
      for (let i3 = 0; i3 < sames.length; i3++) {
        lookup[sames[i3]]._x_refreshXForScope(scopes[keys.indexOf(sames[i3])]);
      }
      templateEl._x_prevKeys = keys;
    });
  }
  function parseForExpression(expression) {
    let forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    let stripParensRE = /^\s*\(|\)\s*$/g;
    let forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    let inMatch = expression.match(forAliasRE);
    if (!inMatch)
      return;
    let res = {};
    res.items = inMatch[2].trim();
    let item = inMatch[1].replace(stripParensRE, "").trim();
    let iteratorMatch = item.match(forIteratorRE);
    if (iteratorMatch) {
      res.item = item.replace(forIteratorRE, "").trim();
      res.index = iteratorMatch[1].trim();
      if (iteratorMatch[2]) {
        res.collection = iteratorMatch[2].trim();
      }
    } else {
      res.item = item;
    }
    return res;
  }
  function getIterationScopeVariables(iteratorNames, item, index, items) {
    let scopeVariables = {};
    if (/^\[.*\]$/.test(iteratorNames.item) && Array.isArray(item)) {
      let names = iteratorNames.item.replace("[", "").replace("]", "").split(",").map((i3) => i3.trim());
      names.forEach((name, i3) => {
        scopeVariables[name] = item[i3];
      });
    } else if (/^\{.*\}$/.test(iteratorNames.item) && !Array.isArray(item) && typeof item === "object") {
      let names = iteratorNames.item.replace("{", "").replace("}", "").split(",").map((i3) => i3.trim());
      names.forEach((name) => {
        scopeVariables[name] = item[name];
      });
    } else {
      scopeVariables[iteratorNames.item] = item;
    }
    if (iteratorNames.index)
      scopeVariables[iteratorNames.index] = index;
    if (iteratorNames.collection)
      scopeVariables[iteratorNames.collection] = items;
    return scopeVariables;
  }
  function isNumeric3(subject) {
    return !Array.isArray(subject) && !isNaN(subject);
  }
  function handler3() {
  }
  handler3.inline = (el, { expression }, { cleanup: cleanup2 }) => {
    let root = closestRoot(el);
    if (!root._x_refs)
      root._x_refs = {};
    root._x_refs[expression] = el;
    cleanup2(() => delete root._x_refs[expression]);
  };
  directive("ref", handler3);
  directive("if", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {
    if (el.tagName.toLowerCase() !== "template")
      warn("x-if can only be used on a <template> tag", el);
    let evaluate2 = evaluateLater(el, expression);
    let show = () => {
      if (el._x_currentIfEl)
        return el._x_currentIfEl;
      let clone2 = el.content.cloneNode(true).firstElementChild;
      addScopeToNode(clone2, {}, el);
      mutateDom(() => {
        el.after(clone2);
        skipDuringClone(() => initTree(clone2))();
      });
      el._x_currentIfEl = clone2;
      el._x_undoIf = () => {
        mutateDom(() => {
          destroyTree(clone2);
          clone2.remove();
        });
        delete el._x_currentIfEl;
      };
      return clone2;
    };
    let hide = () => {
      if (!el._x_undoIf)
        return;
      el._x_undoIf();
      delete el._x_undoIf;
    };
    effect3(() => evaluate2((value) => {
      value ? show() : hide();
    }));
    cleanup2(() => el._x_undoIf && el._x_undoIf());
  });
  directive("id", (el, { expression }, { evaluate: evaluate2 }) => {
    let names = evaluate2(expression);
    names.forEach((name) => setIdRoot(el, name));
  });
  interceptClone((from, to2) => {
    if (from._x_ids) {
      to2._x_ids = from._x_ids;
    }
  });
  mapAttributes(startingWith("@", into(prefix("on:"))));
  directive("on", skipDuringClone((el, { value, modifiers, expression }, { cleanup: cleanup2 }) => {
    let evaluate2 = expression ? evaluateLater(el, expression) : () => {
    };
    if (el.tagName.toLowerCase() === "template") {
      if (!el._x_forwardEvents)
        el._x_forwardEvents = [];
      if (!el._x_forwardEvents.includes(value))
        el._x_forwardEvents.push(value);
    }
    let removeListener = on2(el, value, modifiers, (e3) => {
      evaluate2(() => {
      }, { scope: { "$event": e3 }, params: [e3] });
    });
    cleanup2(() => removeListener());
  }));
  warnMissingPluginDirective("Collapse", "collapse", "collapse");
  warnMissingPluginDirective("Intersect", "intersect", "intersect");
  warnMissingPluginDirective("Focus", "trap", "focus");
  warnMissingPluginDirective("Mask", "mask", "mask");
  function warnMissingPluginDirective(name, directiveName, slug) {
    directive(directiveName, (el) => warn(`You can't use [x-${directiveName}] without first installing the "${name}" plugin here: https://alpinejs.dev/plugins/${slug}`, el));
  }
  alpine_default.setEvaluator(normalEvaluator);
  alpine_default.setReactivityEngine({ reactive: reactive2, effect: effect2, release: stop, raw: toRaw });
  var src_default = alpine_default;
  var module_default = src_default;

  // node_modules/apexcharts/dist/apexcharts.esm.js
  function t3(t4, e3) {
    (null == e3 || e3 > t4.length) && (e3 = t4.length);
    for (var i3 = 0, a3 = Array(e3); i3 < e3; i3++) a3[i3] = t4[i3];
    return a3;
  }
  function e2(t4) {
    if (void 0 === t4) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return t4;
  }
  function i2(t4, e3) {
    if (!(t4 instanceof e3)) throw new TypeError("Cannot call a class as a function");
  }
  function a2(t4, e3) {
    for (var i3 = 0; i3 < e3.length; i3++) {
      var a3 = e3[i3];
      a3.enumerable = a3.enumerable || false, a3.configurable = true, "value" in a3 && (a3.writable = true), Object.defineProperty(t4, x2(a3.key), a3);
    }
  }
  function s2(t4, e3, i3) {
    return e3 && a2(t4.prototype, e3), i3 && a2(t4, i3), Object.defineProperty(t4, "prototype", { writable: false }), t4;
  }
  function r2(t4, e3) {
    var i3 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
    if (!i3) {
      if (Array.isArray(t4) || (i3 = m2(t4)) || e3 && t4 && "number" == typeof t4.length) {
        i3 && (t4 = i3);
        var a3 = 0, s3 = function() {
        };
        return { s: s3, n: function() {
          return a3 >= t4.length ? { done: true } : { done: false, value: t4[a3++] };
        }, e: function(t5) {
          throw t5;
        }, f: s3 };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var r3, n3 = true, o3 = false;
    return { s: function() {
      i3 = i3.call(t4);
    }, n: function() {
      var t5 = i3.next();
      return n3 = t5.done, t5;
    }, e: function(t5) {
      o3 = true, r3 = t5;
    }, f: function() {
      try {
        n3 || null == i3.return || i3.return();
      } finally {
        if (o3) throw r3;
      }
    } };
  }
  function n2(t4) {
    var i3 = c2();
    return function() {
      var a3, s3 = l2(t4);
      if (i3) {
        var r3 = l2(this).constructor;
        a3 = Reflect.construct(s3, arguments, r3);
      } else a3 = s3.apply(this, arguments);
      return function(t5, i4) {
        if (i4 && ("object" == typeof i4 || "function" == typeof i4)) return i4;
        if (void 0 !== i4) throw new TypeError("Derived constructors may only return object or undefined");
        return e2(t5);
      }(this, a3);
    };
  }
  function o2(t4, e3, i3) {
    return (e3 = x2(e3)) in t4 ? Object.defineProperty(t4, e3, { value: i3, enumerable: true, configurable: true, writable: true }) : t4[e3] = i3, t4;
  }
  function l2(t4) {
    return l2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t5) {
      return t5.__proto__ || Object.getPrototypeOf(t5);
    }, l2(t4);
  }
  function h2(t4, e3) {
    if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
    t4.prototype = Object.create(e3 && e3.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e3 && g2(t4, e3);
  }
  function c2() {
    try {
      var t4 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch (t5) {
    }
    return (c2 = function() {
      return !!t4;
    })();
  }
  function d2(t4, e3) {
    var i3 = Object.keys(t4);
    if (Object.getOwnPropertySymbols) {
      var a3 = Object.getOwnPropertySymbols(t4);
      e3 && (a3 = a3.filter(function(e4) {
        return Object.getOwnPropertyDescriptor(t4, e4).enumerable;
      })), i3.push.apply(i3, a3);
    }
    return i3;
  }
  function u2(t4) {
    for (var e3 = 1; e3 < arguments.length; e3++) {
      var i3 = null != arguments[e3] ? arguments[e3] : {};
      e3 % 2 ? d2(Object(i3), true).forEach(function(e4) {
        o2(t4, e4, i3[e4]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t4, Object.getOwnPropertyDescriptors(i3)) : d2(Object(i3)).forEach(function(e4) {
        Object.defineProperty(t4, e4, Object.getOwnPropertyDescriptor(i3, e4));
      });
    }
    return t4;
  }
  function g2(t4, e3) {
    return g2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t5, e4) {
      return t5.__proto__ = e4, t5;
    }, g2(t4, e3);
  }
  function p2(t4, e3) {
    return function(t5) {
      if (Array.isArray(t5)) return t5;
    }(t4) || function(t5, e4) {
      var i3 = null == t5 ? null : "undefined" != typeof Symbol && t5[Symbol.iterator] || t5["@@iterator"];
      if (null != i3) {
        var a3, s3, r3, n3, o3 = [], l3 = true, h3 = false;
        try {
          if (r3 = (i3 = i3.call(t5)).next, 0 === e4) {
            if (Object(i3) !== i3) return;
            l3 = false;
          } else for (; !(l3 = (a3 = r3.call(i3)).done) && (o3.push(a3.value), o3.length !== e4); l3 = true) ;
        } catch (t6) {
          h3 = true, s3 = t6;
        } finally {
          try {
            if (!l3 && null != i3.return && (n3 = i3.return(), Object(n3) !== n3)) return;
          } finally {
            if (h3) throw s3;
          }
        }
        return o3;
      }
    }(t4, e3) || m2(t4, e3) || function() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function f2(e3) {
    return function(e4) {
      if (Array.isArray(e4)) return t3(e4);
    }(e3) || function(t4) {
      if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"]) return Array.from(t4);
    }(e3) || m2(e3) || function() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function x2(t4) {
    var e3 = function(t5, e4) {
      if ("object" != typeof t5 || !t5) return t5;
      var i3 = t5[Symbol.toPrimitive];
      if (void 0 !== i3) {
        var a3 = i3.call(t5, e4 || "default");
        if ("object" != typeof a3) return a3;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === e4 ? String : Number)(t5);
    }(t4, "string");
    return "symbol" == typeof e3 ? e3 : e3 + "";
  }
  function b2(t4) {
    return b2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
      return typeof t5;
    } : function(t5) {
      return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
    }, b2(t4);
  }
  function m2(e3, i3) {
    if (e3) {
      if ("string" == typeof e3) return t3(e3, i3);
      var a3 = {}.toString.call(e3).slice(8, -1);
      return "Object" === a3 && e3.constructor && (a3 = e3.constructor.name), "Map" === a3 || "Set" === a3 ? Array.from(e3) : "Arguments" === a3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a3) ? t3(e3, i3) : void 0;
    }
  }
  var v2 = function() {
    function t4() {
      i2(this, t4);
    }
    return s2(t4, [{ key: "shadeRGBColor", value: function(t5, e3) {
      var i3 = e3.split(","), a3 = t5 < 0 ? 0 : 255, s3 = t5 < 0 ? -1 * t5 : t5, r3 = parseInt(i3[0].slice(4), 10), n3 = parseInt(i3[1], 10), o3 = parseInt(i3[2], 10);
      return "rgb(" + (Math.round((a3 - r3) * s3) + r3) + "," + (Math.round((a3 - n3) * s3) + n3) + "," + (Math.round((a3 - o3) * s3) + o3) + ")";
    } }, { key: "shadeHexColor", value: function(t5, e3) {
      var i3 = parseInt(e3.slice(1), 16), a3 = t5 < 0 ? 0 : 255, s3 = t5 < 0 ? -1 * t5 : t5, r3 = i3 >> 16, n3 = i3 >> 8 & 255, o3 = 255 & i3;
      return "#" + (16777216 + 65536 * (Math.round((a3 - r3) * s3) + r3) + 256 * (Math.round((a3 - n3) * s3) + n3) + (Math.round((a3 - o3) * s3) + o3)).toString(16).slice(1);
    } }, { key: "shadeColor", value: function(e3, i3) {
      return t4.isColorHex(i3) ? this.shadeHexColor(e3, i3) : this.shadeRGBColor(e3, i3);
    } }], [{ key: "bind", value: function(t5, e3) {
      return function() {
        return t5.apply(e3, arguments);
      };
    } }, { key: "isObject", value: function(t5) {
      return t5 && "object" === b2(t5) && !Array.isArray(t5) && null != t5;
    } }, { key: "is", value: function(t5, e3) {
      return Object.prototype.toString.call(e3) === "[object " + t5 + "]";
    } }, { key: "isSafari", value: function() {
      return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    } }, { key: "listToArray", value: function(t5) {
      var e3, i3 = [];
      for (e3 = 0; e3 < t5.length; e3++) i3[e3] = t5[e3];
      return i3;
    } }, { key: "extend", value: function(t5, e3) {
      var i3 = this;
      "function" != typeof Object.assign && (Object.assign = function(t6) {
        if (null == t6) throw new TypeError("Cannot convert undefined or null to object");
        for (var e4 = Object(t6), i4 = 1; i4 < arguments.length; i4++) {
          var a4 = arguments[i4];
          if (null != a4) for (var s3 in a4) a4.hasOwnProperty(s3) && (e4[s3] = a4[s3]);
        }
        return e4;
      });
      var a3 = Object.assign({}, t5);
      return this.isObject(t5) && this.isObject(e3) && Object.keys(e3).forEach(function(s3) {
        i3.isObject(e3[s3]) && s3 in t5 ? a3[s3] = i3.extend(t5[s3], e3[s3]) : Object.assign(a3, o2({}, s3, e3[s3]));
      }), a3;
    } }, { key: "extendArray", value: function(e3, i3) {
      var a3 = [];
      return e3.map(function(e4) {
        a3.push(t4.extend(i3, e4));
      }), e3 = a3;
    } }, { key: "monthMod", value: function(t5) {
      return t5 % 12;
    } }, { key: "clone", value: function(t5) {
      var e3, i3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : /* @__PURE__ */ new WeakMap();
      if (null === t5 || "object" !== b2(t5)) return t5;
      if (i3.has(t5)) return i3.get(t5);
      if (Array.isArray(t5)) {
        e3 = [], i3.set(t5, e3);
        for (var a3 = 0; a3 < t5.length; a3++) e3[a3] = this.clone(t5[a3], i3);
      } else if (t5 instanceof Date) e3 = new Date(t5.getTime());
      else for (var s3 in e3 = {}, i3.set(t5, e3), t5) t5.hasOwnProperty(s3) && (e3[s3] = this.clone(t5[s3], i3));
      return e3;
    } }, { key: "log10", value: function(t5) {
      return Math.log(t5) / Math.LN10;
    } }, { key: "roundToBase10", value: function(t5) {
      return Math.pow(10, Math.floor(Math.log10(t5)));
    } }, { key: "roundToBase", value: function(t5, e3) {
      return Math.pow(e3, Math.floor(Math.log(t5) / Math.log(e3)));
    } }, { key: "parseNumber", value: function(t5) {
      return null === t5 ? t5 : parseFloat(t5);
    } }, { key: "stripNumber", value: function(t5) {
      var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
      return Number.isInteger(t5) ? t5 : parseFloat(t5.toPrecision(e3));
    } }, { key: "randomId", value: function() {
      return (Math.random() + 1).toString(36).substring(4);
    } }, { key: "noExponents", value: function(t5) {
      return t5.toString().includes("e") ? Math.round(t5) : t5;
    } }, { key: "elementExists", value: function(t5) {
      return !(!t5 || !t5.isConnected);
    } }, { key: "getDimensions", value: function(t5) {
      var e3 = getComputedStyle(t5, null), i3 = t5.clientHeight, a3 = t5.clientWidth;
      return i3 -= parseFloat(e3.paddingTop) + parseFloat(e3.paddingBottom), [a3 -= parseFloat(e3.paddingLeft) + parseFloat(e3.paddingRight), i3];
    } }, { key: "getBoundingClientRect", value: function(t5) {
      var e3 = t5.getBoundingClientRect();
      return { top: e3.top, right: e3.right, bottom: e3.bottom, left: e3.left, width: t5.clientWidth, height: t5.clientHeight, x: e3.left, y: e3.top };
    } }, { key: "getLargestStringFromArr", value: function(t5) {
      return t5.reduce(function(t6, e3) {
        return Array.isArray(e3) && (e3 = e3.reduce(function(t7, e4) {
          return t7.length > e4.length ? t7 : e4;
        })), t6.length > e3.length ? t6 : e3;
      }, 0);
    } }, { key: "hexToRgba", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999", e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.6;
      "#" !== t5.substring(0, 1) && (t5 = "#999999");
      var i3 = t5.replace("#", "");
      i3 = i3.match(new RegExp("(.{" + i3.length / 3 + "})", "g"));
      for (var a3 = 0; a3 < i3.length; a3++) i3[a3] = parseInt(1 === i3[a3].length ? i3[a3] + i3[a3] : i3[a3], 16);
      return void 0 !== e3 && i3.push(e3), "rgba(" + i3.join(",") + ")";
    } }, { key: "getOpacityFromRGBA", value: function(t5) {
      return parseFloat(t5.replace(/^.*,(.+)\)/, "$1"));
    } }, { key: "rgb2hex", value: function(t5) {
      return (t5 = t5.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t5.length ? "#" + ("0" + parseInt(t5[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t5[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t5[3], 10).toString(16)).slice(-2) : "";
    } }, { key: "isColorHex", value: function(t5) {
      return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t5);
    } }, { key: "getPolygonPos", value: function(t5, e3) {
      for (var i3 = [], a3 = 2 * Math.PI / e3, s3 = 0; s3 < e3; s3++) {
        var r3 = {};
        r3.x = t5 * Math.sin(s3 * a3), r3.y = -t5 * Math.cos(s3 * a3), i3.push(r3);
      }
      return i3;
    } }, { key: "polarToCartesian", value: function(t5, e3, i3, a3) {
      var s3 = (a3 - 90) * Math.PI / 180;
      return { x: t5 + i3 * Math.cos(s3), y: e3 + i3 * Math.sin(s3) };
    } }, { key: "escapeString", value: function(t5) {
      var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x", i3 = t5.toString().slice();
      return i3 = i3.replace(/[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi, e3);
    } }, { key: "negToZero", value: function(t5) {
      return t5 < 0 ? 0 : t5;
    } }, { key: "moveIndexInArray", value: function(t5, e3, i3) {
      if (i3 >= t5.length) for (var a3 = i3 - t5.length + 1; a3--; ) t5.push(void 0);
      return t5.splice(i3, 0, t5.splice(e3, 1)[0]), t5;
    } }, { key: "extractNumber", value: function(t5) {
      return parseFloat(t5.replace(/[^\d.]*/g, ""));
    } }, { key: "findAncestor", value: function(t5, e3) {
      for (; (t5 = t5.parentElement) && !t5.classList.contains(e3); ) ;
      return t5;
    } }, { key: "setELstyles", value: function(t5, e3) {
      for (var i3 in e3) e3.hasOwnProperty(i3) && (t5.style.key = e3[i3]);
    } }, { key: "preciseAddition", value: function(t5, e3) {
      var i3 = (String(t5).split(".")[1] || "").length, a3 = (String(e3).split(".")[1] || "").length, s3 = Math.pow(10, Math.max(i3, a3));
      return (Math.round(t5 * s3) + Math.round(e3 * s3)) / s3;
    } }, { key: "isNumber", value: function(t5) {
      return !isNaN(t5) && parseFloat(Number(t5)) === t5 && !isNaN(parseInt(t5, 10));
    } }, { key: "isFloat", value: function(t5) {
      return Number(t5) === t5 && t5 % 1 != 0;
    } }, { key: "isMsEdge", value: function() {
      var t5 = window.navigator.userAgent, e3 = t5.indexOf("Edge/");
      return e3 > 0 && parseInt(t5.substring(e3 + 5, t5.indexOf(".", e3)), 10);
    } }, { key: "getGCD", value: function(t5, e3) {
      var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7, a3 = Math.pow(10, i3 - Math.floor(Math.log10(Math.max(t5, e3))));
      for (t5 = Math.round(Math.abs(t5) * a3), e3 = Math.round(Math.abs(e3) * a3); e3; ) {
        var s3 = e3;
        e3 = t5 % e3, t5 = s3;
      }
      return t5 / a3;
    } }, { key: "getPrimeFactors", value: function(t5) {
      for (var e3 = [], i3 = 2; t5 >= 2; ) t5 % i3 == 0 ? (e3.push(i3), t5 /= i3) : i3++;
      return e3;
    } }, { key: "mod", value: function(t5, e3) {
      var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7, a3 = Math.pow(10, i3 - Math.floor(Math.log10(Math.max(t5, e3))));
      return (t5 = Math.round(Math.abs(t5) * a3)) % (e3 = Math.round(Math.abs(e3) * a3)) / a3;
    } }]), t4;
  }();
  var y2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "animateLine", value: function(t5, e3, i3, a3) {
      t5.attr(e3).animate(a3).attr(i3);
    } }, { key: "animateMarker", value: function(t5, e3, i3, a3) {
      t5.attr({ opacity: 0 }).animate(e3).attr({ opacity: 1 }).after(function() {
        a3();
      });
    } }, { key: "animateRect", value: function(t5, e3, i3, a3, s3) {
      t5.attr(e3).animate(a3).attr(i3).after(function() {
        return s3();
      });
    } }, { key: "animatePathsGradually", value: function(t5) {
      var e3 = t5.el, i3 = t5.realIndex, a3 = t5.j, s3 = t5.fill, r3 = t5.pathFrom, n3 = t5.pathTo, o3 = t5.speed, l3 = t5.delay, h3 = this.w, c3 = 0;
      h3.config.chart.animations.animateGradually.enabled && (c3 = h3.config.chart.animations.animateGradually.delay), h3.config.chart.animations.dynamicAnimation.enabled && h3.globals.dataChanged && "bar" !== h3.config.chart.type && (c3 = 0), this.morphSVG(e3, i3, a3, "line" !== h3.config.chart.type || h3.globals.comboCharts ? s3 : "stroke", r3, n3, o3, l3 * c3);
    } }, { key: "showDelayedElements", value: function() {
      this.w.globals.delayedElements.forEach(function(t5) {
        var e3 = t5.el;
        e3.classList.remove("apexcharts-element-hidden"), e3.classList.add("apexcharts-hidden-element-shown");
      });
    } }, { key: "animationCompleted", value: function(t5) {
      var e3 = this.w;
      e3.globals.animationEnded || (e3.globals.animationEnded = true, this.showDelayedElements(), "function" == typeof e3.config.chart.events.animationEnd && e3.config.chart.events.animationEnd(this.ctx, { el: t5, w: e3 }));
    } }, { key: "morphSVG", value: function(t5, e3, i3, a3, s3, r3, n3, o3) {
      var l3 = this, h3 = this.w;
      s3 || (s3 = t5.attr("pathFrom")), r3 || (r3 = t5.attr("pathTo"));
      var c3 = function(t6) {
        return "radar" === h3.config.chart.type && (n3 = 1), "M 0 ".concat(h3.globals.gridHeight);
      };
      (!s3 || s3.indexOf("undefined") > -1 || s3.indexOf("NaN") > -1) && (s3 = c3()), (!r3.trim() || r3.indexOf("undefined") > -1 || r3.indexOf("NaN") > -1) && (r3 = c3()), h3.globals.shouldAnimate || (n3 = 1), t5.plot(s3).animate(1, o3).plot(s3).animate(n3, o3).plot(r3).after(function() {
        v2.isNumber(i3) ? i3 === h3.globals.series[h3.globals.maxValsInArrayIndex].length - 2 && h3.globals.shouldAnimate && l3.animationCompleted(t5) : "none" !== a3 && h3.globals.shouldAnimate && (!h3.globals.comboCharts && e3 === h3.globals.series.length - 1 || h3.globals.comboCharts) && l3.animationCompleted(t5), l3.showDelayedElements();
      });
    } }]), t4;
  }();
  var w2 = {};
  var k2 = [];
  function A2(t4, e3) {
    if (Array.isArray(t4)) for (const i3 of t4) A2(i3, e3);
    else if ("object" != typeof t4) S2(Object.getOwnPropertyNames(e3)), w2[t4] = Object.assign(w2[t4] || {}, e3);
    else for (const e4 in t4) A2(e4, t4[e4]);
  }
  function C2(t4) {
    return w2[t4] || {};
  }
  function S2(t4) {
    k2.push(...t4);
  }
  function L2(t4, e3) {
    let i3;
    const a3 = t4.length, s3 = [];
    for (i3 = 0; i3 < a3; i3++) s3.push(e3(t4[i3]));
    return s3;
  }
  function M2(t4) {
    return t4 % 360 * Math.PI / 180;
  }
  function P2(t4) {
    return t4.charAt(0).toUpperCase() + t4.slice(1);
  }
  function I2(t4, e3, i3, a3) {
    return null != e3 && null != i3 || (a3 = a3 || t4.bbox(), null == e3 ? e3 = a3.width / a3.height * i3 : null == i3 && (i3 = a3.height / a3.width * e3)), { width: e3, height: i3 };
  }
  function T2(t4, e3) {
    const i3 = t4.origin;
    let a3 = null != t4.ox ? t4.ox : null != t4.originX ? t4.originX : "center", s3 = null != t4.oy ? t4.oy : null != t4.originY ? t4.originY : "center";
    null != i3 && ([a3, s3] = Array.isArray(i3) ? i3 : "object" == typeof i3 ? [i3.x, i3.y] : [i3, i3]);
    const r3 = "string" == typeof a3, n3 = "string" == typeof s3;
    if (r3 || n3) {
      const { height: t5, width: i4, x: o3, y: l3 } = e3.bbox();
      r3 && (a3 = a3.includes("left") ? o3 : a3.includes("right") ? o3 + i4 : o3 + i4 / 2), n3 && (s3 = s3.includes("top") ? l3 : s3.includes("bottom") ? l3 + t5 : l3 + t5 / 2);
    }
    return [a3, s3];
  }
  var z2 = /* @__PURE__ */ new Set(["desc", "metadata", "title"]);
  var X2 = (t4) => z2.has(t4.nodeName);
  var R2 = (t4, e3, i3 = {}) => {
    const a3 = { ...e3 };
    for (const t5 in a3) a3[t5].valueOf() === i3[t5] && delete a3[t5];
    Object.keys(a3).length ? t4.node.setAttribute("data-svgjs", JSON.stringify(a3)) : (t4.node.removeAttribute("data-svgjs"), t4.node.removeAttribute("svgjs:data"));
  };
  var E2 = "http://www.w3.org/2000/svg";
  var Y2 = "http://www.w3.org/2000/xmlns/";
  var H2 = "http://www.w3.org/1999/xlink";
  var O2 = { window: "undefined" == typeof window ? null : window, document: "undefined" == typeof document ? null : document };
  function F2() {
    return O2.window;
  }
  var D2 = class {
  };
  var _2 = {};
  var N2 = "___SYMBOL___ROOT___";
  function W2(t4, e3 = E2) {
    return O2.document.createElementNS(e3, t4);
  }
  function B2(t4, e3 = false) {
    if (t4 instanceof D2) return t4;
    if ("object" == typeof t4) return U2(t4);
    if (null == t4) return new _2[N2]();
    if ("string" == typeof t4 && "<" !== t4.charAt(0)) return U2(O2.document.querySelector(t4));
    const i3 = e3 ? O2.document.createElement("div") : W2("svg");
    return i3.innerHTML = t4, t4 = U2(i3.firstChild), i3.removeChild(i3.firstChild), t4;
  }
  function G2(t4, e3) {
    return e3 && (e3 instanceof O2.window.Node || e3.ownerDocument && e3 instanceof e3.ownerDocument.defaultView.Node) ? e3 : W2(t4);
  }
  function V2(t4) {
    if (!t4) return null;
    if (t4.instance instanceof D2) return t4.instance;
    if ("#document-fragment" === t4.nodeName) return new _2.Fragment(t4);
    let e3 = P2(t4.nodeName || "Dom");
    return "LinearGradient" === e3 || "RadialGradient" === e3 ? e3 = "Gradient" : _2[e3] || (e3 = "Dom"), new _2[e3](t4);
  }
  var U2 = V2;
  function q2(t4, e3 = t4.name, i3 = false) {
    return _2[e3] = t4, i3 && (_2[N2] = t4), S2(Object.getOwnPropertyNames(t4.prototype)), t4;
  }
  var Z2 = 1e3;
  function $2(t4) {
    return "Svgjs" + P2(t4) + Z2++;
  }
  function J2(t4) {
    for (let e3 = t4.children.length - 1; e3 >= 0; e3--) J2(t4.children[e3]);
    return t4.id ? (t4.id = $2(t4.nodeName), t4) : t4;
  }
  function Q2(t4, e3) {
    let i3, a3;
    for (a3 = (t4 = Array.isArray(t4) ? t4 : [t4]).length - 1; a3 >= 0; a3--) for (i3 in e3) t4[a3].prototype[i3] = e3[i3];
  }
  function K2(t4) {
    return function(...e3) {
      const i3 = e3[e3.length - 1];
      return !i3 || i3.constructor !== Object || i3 instanceof Array ? t4.apply(this, e3) : t4.apply(this, e3.slice(0, -1)).attr(i3);
    };
  }
  A2("Dom", { siblings: function() {
    return this.parent().children();
  }, position: function() {
    return this.parent().index(this);
  }, next: function() {
    return this.siblings()[this.position() + 1];
  }, prev: function() {
    return this.siblings()[this.position() - 1];
  }, forward: function() {
    const t4 = this.position();
    return this.parent().add(this.remove(), t4 + 1), this;
  }, backward: function() {
    const t4 = this.position();
    return this.parent().add(this.remove(), t4 ? t4 - 1 : 0), this;
  }, front: function() {
    return this.parent().add(this.remove()), this;
  }, back: function() {
    return this.parent().add(this.remove(), 0), this;
  }, before: function(t4) {
    (t4 = B2(t4)).remove();
    const e3 = this.position();
    return this.parent().add(t4, e3), this;
  }, after: function(t4) {
    (t4 = B2(t4)).remove();
    const e3 = this.position();
    return this.parent().add(t4, e3 + 1), this;
  }, insertBefore: function(t4) {
    return (t4 = B2(t4)).before(this), this;
  }, insertAfter: function(t4) {
    return (t4 = B2(t4)).after(this), this;
  } });
  var tt2 = /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i;
  var et2 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
  var it2 = /rgb\((\d+),(\d+),(\d+)\)/;
  var at2 = /(#[a-z_][a-z0-9\-_]*)/i;
  var st2 = /\)\s*,?\s*/;
  var rt2 = /\s/g;
  var nt2 = /^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i;
  var ot2 = /^rgb\(/;
  var lt2 = /^(\s+)?$/;
  var ht2 = /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
  var ct2 = /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i;
  var dt2 = /[\s,]+/;
  var ut2 = /[MLHVCSQTAZ]/i;
  function gt2(t4) {
    const e3 = Math.round(t4), i3 = Math.max(0, Math.min(255, e3)).toString(16);
    return 1 === i3.length ? "0" + i3 : i3;
  }
  function pt2(t4, e3) {
    for (let i3 = e3.length; i3--; ) if (null == t4[e3[i3]]) return false;
    return true;
  }
  function ft2(t4, e3, i3) {
    return i3 < 0 && (i3 += 1), i3 > 1 && (i3 -= 1), i3 < 1 / 6 ? t4 + 6 * (e3 - t4) * i3 : i3 < 0.5 ? e3 : i3 < 2 / 3 ? t4 + (e3 - t4) * (2 / 3 - i3) * 6 : t4;
  }
  A2("Dom", { classes: function() {
    const t4 = this.attr("class");
    return null == t4 ? [] : t4.trim().split(dt2);
  }, hasClass: function(t4) {
    return -1 !== this.classes().indexOf(t4);
  }, addClass: function(t4) {
    if (!this.hasClass(t4)) {
      const e3 = this.classes();
      e3.push(t4), this.attr("class", e3.join(" "));
    }
    return this;
  }, removeClass: function(t4) {
    return this.hasClass(t4) && this.attr("class", this.classes().filter(function(e3) {
      return e3 !== t4;
    }).join(" ")), this;
  }, toggleClass: function(t4) {
    return this.hasClass(t4) ? this.removeClass(t4) : this.addClass(t4);
  } }), A2("Dom", { css: function(t4, e3) {
    const i3 = {};
    if (0 === arguments.length) return this.node.style.cssText.split(/\s*;\s*/).filter(function(t5) {
      return !!t5.length;
    }).forEach(function(t5) {
      const e4 = t5.split(/\s*:\s*/);
      i3[e4[0]] = e4[1];
    }), i3;
    if (arguments.length < 2) {
      if (Array.isArray(t4)) {
        for (const e4 of t4) {
          const t5 = e4;
          i3[e4] = this.node.style.getPropertyValue(t5);
        }
        return i3;
      }
      if ("string" == typeof t4) return this.node.style.getPropertyValue(t4);
      if ("object" == typeof t4) for (const e4 in t4) this.node.style.setProperty(e4, null == t4[e4] || lt2.test(t4[e4]) ? "" : t4[e4]);
    }
    return 2 === arguments.length && this.node.style.setProperty(t4, null == e3 || lt2.test(e3) ? "" : e3), this;
  }, show: function() {
    return this.css("display", "");
  }, hide: function() {
    return this.css("display", "none");
  }, visible: function() {
    return "none" !== this.css("display");
  } }), A2("Dom", { data: function(t4, e3, i3) {
    if (null == t4) return this.data(L2(function(t5, e4) {
      let i4;
      const a3 = t5.length, s3 = [];
      for (i4 = 0; i4 < a3; i4++) e4(t5[i4]) && s3.push(t5[i4]);
      return s3;
    }(this.node.attributes, (t5) => 0 === t5.nodeName.indexOf("data-")), (t5) => t5.nodeName.slice(5)));
    if (t4 instanceof Array) {
      const e4 = {};
      for (const i4 of t4) e4[i4] = this.data(i4);
      return e4;
    }
    if ("object" == typeof t4) for (e3 in t4) this.data(e3, t4[e3]);
    else if (arguments.length < 2) try {
      return JSON.parse(this.attr("data-" + t4));
    } catch (e4) {
      return this.attr("data-" + t4);
    }
    else this.attr("data-" + t4, null === e3 ? null : true === i3 || "string" == typeof e3 || "number" == typeof e3 ? e3 : JSON.stringify(e3));
    return this;
  } }), A2("Dom", { remember: function(t4, e3) {
    if ("object" == typeof arguments[0]) for (const e4 in t4) this.remember(e4, t4[e4]);
    else {
      if (1 === arguments.length) return this.memory()[t4];
      this.memory()[t4] = e3;
    }
    return this;
  }, forget: function() {
    if (0 === arguments.length) this._memory = {};
    else for (let t4 = arguments.length - 1; t4 >= 0; t4--) delete this.memory()[arguments[t4]];
    return this;
  }, memory: function() {
    return this._memory = this._memory || {};
  } });
  var xt2 = class _xt {
    constructor(...t4) {
      this.init(...t4);
    }
    static isColor(t4) {
      return t4 && (t4 instanceof _xt || this.isRgb(t4) || this.test(t4));
    }
    static isRgb(t4) {
      return t4 && "number" == typeof t4.r && "number" == typeof t4.g && "number" == typeof t4.b;
    }
    static random(t4 = "vibrant", e3) {
      const { random: i3, round: a3, sin: s3, PI: r3 } = Math;
      if ("vibrant" === t4) {
        const t5 = 24 * i3() + 57, e4 = 38 * i3() + 45, a4 = 360 * i3();
        return new _xt(t5, e4, a4, "lch");
      }
      if ("sine" === t4) {
        const t5 = a3(80 * s3(2 * r3 * (e3 = null == e3 ? i3() : e3) / 0.5 + 0.01) + 150), n3 = a3(50 * s3(2 * r3 * e3 / 0.5 + 4.6) + 200), o3 = a3(100 * s3(2 * r3 * e3 / 0.5 + 2.3) + 150);
        return new _xt(t5, n3, o3);
      }
      if ("pastel" === t4) {
        const t5 = 8 * i3() + 86, e4 = 17 * i3() + 9, a4 = 360 * i3();
        return new _xt(t5, e4, a4, "lch");
      }
      if ("dark" === t4) {
        const t5 = 10 + 10 * i3(), e4 = 50 * i3() + 86, a4 = 360 * i3();
        return new _xt(t5, e4, a4, "lch");
      }
      if ("rgb" === t4) {
        const t5 = 255 * i3(), e4 = 255 * i3(), a4 = 255 * i3();
        return new _xt(t5, e4, a4);
      }
      if ("lab" === t4) {
        const t5 = 100 * i3(), e4 = 256 * i3() - 128, a4 = 256 * i3() - 128;
        return new _xt(t5, e4, a4, "lab");
      }
      if ("grey" === t4) {
        const t5 = 255 * i3();
        return new _xt(t5, t5, t5);
      }
      throw new Error("Unsupported random color mode");
    }
    static test(t4) {
      return "string" == typeof t4 && (nt2.test(t4) || ot2.test(t4));
    }
    cmyk() {
      const { _a: t4, _b: e3, _c: i3 } = this.rgb(), [a3, s3, r3] = [t4, e3, i3].map((t5) => t5 / 255), n3 = Math.min(1 - a3, 1 - s3, 1 - r3);
      if (1 === n3) return new _xt(0, 0, 0, 1, "cmyk");
      return new _xt((1 - a3 - n3) / (1 - n3), (1 - s3 - n3) / (1 - n3), (1 - r3 - n3) / (1 - n3), n3, "cmyk");
    }
    hsl() {
      const { _a: t4, _b: e3, _c: i3 } = this.rgb(), [a3, s3, r3] = [t4, e3, i3].map((t5) => t5 / 255), n3 = Math.max(a3, s3, r3), o3 = Math.min(a3, s3, r3), l3 = (n3 + o3) / 2, h3 = n3 === o3, c3 = n3 - o3;
      return new _xt(360 * (h3 ? 0 : n3 === a3 ? ((s3 - r3) / c3 + (s3 < r3 ? 6 : 0)) / 6 : n3 === s3 ? ((r3 - a3) / c3 + 2) / 6 : n3 === r3 ? ((a3 - s3) / c3 + 4) / 6 : 0), 100 * (h3 ? 0 : l3 > 0.5 ? c3 / (2 - n3 - o3) : c3 / (n3 + o3)), 100 * l3, "hsl");
    }
    init(t4 = 0, e3 = 0, i3 = 0, a3 = 0, s3 = "rgb") {
      if (t4 = t4 || 0, this.space) for (const t5 in this.space) delete this[this.space[t5]];
      if ("number" == typeof t4) s3 = "string" == typeof a3 ? a3 : s3, a3 = "string" == typeof a3 ? 0 : a3, Object.assign(this, { _a: t4, _b: e3, _c: i3, _d: a3, space: s3 });
      else if (t4 instanceof Array) this.space = e3 || ("string" == typeof t4[3] ? t4[3] : t4[4]) || "rgb", Object.assign(this, { _a: t4[0], _b: t4[1], _c: t4[2], _d: t4[3] || 0 });
      else if (t4 instanceof Object) {
        const i4 = function(t5, e4) {
          const i5 = pt2(t5, "rgb") ? { _a: t5.r, _b: t5.g, _c: t5.b, _d: 0, space: "rgb" } : pt2(t5, "xyz") ? { _a: t5.x, _b: t5.y, _c: t5.z, _d: 0, space: "xyz" } : pt2(t5, "hsl") ? { _a: t5.h, _b: t5.s, _c: t5.l, _d: 0, space: "hsl" } : pt2(t5, "lab") ? { _a: t5.l, _b: t5.a, _c: t5.b, _d: 0, space: "lab" } : pt2(t5, "lch") ? { _a: t5.l, _b: t5.c, _c: t5.h, _d: 0, space: "lch" } : pt2(t5, "cmyk") ? { _a: t5.c, _b: t5.m, _c: t5.y, _d: t5.k, space: "cmyk" } : { _a: 0, _b: 0, _c: 0, space: "rgb" };
          return i5.space = e4 || i5.space, i5;
        }(t4, e3);
        Object.assign(this, i4);
      } else if ("string" == typeof t4) if (ot2.test(t4)) {
        const e4 = t4.replace(rt2, ""), [i4, a4, s4] = it2.exec(e4).slice(1, 4).map((t5) => parseInt(t5));
        Object.assign(this, { _a: i4, _b: a4, _c: s4, _d: 0, space: "rgb" });
      } else {
        if (!nt2.test(t4)) throw Error("Unsupported string format, can't construct Color");
        {
          const e4 = (t5) => parseInt(t5, 16), [, i4, a4, s4] = et2.exec(function(t5) {
            return 4 === t5.length ? ["#", t5.substring(1, 2), t5.substring(1, 2), t5.substring(2, 3), t5.substring(2, 3), t5.substring(3, 4), t5.substring(3, 4)].join("") : t5;
          }(t4)).map(e4);
          Object.assign(this, { _a: i4, _b: a4, _c: s4, _d: 0, space: "rgb" });
        }
      }
      const { _a: r3, _b: n3, _c: o3, _d: l3 } = this, h3 = "rgb" === this.space ? { r: r3, g: n3, b: o3 } : "xyz" === this.space ? { x: r3, y: n3, z: o3 } : "hsl" === this.space ? { h: r3, s: n3, l: o3 } : "lab" === this.space ? { l: r3, a: n3, b: o3 } : "lch" === this.space ? { l: r3, c: n3, h: o3 } : "cmyk" === this.space ? { c: r3, m: n3, y: o3, k: l3 } : {};
      Object.assign(this, h3);
    }
    lab() {
      const { x: t4, y: e3, z: i3 } = this.xyz();
      return new _xt(116 * e3 - 16, 500 * (t4 - e3), 200 * (e3 - i3), "lab");
    }
    lch() {
      const { l: t4, a: e3, b: i3 } = this.lab(), a3 = Math.sqrt(e3 ** 2 + i3 ** 2);
      let s3 = 180 * Math.atan2(i3, e3) / Math.PI;
      s3 < 0 && (s3 *= -1, s3 = 360 - s3);
      return new _xt(t4, a3, s3, "lch");
    }
    rgb() {
      if ("rgb" === this.space) return this;
      if ("lab" === (t4 = this.space) || "xyz" === t4 || "lch" === t4) {
        let { x: t5, y: e3, z: i3 } = this;
        if ("lab" === this.space || "lch" === this.space) {
          let { l: a4, a: s4, b: r4 } = this;
          if ("lch" === this.space) {
            const { c: t6, h: e4 } = this, i4 = Math.PI / 180;
            s4 = t6 * Math.cos(i4 * e4), r4 = t6 * Math.sin(i4 * e4);
          }
          const n4 = (a4 + 16) / 116, o4 = s4 / 500 + n4, l4 = n4 - r4 / 200, h4 = 16 / 116, c4 = 8856e-6, d3 = 7.787;
          t5 = 0.95047 * (o4 ** 3 > c4 ? o4 ** 3 : (o4 - h4) / d3), e3 = 1 * (n4 ** 3 > c4 ? n4 ** 3 : (n4 - h4) / d3), i3 = 1.08883 * (l4 ** 3 > c4 ? l4 ** 3 : (l4 - h4) / d3);
        }
        const a3 = 3.2406 * t5 + -1.5372 * e3 + -0.4986 * i3, s3 = -0.9689 * t5 + 1.8758 * e3 + 0.0415 * i3, r3 = 0.0557 * t5 + -0.204 * e3 + 1.057 * i3, n3 = Math.pow, o3 = 31308e-7, l3 = a3 > o3 ? 1.055 * n3(a3, 1 / 2.4) - 0.055 : 12.92 * a3, h3 = s3 > o3 ? 1.055 * n3(s3, 1 / 2.4) - 0.055 : 12.92 * s3, c3 = r3 > o3 ? 1.055 * n3(r3, 1 / 2.4) - 0.055 : 12.92 * r3;
        return new _xt(255 * l3, 255 * h3, 255 * c3);
      }
      if ("hsl" === this.space) {
        let { h: t5, s: e3, l: i3 } = this;
        if (t5 /= 360, e3 /= 100, i3 /= 100, 0 === e3) {
          i3 *= 255;
          return new _xt(i3, i3, i3);
        }
        const a3 = i3 < 0.5 ? i3 * (1 + e3) : i3 + e3 - i3 * e3, s3 = 2 * i3 - a3, r3 = 255 * ft2(s3, a3, t5 + 1 / 3), n3 = 255 * ft2(s3, a3, t5), o3 = 255 * ft2(s3, a3, t5 - 1 / 3);
        return new _xt(r3, n3, o3);
      }
      if ("cmyk" === this.space) {
        const { c: t5, m: e3, y: i3, k: a3 } = this, s3 = 255 * (1 - Math.min(1, t5 * (1 - a3) + a3)), r3 = 255 * (1 - Math.min(1, e3 * (1 - a3) + a3)), n3 = 255 * (1 - Math.min(1, i3 * (1 - a3) + a3));
        return new _xt(s3, r3, n3);
      }
      return this;
      var t4;
    }
    toArray() {
      const { _a: t4, _b: e3, _c: i3, _d: a3, space: s3 } = this;
      return [t4, e3, i3, a3, s3];
    }
    toHex() {
      const [t4, e3, i3] = this._clamped().map(gt2);
      return `#${t4}${e3}${i3}`;
    }
    toRgb() {
      const [t4, e3, i3] = this._clamped();
      return `rgb(${t4},${e3},${i3})`;
    }
    toString() {
      return this.toHex();
    }
    xyz() {
      const { _a: t4, _b: e3, _c: i3 } = this.rgb(), [a3, s3, r3] = [t4, e3, i3].map((t5) => t5 / 255), n3 = a3 > 0.04045 ? Math.pow((a3 + 0.055) / 1.055, 2.4) : a3 / 12.92, o3 = s3 > 0.04045 ? Math.pow((s3 + 0.055) / 1.055, 2.4) : s3 / 12.92, l3 = r3 > 0.04045 ? Math.pow((r3 + 0.055) / 1.055, 2.4) : r3 / 12.92, h3 = (0.4124 * n3 + 0.3576 * o3 + 0.1805 * l3) / 0.95047, c3 = (0.2126 * n3 + 0.7152 * o3 + 0.0722 * l3) / 1, d3 = (0.0193 * n3 + 0.1192 * o3 + 0.9505 * l3) / 1.08883, u3 = h3 > 8856e-6 ? Math.pow(h3, 1 / 3) : 7.787 * h3 + 16 / 116, g3 = c3 > 8856e-6 ? Math.pow(c3, 1 / 3) : 7.787 * c3 + 16 / 116, p3 = d3 > 8856e-6 ? Math.pow(d3, 1 / 3) : 7.787 * d3 + 16 / 116;
      return new _xt(u3, g3, p3, "xyz");
    }
    _clamped() {
      const { _a: t4, _b: e3, _c: i3 } = this.rgb(), { max: a3, min: s3, round: r3 } = Math;
      return [t4, e3, i3].map((t5) => a3(0, s3(r3(t5), 255)));
    }
  };
  var bt2 = class _bt {
    constructor(...t4) {
      this.init(...t4);
    }
    clone() {
      return new _bt(this);
    }
    init(t4, e3) {
      const i3 = 0, a3 = 0, s3 = Array.isArray(t4) ? { x: t4[0], y: t4[1] } : "object" == typeof t4 ? { x: t4.x, y: t4.y } : { x: t4, y: e3 };
      return this.x = null == s3.x ? i3 : s3.x, this.y = null == s3.y ? a3 : s3.y, this;
    }
    toArray() {
      return [this.x, this.y];
    }
    transform(t4) {
      return this.clone().transformO(t4);
    }
    transformO(t4) {
      vt2.isMatrixLike(t4) || (t4 = new vt2(t4));
      const { x: e3, y: i3 } = this;
      return this.x = t4.a * e3 + t4.c * i3 + t4.e, this.y = t4.b * e3 + t4.d * i3 + t4.f, this;
    }
  };
  function mt2(t4, e3, i3) {
    return Math.abs(e3 - t4) < (i3 || 1e-6);
  }
  var vt2 = class _vt {
    constructor(...t4) {
      this.init(...t4);
    }
    static formatTransforms(t4) {
      const e3 = "both" === t4.flip || true === t4.flip, i3 = t4.flip && (e3 || "x" === t4.flip) ? -1 : 1, a3 = t4.flip && (e3 || "y" === t4.flip) ? -1 : 1, s3 = t4.skew && t4.skew.length ? t4.skew[0] : isFinite(t4.skew) ? t4.skew : isFinite(t4.skewX) ? t4.skewX : 0, r3 = t4.skew && t4.skew.length ? t4.skew[1] : isFinite(t4.skew) ? t4.skew : isFinite(t4.skewY) ? t4.skewY : 0, n3 = t4.scale && t4.scale.length ? t4.scale[0] * i3 : isFinite(t4.scale) ? t4.scale * i3 : isFinite(t4.scaleX) ? t4.scaleX * i3 : i3, o3 = t4.scale && t4.scale.length ? t4.scale[1] * a3 : isFinite(t4.scale) ? t4.scale * a3 : isFinite(t4.scaleY) ? t4.scaleY * a3 : a3, l3 = t4.shear || 0, h3 = t4.rotate || t4.theta || 0, c3 = new bt2(t4.origin || t4.around || t4.ox || t4.originX, t4.oy || t4.originY), d3 = c3.x, u3 = c3.y, g3 = new bt2(t4.position || t4.px || t4.positionX || NaN, t4.py || t4.positionY || NaN), p3 = g3.x, f3 = g3.y, x3 = new bt2(t4.translate || t4.tx || t4.translateX, t4.ty || t4.translateY), b3 = x3.x, m3 = x3.y, v3 = new bt2(t4.relative || t4.rx || t4.relativeX, t4.ry || t4.relativeY);
      return { scaleX: n3, scaleY: o3, skewX: s3, skewY: r3, shear: l3, theta: h3, rx: v3.x, ry: v3.y, tx: b3, ty: m3, ox: d3, oy: u3, px: p3, py: f3 };
    }
    static fromArray(t4) {
      return { a: t4[0], b: t4[1], c: t4[2], d: t4[3], e: t4[4], f: t4[5] };
    }
    static isMatrixLike(t4) {
      return null != t4.a || null != t4.b || null != t4.c || null != t4.d || null != t4.e || null != t4.f;
    }
    static matrixMultiply(t4, e3, i3) {
      const a3 = t4.a * e3.a + t4.c * e3.b, s3 = t4.b * e3.a + t4.d * e3.b, r3 = t4.a * e3.c + t4.c * e3.d, n3 = t4.b * e3.c + t4.d * e3.d, o3 = t4.e + t4.a * e3.e + t4.c * e3.f, l3 = t4.f + t4.b * e3.e + t4.d * e3.f;
      return i3.a = a3, i3.b = s3, i3.c = r3, i3.d = n3, i3.e = o3, i3.f = l3, i3;
    }
    around(t4, e3, i3) {
      return this.clone().aroundO(t4, e3, i3);
    }
    aroundO(t4, e3, i3) {
      const a3 = t4 || 0, s3 = e3 || 0;
      return this.translateO(-a3, -s3).lmultiplyO(i3).translateO(a3, s3);
    }
    clone() {
      return new _vt(this);
    }
    decompose(t4 = 0, e3 = 0) {
      const i3 = this.a, a3 = this.b, s3 = this.c, r3 = this.d, n3 = this.e, o3 = this.f, l3 = i3 * r3 - a3 * s3, h3 = l3 > 0 ? 1 : -1, c3 = h3 * Math.sqrt(i3 * i3 + a3 * a3), d3 = Math.atan2(h3 * a3, h3 * i3), u3 = 180 / Math.PI * d3, g3 = Math.cos(d3), p3 = Math.sin(d3), f3 = (i3 * s3 + a3 * r3) / l3, x3 = s3 * c3 / (f3 * i3 - a3) || r3 * c3 / (f3 * a3 + i3);
      return { scaleX: c3, scaleY: x3, shear: f3, rotate: u3, translateX: n3 - t4 + t4 * g3 * c3 + e3 * (f3 * g3 * c3 - p3 * x3), translateY: o3 - e3 + t4 * p3 * c3 + e3 * (f3 * p3 * c3 + g3 * x3), originX: t4, originY: e3, a: this.a, b: this.b, c: this.c, d: this.d, e: this.e, f: this.f };
    }
    equals(t4) {
      if (t4 === this) return true;
      const e3 = new _vt(t4);
      return mt2(this.a, e3.a) && mt2(this.b, e3.b) && mt2(this.c, e3.c) && mt2(this.d, e3.d) && mt2(this.e, e3.e) && mt2(this.f, e3.f);
    }
    flip(t4, e3) {
      return this.clone().flipO(t4, e3);
    }
    flipO(t4, e3) {
      return "x" === t4 ? this.scaleO(-1, 1, e3, 0) : "y" === t4 ? this.scaleO(1, -1, 0, e3) : this.scaleO(-1, -1, t4, e3 || t4);
    }
    init(t4) {
      const e3 = _vt.fromArray([1, 0, 0, 1, 0, 0]);
      return t4 = t4 instanceof Gt2 ? t4.matrixify() : "string" == typeof t4 ? _vt.fromArray(t4.split(dt2).map(parseFloat)) : Array.isArray(t4) ? _vt.fromArray(t4) : "object" == typeof t4 && _vt.isMatrixLike(t4) ? t4 : "object" == typeof t4 ? new _vt().transform(t4) : 6 === arguments.length ? _vt.fromArray([].slice.call(arguments)) : e3, this.a = null != t4.a ? t4.a : e3.a, this.b = null != t4.b ? t4.b : e3.b, this.c = null != t4.c ? t4.c : e3.c, this.d = null != t4.d ? t4.d : e3.d, this.e = null != t4.e ? t4.e : e3.e, this.f = null != t4.f ? t4.f : e3.f, this;
    }
    inverse() {
      return this.clone().inverseO();
    }
    inverseO() {
      const t4 = this.a, e3 = this.b, i3 = this.c, a3 = this.d, s3 = this.e, r3 = this.f, n3 = t4 * a3 - e3 * i3;
      if (!n3) throw new Error("Cannot invert " + this);
      const o3 = a3 / n3, l3 = -e3 / n3, h3 = -i3 / n3, c3 = t4 / n3, d3 = -(o3 * s3 + h3 * r3), u3 = -(l3 * s3 + c3 * r3);
      return this.a = o3, this.b = l3, this.c = h3, this.d = c3, this.e = d3, this.f = u3, this;
    }
    lmultiply(t4) {
      return this.clone().lmultiplyO(t4);
    }
    lmultiplyO(t4) {
      const e3 = t4 instanceof _vt ? t4 : new _vt(t4);
      return _vt.matrixMultiply(e3, this, this);
    }
    multiply(t4) {
      return this.clone().multiplyO(t4);
    }
    multiplyO(t4) {
      const e3 = t4 instanceof _vt ? t4 : new _vt(t4);
      return _vt.matrixMultiply(this, e3, this);
    }
    rotate(t4, e3, i3) {
      return this.clone().rotateO(t4, e3, i3);
    }
    rotateO(t4, e3 = 0, i3 = 0) {
      t4 = M2(t4);
      const a3 = Math.cos(t4), s3 = Math.sin(t4), { a: r3, b: n3, c: o3, d: l3, e: h3, f: c3 } = this;
      return this.a = r3 * a3 - n3 * s3, this.b = n3 * a3 + r3 * s3, this.c = o3 * a3 - l3 * s3, this.d = l3 * a3 + o3 * s3, this.e = h3 * a3 - c3 * s3 + i3 * s3 - e3 * a3 + e3, this.f = c3 * a3 + h3 * s3 - e3 * s3 - i3 * a3 + i3, this;
    }
    scale() {
      return this.clone().scaleO(...arguments);
    }
    scaleO(t4, e3 = t4, i3 = 0, a3 = 0) {
      3 === arguments.length && (a3 = i3, i3 = e3, e3 = t4);
      const { a: s3, b: r3, c: n3, d: o3, e: l3, f: h3 } = this;
      return this.a = s3 * t4, this.b = r3 * e3, this.c = n3 * t4, this.d = o3 * e3, this.e = l3 * t4 - i3 * t4 + i3, this.f = h3 * e3 - a3 * e3 + a3, this;
    }
    shear(t4, e3, i3) {
      return this.clone().shearO(t4, e3, i3);
    }
    shearO(t4, e3 = 0, i3 = 0) {
      const { a: a3, b: s3, c: r3, d: n3, e: o3, f: l3 } = this;
      return this.a = a3 + s3 * t4, this.c = r3 + n3 * t4, this.e = o3 + l3 * t4 - i3 * t4, this;
    }
    skew() {
      return this.clone().skewO(...arguments);
    }
    skewO(t4, e3 = t4, i3 = 0, a3 = 0) {
      3 === arguments.length && (a3 = i3, i3 = e3, e3 = t4), t4 = M2(t4), e3 = M2(e3);
      const s3 = Math.tan(t4), r3 = Math.tan(e3), { a: n3, b: o3, c: l3, d: h3, e: c3, f: d3 } = this;
      return this.a = n3 + o3 * s3, this.b = o3 + n3 * r3, this.c = l3 + h3 * s3, this.d = h3 + l3 * r3, this.e = c3 + d3 * s3 - a3 * s3, this.f = d3 + c3 * r3 - i3 * r3, this;
    }
    skewX(t4, e3, i3) {
      return this.skew(t4, 0, e3, i3);
    }
    skewY(t4, e3, i3) {
      return this.skew(0, t4, e3, i3);
    }
    toArray() {
      return [this.a, this.b, this.c, this.d, this.e, this.f];
    }
    toString() {
      return "matrix(" + this.a + "," + this.b + "," + this.c + "," + this.d + "," + this.e + "," + this.f + ")";
    }
    transform(t4) {
      if (_vt.isMatrixLike(t4)) {
        return new _vt(t4).multiplyO(this);
      }
      const e3 = _vt.formatTransforms(t4), { x: i3, y: a3 } = new bt2(e3.ox, e3.oy).transform(this), s3 = new _vt().translateO(e3.rx, e3.ry).lmultiplyO(this).translateO(-i3, -a3).scaleO(e3.scaleX, e3.scaleY).skewO(e3.skewX, e3.skewY).shearO(e3.shear).rotateO(e3.theta).translateO(i3, a3);
      if (isFinite(e3.px) || isFinite(e3.py)) {
        const t5 = new bt2(i3, a3).transform(s3), r3 = isFinite(e3.px) ? e3.px - t5.x : 0, n3 = isFinite(e3.py) ? e3.py - t5.y : 0;
        s3.translateO(r3, n3);
      }
      return s3.translateO(e3.tx, e3.ty), s3;
    }
    translate(t4, e3) {
      return this.clone().translateO(t4, e3);
    }
    translateO(t4, e3) {
      return this.e += t4 || 0, this.f += e3 || 0, this;
    }
    valueOf() {
      return { a: this.a, b: this.b, c: this.c, d: this.d, e: this.e, f: this.f };
    }
  };
  function yt2() {
    if (!yt2.nodes) {
      const t4 = B2().size(2, 0);
      t4.node.style.cssText = ["opacity: 0", "position: absolute", "left: -100%", "top: -100%", "overflow: hidden"].join(";"), t4.attr("focusable", "false"), t4.attr("aria-hidden", "true");
      const e3 = t4.path().node;
      yt2.nodes = { svg: t4, path: e3 };
    }
    if (!yt2.nodes.svg.node.parentNode) {
      const t4 = O2.document.body || O2.document.documentElement;
      yt2.nodes.svg.addTo(t4);
    }
    return yt2.nodes;
  }
  function wt2(t4) {
    return !(t4.width || t4.height || t4.x || t4.y);
  }
  q2(vt2, "Matrix");
  var kt2 = class _kt {
    constructor(...t4) {
      this.init(...t4);
    }
    addOffset() {
      return this.x += O2.window.pageXOffset, this.y += O2.window.pageYOffset, new _kt(this);
    }
    init(t4) {
      return t4 = "string" == typeof t4 ? t4.split(dt2).map(parseFloat) : Array.isArray(t4) ? t4 : "object" == typeof t4 ? [null != t4.left ? t4.left : t4.x, null != t4.top ? t4.top : t4.y, t4.width, t4.height] : 4 === arguments.length ? [].slice.call(arguments) : [0, 0, 0, 0], this.x = t4[0] || 0, this.y = t4[1] || 0, this.width = this.w = t4[2] || 0, this.height = this.h = t4[3] || 0, this.x2 = this.x + this.w, this.y2 = this.y + this.h, this.cx = this.x + this.w / 2, this.cy = this.y + this.h / 2, this;
    }
    isNulled() {
      return wt2(this);
    }
    merge(t4) {
      const e3 = Math.min(this.x, t4.x), i3 = Math.min(this.y, t4.y), a3 = Math.max(this.x + this.width, t4.x + t4.width) - e3, s3 = Math.max(this.y + this.height, t4.y + t4.height) - i3;
      return new _kt(e3, i3, a3, s3);
    }
    toArray() {
      return [this.x, this.y, this.width, this.height];
    }
    toString() {
      return this.x + " " + this.y + " " + this.width + " " + this.height;
    }
    transform(t4) {
      t4 instanceof vt2 || (t4 = new vt2(t4));
      let e3 = 1 / 0, i3 = -1 / 0, a3 = 1 / 0, s3 = -1 / 0;
      return [new bt2(this.x, this.y), new bt2(this.x2, this.y), new bt2(this.x, this.y2), new bt2(this.x2, this.y2)].forEach(function(r3) {
        r3 = r3.transform(t4), e3 = Math.min(e3, r3.x), i3 = Math.max(i3, r3.x), a3 = Math.min(a3, r3.y), s3 = Math.max(s3, r3.y);
      }), new _kt(e3, a3, i3 - e3, s3 - a3);
    }
  };
  function At2(t4, e3, i3) {
    let a3;
    try {
      if (a3 = e3(t4.node), wt2(a3) && ((s3 = t4.node) !== O2.document && !(O2.document.documentElement.contains || function(t5) {
        for (; t5.parentNode; ) t5 = t5.parentNode;
        return t5 === O2.document;
      }).call(O2.document.documentElement, s3))) throw new Error("Element not in the dom");
    } catch (e4) {
      a3 = i3(t4);
    }
    var s3;
    return a3;
  }
  A2({ viewbox: { viewbox(t4, e3, i3, a3) {
    return null == t4 ? new kt2(this.attr("viewBox")) : this.attr("viewBox", new kt2(t4, e3, i3, a3));
  }, zoom(t4, e3) {
    let { width: i3, height: a3 } = this.attr(["width", "height"]);
    if ((i3 || a3) && "string" != typeof i3 && "string" != typeof a3 || (i3 = this.node.clientWidth, a3 = this.node.clientHeight), !i3 || !a3) throw new Error("Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element");
    const s3 = this.viewbox(), r3 = i3 / s3.width, n3 = a3 / s3.height, o3 = Math.min(r3, n3);
    if (null == t4) return o3;
    let l3 = o3 / t4;
    l3 === 1 / 0 && (l3 = Number.MAX_SAFE_INTEGER / 100), e3 = e3 || new bt2(i3 / 2 / r3 + s3.x, a3 / 2 / n3 + s3.y);
    const h3 = new kt2(s3).transform(new vt2({ scale: l3, origin: e3 }));
    return this.viewbox(h3);
  } } }), q2(kt2, "Box");
  var Ct2 = class extends Array {
    constructor(t4 = [], ...e3) {
      if (super(t4, ...e3), "number" == typeof t4) return this;
      this.length = 0, this.push(...t4);
    }
  };
  Q2([Ct2], { each(t4, ...e3) {
    return "function" == typeof t4 ? this.map((e4, i3, a3) => t4.call(e4, e4, i3, a3)) : this.map((i3) => i3[t4](...e3));
  }, toArray() {
    return Array.prototype.concat.apply([], this);
  } });
  var St2 = ["toArray", "constructor", "each"];
  function Lt2(t4, e3) {
    return new Ct2(L2((e3 || O2.document).querySelectorAll(t4), function(t5) {
      return V2(t5);
    }));
  }
  Ct2.extend = function(t4) {
    t4 = t4.reduce((t5, e3) => (St2.includes(e3) || "_" === e3[0] || (e3 in Array.prototype && (t5["$" + e3] = Array.prototype[e3]), t5[e3] = function(...t6) {
      return this.each(e3, ...t6);
    }), t5), {}), Q2([Ct2], t4);
  };
  var Mt2 = 0;
  var Pt2 = {};
  function It2(t4) {
    let e3 = t4.getEventHolder();
    return e3 === O2.window && (e3 = Pt2), e3.events || (e3.events = {}), e3.events;
  }
  function Tt2(t4) {
    return t4.getEventTarget();
  }
  function zt2(t4, e3, i3, a3, s3) {
    const r3 = i3.bind(a3 || t4), n3 = B2(t4), o3 = It2(n3), l3 = Tt2(n3);
    e3 = Array.isArray(e3) ? e3 : e3.split(dt2), i3._svgjsListenerId || (i3._svgjsListenerId = ++Mt2), e3.forEach(function(t5) {
      const e4 = t5.split(".")[0], a4 = t5.split(".")[1] || "*";
      o3[e4] = o3[e4] || {}, o3[e4][a4] = o3[e4][a4] || {}, o3[e4][a4][i3._svgjsListenerId] = r3, l3.addEventListener(e4, r3, s3 || false);
    });
  }
  function Xt2(t4, e3, i3, a3) {
    const s3 = B2(t4), r3 = It2(s3), n3 = Tt2(s3);
    ("function" != typeof i3 || (i3 = i3._svgjsListenerId)) && (e3 = Array.isArray(e3) ? e3 : (e3 || "").split(dt2)).forEach(function(t5) {
      const e4 = t5 && t5.split(".")[0], o3 = t5 && t5.split(".")[1];
      let l3, h3;
      if (i3) r3[e4] && r3[e4][o3 || "*"] && (n3.removeEventListener(e4, r3[e4][o3 || "*"][i3], a3 || false), delete r3[e4][o3 || "*"][i3]);
      else if (e4 && o3) {
        if (r3[e4] && r3[e4][o3]) {
          for (h3 in r3[e4][o3]) Xt2(n3, [e4, o3].join("."), h3);
          delete r3[e4][o3];
        }
      } else if (o3) for (t5 in r3) for (l3 in r3[t5]) o3 === l3 && Xt2(n3, [t5, o3].join("."));
      else if (e4) {
        if (r3[e4]) {
          for (l3 in r3[e4]) Xt2(n3, [e4, l3].join("."));
          delete r3[e4];
        }
      } else {
        for (t5 in r3) Xt2(n3, t5);
        !function(t6) {
          let e5 = t6.getEventHolder();
          e5 === O2.window && (e5 = Pt2), e5.events && (e5.events = {});
        }(s3);
      }
    });
  }
  var Rt2 = class extends D2 {
    addEventListener() {
    }
    dispatch(t4, e3, i3) {
      return function(t5, e4, i4, a3) {
        const s3 = Tt2(t5);
        return e4 instanceof O2.window.Event || (e4 = new O2.window.CustomEvent(e4, { detail: i4, cancelable: true, ...a3 })), s3.dispatchEvent(e4), e4;
      }(this, t4, e3, i3);
    }
    dispatchEvent(t4) {
      const e3 = this.getEventHolder().events;
      if (!e3) return true;
      const i3 = e3[t4.type];
      for (const e4 in i3) for (const a3 in i3[e4]) i3[e4][a3](t4);
      return !t4.defaultPrevented;
    }
    fire(t4, e3, i3) {
      return this.dispatch(t4, e3, i3), this;
    }
    getEventHolder() {
      return this;
    }
    getEventTarget() {
      return this;
    }
    off(t4, e3, i3) {
      return Xt2(this, t4, e3, i3), this;
    }
    on(t4, e3, i3, a3) {
      return zt2(this, t4, e3, i3, a3), this;
    }
    removeEventListener() {
    }
  };
  function Et2() {
  }
  q2(Rt2, "EventTarget");
  var Yt2 = 400;
  var Ht2 = ">";
  var Ot2 = 0;
  var Ft2 = { "fill-opacity": 1, "stroke-opacity": 1, "stroke-width": 0, "stroke-linejoin": "miter", "stroke-linecap": "butt", fill: "#000000", stroke: "#000000", opacity: 1, x: 0, y: 0, cx: 0, cy: 0, width: 0, height: 0, r: 0, rx: 0, ry: 0, offset: 0, "stop-opacity": 1, "stop-color": "#000000", "text-anchor": "start" };
  var Dt2 = class extends Array {
    constructor(...t4) {
      super(...t4), this.init(...t4);
    }
    clone() {
      return new this.constructor(this);
    }
    init(t4) {
      return "number" == typeof t4 || (this.length = 0, this.push(...this.parse(t4))), this;
    }
    parse(t4 = []) {
      return t4 instanceof Array ? t4 : t4.trim().split(dt2).map(parseFloat);
    }
    toArray() {
      return Array.prototype.concat.apply([], this);
    }
    toSet() {
      return new Set(this);
    }
    toString() {
      return this.join(" ");
    }
    valueOf() {
      const t4 = [];
      return t4.push(...this), t4;
    }
  };
  var _t2 = class __t {
    constructor(...t4) {
      this.init(...t4);
    }
    convert(t4) {
      return new __t(this.value, t4);
    }
    divide(t4) {
      return t4 = new __t(t4), new __t(this / t4, this.unit || t4.unit);
    }
    init(t4, e3) {
      return e3 = Array.isArray(t4) ? t4[1] : e3, t4 = Array.isArray(t4) ? t4[0] : t4, this.value = 0, this.unit = e3 || "", "number" == typeof t4 ? this.value = isNaN(t4) ? 0 : isFinite(t4) ? t4 : t4 < 0 ? -34e37 : 34e37 : "string" == typeof t4 ? (e3 = t4.match(tt2)) && (this.value = parseFloat(e3[1]), "%" === e3[5] ? this.value /= 100 : "s" === e3[5] && (this.value *= 1e3), this.unit = e3[5]) : t4 instanceof __t && (this.value = t4.valueOf(), this.unit = t4.unit), this;
    }
    minus(t4) {
      return t4 = new __t(t4), new __t(this - t4, this.unit || t4.unit);
    }
    plus(t4) {
      return t4 = new __t(t4), new __t(this + t4, this.unit || t4.unit);
    }
    times(t4) {
      return t4 = new __t(t4), new __t(this * t4, this.unit || t4.unit);
    }
    toArray() {
      return [this.value, this.unit];
    }
    toJSON() {
      return this.toString();
    }
    toString() {
      return ("%" === this.unit ? ~~(1e8 * this.value) / 1e6 : "s" === this.unit ? this.value / 1e3 : this.value) + this.unit;
    }
    valueOf() {
      return this.value;
    }
  };
  var Nt2 = /* @__PURE__ */ new Set(["fill", "stroke", "color", "bgcolor", "stop-color", "flood-color", "lighting-color"]);
  var Wt2 = [];
  var Bt2 = class _Bt extends Rt2 {
    constructor(t4, e3) {
      super(), this.node = t4, this.type = t4.nodeName, e3 && t4 !== e3 && this.attr(e3);
    }
    add(t4, e3) {
      return (t4 = B2(t4)).removeNamespace && this.node instanceof O2.window.SVGElement && t4.removeNamespace(), null == e3 ? this.node.appendChild(t4.node) : t4.node !== this.node.childNodes[e3] && this.node.insertBefore(t4.node, this.node.childNodes[e3]), this;
    }
    addTo(t4, e3) {
      return B2(t4).put(this, e3);
    }
    children() {
      return new Ct2(L2(this.node.children, function(t4) {
        return V2(t4);
      }));
    }
    clear() {
      for (; this.node.hasChildNodes(); ) this.node.removeChild(this.node.lastChild);
      return this;
    }
    clone(t4 = true, e3 = true) {
      this.writeDataToDom();
      let i3 = this.node.cloneNode(t4);
      return e3 && (i3 = J2(i3)), new this.constructor(i3);
    }
    each(t4, e3) {
      const i3 = this.children();
      let a3, s3;
      for (a3 = 0, s3 = i3.length; a3 < s3; a3++) t4.apply(i3[a3], [a3, i3]), e3 && i3[a3].each(t4, e3);
      return this;
    }
    element(t4, e3) {
      return this.put(new _Bt(W2(t4), e3));
    }
    first() {
      return V2(this.node.firstChild);
    }
    get(t4) {
      return V2(this.node.childNodes[t4]);
    }
    getEventHolder() {
      return this.node;
    }
    getEventTarget() {
      return this.node;
    }
    has(t4) {
      return this.index(t4) >= 0;
    }
    html(t4, e3) {
      return this.xml(t4, e3, "http://www.w3.org/1999/xhtml");
    }
    id(t4) {
      return void 0 !== t4 || this.node.id || (this.node.id = $2(this.type)), this.attr("id", t4);
    }
    index(t4) {
      return [].slice.call(this.node.childNodes).indexOf(t4.node);
    }
    last() {
      return V2(this.node.lastChild);
    }
    matches(t4) {
      const e3 = this.node, i3 = e3.matches || e3.matchesSelector || e3.msMatchesSelector || e3.mozMatchesSelector || e3.webkitMatchesSelector || e3.oMatchesSelector || null;
      return i3 && i3.call(e3, t4);
    }
    parent(t4) {
      let e3 = this;
      if (!e3.node.parentNode) return null;
      if (e3 = V2(e3.node.parentNode), !t4) return e3;
      do {
        if ("string" == typeof t4 ? e3.matches(t4) : e3 instanceof t4) return e3;
      } while (e3 = V2(e3.node.parentNode));
      return e3;
    }
    put(t4, e3) {
      return t4 = B2(t4), this.add(t4, e3), t4;
    }
    putIn(t4, e3) {
      return B2(t4).add(this, e3);
    }
    remove() {
      return this.parent() && this.parent().removeElement(this), this;
    }
    removeElement(t4) {
      return this.node.removeChild(t4.node), this;
    }
    replace(t4) {
      return t4 = B2(t4), this.node.parentNode && this.node.parentNode.replaceChild(t4.node, this.node), t4;
    }
    round(t4 = 2, e3 = null) {
      const i3 = 10 ** t4, a3 = this.attr(e3);
      for (const t5 in a3) "number" == typeof a3[t5] && (a3[t5] = Math.round(a3[t5] * i3) / i3);
      return this.attr(a3), this;
    }
    svg(t4, e3) {
      return this.xml(t4, e3, E2);
    }
    toString() {
      return this.id();
    }
    words(t4) {
      return this.node.textContent = t4, this;
    }
    wrap(t4) {
      const e3 = this.parent();
      if (!e3) return this.addTo(t4);
      const i3 = e3.index(this);
      return e3.put(t4, i3).put(this);
    }
    writeDataToDom() {
      return this.each(function() {
        this.writeDataToDom();
      }), this;
    }
    xml(t4, e3, i3) {
      if ("boolean" == typeof t4 && (i3 = e3, e3 = t4, t4 = null), null == t4 || "function" == typeof t4) {
        e3 = null == e3 || e3, this.writeDataToDom();
        let i4 = this;
        if (null != t4) {
          if (i4 = V2(i4.node.cloneNode(true)), e3) {
            const e4 = t4(i4);
            if (i4 = e4 || i4, false === e4) return "";
          }
          i4.each(function() {
            const e4 = t4(this), i5 = e4 || this;
            false === e4 ? this.remove() : e4 && this !== i5 && this.replace(i5);
          }, true);
        }
        return e3 ? i4.node.outerHTML : i4.node.innerHTML;
      }
      e3 = null != e3 && e3;
      const a3 = W2("wrapper", i3), s3 = O2.document.createDocumentFragment();
      a3.innerHTML = t4;
      for (let t5 = a3.children.length; t5--; ) s3.appendChild(a3.firstElementChild);
      const r3 = this.parent();
      return e3 ? this.replace(s3) && r3 : this.add(s3);
    }
  };
  Q2(Bt2, { attr: function(t4, e3, i3) {
    if (null == t4) {
      t4 = {}, e3 = this.node.attributes;
      for (const i4 of e3) t4[i4.nodeName] = ht2.test(i4.nodeValue) ? parseFloat(i4.nodeValue) : i4.nodeValue;
      return t4;
    }
    if (t4 instanceof Array) return t4.reduce((t5, e4) => (t5[e4] = this.attr(e4), t5), {});
    if ("object" == typeof t4 && t4.constructor === Object) for (e3 in t4) this.attr(e3, t4[e3]);
    else if (null === e3) this.node.removeAttribute(t4);
    else {
      if (null == e3) return null == (e3 = this.node.getAttribute(t4)) ? Ft2[t4] : ht2.test(e3) ? parseFloat(e3) : e3;
      "number" == typeof (e3 = Wt2.reduce((e4, i4) => i4(t4, e4, this), e3)) ? e3 = new _t2(e3) : Nt2.has(t4) && xt2.isColor(e3) ? e3 = new xt2(e3) : e3.constructor === Array && (e3 = new Dt2(e3)), "leading" === t4 ? this.leading && this.leading(e3) : "string" == typeof i3 ? this.node.setAttributeNS(i3, t4, e3.toString()) : this.node.setAttribute(t4, e3.toString()), !this.rebuild || "font-size" !== t4 && "x" !== t4 || this.rebuild();
    }
    return this;
  }, find: function(t4) {
    return Lt2(t4, this.node);
  }, findOne: function(t4) {
    return V2(this.node.querySelector(t4));
  } }), q2(Bt2, "Dom");
  var Gt2 = class extends Bt2 {
    constructor(t4, e3) {
      super(t4, e3), this.dom = {}, this.node.instance = this, (t4.hasAttribute("data-svgjs") || t4.hasAttribute("svgjs:data")) && this.setData(JSON.parse(t4.getAttribute("data-svgjs")) ?? JSON.parse(t4.getAttribute("svgjs:data")) ?? {});
    }
    center(t4, e3) {
      return this.cx(t4).cy(e3);
    }
    cx(t4) {
      return null == t4 ? this.x() + this.width() / 2 : this.x(t4 - this.width() / 2);
    }
    cy(t4) {
      return null == t4 ? this.y() + this.height() / 2 : this.y(t4 - this.height() / 2);
    }
    defs() {
      const t4 = this.root();
      return t4 && t4.defs();
    }
    dmove(t4, e3) {
      return this.dx(t4).dy(e3);
    }
    dx(t4 = 0) {
      return this.x(new _t2(t4).plus(this.x()));
    }
    dy(t4 = 0) {
      return this.y(new _t2(t4).plus(this.y()));
    }
    getEventHolder() {
      return this;
    }
    height(t4) {
      return this.attr("height", t4);
    }
    move(t4, e3) {
      return this.x(t4).y(e3);
    }
    parents(t4 = this.root()) {
      const e3 = "string" == typeof t4;
      e3 || (t4 = B2(t4));
      const i3 = new Ct2();
      let a3 = this;
      for (; (a3 = a3.parent()) && a3.node !== O2.document && "#document-fragment" !== a3.nodeName && (i3.push(a3), e3 || a3.node !== t4.node) && (!e3 || !a3.matches(t4)); ) if (a3.node === this.root().node) return null;
      return i3;
    }
    reference(t4) {
      if (!(t4 = this.attr(t4))) return null;
      const e3 = (t4 + "").match(at2);
      return e3 ? B2(e3[1]) : null;
    }
    root() {
      const t4 = this.parent(function(t5) {
        return _2[t5];
      }(N2));
      return t4 && t4.root();
    }
    setData(t4) {
      return this.dom = t4, this;
    }
    size(t4, e3) {
      const i3 = I2(this, t4, e3);
      return this.width(new _t2(i3.width)).height(new _t2(i3.height));
    }
    width(t4) {
      return this.attr("width", t4);
    }
    writeDataToDom() {
      return R2(this, this.dom), super.writeDataToDom();
    }
    x(t4) {
      return this.attr("x", t4);
    }
    y(t4) {
      return this.attr("y", t4);
    }
  };
  Q2(Gt2, { bbox: function() {
    const t4 = At2(this, (t5) => t5.getBBox(), (t5) => {
      try {
        const e3 = t5.clone().addTo(yt2().svg).show(), i3 = e3.node.getBBox();
        return e3.remove(), i3;
      } catch (e3) {
        throw new Error(`Getting bbox of element "${t5.node.nodeName}" is not possible: ${e3.toString()}`);
      }
    });
    return new kt2(t4);
  }, rbox: function(t4) {
    const e3 = At2(this, (t5) => t5.getBoundingClientRect(), (t5) => {
      throw new Error(`Getting rbox of element "${t5.node.nodeName}" is not possible`);
    }), i3 = new kt2(e3);
    return t4 ? i3.transform(t4.screenCTM().inverseO()) : i3.addOffset();
  }, inside: function(t4, e3) {
    const i3 = this.bbox();
    return t4 > i3.x && e3 > i3.y && t4 < i3.x + i3.width && e3 < i3.y + i3.height;
  }, point: function(t4, e3) {
    return new bt2(t4, e3).transformO(this.screenCTM().inverseO());
  }, ctm: function() {
    return new vt2(this.node.getCTM());
  }, screenCTM: function() {
    try {
      if ("function" == typeof this.isRoot && !this.isRoot()) {
        const t4 = this.rect(1, 1), e3 = t4.node.getScreenCTM();
        return t4.remove(), new vt2(e3);
      }
      return new vt2(this.node.getScreenCTM());
    } catch (t4) {
      return console.warn(`Cannot get CTM from SVG node ${this.node.nodeName}. Is the element rendered?`), new vt2();
    }
  } }), q2(Gt2, "Element");
  var jt2 = { stroke: ["color", "width", "opacity", "linecap", "linejoin", "miterlimit", "dasharray", "dashoffset"], fill: ["color", "opacity", "rule"], prefix: function(t4, e3) {
    return "color" === e3 ? t4 : t4 + "-" + e3;
  } };
  ["fill", "stroke"].forEach(function(t4) {
    const e3 = {};
    let i3;
    e3[t4] = function(e4) {
      if (void 0 === e4) return this.attr(t4);
      if ("string" == typeof e4 || e4 instanceof xt2 || xt2.isRgb(e4) || e4 instanceof Gt2) this.attr(t4, e4);
      else for (i3 = jt2[t4].length - 1; i3 >= 0; i3--) null != e4[jt2[t4][i3]] && this.attr(jt2.prefix(t4, jt2[t4][i3]), e4[jt2[t4][i3]]);
      return this;
    }, A2(["Element", "Runner"], e3);
  }), A2(["Element", "Runner"], { matrix: function(t4, e3, i3, a3, s3, r3) {
    return null == t4 ? new vt2(this) : this.attr("transform", new vt2(t4, e3, i3, a3, s3, r3));
  }, rotate: function(t4, e3, i3) {
    return this.transform({ rotate: t4, ox: e3, oy: i3 }, true);
  }, skew: function(t4, e3, i3, a3) {
    return 1 === arguments.length || 3 === arguments.length ? this.transform({ skew: t4, ox: e3, oy: i3 }, true) : this.transform({ skew: [t4, e3], ox: i3, oy: a3 }, true);
  }, shear: function(t4, e3, i3) {
    return this.transform({ shear: t4, ox: e3, oy: i3 }, true);
  }, scale: function(t4, e3, i3, a3) {
    return 1 === arguments.length || 3 === arguments.length ? this.transform({ scale: t4, ox: e3, oy: i3 }, true) : this.transform({ scale: [t4, e3], ox: i3, oy: a3 }, true);
  }, translate: function(t4, e3) {
    return this.transform({ translate: [t4, e3] }, true);
  }, relative: function(t4, e3) {
    return this.transform({ relative: [t4, e3] }, true);
  }, flip: function(t4 = "both", e3 = "center") {
    return -1 === "xybothtrue".indexOf(t4) && (e3 = t4, t4 = "both"), this.transform({ flip: t4, origin: e3 }, true);
  }, opacity: function(t4) {
    return this.attr("opacity", t4);
  } }), A2("radius", { radius: function(t4, e3 = t4) {
    return "radialGradient" === (this._element || this).type ? this.attr("r", new _t2(t4)) : this.rx(t4).ry(e3);
  } }), A2("Path", { length: function() {
    return this.node.getTotalLength();
  }, pointAt: function(t4) {
    return new bt2(this.node.getPointAtLength(t4));
  } }), A2(["Element", "Runner"], { font: function(t4, e3) {
    if ("object" == typeof t4) {
      for (e3 in t4) this.font(e3, t4[e3]);
      return this;
    }
    return "leading" === t4 ? this.leading(e3) : "anchor" === t4 ? this.attr("text-anchor", e3) : "size" === t4 || "family" === t4 || "weight" === t4 || "stretch" === t4 || "variant" === t4 || "style" === t4 ? this.attr("font-" + t4, e3) : this.attr(t4, e3);
  } });
  A2("Element", ["click", "dblclick", "mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "mouseenter", "mouseleave", "touchstart", "touchmove", "touchleave", "touchend", "touchcancel", "contextmenu", "wheel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel"].reduce(function(t4, e3) {
    return t4[e3] = function(t5) {
      return null === t5 ? this.off(e3) : this.on(e3, t5), this;
    }, t4;
  }, {})), A2("Element", { untransform: function() {
    return this.attr("transform", null);
  }, matrixify: function() {
    const t4 = (this.attr("transform") || "").split(st2).slice(0, -1).map(function(t5) {
      const e3 = t5.trim().split("(");
      return [e3[0], e3[1].split(dt2).map(function(t6) {
        return parseFloat(t6);
      })];
    }).reverse().reduce(function(t5, e3) {
      return "matrix" === e3[0] ? t5.lmultiply(vt2.fromArray(e3[1])) : t5[e3[0]].apply(t5, e3[1]);
    }, new vt2());
    return t4;
  }, toParent: function(t4, e3) {
    if (this === t4) return this;
    if (X2(this.node)) return this.addTo(t4, e3);
    const i3 = this.screenCTM(), a3 = t4.screenCTM().inverse();
    return this.addTo(t4, e3).untransform().transform(a3.multiply(i3)), this;
  }, toRoot: function(t4) {
    return this.toParent(this.root(), t4);
  }, transform: function(t4, e3) {
    if (null == t4 || "string" == typeof t4) {
      const e4 = new vt2(this).decompose();
      return null == t4 ? e4 : e4[t4];
    }
    vt2.isMatrixLike(t4) || (t4 = { ...t4, origin: T2(t4, this) });
    const i3 = new vt2(true === e3 ? this : e3 || false).transform(t4);
    return this.attr("transform", i3);
  } });
  var Vt2 = class _Vt extends Gt2 {
    flatten() {
      return this.each(function() {
        if (this instanceof _Vt) return this.flatten().ungroup();
      }), this;
    }
    ungroup(t4 = this.parent(), e3 = t4.index(this)) {
      return e3 = -1 === e3 ? t4.children().length : e3, this.each(function(i3, a3) {
        return a3[a3.length - i3 - 1].toParent(t4, e3);
      }), this.remove();
    }
  };
  q2(Vt2, "Container");
  var Ut2 = class extends Vt2 {
    constructor(t4, e3 = t4) {
      super(G2("defs", t4), e3);
    }
    flatten() {
      return this;
    }
    ungroup() {
      return this;
    }
  };
  q2(Ut2, "Defs");
  var qt2 = class extends Gt2 {
  };
  function Zt2(t4) {
    return this.attr("rx", t4);
  }
  function $t2(t4) {
    return this.attr("ry", t4);
  }
  function Jt2(t4) {
    return null == t4 ? this.cx() - this.rx() : this.cx(t4 + this.rx());
  }
  function Qt2(t4) {
    return null == t4 ? this.cy() - this.ry() : this.cy(t4 + this.ry());
  }
  function Kt2(t4) {
    return this.attr("cx", t4);
  }
  function te2(t4) {
    return this.attr("cy", t4);
  }
  function ee2(t4) {
    return null == t4 ? 2 * this.rx() : this.rx(new _t2(t4).divide(2));
  }
  function ie2(t4) {
    return null == t4 ? 2 * this.ry() : this.ry(new _t2(t4).divide(2));
  }
  q2(qt2, "Shape");
  var ae2 = Object.freeze({ __proto__: null, cx: Kt2, cy: te2, height: ie2, rx: Zt2, ry: $t2, width: ee2, x: Jt2, y: Qt2 });
  var se2 = class extends qt2 {
    constructor(t4, e3 = t4) {
      super(G2("ellipse", t4), e3);
    }
    size(t4, e3) {
      const i3 = I2(this, t4, e3);
      return this.rx(new _t2(i3.width).divide(2)).ry(new _t2(i3.height).divide(2));
    }
  };
  Q2(se2, ae2), A2("Container", { ellipse: K2(function(t4 = 0, e3 = t4) {
    return this.put(new se2()).size(t4, e3).move(0, 0);
  }) }), q2(se2, "Ellipse");
  var re2 = class extends Bt2 {
    constructor(t4 = O2.document.createDocumentFragment()) {
      super(t4);
    }
    xml(t4, e3, i3) {
      if ("boolean" == typeof t4 && (i3 = e3, e3 = t4, t4 = null), null == t4 || "function" == typeof t4) {
        const t5 = new Bt2(W2("wrapper", i3));
        return t5.add(this.node.cloneNode(true)), t5.xml(false, i3);
      }
      return super.xml(t4, false, i3);
    }
  };
  function ne2(t4, e3) {
    return "radialGradient" === (this._element || this).type ? this.attr({ fx: new _t2(t4), fy: new _t2(e3) }) : this.attr({ x1: new _t2(t4), y1: new _t2(e3) });
  }
  function oe2(t4, e3) {
    return "radialGradient" === (this._element || this).type ? this.attr({ cx: new _t2(t4), cy: new _t2(e3) }) : this.attr({ x2: new _t2(t4), y2: new _t2(e3) });
  }
  q2(re2, "Fragment");
  var le2 = Object.freeze({ __proto__: null, from: ne2, to: oe2 });
  var he2 = class extends Vt2 {
    constructor(t4, e3) {
      super(G2(t4 + "Gradient", "string" == typeof t4 ? null : t4), e3);
    }
    attr(t4, e3, i3) {
      return "transform" === t4 && (t4 = "gradientTransform"), super.attr(t4, e3, i3);
    }
    bbox() {
      return new kt2();
    }
    targets() {
      return Lt2("svg [fill*=" + this.id() + "]");
    }
    toString() {
      return this.url();
    }
    update(t4) {
      return this.clear(), "function" == typeof t4 && t4.call(this, this), this;
    }
    url() {
      return "url(#" + this.id() + ")";
    }
  };
  Q2(he2, le2), A2({ Container: { gradient(...t4) {
    return this.defs().gradient(...t4);
  } }, Defs: { gradient: K2(function(t4, e3) {
    return this.put(new he2(t4)).update(e3);
  }) } }), q2(he2, "Gradient");
  var ce2 = class extends Vt2 {
    constructor(t4, e3 = t4) {
      super(G2("pattern", t4), e3);
    }
    attr(t4, e3, i3) {
      return "transform" === t4 && (t4 = "patternTransform"), super.attr(t4, e3, i3);
    }
    bbox() {
      return new kt2();
    }
    targets() {
      return Lt2("svg [fill*=" + this.id() + "]");
    }
    toString() {
      return this.url();
    }
    update(t4) {
      return this.clear(), "function" == typeof t4 && t4.call(this, this), this;
    }
    url() {
      return "url(#" + this.id() + ")";
    }
  };
  A2({ Container: { pattern(...t4) {
    return this.defs().pattern(...t4);
  } }, Defs: { pattern: K2(function(t4, e3, i3) {
    return this.put(new ce2()).update(i3).attr({ x: 0, y: 0, width: t4, height: e3, patternUnits: "userSpaceOnUse" });
  }) } }), q2(ce2, "Pattern");
  var de2 = class extends qt2 {
    constructor(t4, e3 = t4) {
      super(G2("image", t4), e3);
    }
    load(t4, e3) {
      if (!t4) return this;
      const i3 = new O2.window.Image();
      return zt2(i3, "load", function(t5) {
        const a3 = this.parent(ce2);
        0 === this.width() && 0 === this.height() && this.size(i3.width, i3.height), a3 instanceof ce2 && 0 === a3.width() && 0 === a3.height() && a3.size(this.width(), this.height()), "function" == typeof e3 && e3.call(this, t5);
      }, this), zt2(i3, "load error", function() {
        Xt2(i3);
      }), this.attr("href", i3.src = t4, H2);
    }
  };
  var ue2;
  ue2 = function(t4, e3, i3) {
    return "fill" !== t4 && "stroke" !== t4 || ct2.test(e3) && (e3 = i3.root().defs().image(e3)), e3 instanceof de2 && (e3 = i3.root().defs().pattern(0, 0, (t5) => {
      t5.add(e3);
    })), e3;
  }, Wt2.push(ue2), A2({ Container: { image: K2(function(t4, e3) {
    return this.put(new de2()).size(0, 0).load(t4, e3);
  }) } }), q2(de2, "Image");
  var ge2 = class extends Dt2 {
    bbox() {
      let t4 = -1 / 0, e3 = -1 / 0, i3 = 1 / 0, a3 = 1 / 0;
      return this.forEach(function(s3) {
        t4 = Math.max(s3[0], t4), e3 = Math.max(s3[1], e3), i3 = Math.min(s3[0], i3), a3 = Math.min(s3[1], a3);
      }), new kt2(i3, a3, t4 - i3, e3 - a3);
    }
    move(t4, e3) {
      const i3 = this.bbox();
      if (t4 -= i3.x, e3 -= i3.y, !isNaN(t4) && !isNaN(e3)) for (let i4 = this.length - 1; i4 >= 0; i4--) this[i4] = [this[i4][0] + t4, this[i4][1] + e3];
      return this;
    }
    parse(t4 = [0, 0]) {
      const e3 = [];
      (t4 = t4 instanceof Array ? Array.prototype.concat.apply([], t4) : t4.trim().split(dt2).map(parseFloat)).length % 2 != 0 && t4.pop();
      for (let i3 = 0, a3 = t4.length; i3 < a3; i3 += 2) e3.push([t4[i3], t4[i3 + 1]]);
      return e3;
    }
    size(t4, e3) {
      let i3;
      const a3 = this.bbox();
      for (i3 = this.length - 1; i3 >= 0; i3--) a3.width && (this[i3][0] = (this[i3][0] - a3.x) * t4 / a3.width + a3.x), a3.height && (this[i3][1] = (this[i3][1] - a3.y) * e3 / a3.height + a3.y);
      return this;
    }
    toLine() {
      return { x1: this[0][0], y1: this[0][1], x2: this[1][0], y2: this[1][1] };
    }
    toString() {
      const t4 = [];
      for (let e3 = 0, i3 = this.length; e3 < i3; e3++) t4.push(this[e3].join(","));
      return t4.join(" ");
    }
    transform(t4) {
      return this.clone().transformO(t4);
    }
    transformO(t4) {
      vt2.isMatrixLike(t4) || (t4 = new vt2(t4));
      for (let e3 = this.length; e3--; ) {
        const [i3, a3] = this[e3];
        this[e3][0] = t4.a * i3 + t4.c * a3 + t4.e, this[e3][1] = t4.b * i3 + t4.d * a3 + t4.f;
      }
      return this;
    }
  };
  var pe2 = ge2;
  var fe2 = Object.freeze({ __proto__: null, MorphArray: pe2, height: function(t4) {
    const e3 = this.bbox();
    return null == t4 ? e3.height : this.size(e3.width, t4);
  }, width: function(t4) {
    const e3 = this.bbox();
    return null == t4 ? e3.width : this.size(t4, e3.height);
  }, x: function(t4) {
    return null == t4 ? this.bbox().x : this.move(t4, this.bbox().y);
  }, y: function(t4) {
    return null == t4 ? this.bbox().y : this.move(this.bbox().x, t4);
  } });
  var xe2 = class extends qt2 {
    constructor(t4, e3 = t4) {
      super(G2("line", t4), e3);
    }
    array() {
      return new ge2([[this.attr("x1"), this.attr("y1")], [this.attr("x2"), this.attr("y2")]]);
    }
    move(t4, e3) {
      return this.attr(this.array().move(t4, e3).toLine());
    }
    plot(t4, e3, i3, a3) {
      return null == t4 ? this.array() : (t4 = void 0 !== e3 ? { x1: t4, y1: e3, x2: i3, y2: a3 } : new ge2(t4).toLine(), this.attr(t4));
    }
    size(t4, e3) {
      const i3 = I2(this, t4, e3);
      return this.attr(this.array().size(i3.width, i3.height).toLine());
    }
  };
  Q2(xe2, fe2), A2({ Container: { line: K2(function(...t4) {
    return xe2.prototype.plot.apply(this.put(new xe2()), null != t4[0] ? t4 : [0, 0, 0, 0]);
  }) } }), q2(xe2, "Line");
  var be2 = class extends Vt2 {
    constructor(t4, e3 = t4) {
      super(G2("marker", t4), e3);
    }
    height(t4) {
      return this.attr("markerHeight", t4);
    }
    orient(t4) {
      return this.attr("orient", t4);
    }
    ref(t4, e3) {
      return this.attr("refX", t4).attr("refY", e3);
    }
    toString() {
      return "url(#" + this.id() + ")";
    }
    update(t4) {
      return this.clear(), "function" == typeof t4 && t4.call(this, this), this;
    }
    width(t4) {
      return this.attr("markerWidth", t4);
    }
  };
  function me2(t4, e3) {
    return function(i3) {
      return null == i3 ? this[t4] : (this[t4] = i3, e3 && e3.call(this), this);
    };
  }
  A2({ Container: { marker(...t4) {
    return this.defs().marker(...t4);
  } }, Defs: { marker: K2(function(t4, e3, i3) {
    return this.put(new be2()).size(t4, e3).ref(t4 / 2, e3 / 2).viewbox(0, 0, t4, e3).attr("orient", "auto").update(i3);
  }) }, marker: { marker(t4, e3, i3, a3) {
    let s3 = ["marker"];
    return "all" !== t4 && s3.push(t4), s3 = s3.join("-"), t4 = arguments[1] instanceof be2 ? arguments[1] : this.defs().marker(e3, i3, a3), this.attr(s3, t4);
  } } }), q2(be2, "Marker");
  var ve2 = { "-": function(t4) {
    return t4;
  }, "<>": function(t4) {
    return -Math.cos(t4 * Math.PI) / 2 + 0.5;
  }, ">": function(t4) {
    return Math.sin(t4 * Math.PI / 2);
  }, "<": function(t4) {
    return 1 - Math.cos(t4 * Math.PI / 2);
  }, bezier: function(t4, e3, i3, a3) {
    return function(s3) {
      return s3 < 0 ? t4 > 0 ? e3 / t4 * s3 : i3 > 0 ? a3 / i3 * s3 : 0 : s3 > 1 ? i3 < 1 ? (1 - a3) / (1 - i3) * s3 + (a3 - i3) / (1 - i3) : t4 < 1 ? (1 - e3) / (1 - t4) * s3 + (e3 - t4) / (1 - t4) : 1 : 3 * s3 * (1 - s3) ** 2 * e3 + 3 * s3 ** 2 * (1 - s3) * a3 + s3 ** 3;
    };
  }, steps: function(t4, e3 = "end") {
    e3 = e3.split("-").reverse()[0];
    let i3 = t4;
    return "none" === e3 ? --i3 : "both" === e3 && ++i3, (a3, s3 = false) => {
      let r3 = Math.floor(a3 * t4);
      const n3 = a3 * r3 % 1 == 0;
      return "start" !== e3 && "both" !== e3 || ++r3, s3 && n3 && --r3, a3 >= 0 && r3 < 0 && (r3 = 0), a3 <= 1 && r3 > i3 && (r3 = i3), r3 / i3;
    };
  } };
  var ye2 = class {
    done() {
      return false;
    }
  };
  var we2 = class extends ye2 {
    constructor(t4 = Ht2) {
      super(), this.ease = ve2[t4] || t4;
    }
    step(t4, e3, i3) {
      return "number" != typeof t4 ? i3 < 1 ? t4 : e3 : t4 + (e3 - t4) * this.ease(i3);
    }
  };
  var ke2 = class extends ye2 {
    constructor(t4) {
      super(), this.stepper = t4;
    }
    done(t4) {
      return t4.done;
    }
    step(t4, e3, i3, a3) {
      return this.stepper(t4, e3, i3, a3);
    }
  };
  function Ae2() {
    const t4 = (this._duration || 500) / 1e3, e3 = this._overshoot || 0, i3 = Math.PI, a3 = Math.log(e3 / 100 + 1e-10), s3 = -a3 / Math.sqrt(i3 * i3 + a3 * a3), r3 = 3.9 / (s3 * t4);
    this.d = 2 * s3 * r3, this.k = r3 * r3;
  }
  Q2(class extends ke2 {
    constructor(t4 = 500, e3 = 0) {
      super(), this.duration(t4).overshoot(e3);
    }
    step(t4, e3, i3, a3) {
      if ("string" == typeof t4) return t4;
      if (a3.done = i3 === 1 / 0, i3 === 1 / 0) return e3;
      if (0 === i3) return t4;
      i3 > 100 && (i3 = 16), i3 /= 1e3;
      const s3 = a3.velocity || 0, r3 = -this.d * s3 - this.k * (t4 - e3), n3 = t4 + s3 * i3 + r3 * i3 * i3 / 2;
      return a3.velocity = s3 + r3 * i3, a3.done = Math.abs(e3 - n3) + Math.abs(s3) < 2e-3, a3.done ? e3 : n3;
    }
  }, { duration: me2("_duration", Ae2), overshoot: me2("_overshoot", Ae2) });
  Q2(class extends ke2 {
    constructor(t4 = 0.1, e3 = 0.01, i3 = 0, a3 = 1e3) {
      super(), this.p(t4).i(e3).d(i3).windup(a3);
    }
    step(t4, e3, i3, a3) {
      if ("string" == typeof t4) return t4;
      if (a3.done = i3 === 1 / 0, i3 === 1 / 0) return e3;
      if (0 === i3) return t4;
      const s3 = e3 - t4;
      let r3 = (a3.integral || 0) + s3 * i3;
      const n3 = (s3 - (a3.error || 0)) / i3, o3 = this._windup;
      return false !== o3 && (r3 = Math.max(-o3, Math.min(r3, o3))), a3.error = s3, a3.integral = r3, a3.done = Math.abs(s3) < 1e-3, a3.done ? e3 : t4 + (this.P * s3 + this.I * r3 + this.D * n3);
    }
  }, { windup: me2("_windup"), p: me2("P"), i: me2("I"), d: me2("D") });
  var Ce2 = { M: 2, L: 2, H: 1, V: 1, C: 6, S: 4, Q: 4, T: 2, A: 7, Z: 0 };
  var Se2 = { M: function(t4, e3, i3) {
    return e3.x = i3.x = t4[0], e3.y = i3.y = t4[1], ["M", e3.x, e3.y];
  }, L: function(t4, e3) {
    return e3.x = t4[0], e3.y = t4[1], ["L", t4[0], t4[1]];
  }, H: function(t4, e3) {
    return e3.x = t4[0], ["H", t4[0]];
  }, V: function(t4, e3) {
    return e3.y = t4[0], ["V", t4[0]];
  }, C: function(t4, e3) {
    return e3.x = t4[4], e3.y = t4[5], ["C", t4[0], t4[1], t4[2], t4[3], t4[4], t4[5]];
  }, S: function(t4, e3) {
    return e3.x = t4[2], e3.y = t4[3], ["S", t4[0], t4[1], t4[2], t4[3]];
  }, Q: function(t4, e3) {
    return e3.x = t4[2], e3.y = t4[3], ["Q", t4[0], t4[1], t4[2], t4[3]];
  }, T: function(t4, e3) {
    return e3.x = t4[0], e3.y = t4[1], ["T", t4[0], t4[1]];
  }, Z: function(t4, e3, i3) {
    return e3.x = i3.x, e3.y = i3.y, ["Z"];
  }, A: function(t4, e3) {
    return e3.x = t4[5], e3.y = t4[6], ["A", t4[0], t4[1], t4[2], t4[3], t4[4], t4[5], t4[6]];
  } };
  var Le2 = "mlhvqtcsaz".split("");
  for (let t4 = 0, e3 = Le2.length; t4 < e3; ++t4) Se2[Le2[t4]] = /* @__PURE__ */ function(t5) {
    return function(e4, i3, a3) {
      if ("H" === t5) e4[0] = e4[0] + i3.x;
      else if ("V" === t5) e4[0] = e4[0] + i3.y;
      else if ("A" === t5) e4[5] = e4[5] + i3.x, e4[6] = e4[6] + i3.y;
      else for (let t6 = 0, a4 = e4.length; t6 < a4; ++t6) e4[t6] = e4[t6] + (t6 % 2 ? i3.y : i3.x);
      return Se2[t5](e4, i3, a3);
    };
  }(Le2[t4].toUpperCase());
  function Me2(t4) {
    return t4.segment.length && t4.segment.length - 1 === Ce2[t4.segment[0].toUpperCase()];
  }
  function Pe2(t4, e3) {
    t4.inNumber && Ie2(t4, false);
    const i3 = ut2.test(e3);
    if (i3) t4.segment = [e3];
    else {
      const e4 = t4.lastCommand, i4 = e4.toLowerCase(), a3 = e4 === i4;
      t4.segment = ["m" === i4 ? a3 ? "l" : "L" : e4];
    }
    return t4.inSegment = true, t4.lastCommand = t4.segment[0], i3;
  }
  function Ie2(t4, e3) {
    if (!t4.inNumber) throw new Error("Parser Error");
    t4.number && t4.segment.push(parseFloat(t4.number)), t4.inNumber = e3, t4.number = "", t4.pointSeen = false, t4.hasExponent = false, Me2(t4) && Te2(t4);
  }
  function Te2(t4) {
    t4.inSegment = false, t4.absolute && (t4.segment = function(t5) {
      const e3 = t5.segment[0];
      return Se2[e3](t5.segment.slice(1), t5.p, t5.p0);
    }(t4)), t4.segments.push(t4.segment);
  }
  function ze2(t4) {
    if (!t4.segment.length) return false;
    const e3 = "A" === t4.segment[0].toUpperCase(), i3 = t4.segment.length;
    return e3 && (4 === i3 || 5 === i3);
  }
  function Xe2(t4) {
    return "E" === t4.lastToken.toUpperCase();
  }
  var Re2 = /* @__PURE__ */ new Set([" ", ",", "	", "\n", "\r", "\f"]);
  var Ee2 = class extends Dt2 {
    bbox() {
      return yt2().path.setAttribute("d", this.toString()), new kt2(yt2.nodes.path.getBBox());
    }
    move(t4, e3) {
      const i3 = this.bbox();
      if (t4 -= i3.x, e3 -= i3.y, !isNaN(t4) && !isNaN(e3)) for (let i4, a3 = this.length - 1; a3 >= 0; a3--) i4 = this[a3][0], "M" === i4 || "L" === i4 || "T" === i4 ? (this[a3][1] += t4, this[a3][2] += e3) : "H" === i4 ? this[a3][1] += t4 : "V" === i4 ? this[a3][1] += e3 : "C" === i4 || "S" === i4 || "Q" === i4 ? (this[a3][1] += t4, this[a3][2] += e3, this[a3][3] += t4, this[a3][4] += e3, "C" === i4 && (this[a3][5] += t4, this[a3][6] += e3)) : "A" === i4 && (this[a3][6] += t4, this[a3][7] += e3);
      return this;
    }
    parse(t4 = "M0 0") {
      return Array.isArray(t4) && (t4 = Array.prototype.concat.apply([], t4).toString()), function(t5, e3 = true) {
        let i3 = 0, a3 = "";
        const s3 = { segment: [], inNumber: false, number: "", lastToken: "", inSegment: false, segments: [], pointSeen: false, hasExponent: false, absolute: e3, p0: new bt2(), p: new bt2() };
        for (; s3.lastToken = a3, a3 = t5.charAt(i3++); ) if (s3.inSegment || !Pe2(s3, a3)) if ("." !== a3) if (isNaN(parseInt(a3))) if (Re2.has(a3)) s3.inNumber && Ie2(s3, false);
        else if ("-" !== a3 && "+" !== a3) if ("E" !== a3.toUpperCase()) {
          if (ut2.test(a3)) {
            if (s3.inNumber) Ie2(s3, false);
            else {
              if (!Me2(s3)) throw new Error("parser Error");
              Te2(s3);
            }
            --i3;
          }
        } else s3.number += a3, s3.hasExponent = true;
        else {
          if (s3.inNumber && !Xe2(s3)) {
            Ie2(s3, false), --i3;
            continue;
          }
          s3.number += a3, s3.inNumber = true;
        }
        else {
          if ("0" === s3.number || ze2(s3)) {
            s3.inNumber = true, s3.number = a3, Ie2(s3, true);
            continue;
          }
          s3.inNumber = true, s3.number += a3;
        }
        else {
          if (s3.pointSeen || s3.hasExponent) {
            Ie2(s3, false), --i3;
            continue;
          }
          s3.inNumber = true, s3.pointSeen = true, s3.number += a3;
        }
        return s3.inNumber && Ie2(s3, false), s3.inSegment && Me2(s3) && Te2(s3), s3.segments;
      }(t4);
    }
    size(t4, e3) {
      const i3 = this.bbox();
      let a3, s3;
      for (i3.width = 0 === i3.width ? 1 : i3.width, i3.height = 0 === i3.height ? 1 : i3.height, a3 = this.length - 1; a3 >= 0; a3--) s3 = this[a3][0], "M" === s3 || "L" === s3 || "T" === s3 ? (this[a3][1] = (this[a3][1] - i3.x) * t4 / i3.width + i3.x, this[a3][2] = (this[a3][2] - i3.y) * e3 / i3.height + i3.y) : "H" === s3 ? this[a3][1] = (this[a3][1] - i3.x) * t4 / i3.width + i3.x : "V" === s3 ? this[a3][1] = (this[a3][1] - i3.y) * e3 / i3.height + i3.y : "C" === s3 || "S" === s3 || "Q" === s3 ? (this[a3][1] = (this[a3][1] - i3.x) * t4 / i3.width + i3.x, this[a3][2] = (this[a3][2] - i3.y) * e3 / i3.height + i3.y, this[a3][3] = (this[a3][3] - i3.x) * t4 / i3.width + i3.x, this[a3][4] = (this[a3][4] - i3.y) * e3 / i3.height + i3.y, "C" === s3 && (this[a3][5] = (this[a3][5] - i3.x) * t4 / i3.width + i3.x, this[a3][6] = (this[a3][6] - i3.y) * e3 / i3.height + i3.y)) : "A" === s3 && (this[a3][1] = this[a3][1] * t4 / i3.width, this[a3][2] = this[a3][2] * e3 / i3.height, this[a3][6] = (this[a3][6] - i3.x) * t4 / i3.width + i3.x, this[a3][7] = (this[a3][7] - i3.y) * e3 / i3.height + i3.y);
      return this;
    }
    toString() {
      return function(t4) {
        let e3 = "";
        for (let i3 = 0, a3 = t4.length; i3 < a3; i3++) e3 += t4[i3][0], null != t4[i3][1] && (e3 += t4[i3][1], null != t4[i3][2] && (e3 += " ", e3 += t4[i3][2], null != t4[i3][3] && (e3 += " ", e3 += t4[i3][3], e3 += " ", e3 += t4[i3][4], null != t4[i3][5] && (e3 += " ", e3 += t4[i3][5], e3 += " ", e3 += t4[i3][6], null != t4[i3][7] && (e3 += " ", e3 += t4[i3][7])))));
        return e3 + " ";
      }(this);
    }
  };
  var Ye2 = (t4) => {
    const e3 = typeof t4;
    return "number" === e3 ? _t2 : "string" === e3 ? xt2.isColor(t4) ? xt2 : dt2.test(t4) ? ut2.test(t4) ? Ee2 : Dt2 : tt2.test(t4) ? _t2 : Oe2 : Ne2.indexOf(t4.constructor) > -1 ? t4.constructor : Array.isArray(t4) ? Dt2 : "object" === e3 ? _e2 : Oe2;
  };
  var He2 = class {
    constructor(t4) {
      this._stepper = t4 || new we2("-"), this._from = null, this._to = null, this._type = null, this._context = null, this._morphObj = null;
    }
    at(t4) {
      return this._morphObj.morph(this._from, this._to, t4, this._stepper, this._context);
    }
    done() {
      return this._context.map(this._stepper.done).reduce(function(t4, e3) {
        return t4 && e3;
      }, true);
    }
    from(t4) {
      return null == t4 ? this._from : (this._from = this._set(t4), this);
    }
    stepper(t4) {
      return null == t4 ? this._stepper : (this._stepper = t4, this);
    }
    to(t4) {
      return null == t4 ? this._to : (this._to = this._set(t4), this);
    }
    type(t4) {
      return null == t4 ? this._type : (this._type = t4, this);
    }
    _set(t4) {
      this._type || this.type(Ye2(t4));
      let e3 = new this._type(t4);
      return this._type === xt2 && (e3 = this._to ? e3[this._to[4]]() : this._from ? e3[this._from[4]]() : e3), this._type === _e2 && (e3 = this._to ? e3.align(this._to) : this._from ? e3.align(this._from) : e3), e3 = e3.toConsumable(), this._morphObj = this._morphObj || new this._type(), this._context = this._context || Array.apply(null, Array(e3.length)).map(Object).map(function(t5) {
        return t5.done = true, t5;
      }), e3;
    }
  };
  var Oe2 = class {
    constructor(...t4) {
      this.init(...t4);
    }
    init(t4) {
      return t4 = Array.isArray(t4) ? t4[0] : t4, this.value = t4, this;
    }
    toArray() {
      return [this.value];
    }
    valueOf() {
      return this.value;
    }
  };
  var Fe2 = class _Fe {
    constructor(...t4) {
      this.init(...t4);
    }
    init(t4) {
      return Array.isArray(t4) && (t4 = { scaleX: t4[0], scaleY: t4[1], shear: t4[2], rotate: t4[3], translateX: t4[4], translateY: t4[5], originX: t4[6], originY: t4[7] }), Object.assign(this, _Fe.defaults, t4), this;
    }
    toArray() {
      const t4 = this;
      return [t4.scaleX, t4.scaleY, t4.shear, t4.rotate, t4.translateX, t4.translateY, t4.originX, t4.originY];
    }
  };
  Fe2.defaults = { scaleX: 1, scaleY: 1, shear: 0, rotate: 0, translateX: 0, translateY: 0, originX: 0, originY: 0 };
  var De2 = (t4, e3) => t4[0] < e3[0] ? -1 : t4[0] > e3[0] ? 1 : 0;
  var _e2 = class {
    constructor(...t4) {
      this.init(...t4);
    }
    align(t4) {
      const e3 = this.values;
      for (let i3 = 0, a3 = e3.length; i3 < a3; ++i3) {
        if (e3[i3 + 1] === t4[i3 + 1]) {
          if (e3[i3 + 1] === xt2 && t4[i3 + 7] !== e3[i3 + 7]) {
            const e4 = t4[i3 + 7], a5 = new xt2(this.values.splice(i3 + 3, 5))[e4]().toArray();
            this.values.splice(i3 + 3, 0, ...a5);
          }
          i3 += e3[i3 + 2] + 2;
          continue;
        }
        if (!t4[i3 + 1]) return this;
        const a4 = new t4[i3 + 1]().toArray(), s3 = e3[i3 + 2] + 3;
        e3.splice(i3, s3, t4[i3], t4[i3 + 1], t4[i3 + 2], ...a4), i3 += e3[i3 + 2] + 2;
      }
      return this;
    }
    init(t4) {
      if (this.values = [], Array.isArray(t4)) return void (this.values = t4.slice());
      t4 = t4 || {};
      const e3 = [];
      for (const i3 in t4) {
        const a3 = Ye2(t4[i3]), s3 = new a3(t4[i3]).toArray();
        e3.push([i3, a3, s3.length, ...s3]);
      }
      return e3.sort(De2), this.values = e3.reduce((t5, e4) => t5.concat(e4), []), this;
    }
    toArray() {
      return this.values;
    }
    valueOf() {
      const t4 = {}, e3 = this.values;
      for (; e3.length; ) {
        const i3 = e3.shift(), a3 = e3.shift(), s3 = e3.shift(), r3 = e3.splice(0, s3);
        t4[i3] = new a3(r3);
      }
      return t4;
    }
  };
  var Ne2 = [Oe2, Fe2, _e2];
  var We2 = class extends qt2 {
    constructor(t4, e3 = t4) {
      super(G2("path", t4), e3);
    }
    array() {
      return this._array || (this._array = new Ee2(this.attr("d")));
    }
    clear() {
      return delete this._array, this;
    }
    height(t4) {
      return null == t4 ? this.bbox().height : this.size(this.bbox().width, t4);
    }
    move(t4, e3) {
      return this.attr("d", this.array().move(t4, e3));
    }
    plot(t4) {
      return null == t4 ? this.array() : this.clear().attr("d", "string" == typeof t4 ? t4 : this._array = new Ee2(t4));
    }
    size(t4, e3) {
      const i3 = I2(this, t4, e3);
      return this.attr("d", this.array().size(i3.width, i3.height));
    }
    width(t4) {
      return null == t4 ? this.bbox().width : this.size(t4, this.bbox().height);
    }
    x(t4) {
      return null == t4 ? this.bbox().x : this.move(t4, this.bbox().y);
    }
    y(t4) {
      return null == t4 ? this.bbox().y : this.move(this.bbox().x, t4);
    }
  };
  We2.prototype.MorphArray = Ee2, A2({ Container: { path: K2(function(t4) {
    return this.put(new We2()).plot(t4 || new Ee2());
  }) } }), q2(We2, "Path");
  var Be2 = Object.freeze({ __proto__: null, array: function() {
    return this._array || (this._array = new ge2(this.attr("points")));
  }, clear: function() {
    return delete this._array, this;
  }, move: function(t4, e3) {
    return this.attr("points", this.array().move(t4, e3));
  }, plot: function(t4) {
    return null == t4 ? this.array() : this.clear().attr("points", "string" == typeof t4 ? t4 : this._array = new ge2(t4));
  }, size: function(t4, e3) {
    const i3 = I2(this, t4, e3);
    return this.attr("points", this.array().size(i3.width, i3.height));
  } });
  var Ge2 = class extends qt2 {
    constructor(t4, e3 = t4) {
      super(G2("polygon", t4), e3);
    }
  };
  A2({ Container: { polygon: K2(function(t4) {
    return this.put(new Ge2()).plot(t4 || new ge2());
  }) } }), Q2(Ge2, fe2), Q2(Ge2, Be2), q2(Ge2, "Polygon");
  var je2 = class extends qt2 {
    constructor(t4, e3 = t4) {
      super(G2("polyline", t4), e3);
    }
  };
  A2({ Container: { polyline: K2(function(t4) {
    return this.put(new je2()).plot(t4 || new ge2());
  }) } }), Q2(je2, fe2), Q2(je2, Be2), q2(je2, "Polyline");
  var Ve2 = class extends qt2 {
    constructor(t4, e3 = t4) {
      super(G2("rect", t4), e3);
    }
  };
  Q2(Ve2, { rx: Zt2, ry: $t2 }), A2({ Container: { rect: K2(function(t4, e3) {
    return this.put(new Ve2()).size(t4, e3);
  }) } }), q2(Ve2, "Rect");
  var Ue2 = class {
    constructor() {
      this._first = null, this._last = null;
    }
    first() {
      return this._first && this._first.value;
    }
    last() {
      return this._last && this._last.value;
    }
    push(t4) {
      const e3 = void 0 !== t4.next ? t4 : { value: t4, next: null, prev: null };
      return this._last ? (e3.prev = this._last, this._last.next = e3, this._last = e3) : (this._last = e3, this._first = e3), e3;
    }
    remove(t4) {
      t4.prev && (t4.prev.next = t4.next), t4.next && (t4.next.prev = t4.prev), t4 === this._last && (this._last = t4.prev), t4 === this._first && (this._first = t4.next), t4.prev = null, t4.next = null;
    }
    shift() {
      const t4 = this._first;
      return t4 ? (this._first = t4.next, this._first && (this._first.prev = null), this._last = this._first ? this._last : null, t4.value) : null;
    }
  };
  var qe2 = { nextDraw: null, frames: new Ue2(), timeouts: new Ue2(), immediates: new Ue2(), timer: () => O2.window.performance || O2.window.Date, transforms: [], frame(t4) {
    const e3 = qe2.frames.push({ run: t4 });
    return null === qe2.nextDraw && (qe2.nextDraw = O2.window.requestAnimationFrame(qe2._draw)), e3;
  }, timeout(t4, e3) {
    e3 = e3 || 0;
    const i3 = qe2.timer().now() + e3, a3 = qe2.timeouts.push({ run: t4, time: i3 });
    return null === qe2.nextDraw && (qe2.nextDraw = O2.window.requestAnimationFrame(qe2._draw)), a3;
  }, immediate(t4) {
    const e3 = qe2.immediates.push(t4);
    return null === qe2.nextDraw && (qe2.nextDraw = O2.window.requestAnimationFrame(qe2._draw)), e3;
  }, cancelFrame(t4) {
    null != t4 && qe2.frames.remove(t4);
  }, clearTimeout(t4) {
    null != t4 && qe2.timeouts.remove(t4);
  }, cancelImmediate(t4) {
    null != t4 && qe2.immediates.remove(t4);
  }, _draw(t4) {
    let e3 = null;
    const i3 = qe2.timeouts.last();
    for (; (e3 = qe2.timeouts.shift()) && (t4 >= e3.time ? e3.run() : qe2.timeouts.push(e3), e3 !== i3); ) ;
    let a3 = null;
    const s3 = qe2.frames.last();
    for (; a3 !== s3 && (a3 = qe2.frames.shift()); ) a3.run(t4);
    let r3 = null;
    for (; r3 = qe2.immediates.shift(); ) r3();
    qe2.nextDraw = qe2.timeouts.first() || qe2.frames.first() ? O2.window.requestAnimationFrame(qe2._draw) : null;
  } };
  var Ze2 = function(t4) {
    const e3 = t4.start, i3 = t4.runner.duration();
    return { start: e3, duration: i3, end: e3 + i3, runner: t4.runner };
  };
  var $e2 = function() {
    const t4 = O2.window;
    return (t4.performance || t4.Date).now();
  };
  var Je2 = class extends Rt2 {
    constructor(t4 = $e2) {
      super(), this._timeSource = t4, this.terminate();
    }
    active() {
      return !!this._nextFrame;
    }
    finish() {
      return this.time(this.getEndTimeOfTimeline() + 1), this.pause();
    }
    getEndTime() {
      const t4 = this.getLastRunnerInfo(), e3 = t4 ? t4.runner.duration() : 0;
      return (t4 ? t4.start : this._time) + e3;
    }
    getEndTimeOfTimeline() {
      const t4 = this._runners.map((t5) => t5.start + t5.runner.duration());
      return Math.max(0, ...t4);
    }
    getLastRunnerInfo() {
      return this.getRunnerInfoById(this._lastRunnerId);
    }
    getRunnerInfoById(t4) {
      return this._runners[this._runnerIds.indexOf(t4)] || null;
    }
    pause() {
      return this._paused = true, this._continue();
    }
    persist(t4) {
      return null == t4 ? this._persist : (this._persist = t4, this);
    }
    play() {
      return this._paused = false, this.updateTime()._continue();
    }
    reverse(t4) {
      const e3 = this.speed();
      if (null == t4) return this.speed(-e3);
      const i3 = Math.abs(e3);
      return this.speed(t4 ? -i3 : i3);
    }
    schedule(t4, e3, i3) {
      if (null == t4) return this._runners.map(Ze2);
      let a3 = 0;
      const s3 = this.getEndTime();
      if (e3 = e3 || 0, null == i3 || "last" === i3 || "after" === i3) a3 = s3;
      else if ("absolute" === i3 || "start" === i3) a3 = e3, e3 = 0;
      else if ("now" === i3) a3 = this._time;
      else if ("relative" === i3) {
        const i4 = this.getRunnerInfoById(t4.id);
        i4 && (a3 = i4.start + e3, e3 = 0);
      } else {
        if ("with-last" !== i3) throw new Error('Invalid value for the "when" parameter');
        {
          const t5 = this.getLastRunnerInfo();
          a3 = t5 ? t5.start : this._time;
        }
      }
      t4.unschedule(), t4.timeline(this);
      const r3 = t4.persist(), n3 = { persist: null === r3 ? this._persist : r3, start: a3 + e3, runner: t4 };
      return this._lastRunnerId = t4.id, this._runners.push(n3), this._runners.sort((t5, e4) => t5.start - e4.start), this._runnerIds = this._runners.map((t5) => t5.runner.id), this.updateTime()._continue(), this;
    }
    seek(t4) {
      return this.time(this._time + t4);
    }
    source(t4) {
      return null == t4 ? this._timeSource : (this._timeSource = t4, this);
    }
    speed(t4) {
      return null == t4 ? this._speed : (this._speed = t4, this);
    }
    stop() {
      return this.time(0), this.pause();
    }
    time(t4) {
      return null == t4 ? this._time : (this._time = t4, this._continue(true));
    }
    unschedule(t4) {
      const e3 = this._runnerIds.indexOf(t4.id);
      return e3 < 0 || (this._runners.splice(e3, 1), this._runnerIds.splice(e3, 1), t4.timeline(null)), this;
    }
    updateTime() {
      return this.active() || (this._lastSourceTime = this._timeSource()), this;
    }
    _continue(t4 = false) {
      return qe2.cancelFrame(this._nextFrame), this._nextFrame = null, t4 ? this._stepImmediate() : (this._paused || (this._nextFrame = qe2.frame(this._step)), this);
    }
    _stepFn(t4 = false) {
      const e3 = this._timeSource();
      let i3 = e3 - this._lastSourceTime;
      t4 && (i3 = 0);
      const a3 = this._speed * i3 + (this._time - this._lastStepTime);
      this._lastSourceTime = e3, t4 || (this._time += a3, this._time = this._time < 0 ? 0 : this._time), this._lastStepTime = this._time, this.fire("time", this._time);
      for (let t5 = this._runners.length; t5--; ) {
        const e4 = this._runners[t5], i4 = e4.runner;
        this._time - e4.start <= 0 && i4.reset();
      }
      let s3 = false;
      for (let t5 = 0, e4 = this._runners.length; t5 < e4; t5++) {
        const i4 = this._runners[t5], r3 = i4.runner;
        let n3 = a3;
        const o3 = this._time - i4.start;
        if (o3 <= 0) {
          s3 = true;
          continue;
        }
        if (o3 < n3 && (n3 = o3), !r3.active()) continue;
        if (r3.step(n3).done) {
          if (true !== i4.persist) {
            r3.duration() - r3.time() + this._time + i4.persist < this._time && (r3.unschedule(), --t5, --e4);
          }
        } else s3 = true;
      }
      return s3 && !(this._speed < 0 && 0 === this._time) || this._runnerIds.length && this._speed < 0 && this._time > 0 ? this._continue() : (this.pause(), this.fire("finished")), this;
    }
    terminate() {
      this._startTime = 0, this._speed = 1, this._persist = 0, this._nextFrame = null, this._paused = true, this._runners = [], this._runnerIds = [], this._lastRunnerId = -1, this._time = 0, this._lastSourceTime = 0, this._lastStepTime = 0, this._step = this._stepFn.bind(this, false), this._stepImmediate = this._stepFn.bind(this, true);
    }
  };
  A2({ Element: { timeline: function(t4) {
    return null == t4 ? (this._timeline = this._timeline || new Je2(), this._timeline) : (this._timeline = t4, this);
  } } });
  var Qe2 = class _Qe extends Rt2 {
    constructor(t4) {
      super(), this.id = _Qe.id++, t4 = "function" == typeof (t4 = null == t4 ? Yt2 : t4) ? new ke2(t4) : t4, this._element = null, this._timeline = null, this.done = false, this._queue = [], this._duration = "number" == typeof t4 && t4, this._isDeclarative = t4 instanceof ke2, this._stepper = this._isDeclarative ? t4 : new we2(), this._history = {}, this.enabled = true, this._time = 0, this._lastTime = 0, this._reseted = true, this.transforms = new vt2(), this.transformId = 1, this._haveReversed = false, this._reverse = false, this._loopsDone = 0, this._swing = false, this._wait = 0, this._times = 1, this._frameId = null, this._persist = !!this._isDeclarative || null;
    }
    static sanitise(t4, e3, i3) {
      let a3 = 1, s3 = false, r3 = 0;
      return e3 = e3 ?? Ot2, i3 = i3 || "last", "object" != typeof (t4 = t4 ?? Yt2) || t4 instanceof ye2 || (e3 = t4.delay ?? e3, i3 = t4.when ?? i3, s3 = t4.swing || s3, a3 = t4.times ?? a3, r3 = t4.wait ?? r3, t4 = t4.duration ?? Yt2), { duration: t4, delay: e3, swing: s3, times: a3, wait: r3, when: i3 };
    }
    active(t4) {
      return null == t4 ? this.enabled : (this.enabled = t4, this);
    }
    addTransform(t4) {
      return this.transforms.lmultiplyO(t4), this;
    }
    after(t4) {
      return this.on("finished", t4);
    }
    animate(t4, e3, i3) {
      const a3 = _Qe.sanitise(t4, e3, i3), s3 = new _Qe(a3.duration);
      return this._timeline && s3.timeline(this._timeline), this._element && s3.element(this._element), s3.loop(a3).schedule(a3.delay, a3.when);
    }
    clearTransform() {
      return this.transforms = new vt2(), this;
    }
    clearTransformsFromQueue() {
      this.done && this._timeline && this._timeline._runnerIds.includes(this.id) || (this._queue = this._queue.filter((t4) => !t4.isTransform));
    }
    delay(t4) {
      return this.animate(0, t4);
    }
    duration() {
      return this._times * (this._wait + this._duration) - this._wait;
    }
    during(t4) {
      return this.queue(null, t4);
    }
    ease(t4) {
      return this._stepper = new we2(t4), this;
    }
    element(t4) {
      return null == t4 ? this._element : (this._element = t4, t4._prepareRunner(), this);
    }
    finish() {
      return this.step(1 / 0);
    }
    loop(t4, e3, i3) {
      return "object" == typeof t4 && (e3 = t4.swing, i3 = t4.wait, t4 = t4.times), this._times = t4 || 1 / 0, this._swing = e3 || false, this._wait = i3 || 0, true === this._times && (this._times = 1 / 0), this;
    }
    loops(t4) {
      const e3 = this._duration + this._wait;
      if (null == t4) {
        const t5 = Math.floor(this._time / e3), i4 = (this._time - t5 * e3) / this._duration;
        return Math.min(t5 + i4, this._times);
      }
      const i3 = t4 % 1, a3 = e3 * Math.floor(t4) + this._duration * i3;
      return this.time(a3);
    }
    persist(t4) {
      return null == t4 ? this._persist : (this._persist = t4, this);
    }
    position(t4) {
      const e3 = this._time, i3 = this._duration, a3 = this._wait, s3 = this._times, r3 = this._swing, n3 = this._reverse;
      let o3;
      if (null == t4) {
        const t5 = function(t6) {
          const e4 = r3 * Math.floor(t6 % (2 * (a3 + i3)) / (a3 + i3)), s4 = e4 && !n3 || !e4 && n3, o4 = Math.pow(-1, s4) * (t6 % (a3 + i3)) / i3 + s4;
          return Math.max(Math.min(o4, 1), 0);
        }, l4 = s3 * (a3 + i3) - a3;
        return o3 = e3 <= 0 ? Math.round(t5(1e-5)) : e3 < l4 ? t5(e3) : Math.round(t5(l4 - 1e-5)), o3;
      }
      const l3 = Math.floor(this.loops()), h3 = r3 && l3 % 2 == 0;
      return o3 = l3 + (h3 && !n3 || n3 && h3 ? t4 : 1 - t4), this.loops(o3);
    }
    progress(t4) {
      return null == t4 ? Math.min(1, this._time / this.duration()) : this.time(t4 * this.duration());
    }
    queue(t4, e3, i3, a3) {
      this._queue.push({ initialiser: t4 || Et2, runner: e3 || Et2, retarget: i3, isTransform: a3, initialised: false, finished: false });
      return this.timeline() && this.timeline()._continue(), this;
    }
    reset() {
      return this._reseted || (this.time(0), this._reseted = true), this;
    }
    reverse(t4) {
      return this._reverse = null == t4 ? !this._reverse : t4, this;
    }
    schedule(t4, e3, i3) {
      if (t4 instanceof Je2 || (i3 = e3, e3 = t4, t4 = this.timeline()), !t4) throw Error("Runner cannot be scheduled without timeline");
      return t4.schedule(this, e3, i3), this;
    }
    step(t4) {
      if (!this.enabled) return this;
      t4 = null == t4 ? 16 : t4, this._time += t4;
      const e3 = this.position(), i3 = this._lastPosition !== e3 && this._time >= 0;
      this._lastPosition = e3;
      const a3 = this.duration(), s3 = this._lastTime <= 0 && this._time > 0, r3 = this._lastTime < a3 && this._time >= a3;
      this._lastTime = this._time, s3 && this.fire("start", this);
      const n3 = this._isDeclarative;
      this.done = !n3 && !r3 && this._time >= a3, this._reseted = false;
      let o3 = false;
      return (i3 || n3) && (this._initialise(i3), this.transforms = new vt2(), o3 = this._run(n3 ? t4 : e3), this.fire("step", this)), this.done = this.done || o3 && n3, r3 && this.fire("finished", this), this;
    }
    time(t4) {
      if (null == t4) return this._time;
      const e3 = t4 - this._time;
      return this.step(e3), this;
    }
    timeline(t4) {
      return void 0 === t4 ? this._timeline : (this._timeline = t4, this);
    }
    unschedule() {
      const t4 = this.timeline();
      return t4 && t4.unschedule(this), this;
    }
    _initialise(t4) {
      if (t4 || this._isDeclarative) for (let e3 = 0, i3 = this._queue.length; e3 < i3; ++e3) {
        const i4 = this._queue[e3], a3 = this._isDeclarative || !i4.initialised && t4;
        t4 = !i4.finished, a3 && t4 && (i4.initialiser.call(this), i4.initialised = true);
      }
    }
    _rememberMorpher(t4, e3) {
      if (this._history[t4] = { morpher: e3, caller: this._queue[this._queue.length - 1] }, this._isDeclarative) {
        const t5 = this.timeline();
        t5 && t5.play();
      }
    }
    _run(t4) {
      let e3 = true;
      for (let i3 = 0, a3 = this._queue.length; i3 < a3; ++i3) {
        const a4 = this._queue[i3], s3 = a4.runner.call(this, t4);
        a4.finished = a4.finished || true === s3, e3 = e3 && a4.finished;
      }
      return e3;
    }
    _tryRetarget(t4, e3, i3) {
      if (this._history[t4]) {
        if (!this._history[t4].caller.initialised) {
          const e4 = this._queue.indexOf(this._history[t4].caller);
          return this._queue.splice(e4, 1), false;
        }
        this._history[t4].caller.retarget ? this._history[t4].caller.retarget.call(this, e3, i3) : this._history[t4].morpher.to(e3), this._history[t4].caller.finished = false;
        const a3 = this.timeline();
        return a3 && a3.play(), true;
      }
      return false;
    }
  };
  Qe2.id = 0;
  var Ke2 = class {
    constructor(t4 = new vt2(), e3 = -1, i3 = true) {
      this.transforms = t4, this.id = e3, this.done = i3;
    }
    clearTransformsFromQueue() {
    }
  };
  Q2([Qe2, Ke2], { mergeWith(t4) {
    return new Ke2(t4.transforms.lmultiply(this.transforms), t4.id);
  } });
  var ti2 = (t4, e3) => t4.lmultiplyO(e3);
  var ei2 = (t4) => t4.transforms;
  function ii2() {
    const t4 = this._transformationRunners.runners.map(ei2).reduce(ti2, new vt2());
    this.transform(t4), this._transformationRunners.merge(), 1 === this._transformationRunners.length() && (this._frameId = null);
  }
  var ai2 = class {
    constructor() {
      this.runners = [], this.ids = [];
    }
    add(t4) {
      if (this.runners.includes(t4)) return;
      const e3 = t4.id + 1;
      return this.runners.push(t4), this.ids.push(e3), this;
    }
    clearBefore(t4) {
      const e3 = this.ids.indexOf(t4 + 1) || 1;
      return this.ids.splice(0, e3, 0), this.runners.splice(0, e3, new Ke2()).forEach((t5) => t5.clearTransformsFromQueue()), this;
    }
    edit(t4, e3) {
      const i3 = this.ids.indexOf(t4 + 1);
      return this.ids.splice(i3, 1, t4 + 1), this.runners.splice(i3, 1, e3), this;
    }
    getByID(t4) {
      return this.runners[this.ids.indexOf(t4 + 1)];
    }
    length() {
      return this.ids.length;
    }
    merge() {
      let t4 = null;
      for (let e3 = 0; e3 < this.runners.length; ++e3) {
        const i3 = this.runners[e3];
        if (t4 && i3.done && t4.done && (!i3._timeline || !i3._timeline._runnerIds.includes(i3.id)) && (!t4._timeline || !t4._timeline._runnerIds.includes(t4.id))) {
          this.remove(i3.id);
          const a3 = i3.mergeWith(t4);
          this.edit(t4.id, a3), t4 = a3, --e3;
        } else t4 = i3;
      }
      return this;
    }
    remove(t4) {
      const e3 = this.ids.indexOf(t4 + 1);
      return this.ids.splice(e3, 1), this.runners.splice(e3, 1), this;
    }
  };
  A2({ Element: { animate(t4, e3, i3) {
    const a3 = Qe2.sanitise(t4, e3, i3), s3 = this.timeline();
    return new Qe2(a3.duration).loop(a3).element(this).timeline(s3.play()).schedule(a3.delay, a3.when);
  }, delay(t4, e3) {
    return this.animate(0, t4, e3);
  }, _clearTransformRunnersBefore(t4) {
    this._transformationRunners.clearBefore(t4.id);
  }, _currentTransform(t4) {
    return this._transformationRunners.runners.filter((e3) => e3.id <= t4.id).map(ei2).reduce(ti2, new vt2());
  }, _addRunner(t4) {
    this._transformationRunners.add(t4), qe2.cancelImmediate(this._frameId), this._frameId = qe2.immediate(ii2.bind(this));
  }, _prepareRunner() {
    null == this._frameId && (this._transformationRunners = new ai2().add(new Ke2(new vt2(this))));
  } } });
  Q2(Qe2, { attr(t4, e3) {
    return this.styleAttr("attr", t4, e3);
  }, css(t4, e3) {
    return this.styleAttr("css", t4, e3);
  }, styleAttr(t4, e3, i3) {
    if ("string" == typeof e3) return this.styleAttr(t4, { [e3]: i3 });
    let a3 = e3;
    if (this._tryRetarget(t4, a3)) return this;
    let s3 = new He2(this._stepper).to(a3), r3 = Object.keys(a3);
    return this.queue(function() {
      s3 = s3.from(this.element()[t4](r3));
    }, function(e4) {
      return this.element()[t4](s3.at(e4).valueOf()), s3.done();
    }, function(e4) {
      const i4 = Object.keys(e4), n3 = (o3 = r3, i4.filter((t5) => !o3.includes(t5)));
      var o3;
      if (n3.length) {
        const e5 = this.element()[t4](n3), i5 = new _e2(s3.from()).valueOf();
        Object.assign(i5, e5), s3.from(i5);
      }
      const l3 = new _e2(s3.to()).valueOf();
      Object.assign(l3, e4), s3.to(l3), r3 = i4, a3 = e4;
    }), this._rememberMorpher(t4, s3), this;
  }, zoom(t4, e3) {
    if (this._tryRetarget("zoom", t4, e3)) return this;
    let i3 = new He2(this._stepper).to(new _t2(t4));
    return this.queue(function() {
      i3 = i3.from(this.element().zoom());
    }, function(t5) {
      return this.element().zoom(i3.at(t5), e3), i3.done();
    }, function(t5, a3) {
      e3 = a3, i3.to(t5);
    }), this._rememberMorpher("zoom", i3), this;
  }, transform(t4, e3, i3) {
    if (e3 = t4.relative || e3, this._isDeclarative && !e3 && this._tryRetarget("transform", t4)) return this;
    const a3 = vt2.isMatrixLike(t4);
    i3 = null != t4.affine ? t4.affine : null != i3 ? i3 : !a3;
    const s3 = new He2(this._stepper).type(i3 ? Fe2 : vt2);
    let r3, n3, o3, l3, h3;
    return this.queue(function() {
      n3 = n3 || this.element(), r3 = r3 || T2(t4, n3), h3 = new vt2(e3 ? void 0 : n3), n3._addRunner(this), e3 || n3._clearTransformRunnersBefore(this);
    }, function(c3) {
      e3 || this.clearTransform();
      const { x: d3, y: u3 } = new bt2(r3).transform(n3._currentTransform(this));
      let g3 = new vt2({ ...t4, origin: [d3, u3] }), p3 = this._isDeclarative && o3 ? o3 : h3;
      if (i3) {
        g3 = g3.decompose(d3, u3), p3 = p3.decompose(d3, u3);
        const t5 = g3.rotate, e4 = p3.rotate, i4 = [t5 - 360, t5, t5 + 360], a4 = i4.map((t6) => Math.abs(t6 - e4)), s4 = Math.min(...a4), r4 = a4.indexOf(s4);
        g3.rotate = i4[r4];
      }
      e3 && (a3 || (g3.rotate = t4.rotate || 0), this._isDeclarative && l3 && (p3.rotate = l3)), s3.from(p3), s3.to(g3);
      const f3 = s3.at(c3);
      return l3 = f3.rotate, o3 = new vt2(f3), this.addTransform(o3), n3._addRunner(this), s3.done();
    }, function(e4) {
      (e4.origin || "center").toString() !== (t4.origin || "center").toString() && (r3 = T2(e4, n3)), t4 = { ...e4, origin: r3 };
    }, true), this._isDeclarative && this._rememberMorpher("transform", s3), this;
  }, x(t4) {
    return this._queueNumber("x", t4);
  }, y(t4) {
    return this._queueNumber("y", t4);
  }, ax(t4) {
    return this._queueNumber("ax", t4);
  }, ay(t4) {
    return this._queueNumber("ay", t4);
  }, dx(t4 = 0) {
    return this._queueNumberDelta("x", t4);
  }, dy(t4 = 0) {
    return this._queueNumberDelta("y", t4);
  }, dmove(t4, e3) {
    return this.dx(t4).dy(e3);
  }, _queueNumberDelta(t4, e3) {
    if (e3 = new _t2(e3), this._tryRetarget(t4, e3)) return this;
    const i3 = new He2(this._stepper).to(e3);
    let a3 = null;
    return this.queue(function() {
      a3 = this.element()[t4](), i3.from(a3), i3.to(a3 + e3);
    }, function(e4) {
      return this.element()[t4](i3.at(e4)), i3.done();
    }, function(t5) {
      i3.to(a3 + new _t2(t5));
    }), this._rememberMorpher(t4, i3), this;
  }, _queueObject(t4, e3) {
    if (this._tryRetarget(t4, e3)) return this;
    const i3 = new He2(this._stepper).to(e3);
    return this.queue(function() {
      i3.from(this.element()[t4]());
    }, function(e4) {
      return this.element()[t4](i3.at(e4)), i3.done();
    }), this._rememberMorpher(t4, i3), this;
  }, _queueNumber(t4, e3) {
    return this._queueObject(t4, new _t2(e3));
  }, cx(t4) {
    return this._queueNumber("cx", t4);
  }, cy(t4) {
    return this._queueNumber("cy", t4);
  }, move(t4, e3) {
    return this.x(t4).y(e3);
  }, amove(t4, e3) {
    return this.ax(t4).ay(e3);
  }, center(t4, e3) {
    return this.cx(t4).cy(e3);
  }, size(t4, e3) {
    let i3;
    return t4 && e3 || (i3 = this._element.bbox()), t4 || (t4 = i3.width / i3.height * e3), e3 || (e3 = i3.height / i3.width * t4), this.width(t4).height(e3);
  }, width(t4) {
    return this._queueNumber("width", t4);
  }, height(t4) {
    return this._queueNumber("height", t4);
  }, plot(t4, e3, i3, a3) {
    if (4 === arguments.length) return this.plot([t4, e3, i3, a3]);
    if (this._tryRetarget("plot", t4)) return this;
    const s3 = new He2(this._stepper).type(this._element.MorphArray).to(t4);
    return this.queue(function() {
      s3.from(this._element.array());
    }, function(t5) {
      return this._element.plot(s3.at(t5)), s3.done();
    }), this._rememberMorpher("plot", s3), this;
  }, leading(t4) {
    return this._queueNumber("leading", t4);
  }, viewbox(t4, e3, i3, a3) {
    return this._queueObject("viewbox", new kt2(t4, e3, i3, a3));
  }, update(t4) {
    return "object" != typeof t4 ? this.update({ offset: arguments[0], color: arguments[1], opacity: arguments[2] }) : (null != t4.opacity && this.attr("stop-opacity", t4.opacity), null != t4.color && this.attr("stop-color", t4.color), null != t4.offset && this.attr("offset", t4.offset), this);
  } }), Q2(Qe2, { rx: Zt2, ry: $t2, from: ne2, to: oe2 }), q2(Qe2, "Runner");
  var si2 = class extends Vt2 {
    constructor(t4, e3 = t4) {
      super(G2("svg", t4), e3), this.namespace();
    }
    defs() {
      return this.isRoot() ? V2(this.node.querySelector("defs")) || this.put(new Ut2()) : this.root().defs();
    }
    isRoot() {
      return !this.node.parentNode || !(this.node.parentNode instanceof O2.window.SVGElement) && "#document-fragment" !== this.node.parentNode.nodeName;
    }
    namespace() {
      return this.isRoot() ? this.attr({ xmlns: E2, version: "1.1" }).attr("xmlns:xlink", H2, Y2) : this.root().namespace();
    }
    removeNamespace() {
      return this.attr({ xmlns: null, version: null }).attr("xmlns:xlink", null, Y2).attr("xmlns:svgjs", null, Y2);
    }
    root() {
      return this.isRoot() ? this : super.root();
    }
  };
  A2({ Container: { nested: K2(function() {
    return this.put(new si2());
  }) } }), q2(si2, "Svg", true);
  var ri2 = class extends Vt2 {
    constructor(t4, e3 = t4) {
      super(G2("symbol", t4), e3);
    }
  };
  A2({ Container: { symbol: K2(function() {
    return this.put(new ri2());
  }) } }), q2(ri2, "Symbol");
  var ni2 = Object.freeze({ __proto__: null, amove: function(t4, e3) {
    return this.ax(t4).ay(e3);
  }, ax: function(t4) {
    return this.attr("x", t4);
  }, ay: function(t4) {
    return this.attr("y", t4);
  }, build: function(t4) {
    return this._build = !!t4, this;
  }, center: function(t4, e3, i3 = this.bbox()) {
    return this.cx(t4, i3).cy(e3, i3);
  }, cx: function(t4, e3 = this.bbox()) {
    return null == t4 ? e3.cx : this.attr("x", this.attr("x") + t4 - e3.cx);
  }, cy: function(t4, e3 = this.bbox()) {
    return null == t4 ? e3.cy : this.attr("y", this.attr("y") + t4 - e3.cy);
  }, length: function() {
    return this.node.getComputedTextLength();
  }, move: function(t4, e3, i3 = this.bbox()) {
    return this.x(t4, i3).y(e3, i3);
  }, plain: function(t4) {
    return false === this._build && this.clear(), this.node.appendChild(O2.document.createTextNode(t4)), this;
  }, x: function(t4, e3 = this.bbox()) {
    return null == t4 ? e3.x : this.attr("x", this.attr("x") + t4 - e3.x);
  }, y: function(t4, e3 = this.bbox()) {
    return null == t4 ? e3.y : this.attr("y", this.attr("y") + t4 - e3.y);
  } });
  var oi2 = class extends qt2 {
    constructor(t4, e3 = t4) {
      super(G2("text", t4), e3), this.dom.leading = this.dom.leading ?? new _t2(1.3), this._rebuild = true, this._build = false;
    }
    leading(t4) {
      return null == t4 ? this.dom.leading : (this.dom.leading = new _t2(t4), this.rebuild());
    }
    rebuild(t4) {
      if ("boolean" == typeof t4 && (this._rebuild = t4), this._rebuild) {
        const t5 = this;
        let e3 = 0;
        const i3 = this.dom.leading;
        this.each(function(a3) {
          if (X2(this.node)) return;
          const s3 = O2.window.getComputedStyle(this.node).getPropertyValue("font-size"), r3 = i3 * new _t2(s3);
          this.dom.newLined && (this.attr("x", t5.attr("x")), "\n" === this.text() ? e3 += r3 : (this.attr("dy", a3 ? r3 + e3 : 0), e3 = 0));
        }), this.fire("rebuild");
      }
      return this;
    }
    setData(t4) {
      return this.dom = t4, this.dom.leading = new _t2(t4.leading || 1.3), this;
    }
    writeDataToDom() {
      return R2(this, this.dom, { leading: 1.3 }), this;
    }
    text(t4) {
      if (void 0 === t4) {
        const e3 = this.node.childNodes;
        let i3 = 0;
        t4 = "";
        for (let a3 = 0, s3 = e3.length; a3 < s3; ++a3) "textPath" === e3[a3].nodeName || X2(e3[a3]) ? 0 === a3 && (i3 = a3 + 1) : (a3 !== i3 && 3 !== e3[a3].nodeType && true === V2(e3[a3]).dom.newLined && (t4 += "\n"), t4 += e3[a3].textContent);
        return t4;
      }
      if (this.clear().build(true), "function" == typeof t4) t4.call(this, this);
      else for (let e3 = 0, i3 = (t4 = (t4 + "").split("\n")).length; e3 < i3; e3++) this.newLine(t4[e3]);
      return this.build(false).rebuild();
    }
  };
  Q2(oi2, ni2), A2({ Container: { text: K2(function(t4 = "") {
    return this.put(new oi2()).text(t4);
  }), plain: K2(function(t4 = "") {
    return this.put(new oi2()).plain(t4);
  }) } }), q2(oi2, "Text");
  var li2 = class extends qt2 {
    constructor(t4, e3 = t4) {
      super(G2("tspan", t4), e3), this._build = false;
    }
    dx(t4) {
      return this.attr("dx", t4);
    }
    dy(t4) {
      return this.attr("dy", t4);
    }
    newLine() {
      this.dom.newLined = true;
      const t4 = this.parent();
      if (!(t4 instanceof oi2)) return this;
      const e3 = t4.index(this), i3 = O2.window.getComputedStyle(this.node).getPropertyValue("font-size"), a3 = t4.dom.leading * new _t2(i3);
      return this.dy(e3 ? a3 : 0).attr("x", t4.x());
    }
    text(t4) {
      return null == t4 ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t4 ? (this.clear().build(true), t4.call(this, this), this.build(false)) : this.plain(t4), this);
    }
  };
  Q2(li2, ni2), A2({ Tspan: { tspan: K2(function(t4 = "") {
    const e3 = new li2();
    return this._build || this.clear(), this.put(e3).text(t4);
  }) }, Text: { newLine: function(t4 = "") {
    return this.tspan(t4).newLine();
  } } }), q2(li2, "Tspan");
  var hi2 = class extends qt2 {
    constructor(t4, e3 = t4) {
      super(G2("circle", t4), e3);
    }
    radius(t4) {
      return this.attr("r", t4);
    }
    rx(t4) {
      return this.attr("r", t4);
    }
    ry(t4) {
      return this.rx(t4);
    }
    size(t4) {
      return this.radius(new _t2(t4).divide(2));
    }
  };
  Q2(hi2, { x: Jt2, y: Qt2, cx: Kt2, cy: te2, width: ee2, height: ie2 }), A2({ Container: { circle: K2(function(t4 = 0) {
    return this.put(new hi2()).size(t4).move(0, 0);
  }) } }), q2(hi2, "Circle");
  var ci2 = class extends Vt2 {
    constructor(t4, e3 = t4) {
      super(G2("clipPath", t4), e3);
    }
    remove() {
      return this.targets().forEach(function(t4) {
        t4.unclip();
      }), super.remove();
    }
    targets() {
      return Lt2("svg [clip-path*=" + this.id() + "]");
    }
  };
  A2({ Container: { clip: K2(function() {
    return this.defs().put(new ci2());
  }) }, Element: { clipper() {
    return this.reference("clip-path");
  }, clipWith(t4) {
    const e3 = t4 instanceof ci2 ? t4 : this.parent().clip().add(t4);
    return this.attr("clip-path", "url(#" + e3.id() + ")");
  }, unclip() {
    return this.attr("clip-path", null);
  } } }), q2(ci2, "ClipPath");
  var di2 = class extends Gt2 {
    constructor(t4, e3 = t4) {
      super(G2("foreignObject", t4), e3);
    }
  };
  A2({ Container: { foreignObject: K2(function(t4, e3) {
    return this.put(new di2()).size(t4, e3);
  }) } }), q2(di2, "ForeignObject");
  var ui2 = Object.freeze({ __proto__: null, dmove: function(t4, e3) {
    return this.children().forEach((i3) => {
      let a3;
      try {
        a3 = i3.node instanceof F2().SVGSVGElement ? new kt2(i3.attr(["x", "y", "width", "height"])) : i3.bbox();
      } catch (t5) {
        return;
      }
      const s3 = new vt2(i3), r3 = s3.translate(t4, e3).transform(s3.inverse()), n3 = new bt2(a3.x, a3.y).transform(r3);
      i3.move(n3.x, n3.y);
    }), this;
  }, dx: function(t4) {
    return this.dmove(t4, 0);
  }, dy: function(t4) {
    return this.dmove(0, t4);
  }, height: function(t4, e3 = this.bbox()) {
    return null == t4 ? e3.height : this.size(e3.width, t4, e3);
  }, move: function(t4 = 0, e3 = 0, i3 = this.bbox()) {
    const a3 = t4 - i3.x, s3 = e3 - i3.y;
    return this.dmove(a3, s3);
  }, size: function(t4, e3, i3 = this.bbox()) {
    const a3 = I2(this, t4, e3, i3), s3 = a3.width / i3.width, r3 = a3.height / i3.height;
    return this.children().forEach((t5) => {
      const e4 = new bt2(i3).transform(new vt2(t5).inverse());
      t5.scale(s3, r3, e4.x, e4.y);
    }), this;
  }, width: function(t4, e3 = this.bbox()) {
    return null == t4 ? e3.width : this.size(t4, e3.height, e3);
  }, x: function(t4, e3 = this.bbox()) {
    return null == t4 ? e3.x : this.move(t4, e3.y, e3);
  }, y: function(t4, e3 = this.bbox()) {
    return null == t4 ? e3.y : this.move(e3.x, t4, e3);
  } });
  var gi2 = class extends Vt2 {
    constructor(t4, e3 = t4) {
      super(G2("g", t4), e3);
    }
  };
  Q2(gi2, ui2), A2({ Container: { group: K2(function() {
    return this.put(new gi2());
  }) } }), q2(gi2, "G");
  var pi2 = class extends Vt2 {
    constructor(t4, e3 = t4) {
      super(G2("a", t4), e3);
    }
    target(t4) {
      return this.attr("target", t4);
    }
    to(t4) {
      return this.attr("href", t4, H2);
    }
  };
  Q2(pi2, ui2), A2({ Container: { link: K2(function(t4) {
    return this.put(new pi2()).to(t4);
  }) }, Element: { unlink() {
    const t4 = this.linker();
    if (!t4) return this;
    const e3 = t4.parent();
    if (!e3) return this.remove();
    const i3 = e3.index(t4);
    return e3.add(this, i3), t4.remove(), this;
  }, linkTo(t4) {
    let e3 = this.linker();
    return e3 || (e3 = new pi2(), this.wrap(e3)), "function" == typeof t4 ? t4.call(e3, e3) : e3.to(t4), this;
  }, linker() {
    const t4 = this.parent();
    return t4 && "a" === t4.node.nodeName.toLowerCase() ? t4 : null;
  } } }), q2(pi2, "A");
  var fi2 = class extends Vt2 {
    constructor(t4, e3 = t4) {
      super(G2("mask", t4), e3);
    }
    remove() {
      return this.targets().forEach(function(t4) {
        t4.unmask();
      }), super.remove();
    }
    targets() {
      return Lt2("svg [mask*=" + this.id() + "]");
    }
  };
  A2({ Container: { mask: K2(function() {
    return this.defs().put(new fi2());
  }) }, Element: { masker() {
    return this.reference("mask");
  }, maskWith(t4) {
    const e3 = t4 instanceof fi2 ? t4 : this.parent().mask().add(t4);
    return this.attr("mask", "url(#" + e3.id() + ")");
  }, unmask() {
    return this.attr("mask", null);
  } } }), q2(fi2, "Mask");
  var xi2 = class extends Gt2 {
    constructor(t4, e3 = t4) {
      super(G2("stop", t4), e3);
    }
    update(t4) {
      return ("number" == typeof t4 || t4 instanceof _t2) && (t4 = { offset: arguments[0], color: arguments[1], opacity: arguments[2] }), null != t4.opacity && this.attr("stop-opacity", t4.opacity), null != t4.color && this.attr("stop-color", t4.color), null != t4.offset && this.attr("offset", new _t2(t4.offset)), this;
    }
  };
  A2({ Gradient: { stop: function(t4, e3, i3) {
    return this.put(new xi2()).update(t4, e3, i3);
  } } }), q2(xi2, "Stop");
  var bi2 = class extends Gt2 {
    constructor(t4, e3 = t4) {
      super(G2("style", t4), e3);
    }
    addText(t4 = "") {
      return this.node.textContent += t4, this;
    }
    font(t4, e3, i3 = {}) {
      return this.rule("@font-face", { fontFamily: t4, src: e3, ...i3 });
    }
    rule(t4, e3) {
      return this.addText(function(t5, e4) {
        if (!t5) return "";
        if (!e4) return t5;
        let i3 = t5 + "{";
        for (const t6 in e4) i3 += t6.replace(/([A-Z])/g, function(t7, e5) {
          return "-" + e5.toLowerCase();
        }) + ":" + e4[t6] + ";";
        return i3 += "}", i3;
      }(t4, e3));
    }
  };
  A2("Dom", { style(t4, e3) {
    return this.put(new bi2()).rule(t4, e3);
  }, fontface(t4, e3, i3) {
    return this.put(new bi2()).font(t4, e3, i3);
  } }), q2(bi2, "Style");
  var mi2 = class extends oi2 {
    constructor(t4, e3 = t4) {
      super(G2("textPath", t4), e3);
    }
    array() {
      const t4 = this.track();
      return t4 ? t4.array() : null;
    }
    plot(t4) {
      const e3 = this.track();
      let i3 = null;
      return e3 && (i3 = e3.plot(t4)), null == t4 ? i3 : this;
    }
    track() {
      return this.reference("href");
    }
  };
  A2({ Container: { textPath: K2(function(t4, e3) {
    return t4 instanceof oi2 || (t4 = this.text(t4)), t4.path(e3);
  }) }, Text: { path: K2(function(t4, e3 = true) {
    const i3 = new mi2();
    let a3;
    if (t4 instanceof We2 || (t4 = this.defs().path(t4)), i3.attr("href", "#" + t4, H2), e3) for (; a3 = this.node.firstChild; ) i3.node.appendChild(a3);
    return this.put(i3);
  }), textPath() {
    return this.findOne("textPath");
  } }, Path: { text: K2(function(t4) {
    return t4 instanceof oi2 || (t4 = new oi2().addTo(this.parent()).text(t4)), t4.path(this);
  }), targets() {
    return Lt2("svg textPath").filter((t4) => (t4.attr("href") || "").includes(this.id()));
  } } }), mi2.prototype.MorphArray = Ee2, q2(mi2, "TextPath");
  var vi2 = class extends qt2 {
    constructor(t4, e3 = t4) {
      super(G2("use", t4), e3);
    }
    use(t4, e3) {
      return this.attr("href", (e3 || "") + "#" + t4, H2);
    }
  };
  A2({ Container: { use: K2(function(t4, e3) {
    return this.put(new vi2()).use(t4, e3);
  }) } }), q2(vi2, "Use");
  var yi2 = B2;
  Q2([si2, ri2, de2, ce2, be2], C2("viewbox")), Q2([xe2, je2, Ge2, We2], C2("marker")), Q2(oi2, C2("Text")), Q2(We2, C2("Path")), Q2(Ut2, C2("Defs")), Q2([oi2, li2], C2("Tspan")), Q2([Ve2, se2, he2, Qe2], C2("radius")), Q2(Rt2, C2("EventTarget")), Q2(Bt2, C2("Dom")), Q2(Gt2, C2("Element")), Q2(qt2, C2("Shape")), Q2([Vt2, re2], C2("Container")), Q2(he2, C2("Gradient")), Q2(Qe2, C2("Runner")), Ct2.extend([...new Set(k2)]), function(t4 = []) {
    Ne2.push(...[].concat(t4));
  }([_t2, xt2, kt2, vt2, Dt2, ge2, Ee2, bt2]), Q2(Ne2, { to(t4) {
    return new He2().type(this.constructor).from(this.toArray()).to(t4);
  }, fromArray(t4) {
    return this.init(t4), this;
  }, toConsumable() {
    return this.toArray();
  }, morph(t4, e3, i3, a3, s3) {
    return this.fromArray(t4.map(function(t5, r3) {
      return a3.step(t5, e3[r3], i3, s3[r3], s3);
    }));
  } });
  var wi2 = class extends Gt2 {
    constructor(t4) {
      super(G2("filter", t4), t4), this.$source = "SourceGraphic", this.$sourceAlpha = "SourceAlpha", this.$background = "BackgroundImage", this.$backgroundAlpha = "BackgroundAlpha", this.$fill = "FillPaint", this.$stroke = "StrokePaint", this.$autoSetIn = true;
    }
    put(t4, e3) {
      return !(t4 = super.put(t4, e3)).attr("in") && this.$autoSetIn && t4.attr("in", this.$source), t4.attr("result") || t4.attr("result", t4.id()), t4;
    }
    remove() {
      return this.targets().each("unfilter"), super.remove();
    }
    targets() {
      return Lt2('svg [filter*="' + this.id() + '"]');
    }
    toString() {
      return "url(#" + this.id() + ")";
    }
  };
  var ki2 = class extends Gt2 {
    constructor(t4, e3) {
      super(t4, e3), this.result(this.id());
    }
    in(t4) {
      if (null == t4) {
        const t5 = this.attr("in");
        return this.parent() && this.parent().find(`[result="${t5}"]`)[0] || t5;
      }
      return this.attr("in", t4);
    }
    result(t4) {
      return this.attr("result", t4);
    }
    toString() {
      return this.result();
    }
  };
  var Ai2 = (t4) => function(...e3) {
    for (let i3 = t4.length; i3--; ) null != e3[i3] && this.attr(t4[i3], e3[i3]);
  };
  var Ci2 = { blend: Ai2(["in", "in2", "mode"]), colorMatrix: Ai2(["type", "values"]), composite: Ai2(["in", "in2", "operator"]), convolveMatrix: function(t4) {
    t4 = new Dt2(t4).toString(), this.attr({ order: Math.sqrt(t4.split(" ").length), kernelMatrix: t4 });
  }, diffuseLighting: Ai2(["surfaceScale", "lightingColor", "diffuseConstant", "kernelUnitLength"]), displacementMap: Ai2(["in", "in2", "scale", "xChannelSelector", "yChannelSelector"]), dropShadow: Ai2(["in", "dx", "dy", "stdDeviation"]), flood: Ai2(["flood-color", "flood-opacity"]), gaussianBlur: function(t4 = 0, e3 = t4) {
    this.attr("stdDeviation", t4 + " " + e3);
  }, image: function(t4) {
    this.attr("href", t4, H2);
  }, morphology: Ai2(["operator", "radius"]), offset: Ai2(["dx", "dy"]), specularLighting: Ai2(["surfaceScale", "lightingColor", "diffuseConstant", "specularExponent", "kernelUnitLength"]), tile: Ai2([]), turbulence: Ai2(["baseFrequency", "numOctaves", "seed", "stitchTiles", "type"]) };
  ["blend", "colorMatrix", "componentTransfer", "composite", "convolveMatrix", "diffuseLighting", "displacementMap", "dropShadow", "flood", "gaussianBlur", "image", "merge", "morphology", "offset", "specularLighting", "tile", "turbulence"].forEach((t4) => {
    const e3 = P2(t4), i3 = Ci2[t4];
    wi2[e3 + "Effect"] = class extends ki2 {
      constructor(t5) {
        super(G2("fe" + e3, t5), t5);
      }
      update(t5) {
        return i3.apply(this, t5), this;
      }
    }, wi2.prototype[t4] = K2(function(t5, ...i4) {
      const a3 = new wi2[e3 + "Effect"]();
      return null == t5 ? this.put(a3) : ("function" == typeof t5 ? t5.call(a3, a3) : i4.unshift(t5), this.put(a3).update(i4));
    });
  }), Q2(wi2, { merge(t4) {
    const e3 = this.put(new wi2.MergeEffect());
    if ("function" == typeof t4) return t4.call(e3, e3), e3;
    return (t4 instanceof Array ? t4 : [...arguments]).forEach((t5) => {
      t5 instanceof wi2.MergeNode ? e3.put(t5) : e3.mergeNode(t5);
    }), e3;
  }, componentTransfer(t4 = {}) {
    const e3 = this.put(new wi2.ComponentTransferEffect());
    if ("function" == typeof t4) return t4.call(e3, e3), e3;
    if (!(t4.r || t4.g || t4.b || t4.a)) {
      t4 = { r: t4, g: t4, b: t4, a: t4 };
    }
    for (const i3 in t4) e3.add(new wi2["Func" + i3.toUpperCase()](t4[i3]));
    return e3;
  } });
  ["distantLight", "pointLight", "spotLight", "mergeNode", "FuncR", "FuncG", "FuncB", "FuncA"].forEach((t4) => {
    const e3 = P2(t4);
    wi2[e3] = class extends ki2 {
      constructor(t5) {
        super(G2("fe" + e3, t5), t5);
      }
    };
  });
  ["funcR", "funcG", "funcB", "funcA"].forEach(function(t4) {
    const e3 = wi2[P2(t4)], i3 = K2(function() {
      return this.put(new e3());
    });
    wi2.ComponentTransferEffect.prototype[t4] = i3;
  });
  ["distantLight", "pointLight", "spotLight"].forEach((t4) => {
    const e3 = wi2[P2(t4)], i3 = K2(function() {
      return this.put(new e3());
    });
    wi2.DiffuseLightingEffect.prototype[t4] = i3, wi2.SpecularLightingEffect.prototype[t4] = i3;
  }), Q2(wi2.MergeEffect, { mergeNode(t4) {
    return this.put(new wi2.MergeNode()).attr("in", t4);
  } }), Q2(Ut2, { filter: function(t4) {
    const e3 = this.put(new wi2());
    return "function" == typeof t4 && t4.call(e3, e3), e3;
  } }), Q2(Vt2, { filter: function(t4) {
    return this.defs().filter(t4);
  } }), Q2(Gt2, { filterWith: function(t4) {
    const e3 = t4 instanceof wi2 ? t4 : this.defs().filter(t4);
    return this.attr("filter", e3);
  }, unfilter: function(t4) {
    return this.attr("filter", null);
  }, filterer() {
    return this.reference("filter");
  } });
  var Si2 = { blend: function(t4, e3) {
    return this.parent() && this.parent().blend(this, t4, e3);
  }, colorMatrix: function(t4, e3) {
    return this.parent() && this.parent().colorMatrix(t4, e3).in(this);
  }, componentTransfer: function(t4) {
    return this.parent() && this.parent().componentTransfer(t4).in(this);
  }, composite: function(t4, e3) {
    return this.parent() && this.parent().composite(this, t4, e3);
  }, convolveMatrix: function(t4) {
    return this.parent() && this.parent().convolveMatrix(t4).in(this);
  }, diffuseLighting: function(t4, e3, i3, a3) {
    return this.parent() && this.parent().diffuseLighting(t4, i3, a3).in(this);
  }, displacementMap: function(t4, e3, i3, a3) {
    return this.parent() && this.parent().displacementMap(this, t4, e3, i3, a3);
  }, dropShadow: function(t4, e3, i3) {
    return this.parent() && this.parent().dropShadow(this, t4, e3, i3).in(this);
  }, flood: function(t4, e3) {
    return this.parent() && this.parent().flood(t4, e3);
  }, gaussianBlur: function(t4, e3) {
    return this.parent() && this.parent().gaussianBlur(t4, e3).in(this);
  }, image: function(t4) {
    return this.parent() && this.parent().image(t4);
  }, merge: function(t4) {
    return t4 = t4 instanceof Array ? t4 : [...t4], this.parent() && this.parent().merge(this, ...t4);
  }, morphology: function(t4, e3) {
    return this.parent() && this.parent().morphology(t4, e3).in(this);
  }, offset: function(t4, e3) {
    return this.parent() && this.parent().offset(t4, e3).in(this);
  }, specularLighting: function(t4, e3, i3, a3, s3) {
    return this.parent() && this.parent().specularLighting(t4, i3, a3, s3).in(this);
  }, tile: function() {
    return this.parent() && this.parent().tile().in(this);
  }, turbulence: function(t4, e3, i3, a3, s3) {
    return this.parent() && this.parent().turbulence(t4, e3, i3, a3, s3).in(this);
  } };
  Q2(ki2, Si2), Q2(wi2.MergeEffect, { in: function(t4) {
    return t4 instanceof wi2.MergeNode ? this.add(t4, 0) : this.add(new wi2.MergeNode().in(t4), 0), this;
  } }), Q2([wi2.CompositeEffect, wi2.BlendEffect, wi2.DisplacementMapEffect], { in2: function(t4) {
    if (null == t4) {
      const t5 = this.attr("in2");
      return this.parent() && this.parent().find(`[result="${t5}"]`)[0] || t5;
    }
    return this.attr("in2", t4);
  } }), wi2.filter = { sepiatone: [0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334, 0.111, 0, 0, 0, 0, 0, 1, 0] };
  var Li2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "getDefaultFilter", value: function(t5, e3) {
      var i3 = this.w;
      t5.unfilter(true), new wi2().size("120%", "180%", "-5%", "-40%"), i3.config.chart.dropShadow.enabled && this.dropShadow(t5, i3.config.chart.dropShadow, e3);
    } }, { key: "applyFilter", value: function(t5, e3, i3) {
      var a3, s3 = this, r3 = this.w;
      if (t5.unfilter(true), "none" !== i3) {
        var n3, o3, l3 = r3.config.chart.dropShadow, h3 = "lighten" === i3 ? 2 : 0.3;
        if (t5.filterWith(function(t6) {
          t6.colorMatrix({ type: "matrix", values: "\n          ".concat(h3, " 0 0 0 0\n          0 ").concat(h3, " 0 0 0\n          0 0 ").concat(h3, " 0 0\n          0 0 0 1 0\n        "), in: "SourceGraphic", result: "brightness" }), l3.enabled && s3.addShadow(t6, e3, l3, "brightness");
        }), !l3.noUserSpaceOnUse) null === (n3 = t5.filterer()) || void 0 === n3 || null === (o3 = n3.node) || void 0 === o3 || o3.setAttribute("filterUnits", "userSpaceOnUse");
        this._scaleFilterSize(null === (a3 = t5.filterer()) || void 0 === a3 ? void 0 : a3.node);
      } else this.getDefaultFilter(t5, e3);
    } }, { key: "addShadow", value: function(t5, e3, i3, a3) {
      var s3, r3 = this.w, n3 = i3.blur, o3 = i3.top, l3 = i3.left, h3 = i3.color, c3 = i3.opacity;
      if (h3 = Array.isArray(h3) ? h3[e3] : h3, (null === (s3 = r3.config.chart.dropShadow.enabledOnSeries) || void 0 === s3 ? void 0 : s3.length) > 0 && -1 === r3.config.chart.dropShadow.enabledOnSeries.indexOf(e3)) return t5;
      t5.offset({ in: a3, dx: l3, dy: o3, result: "offset" }), t5.gaussianBlur({ in: "offset", stdDeviation: n3, result: "blur" }), t5.flood({ "flood-color": h3, "flood-opacity": c3, result: "flood" }), t5.composite({ in: "flood", in2: "blur", operator: "in", result: "shadow" }), t5.merge(["shadow", a3]);
    } }, { key: "dropShadow", value: function(t5, e3) {
      var i3, a3, s3, r3, n3, o3 = this, l3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, h3 = this.w;
      if (t5.unfilter(true), v2.isMsEdge() && "radialBar" === h3.config.chart.type) return t5;
      if ((null === (i3 = h3.config.chart.dropShadow.enabledOnSeries) || void 0 === i3 ? void 0 : i3.length) > 0 && -1 === (null === (s3 = h3.config.chart.dropShadow.enabledOnSeries) || void 0 === s3 ? void 0 : s3.indexOf(l3))) return t5;
      (t5.filterWith(function(t6) {
        o3.addShadow(t6, l3, e3, "SourceGraphic");
      }), e3.noUserSpaceOnUse) || (null === (r3 = t5.filterer()) || void 0 === r3 || null === (n3 = r3.node) || void 0 === n3 || n3.setAttribute("filterUnits", "userSpaceOnUse"));
      return this._scaleFilterSize(null === (a3 = t5.filterer()) || void 0 === a3 ? void 0 : a3.node), t5;
    } }, { key: "setSelectionFilter", value: function(t5, e3, i3) {
      var a3 = this.w;
      if (void 0 !== a3.globals.selectedDataPoints[e3] && a3.globals.selectedDataPoints[e3].indexOf(i3) > -1) {
        t5.node.setAttribute("selected", true);
        var s3 = a3.config.states.active.filter;
        "none" !== s3 && this.applyFilter(t5, e3, s3.type);
      }
    } }, { key: "_scaleFilterSize", value: function(t5) {
      if (t5) {
        !function(e3) {
          for (var i3 in e3) e3.hasOwnProperty(i3) && t5.setAttribute(i3, e3[i3]);
        }({ width: "200%", height: "200%", x: "-50%", y: "-50%" });
      }
    } }]), t4;
  }();
  var Mi2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "roundPathCorners", value: function(t5, e3) {
      function i3(t6, e4, i4) {
        var s4 = e4.x - t6.x, r4 = e4.y - t6.y, n4 = Math.sqrt(s4 * s4 + r4 * r4);
        return a3(t6, e4, Math.min(1, i4 / n4));
      }
      function a3(t6, e4, i4) {
        return { x: t6.x + (e4.x - t6.x) * i4, y: t6.y + (e4.y - t6.y) * i4 };
      }
      function s3(t6, e4) {
        t6.length > 2 && (t6[t6.length - 2] = e4.x, t6[t6.length - 1] = e4.y);
      }
      function r3(t6) {
        return { x: parseFloat(t6[t6.length - 2]), y: parseFloat(t6[t6.length - 1]) };
      }
      t5.indexOf("NaN") > -1 && (t5 = "");
      var n3 = t5.split(/[,\s]/).reduce(function(t6, e4) {
        var i4 = e4.match(/^([a-zA-Z])(.+)/);
        return i4 ? (t6.push(i4[1]), t6.push(i4[2])) : t6.push(e4), t6;
      }, []).reduce(function(t6, e4) {
        return parseFloat(e4) == e4 && t6.length ? t6[t6.length - 1].push(e4) : t6.push([e4]), t6;
      }, []), o3 = [];
      if (n3.length > 1) {
        var l3 = r3(n3[0]), h3 = null;
        "Z" == n3[n3.length - 1][0] && n3[0].length > 2 && (h3 = ["L", l3.x, l3.y], n3[n3.length - 1] = h3), o3.push(n3[0]);
        for (var c3 = 1; c3 < n3.length; c3++) {
          var d3 = o3[o3.length - 1], u3 = n3[c3], g3 = u3 == h3 ? n3[1] : n3[c3 + 1];
          if (g3 && d3 && d3.length > 2 && "L" == u3[0] && g3.length > 2 && "L" == g3[0]) {
            var p3, f3, x3 = r3(d3), b3 = r3(u3), m3 = r3(g3);
            p3 = i3(b3, x3, e3), f3 = i3(b3, m3, e3), s3(u3, p3), u3.origPoint = b3, o3.push(u3);
            var v3 = a3(p3, b3, 0.5), y3 = a3(b3, f3, 0.5), w3 = ["C", v3.x, v3.y, y3.x, y3.y, f3.x, f3.y];
            w3.origPoint = b3, o3.push(w3);
          } else o3.push(u3);
        }
        if (h3) {
          var k3 = r3(o3[o3.length - 1]);
          o3.push(["Z"]), s3(o3[0], k3);
        }
      } else o3 = n3;
      return o3.reduce(function(t6, e4) {
        return t6 + e4.join(" ") + " ";
      }, "");
    } }, { key: "drawLine", value: function(t5, e3, i3, a3) {
      var s3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8", r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, n3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, o3 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "butt";
      return this.w.globals.dom.Paper.line().attr({ x1: t5, y1: e3, x2: i3, y2: a3, stroke: s3, "stroke-dasharray": r3, "stroke-width": n3, "stroke-linecap": o3 });
    } }, { key: "drawRect", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe", n3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, o3 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l3 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h3 = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, c3 = this.w.globals.dom.Paper.rect();
      return c3.attr({ x: t5, y: e3, width: i3 > 0 ? i3 : 0, height: a3 > 0 ? a3 : 0, rx: s3, ry: s3, opacity: n3, "stroke-width": null !== o3 ? o3 : 0, stroke: null !== l3 ? l3 : "none", "stroke-dasharray": h3 }), c3.node.setAttribute("fill", r3), c3;
    } }, { key: "drawPolygon", value: function(t5) {
      var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1", i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none";
      return this.w.globals.dom.Paper.polygon(t5).attr({ fill: a3, stroke: e3, "stroke-width": i3 });
    } }, { key: "drawCircle", value: function(t5) {
      var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
      t5 < 0 && (t5 = 0);
      var i3 = this.w.globals.dom.Paper.circle(2 * t5);
      return null !== e3 && i3.attr(e3), i3;
    } }, { key: "drawPath", value: function(t5) {
      var e3 = t5.d, i3 = void 0 === e3 ? "" : e3, a3 = t5.stroke, s3 = void 0 === a3 ? "#a8a8a8" : a3, r3 = t5.strokeWidth, n3 = void 0 === r3 ? 1 : r3, o3 = t5.fill, l3 = t5.fillOpacity, h3 = void 0 === l3 ? 1 : l3, c3 = t5.strokeOpacity, d3 = void 0 === c3 ? 1 : c3, u3 = t5.classes, g3 = t5.strokeLinecap, p3 = void 0 === g3 ? null : g3, f3 = t5.strokeDashArray, x3 = void 0 === f3 ? 0 : f3, b3 = this.w;
      return null === p3 && (p3 = b3.config.stroke.lineCap), (i3.indexOf("undefined") > -1 || i3.indexOf("NaN") > -1) && (i3 = "M 0 ".concat(b3.globals.gridHeight)), b3.globals.dom.Paper.path(i3).attr({ fill: o3, "fill-opacity": h3, stroke: s3, "stroke-opacity": d3, "stroke-linecap": p3, "stroke-width": n3, "stroke-dasharray": x3, class: u3 });
    } }, { key: "group", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e3 = this.w.globals.dom.Paper.group();
      return null !== t5 && e3.attr(t5), e3;
    } }, { key: "move", value: function(t5, e3) {
      var i3 = ["M", t5, e3].join(" ");
      return i3;
    } }, { key: "line", value: function(t5, e3) {
      var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = null;
      return null === i3 ? a3 = [" L", t5, e3].join(" ") : "H" === i3 ? a3 = [" H", t5].join(" ") : "V" === i3 && (a3 = [" V", e3].join(" ")), a3;
    } }, { key: "curve", value: function(t5, e3, i3, a3, s3, r3) {
      var n3 = ["C", t5, e3, i3, a3, s3, r3].join(" ");
      return n3;
    } }, { key: "quadraticCurve", value: function(t5, e3, i3, a3) {
      return ["Q", t5, e3, i3, a3].join(" ");
    } }, { key: "arc", value: function(t5, e3, i3, a3, s3, r3, n3) {
      var o3 = "A";
      arguments.length > 7 && void 0 !== arguments[7] && arguments[7] && (o3 = "a");
      var l3 = [o3, t5, e3, i3, a3, s3, r3, n3].join(" ");
      return l3;
    } }, { key: "renderPaths", value: function(t5) {
      var e3, i3 = t5.j, a3 = t5.realIndex, s3 = t5.pathFrom, r3 = t5.pathTo, n3 = t5.stroke, o3 = t5.strokeWidth, l3 = t5.strokeLinecap, h3 = t5.fill, c3 = t5.animationDelay, d3 = t5.initialSpeed, g3 = t5.dataChangeSpeed, p3 = t5.className, f3 = t5.chartType, x3 = t5.shouldClipToGrid, b3 = void 0 === x3 || x3, m3 = t5.bindEventsOnPaths, v3 = void 0 === m3 || m3, w3 = t5.drawShadow, k3 = void 0 === w3 || w3, A3 = this.w, C3 = new Li2(this.ctx), S3 = new y2(this.ctx), L3 = this.w.config.chart.animations.enabled, M3 = L3 && this.w.config.chart.animations.dynamicAnimation.enabled;
      if (s3 && s3.startsWith("M 0 0") && r3) {
        var P3 = r3.match(/^M\s+[\d.-]+\s+[\d.-]+/);
        P3 && (s3 = s3.replace(/^M\s+0\s+0/, P3[0]));
      }
      var I3 = !!(L3 && !A3.globals.resized || M3 && A3.globals.dataChanged && A3.globals.shouldAnimate);
      I3 ? e3 = s3 : (e3 = r3, A3.globals.animationEnded = true);
      var T3 = A3.config.stroke.dashArray, z3 = 0;
      z3 = Array.isArray(T3) ? T3[a3] : A3.config.stroke.dashArray;
      var X3 = this.drawPath({ d: e3, stroke: n3, strokeWidth: o3, fill: h3, fillOpacity: 1, classes: p3, strokeLinecap: l3, strokeDashArray: z3 });
      X3.attr("index", a3), b3 && ("bar" === f3 && !A3.globals.isHorizontal || A3.globals.comboCharts ? X3.attr({ "clip-path": "url(#gridRectBarMask".concat(A3.globals.cuid, ")") }) : X3.attr({ "clip-path": "url(#gridRectMask".concat(A3.globals.cuid, ")") })), A3.config.chart.dropShadow.enabled && k3 && C3.dropShadow(X3, A3.config.chart.dropShadow, a3), v3 && (X3.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, X3)), X3.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, X3)), X3.node.addEventListener("mousedown", this.pathMouseDown.bind(this, X3))), X3.attr({ pathTo: r3, pathFrom: s3 });
      var R3 = { el: X3, j: i3, realIndex: a3, pathFrom: s3, pathTo: r3, fill: h3, strokeWidth: o3, delay: c3 };
      return !L3 || A3.globals.resized || A3.globals.dataChanged ? !A3.globals.resized && A3.globals.dataChanged || S3.showDelayedElements() : S3.animatePathsGradually(u2(u2({}, R3), {}, { speed: d3 })), A3.globals.dataChanged && M3 && I3 && S3.animatePathsGradually(u2(u2({}, R3), {}, { speed: g3 })), X3;
    } }, { key: "drawPattern", value: function(t5, e3, i3) {
      var a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8", s3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
      return this.w.globals.dom.Paper.pattern(e3, i3, function(r3) {
        "horizontalLines" === t5 ? r3.line(0, 0, i3, 0).stroke({ color: a3, width: s3 + 1 }) : "verticalLines" === t5 ? r3.line(0, 0, 0, e3).stroke({ color: a3, width: s3 + 1 }) : "slantedLines" === t5 ? r3.line(0, 0, e3, i3).stroke({ color: a3, width: s3 }) : "squares" === t5 ? r3.rect(e3, i3).fill("none").stroke({ color: a3, width: s3 }) : "circles" === t5 && r3.circle(e3).fill("none").stroke({ color: a3, width: s3 });
      });
    } }, { key: "drawGradient", value: function(t5, e3, i3, a3, s3) {
      var r3, n3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, o3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, l3 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : [], h3 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, c3 = this.w;
      e3.length < 9 && 0 === e3.indexOf("#") && (e3 = v2.hexToRgba(e3, a3)), i3.length < 9 && 0 === i3.indexOf("#") && (i3 = v2.hexToRgba(i3, s3));
      var d3 = 0, u3 = 1, g3 = 1, p3 = null;
      null !== o3 && (d3 = void 0 !== o3[0] ? o3[0] / 100 : 0, u3 = void 0 !== o3[1] ? o3[1] / 100 : 1, g3 = void 0 !== o3[2] ? o3[2] / 100 : 1, p3 = void 0 !== o3[3] ? o3[3] / 100 : null);
      var f3 = !("donut" !== c3.config.chart.type && "pie" !== c3.config.chart.type && "polarArea" !== c3.config.chart.type && "bubble" !== c3.config.chart.type);
      if (r3 = l3 && 0 !== l3.length ? c3.globals.dom.Paper.gradient(f3 ? "radial" : "linear", function(t6) {
        (Array.isArray(l3[h3]) ? l3[h3] : l3).forEach(function(e4) {
          t6.stop(e4.offset / 100, e4.color, e4.opacity);
        });
      }) : c3.globals.dom.Paper.gradient(f3 ? "radial" : "linear", function(t6) {
        t6.stop(d3, e3, a3), t6.stop(u3, i3, s3), t6.stop(g3, i3, s3), null !== p3 && t6.stop(p3, e3, a3);
      }), f3) {
        var x3 = c3.globals.gridWidth / 2, b3 = c3.globals.gridHeight / 2;
        "bubble" !== c3.config.chart.type ? r3.attr({ gradientUnits: "userSpaceOnUse", cx: x3, cy: b3, r: n3 }) : r3.attr({ cx: 0.5, cy: 0.5, r: 0.8, fx: 0.2, fy: 0.2 });
      } else "vertical" === t5 ? r3.from(0, 0).to(0, 1) : "diagonal" === t5 ? r3.from(0, 0).to(1, 1) : "horizontal" === t5 ? r3.from(0, 1).to(1, 1) : "diagonal2" === t5 && r3.from(1, 0).to(0, 1);
      return r3;
    } }, { key: "getTextBasedOnMaxWidth", value: function(t5) {
      var e3 = t5.text, i3 = t5.maxWidth, a3 = t5.fontSize, s3 = t5.fontFamily, r3 = this.getTextRects(e3, a3, s3), n3 = r3.width / e3.length, o3 = Math.floor(i3 / n3);
      return i3 < r3.width ? e3.slice(0, o3 - 3) + "..." : e3;
    } }, { key: "drawText", value: function(t5) {
      var e3 = this, i3 = t5.x, a3 = t5.y, s3 = t5.text, r3 = t5.textAnchor, n3 = t5.fontSize, o3 = t5.fontFamily, l3 = t5.fontWeight, h3 = t5.foreColor, c3 = t5.opacity, d3 = t5.maxWidth, g3 = t5.cssClass, p3 = void 0 === g3 ? "" : g3, f3 = t5.isPlainText, x3 = void 0 === f3 || f3, b3 = t5.dominantBaseline, m3 = void 0 === b3 ? "auto" : b3, v3 = this.w;
      void 0 === s3 && (s3 = "");
      var y3 = s3;
      r3 || (r3 = "start"), h3 && h3.length || (h3 = v3.config.chart.foreColor), o3 = o3 || v3.config.chart.fontFamily, l3 = l3 || "regular";
      var w3, k3 = { maxWidth: d3, fontSize: n3 = n3 || "11px", fontFamily: o3 };
      return Array.isArray(s3) ? w3 = v3.globals.dom.Paper.text(function(t6) {
        for (var i4 = 0; i4 < s3.length; i4++) y3 = s3[i4], d3 && (y3 = e3.getTextBasedOnMaxWidth(u2({ text: s3[i4] }, k3))), 0 === i4 ? t6.tspan(y3) : t6.tspan(y3).newLine();
      }) : (d3 && (y3 = this.getTextBasedOnMaxWidth(u2({ text: s3 }, k3))), w3 = x3 ? v3.globals.dom.Paper.plain(s3) : v3.globals.dom.Paper.text(function(t6) {
        return t6.tspan(y3);
      })), w3.attr({ x: i3, y: a3, "text-anchor": r3, "dominant-baseline": m3, "font-size": n3, "font-family": o3, "font-weight": l3, fill: h3, class: "apexcharts-text " + p3 }), w3.node.style.fontFamily = o3, w3.node.style.opacity = c3, w3;
    } }, { key: "getMarkerPath", value: function(t5, e3, i3, a3) {
      var s3 = "";
      switch (i3) {
        case "cross":
          s3 = "M ".concat(t5 - (a3 /= 1.4), " ").concat(e3 - a3, " L ").concat(t5 + a3, " ").concat(e3 + a3, "  M ").concat(t5 - a3, " ").concat(e3 + a3, " L ").concat(t5 + a3, " ").concat(e3 - a3);
          break;
        case "plus":
          s3 = "M ".concat(t5 - (a3 /= 1.12), " ").concat(e3, " L ").concat(t5 + a3, " ").concat(e3, "  M ").concat(t5, " ").concat(e3 - a3, " L ").concat(t5, " ").concat(e3 + a3);
          break;
        case "star":
        case "sparkle":
          var r3 = 5;
          a3 *= 1.15, "sparkle" === i3 && (a3 /= 1.1, r3 = 4);
          for (var n3 = Math.PI / r3, o3 = 0; o3 <= 2 * r3; o3++) {
            var l3 = o3 * n3, h3 = o3 % 2 == 0 ? a3 : a3 / 2;
            s3 += (0 === o3 ? "M" : "L") + (t5 + h3 * Math.sin(l3)) + "," + (e3 - h3 * Math.cos(l3));
          }
          s3 += "Z";
          break;
        case "triangle":
          s3 = "M ".concat(t5, " ").concat(e3 - a3, " \n             L ").concat(t5 + a3, " ").concat(e3 + a3, " \n             L ").concat(t5 - a3, " ").concat(e3 + a3, " \n             Z");
          break;
        case "square":
        case "rect":
          s3 = "M ".concat(t5 - (a3 /= 1.125), " ").concat(e3 - a3, " \n           L ").concat(t5 + a3, " ").concat(e3 - a3, " \n           L ").concat(t5 + a3, " ").concat(e3 + a3, " \n           L ").concat(t5 - a3, " ").concat(e3 + a3, " \n           Z");
          break;
        case "diamond":
          a3 *= 1.05, s3 = "M ".concat(t5, " ").concat(e3 - a3, " \n             L ").concat(t5 + a3, " ").concat(e3, " \n             L ").concat(t5, " ").concat(e3 + a3, " \n             L ").concat(t5 - a3, " ").concat(e3, " \n            Z");
          break;
        case "line":
          s3 = "M ".concat(t5 - (a3 /= 1.1), " ").concat(e3, " \n           L ").concat(t5 + a3, " ").concat(e3);
          break;
        default:
          a3 *= 2, s3 = "M ".concat(t5, ", ").concat(e3, " \n           m -").concat(a3 / 2, ", 0 \n           a ").concat(a3 / 2, ",").concat(a3 / 2, " 0 1,0 ").concat(a3, ",0 \n           a ").concat(a3 / 2, ",").concat(a3 / 2, " 0 1,0 -").concat(a3, ",0");
      }
      return s3;
    } }, { key: "drawMarkerShape", value: function(t5, e3, i3, a3, s3) {
      var r3 = this.drawPath({ d: this.getMarkerPath(t5, e3, i3, a3, s3), stroke: s3.pointStrokeColor, strokeDashArray: s3.pointStrokeDashArray, strokeWidth: s3.pointStrokeWidth, fill: s3.pointFillColor, fillOpacity: s3.pointFillOpacity, strokeOpacity: s3.pointStrokeOpacity });
      return r3.attr({ cx: t5, cy: e3, shape: s3.shape, class: s3.class ? s3.class : "" }), r3;
    } }, { key: "drawMarker", value: function(t5, e3, i3) {
      t5 = t5 || 0;
      var a3 = i3.pSize || 0;
      return v2.isNumber(e3) || (a3 = 0, e3 = 0), this.drawMarkerShape(t5, e3, null == i3 ? void 0 : i3.shape, a3, u2(u2({}, i3), "line" === i3.shape || "plus" === i3.shape || "cross" === i3.shape ? { pointStrokeColor: i3.pointFillColor, pointStrokeOpacity: i3.pointFillOpacity } : {}));
    } }, { key: "pathMouseEnter", value: function(t5, e3) {
      var i3 = this.w, a3 = new Li2(this.ctx), s3 = parseInt(t5.node.getAttribute("index"), 10), r3 = parseInt(t5.node.getAttribute("j"), 10);
      if ("function" == typeof i3.config.chart.events.dataPointMouseEnter && i3.config.chart.events.dataPointMouseEnter(e3, this.ctx, { seriesIndex: s3, dataPointIndex: r3, w: i3 }), this.ctx.events.fireEvent("dataPointMouseEnter", [e3, this.ctx, { seriesIndex: s3, dataPointIndex: r3, w: i3 }]), ("none" === i3.config.states.active.filter.type || "true" !== t5.node.getAttribute("selected")) && "none" !== i3.config.states.hover.filter.type && !i3.globals.isTouchDevice) {
        var n3 = i3.config.states.hover.filter;
        a3.applyFilter(t5, s3, n3.type);
      }
    } }, { key: "pathMouseLeave", value: function(t5, e3) {
      var i3 = this.w, a3 = new Li2(this.ctx), s3 = parseInt(t5.node.getAttribute("index"), 10), r3 = parseInt(t5.node.getAttribute("j"), 10);
      "function" == typeof i3.config.chart.events.dataPointMouseLeave && i3.config.chart.events.dataPointMouseLeave(e3, this.ctx, { seriesIndex: s3, dataPointIndex: r3, w: i3 }), this.ctx.events.fireEvent("dataPointMouseLeave", [e3, this.ctx, { seriesIndex: s3, dataPointIndex: r3, w: i3 }]), "none" !== i3.config.states.active.filter.type && "true" === t5.node.getAttribute("selected") || "none" !== i3.config.states.hover.filter.type && a3.getDefaultFilter(t5, s3);
    } }, { key: "pathMouseDown", value: function(t5, e3) {
      var i3 = this.w, a3 = new Li2(this.ctx), s3 = parseInt(t5.node.getAttribute("index"), 10), r3 = parseInt(t5.node.getAttribute("j"), 10), n3 = "false";
      if ("true" === t5.node.getAttribute("selected")) {
        if (t5.node.setAttribute("selected", "false"), i3.globals.selectedDataPoints[s3].indexOf(r3) > -1) {
          var o3 = i3.globals.selectedDataPoints[s3].indexOf(r3);
          i3.globals.selectedDataPoints[s3].splice(o3, 1);
        }
      } else {
        if (!i3.config.states.active.allowMultipleDataPointsSelection && i3.globals.selectedDataPoints.length > 0) {
          i3.globals.selectedDataPoints = [];
          var l3 = i3.globals.dom.Paper.find(".apexcharts-series path:not(.apexcharts-decoration-element)"), h3 = i3.globals.dom.Paper.find(".apexcharts-series circle:not(.apexcharts-decoration-element), .apexcharts-series rect:not(.apexcharts-decoration-element)"), c3 = function(t6) {
            Array.prototype.forEach.call(t6, function(t7) {
              t7.node.setAttribute("selected", "false"), a3.getDefaultFilter(t7, s3);
            });
          };
          c3(l3), c3(h3);
        }
        t5.node.setAttribute("selected", "true"), n3 = "true", void 0 === i3.globals.selectedDataPoints[s3] && (i3.globals.selectedDataPoints[s3] = []), i3.globals.selectedDataPoints[s3].push(r3);
      }
      if ("true" === n3) {
        var d3 = i3.config.states.active.filter;
        if ("none" !== d3) a3.applyFilter(t5, s3, d3.type);
        else if ("none" !== i3.config.states.hover.filter && !i3.globals.isTouchDevice) {
          var u3 = i3.config.states.hover.filter;
          a3.applyFilter(t5, s3, u3.type);
        }
      } else if ("none" !== i3.config.states.active.filter.type) if ("none" === i3.config.states.hover.filter.type || i3.globals.isTouchDevice) a3.getDefaultFilter(t5, s3);
      else {
        u3 = i3.config.states.hover.filter;
        a3.applyFilter(t5, s3, u3.type);
      }
      "function" == typeof i3.config.chart.events.dataPointSelection && i3.config.chart.events.dataPointSelection(e3, this.ctx, { selectedDataPoints: i3.globals.selectedDataPoints, seriesIndex: s3, dataPointIndex: r3, w: i3 }), e3 && this.ctx.events.fireEvent("dataPointSelection", [e3, this.ctx, { selectedDataPoints: i3.globals.selectedDataPoints, seriesIndex: s3, dataPointIndex: r3, w: i3 }]);
    } }, { key: "rotateAroundCenter", value: function(t5) {
      var e3 = {};
      return t5 && "function" == typeof t5.getBBox && (e3 = t5.getBBox()), { x: e3.x + e3.width / 2, y: e3.y + e3.height / 2 };
    } }, { key: "getTextRects", value: function(t5, e3, i3, a3) {
      var s3 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], r3 = this.w, n3 = this.drawText({ x: -200, y: -200, text: t5, textAnchor: "start", fontSize: e3, fontFamily: i3, foreColor: "#fff", opacity: 0 });
      a3 && n3.attr("transform", a3), r3.globals.dom.Paper.add(n3);
      var o3 = n3.bbox();
      return s3 || (o3 = n3.node.getBoundingClientRect()), n3.remove(), { width: o3.width, height: o3.height };
    } }, { key: "placeTextWithEllipsis", value: function(t5, e3, i3) {
      if ("function" == typeof t5.getComputedTextLength && (t5.textContent = e3, e3.length > 0 && t5.getComputedTextLength() >= i3 / 1.1)) {
        for (var a3 = e3.length - 3; a3 > 0; a3 -= 3) if (t5.getSubStringLength(0, a3) <= i3 / 1.1) return void (t5.textContent = e3.substring(0, a3) + "...");
        t5.textContent = ".";
      }
    } }], [{ key: "setAttrs", value: function(t5, e3) {
      for (var i3 in e3) e3.hasOwnProperty(i3) && t5.setAttribute(i3, e3[i3]);
    } }]), t4;
  }();
  var Pi2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "getStackedSeriesTotals", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e3 = this.w, i3 = [];
      if (0 === e3.globals.series.length) return i3;
      for (var a3 = 0; a3 < e3.globals.series[e3.globals.maxValsInArrayIndex].length; a3++) {
        for (var s3 = 0, r3 = 0; r3 < e3.globals.series.length; r3++) void 0 !== e3.globals.series[r3][a3] && -1 === t5.indexOf(r3) && (s3 += e3.globals.series[r3][a3]);
        i3.push(s3);
      }
      return i3;
    } }, { key: "getSeriesTotalByIndex", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
      return null === t5 ? this.w.config.series.reduce(function(t6, e3) {
        return t6 + e3;
      }, 0) : this.w.globals.series[t5].reduce(function(t6, e3) {
        return t6 + e3;
      }, 0);
    } }, { key: "getStackedSeriesTotalsByGroups", value: function() {
      var t5 = this, e3 = this.w, i3 = [];
      return e3.globals.seriesGroups.forEach(function(a3) {
        var s3 = [];
        e3.config.series.forEach(function(t6, i4) {
          a3.indexOf(e3.globals.seriesNames[i4]) > -1 && s3.push(i4);
        });
        var r3 = e3.globals.series.map(function(t6, e4) {
          return -1 === s3.indexOf(e4) ? e4 : -1;
        }).filter(function(t6) {
          return -1 !== t6;
        });
        i3.push(t5.getStackedSeriesTotals(r3));
      }), i3;
    } }, { key: "setSeriesYAxisMappings", value: function() {
      var t5 = this.w.globals, e3 = this.w.config, i3 = [], a3 = [], s3 = [], r3 = t5.series.length > e3.yaxis.length || e3.yaxis.some(function(t6) {
        return Array.isArray(t6.seriesName);
      });
      e3.series.forEach(function(t6, e4) {
        s3.push(e4), a3.push(null);
      }), e3.yaxis.forEach(function(t6, e4) {
        i3[e4] = [];
      });
      var n3 = [];
      e3.yaxis.forEach(function(t6, a4) {
        var o4 = false;
        if (t6.seriesName) {
          var l4 = [];
          Array.isArray(t6.seriesName) ? l4 = t6.seriesName : l4.push(t6.seriesName), l4.forEach(function(t7) {
            e3.series.forEach(function(e4, n4) {
              if (e4.name === t7) {
                var l5 = n4;
                a4 === n4 || r3 ? !r3 || s3.indexOf(n4) > -1 ? i3[a4].push([a4, n4]) : console.warn("Series '" + e4.name + "' referenced more than once in what looks like the new style. That is, when using either seriesName: [], or when there are more series than yaxes.") : (i3[n4].push([n4, a4]), l5 = a4), o4 = true, -1 !== (l5 = s3.indexOf(l5)) && s3.splice(l5, 1);
              }
            });
          });
        }
        o4 || n3.push(a4);
      }), i3 = i3.map(function(t6, e4) {
        var i4 = [];
        return t6.forEach(function(t7) {
          a3[t7[1]] = t7[0], i4.push(t7[1]);
        }), i4;
      });
      for (var o3 = e3.yaxis.length - 1, l3 = 0; l3 < n3.length && (o3 = n3[l3], i3[o3] = [], s3); l3++) {
        var h3 = s3[0];
        s3.shift(), i3[o3].push(h3), a3[h3] = o3;
      }
      s3.forEach(function(t6) {
        i3[o3].push(t6), a3[t6] = o3;
      }), t5.seriesYAxisMap = i3.map(function(t6) {
        return t6;
      }), t5.seriesYAxisReverseMap = a3.map(function(t6) {
        return t6;
      }), t5.seriesYAxisMap.forEach(function(t6, i4) {
        t6.forEach(function(t7) {
          e3.series[t7] && void 0 === e3.series[t7].group && (e3.series[t7].group = "apexcharts-axis-".concat(i4.toString()));
        });
      });
    } }, { key: "isSeriesNull", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
      return 0 === (null === t5 ? this.w.config.series.filter(function(t6) {
        return null !== t6;
      }) : this.w.config.series[t5].data.filter(function(t6) {
        return null !== t6;
      })).length;
    } }, { key: "seriesHaveSameValues", value: function(t5) {
      return this.w.globals.series[t5].every(function(t6, e3, i3) {
        return t6 === i3[0];
      });
    } }, { key: "getCategoryLabels", value: function(t5) {
      var e3 = this.w, i3 = t5.slice();
      return e3.config.xaxis.convertedCatToNumeric && (i3 = t5.map(function(t6, i4) {
        return e3.config.xaxis.labels.formatter(t6 - e3.globals.minX + 1);
      })), i3;
    } }, { key: "getLargestSeries", value: function() {
      var t5 = this.w;
      t5.globals.maxValsInArrayIndex = t5.globals.series.map(function(t6) {
        return t6.length;
      }).indexOf(Math.max.apply(Math, t5.globals.series.map(function(t6) {
        return t6.length;
      })));
    } }, { key: "getLargestMarkerSize", value: function() {
      var t5 = this.w, e3 = 0;
      return t5.globals.markers.size.forEach(function(t6) {
        e3 = Math.max(e3, t6);
      }), t5.config.markers.discrete && t5.config.markers.discrete.length && t5.config.markers.discrete.forEach(function(t6) {
        e3 = Math.max(e3, t6.size);
      }), e3 > 0 && (t5.config.markers.hover.size > 0 ? e3 = t5.config.markers.hover.size : e3 += t5.config.markers.hover.sizeOffset), t5.globals.markers.largestSize = e3, e3;
    } }, { key: "getSeriesTotals", value: function() {
      var t5 = this.w;
      t5.globals.seriesTotals = t5.globals.series.map(function(t6, e3) {
        var i3 = 0;
        if (Array.isArray(t6)) for (var a3 = 0; a3 < t6.length; a3++) i3 += t6[a3];
        else i3 += t6;
        return i3;
      });
    } }, { key: "getSeriesTotalsXRange", value: function(t5, e3) {
      var i3 = this.w;
      return i3.globals.series.map(function(a3, s3) {
        for (var r3 = 0, n3 = 0; n3 < a3.length; n3++) i3.globals.seriesX[s3][n3] > t5 && i3.globals.seriesX[s3][n3] < e3 && (r3 += a3[n3]);
        return r3;
      });
    } }, { key: "getPercentSeries", value: function() {
      var t5 = this.w;
      t5.globals.seriesPercent = t5.globals.series.map(function(e3, i3) {
        var a3 = [];
        if (Array.isArray(e3)) for (var s3 = 0; s3 < e3.length; s3++) {
          var r3 = t5.globals.stackedSeriesTotals[s3], n3 = 0;
          r3 && (n3 = 100 * e3[s3] / r3), a3.push(n3);
        }
        else {
          var o3 = 100 * e3 / t5.globals.seriesTotals.reduce(function(t6, e4) {
            return t6 + e4;
          }, 0);
          a3.push(o3);
        }
        return a3;
      });
    } }, { key: "getCalculatedRatios", value: function() {
      var t5, e3, i3, a3 = this, s3 = this.w, r3 = s3.globals, n3 = [], o3 = 0, l3 = [], h3 = 0.1, c3 = 0;
      if (r3.yRange = [], r3.isMultipleYAxis) for (var d3 = 0; d3 < r3.minYArr.length; d3++) r3.yRange.push(Math.abs(r3.minYArr[d3] - r3.maxYArr[d3])), l3.push(0);
      else r3.yRange.push(Math.abs(r3.minY - r3.maxY));
      r3.xRange = Math.abs(r3.maxX - r3.minX), r3.zRange = Math.abs(r3.maxZ - r3.minZ);
      for (var u3 = 0; u3 < r3.yRange.length; u3++) n3.push(r3.yRange[u3] / r3.gridHeight);
      if (e3 = r3.xRange / r3.gridWidth, t5 = r3.yRange / r3.gridWidth, i3 = r3.xRange / r3.gridHeight, (o3 = r3.zRange / r3.gridHeight * 16) || (o3 = 1), r3.minY !== Number.MIN_VALUE && 0 !== Math.abs(r3.minY) && (r3.hasNegs = true), s3.globals.seriesYAxisReverseMap.length > 0) {
        var g3 = function(t6, e4) {
          var i4 = s3.config.yaxis[s3.globals.seriesYAxisReverseMap[e4]], r4 = t6 < 0 ? -1 : 1;
          return t6 = Math.abs(t6), i4.logarithmic && (t6 = a3.getBaseLog(i4.logBase, t6)), -r4 * t6 / n3[e4];
        };
        if (r3.isMultipleYAxis) {
          l3 = [];
          for (var p3 = 0; p3 < n3.length; p3++) l3.push(g3(r3.minYArr[p3], p3));
        } else (l3 = []).push(g3(r3.minY, 0)), r3.minY !== Number.MIN_VALUE && 0 !== Math.abs(r3.minY) && (h3 = -r3.minY / t5, c3 = r3.minX / e3);
      } else (l3 = []).push(0), h3 = 0, c3 = 0;
      return { yRatio: n3, invertedYRatio: t5, zRatio: o3, xRatio: e3, invertedXRatio: i3, baseLineInvertedY: h3, baseLineY: l3, baseLineX: c3 };
    } }, { key: "getLogSeries", value: function(t5) {
      var e3 = this, i3 = this.w;
      return i3.globals.seriesLog = t5.map(function(t6, a3) {
        var s3 = i3.globals.seriesYAxisReverseMap[a3];
        return i3.config.yaxis[s3] && i3.config.yaxis[s3].logarithmic ? t6.map(function(t7) {
          return null === t7 ? null : e3.getLogVal(i3.config.yaxis[s3].logBase, t7, a3);
        }) : t6;
      }), i3.globals.invalidLogScale ? t5 : i3.globals.seriesLog;
    } }, { key: "getLogValAtSeriesIndex", value: function(t5, e3) {
      if (null === t5) return null;
      var i3 = this.w, a3 = i3.globals.seriesYAxisReverseMap[e3];
      return i3.config.yaxis[a3] && i3.config.yaxis[a3].logarithmic ? this.getLogVal(i3.config.yaxis[a3].logBase, t5, e3) : t5;
    } }, { key: "getBaseLog", value: function(t5, e3) {
      return Math.log(e3) / Math.log(t5);
    } }, { key: "getLogVal", value: function(t5, e3, i3) {
      if (e3 <= 0) return 0;
      var a3 = this.w, s3 = 0 === a3.globals.minYArr[i3] ? -1 : this.getBaseLog(t5, a3.globals.minYArr[i3]), r3 = (0 === a3.globals.maxYArr[i3] ? 0 : this.getBaseLog(t5, a3.globals.maxYArr[i3])) - s3;
      return e3 < 1 ? e3 / r3 : (this.getBaseLog(t5, e3) - s3) / r3;
    } }, { key: "getLogYRatios", value: function(t5) {
      var e3 = this, i3 = this.w, a3 = this.w.globals;
      return a3.yLogRatio = t5.slice(), a3.logYRange = a3.yRange.map(function(t6, s3) {
        var r3 = i3.globals.seriesYAxisReverseMap[s3];
        if (i3.config.yaxis[r3] && e3.w.config.yaxis[r3].logarithmic) {
          var n3, o3 = -Number.MAX_VALUE, l3 = Number.MIN_VALUE;
          return a3.seriesLog.forEach(function(t7, e4) {
            t7.forEach(function(t8) {
              i3.config.yaxis[e4] && i3.config.yaxis[e4].logarithmic && (o3 = Math.max(t8, o3), l3 = Math.min(t8, l3));
            });
          }), n3 = Math.pow(a3.yRange[s3], Math.abs(l3 - o3) / a3.yRange[s3]), a3.yLogRatio[s3] = n3 / a3.gridHeight, n3;
        }
      }), a3.invalidLogScale ? t5.slice() : a3.yLogRatio;
    } }, { key: "drawSeriesByGroup", value: function(t5, e3, i3, a3) {
      var s3 = this.w, r3 = [];
      return t5.series.length > 0 && e3.forEach(function(e4) {
        var n3 = [], o3 = [];
        t5.i.forEach(function(i4, a4) {
          s3.config.series[i4].group === e4 && (n3.push(t5.series[a4]), o3.push(i4));
        }), n3.length > 0 && r3.push(a3.draw(n3, i3, o3));
      }), r3;
    } }], [{ key: "checkComboSeries", value: function(t5, e3) {
      var i3 = false, a3 = 0, s3 = 0;
      return void 0 === e3 && (e3 = "line"), t5.length && void 0 !== t5[0].type && t5.forEach(function(t6) {
        "bar" !== t6.type && "column" !== t6.type && "candlestick" !== t6.type && "boxPlot" !== t6.type || a3++, void 0 !== t6.type && t6.type !== e3 && s3++;
      }), s3 > 0 && (i3 = true), { comboBarCount: a3, comboCharts: i3 };
    } }, { key: "extendArrayProps", value: function(t5, e3, i3) {
      var a3, s3, r3, n3, o3, l3;
      (null !== (a3 = e3) && void 0 !== a3 && a3.yaxis && (e3 = t5.extendYAxis(e3, i3)), null !== (s3 = e3) && void 0 !== s3 && s3.annotations) && (e3.annotations.yaxis && (e3 = t5.extendYAxisAnnotations(e3)), null !== (r3 = e3) && void 0 !== r3 && null !== (n3 = r3.annotations) && void 0 !== n3 && n3.xaxis && (e3 = t5.extendXAxisAnnotations(e3)), null !== (o3 = e3) && void 0 !== o3 && null !== (l3 = o3.annotations) && void 0 !== l3 && l3.points && (e3 = t5.extendPointAnnotations(e3)));
      return e3;
    } }]), t4;
  }();
  var Ii2 = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.annoCtx = e3;
    }
    return s2(t4, [{ key: "setOrientations", value: function(t5) {
      var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i3 = this.w;
      if ("vertical" === t5.label.orientation) {
        var a3 = null !== e3 ? e3 : 0, s3 = i3.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a3, "']"));
        if (null !== s3) {
          var r3 = s3.getBoundingClientRect();
          s3.setAttribute("x", parseFloat(s3.getAttribute("x")) - r3.height + 4);
          var n3 = "top" === t5.label.position ? r3.width : -r3.width;
          s3.setAttribute("y", parseFloat(s3.getAttribute("y")) + n3);
          var o3 = this.annoCtx.graphics.rotateAroundCenter(s3), l3 = o3.x, h3 = o3.y;
          s3.setAttribute("transform", "rotate(-90 ".concat(l3, " ").concat(h3, ")"));
        }
      }
    } }, { key: "addBackgroundToAnno", value: function(t5, e3) {
      var i3 = this.w;
      if (!t5 || !e3.label.text || !String(e3.label.text).trim()) return null;
      var a3 = i3.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(), s3 = t5.getBoundingClientRect(), r3 = e3.label.style.padding, n3 = r3.left, o3 = r3.right, l3 = r3.top, h3 = r3.bottom;
      if ("vertical" === e3.label.orientation) {
        var c3 = [n3, o3, l3, h3];
        l3 = c3[0], h3 = c3[1], n3 = c3[2], o3 = c3[3];
      }
      var d3 = s3.left - a3.left - n3, u3 = s3.top - a3.top - l3, g3 = this.annoCtx.graphics.drawRect(d3 - i3.globals.barPadForNumericAxis, u3, s3.width + n3 + o3, s3.height + l3 + h3, e3.label.borderRadius, e3.label.style.background, 1, e3.label.borderWidth, e3.label.borderColor, 0);
      return e3.id && g3.node.classList.add(e3.id), g3;
    } }, { key: "annotationsBackground", value: function() {
      var t5 = this, e3 = this.w, i3 = function(i4, a3, s3) {
        var r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-".concat(s3, "-annotations .apexcharts-").concat(s3, "-annotation-label[rel='").concat(a3, "']"));
        if (r3) {
          var n3 = r3.parentNode, o3 = t5.addBackgroundToAnno(r3, i4);
          o3 && (n3.insertBefore(o3.node, r3), i4.label.mouseEnter && o3.node.addEventListener("mouseenter", i4.label.mouseEnter.bind(t5, i4)), i4.label.mouseLeave && o3.node.addEventListener("mouseleave", i4.label.mouseLeave.bind(t5, i4)), i4.label.click && o3.node.addEventListener("click", i4.label.click.bind(t5, i4)));
        }
      };
      e3.config.annotations.xaxis.forEach(function(t6, e4) {
        return i3(t6, e4, "xaxis");
      }), e3.config.annotations.yaxis.forEach(function(t6, e4) {
        return i3(t6, e4, "yaxis");
      }), e3.config.annotations.points.forEach(function(t6, e4) {
        return i3(t6, e4, "point");
      });
    } }, { key: "getY1Y2", value: function(t5, e3) {
      var i3, a3 = this.w, s3 = "y1" === t5 ? e3.y : e3.y2, r3 = false;
      if (this.annoCtx.invertAxis) {
        var n3 = a3.config.xaxis.convertedCatToNumeric ? a3.globals.categoryLabels : a3.globals.labels, o3 = n3.indexOf(s3), l3 = a3.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(".concat(o3 + 1, ")"));
        i3 = l3 ? parseFloat(l3.getAttribute("y")) : (a3.globals.gridHeight / n3.length - 1) * (o3 + 1) - a3.globals.barHeight, void 0 !== e3.seriesIndex && a3.globals.barHeight && (i3 -= a3.globals.barHeight / 2 * (a3.globals.series.length - 1) - a3.globals.barHeight * e3.seriesIndex);
      } else {
        var h3, c3 = a3.globals.seriesYAxisMap[e3.yAxisIndex][0], d3 = a3.config.yaxis[e3.yAxisIndex].logarithmic ? new Pi2(this.annoCtx.ctx).getLogVal(a3.config.yaxis[e3.yAxisIndex].logBase, s3, c3) / a3.globals.yLogRatio[c3] : (s3 - a3.globals.minYArr[c3]) / (a3.globals.yRange[c3] / a3.globals.gridHeight);
        i3 = a3.globals.gridHeight - Math.min(Math.max(d3, 0), a3.globals.gridHeight), r3 = d3 > a3.globals.gridHeight || d3 < 0, !e3.marker || void 0 !== e3.y && null !== e3.y || (i3 = 0), null !== (h3 = a3.config.yaxis[e3.yAxisIndex]) && void 0 !== h3 && h3.reversed && (i3 = d3);
      }
      return "string" == typeof s3 && s3.includes("px") && (i3 = parseFloat(s3)), { yP: i3, clipped: r3 };
    } }, { key: "getX1X2", value: function(t5, e3) {
      var i3 = this.w, a3 = "x1" === t5 ? e3.x : e3.x2, s3 = this.annoCtx.invertAxis ? i3.globals.minY : i3.globals.minX, r3 = this.annoCtx.invertAxis ? i3.globals.maxY : i3.globals.maxX, n3 = this.annoCtx.invertAxis ? i3.globals.yRange[0] : i3.globals.xRange, o3 = false, l3 = this.annoCtx.inversedReversedAxis ? (r3 - a3) / (n3 / i3.globals.gridWidth) : (a3 - s3) / (n3 / i3.globals.gridWidth);
      return "category" !== i3.config.xaxis.type && !i3.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i3.globals.dataFormatXNumeric || i3.config.chart.sparkline.enabled || (l3 = this.getStringX(a3)), "string" == typeof a3 && a3.includes("px") && (l3 = parseFloat(a3)), null == a3 && e3.marker && (l3 = i3.globals.gridWidth), void 0 !== e3.seriesIndex && i3.globals.barWidth && !this.annoCtx.invertAxis && (l3 -= i3.globals.barWidth / 2 * (i3.globals.series.length - 1) - i3.globals.barWidth * e3.seriesIndex), "number" != typeof l3 && (l3 = 0, o3 = true), parseFloat(l3.toFixed(10)) > parseFloat(i3.globals.gridWidth.toFixed(10)) ? (l3 = i3.globals.gridWidth, o3 = true) : l3 < 0 && (l3 = 0, o3 = true), { x: l3, clipped: o3 };
    } }, { key: "getStringX", value: function(t5) {
      var e3 = this.w, i3 = t5;
      e3.config.xaxis.convertedCatToNumeric && e3.globals.categoryLabels.length && (t5 = e3.globals.categoryLabels.indexOf(t5) + 1);
      var a3 = e3.globals.labels.map(function(t6) {
        return Array.isArray(t6) ? t6.join(" ") : t6;
      }).indexOf(t5), s3 = e3.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(".concat(a3 + 1, ")"));
      return s3 && (i3 = parseFloat(s3.getAttribute("x"))), i3;
    } }]), t4;
  }();
  var Ti2 = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.annoCtx = e3, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new Ii2(this.annoCtx);
    }
    return s2(t4, [{ key: "addXaxisAnnotation", value: function(t5, e3, i3) {
      var a3, s3 = this.w, r3 = this.helpers.getX1X2("x1", t5), n3 = r3.x, o3 = r3.clipped, l3 = true, h3 = t5.label.text, c3 = t5.strokeDashArray;
      if (v2.isNumber(n3)) {
        if (null === t5.x2 || void 0 === t5.x2) {
          if (!o3) {
            var d3 = this.annoCtx.graphics.drawLine(n3 + t5.offsetX, 0 + t5.offsetY, n3 + t5.offsetX, s3.globals.gridHeight + t5.offsetY, t5.borderColor, c3, t5.borderWidth);
            e3.appendChild(d3.node), t5.id && d3.node.classList.add(t5.id);
          }
        } else {
          var u3 = this.helpers.getX1X2("x2", t5);
          if (a3 = u3.x, l3 = u3.clipped, a3 < n3) {
            var g3 = n3;
            n3 = a3, a3 = g3;
          }
          var p3 = this.annoCtx.graphics.drawRect(n3 + t5.offsetX, 0 + t5.offsetY, a3 - n3, s3.globals.gridHeight + t5.offsetY, 0, t5.fillColor, t5.opacity, 1, t5.borderColor, c3);
          p3.node.classList.add("apexcharts-annotation-rect"), p3.attr("clip-path", "url(#gridRectMask".concat(s3.globals.cuid, ")")), e3.appendChild(p3.node), t5.id && p3.node.classList.add(t5.id);
        }
        if (!o3 || !l3) {
          var f3 = this.annoCtx.graphics.getTextRects(h3, parseFloat(t5.label.style.fontSize)), x3 = "top" === t5.label.position ? 4 : "center" === t5.label.position ? s3.globals.gridHeight / 2 + ("vertical" === t5.label.orientation ? f3.width / 2 : 0) : s3.globals.gridHeight, b3 = this.annoCtx.graphics.drawText({ x: n3 + t5.label.offsetX, y: x3 + t5.label.offsetY - ("vertical" === t5.label.orientation ? "top" === t5.label.position ? f3.width / 2 - 12 : -f3.width / 2 : 0), text: h3, textAnchor: t5.label.textAnchor, fontSize: t5.label.style.fontSize, fontFamily: t5.label.style.fontFamily, fontWeight: t5.label.style.fontWeight, foreColor: t5.label.style.color, cssClass: "apexcharts-xaxis-annotation-label ".concat(t5.label.style.cssClass, " ").concat(t5.id ? t5.id : "") });
          b3.attr({ rel: i3 }), e3.appendChild(b3.node), this.annoCtx.helpers.setOrientations(t5, i3);
        }
      }
    } }, { key: "drawXAxisAnnotations", value: function() {
      var t5 = this, e3 = this.w, i3 = this.annoCtx.graphics.group({ class: "apexcharts-xaxis-annotations" });
      return e3.config.annotations.xaxis.map(function(e4, a3) {
        t5.addXaxisAnnotation(e4, i3.node, a3);
      }), i3;
    } }]), t4;
  }();
  var zi2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
    }
    return s2(t4, [{ key: "isValidDate", value: function(t5) {
      return "number" != typeof t5 && !isNaN(this.parseDate(t5));
    } }, { key: "getTimeStamp", value: function(t5) {
      return Date.parse(t5) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t5).toISOString().substr(0, 25)).getTime() : new Date(t5).getTime() : t5;
    } }, { key: "getDate", value: function(t5) {
      return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t5).toUTCString()) : new Date(t5);
    } }, { key: "parseDate", value: function(t5) {
      var e3 = Date.parse(t5);
      if (!isNaN(e3)) return this.getTimeStamp(t5);
      var i3 = Date.parse(t5.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
      return i3 = this.getTimeStamp(i3);
    } }, { key: "parseDateWithTimezone", value: function(t5) {
      return Date.parse(t5.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
    } }, { key: "formatDate", value: function(t5, e3) {
      var i3 = this.w.globals.locale, a3 = this.w.config.xaxis.labels.datetimeUTC, s3 = ["\0"].concat(f2(i3.months)), r3 = [""].concat(f2(i3.shortMonths)), n3 = [""].concat(f2(i3.days)), o3 = [""].concat(f2(i3.shortDays));
      function l3(t6, e4) {
        var i4 = t6 + "";
        for (e4 = e4 || 2; i4.length < e4; ) i4 = "0" + i4;
        return i4;
      }
      var h3 = a3 ? t5.getUTCFullYear() : t5.getFullYear();
      e3 = (e3 = (e3 = e3.replace(/(^|[^\\])yyyy+/g, "$1" + h3)).replace(/(^|[^\\])yy/g, "$1" + h3.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + h3);
      var c3 = (a3 ? t5.getUTCMonth() : t5.getMonth()) + 1;
      e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])MMMM+/g, "$1" + s3[0])).replace(/(^|[^\\])MMM/g, "$1" + r3[0])).replace(/(^|[^\\])MM/g, "$1" + l3(c3))).replace(/(^|[^\\])M/g, "$1" + c3);
      var d3 = a3 ? t5.getUTCDate() : t5.getDate();
      e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])dddd+/g, "$1" + n3[0])).replace(/(^|[^\\])ddd/g, "$1" + o3[0])).replace(/(^|[^\\])dd/g, "$1" + l3(d3))).replace(/(^|[^\\])d/g, "$1" + d3);
      var u3 = a3 ? t5.getUTCHours() : t5.getHours(), g3 = u3 > 12 ? u3 - 12 : 0 === u3 ? 12 : u3;
      e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])HH+/g, "$1" + l3(u3))).replace(/(^|[^\\])H/g, "$1" + u3)).replace(/(^|[^\\])hh+/g, "$1" + l3(g3))).replace(/(^|[^\\])h/g, "$1" + g3);
      var p3 = a3 ? t5.getUTCMinutes() : t5.getMinutes();
      e3 = (e3 = e3.replace(/(^|[^\\])mm+/g, "$1" + l3(p3))).replace(/(^|[^\\])m/g, "$1" + p3);
      var x3 = a3 ? t5.getUTCSeconds() : t5.getSeconds();
      e3 = (e3 = e3.replace(/(^|[^\\])ss+/g, "$1" + l3(x3))).replace(/(^|[^\\])s/g, "$1" + x3);
      var b3 = a3 ? t5.getUTCMilliseconds() : t5.getMilliseconds();
      e3 = e3.replace(/(^|[^\\])fff+/g, "$1" + l3(b3, 3)), b3 = Math.round(b3 / 10), e3 = e3.replace(/(^|[^\\])ff/g, "$1" + l3(b3)), b3 = Math.round(b3 / 10);
      var m3 = u3 < 12 ? "AM" : "PM";
      e3 = (e3 = (e3 = e3.replace(/(^|[^\\])f/g, "$1" + b3)).replace(/(^|[^\\])TT+/g, "$1" + m3)).replace(/(^|[^\\])T/g, "$1" + m3.charAt(0));
      var v3 = m3.toLowerCase();
      e3 = (e3 = e3.replace(/(^|[^\\])tt+/g, "$1" + v3)).replace(/(^|[^\\])t/g, "$1" + v3.charAt(0));
      var y3 = -t5.getTimezoneOffset(), w3 = a3 || !y3 ? "Z" : y3 > 0 ? "+" : "-";
      if (!a3) {
        var k3 = (y3 = Math.abs(y3)) % 60;
        w3 += l3(Math.floor(y3 / 60)) + ":" + l3(k3);
      }
      e3 = e3.replace(/(^|[^\\])K/g, "$1" + w3);
      var A3 = (a3 ? t5.getUTCDay() : t5.getDay()) + 1;
      return e3 = (e3 = (e3 = (e3 = (e3 = e3.replace(new RegExp(n3[0], "g"), n3[A3])).replace(new RegExp(o3[0], "g"), o3[A3])).replace(new RegExp(s3[0], "g"), s3[c3])).replace(new RegExp(r3[0], "g"), r3[c3])).replace(/\\(.)/g, "$1");
    } }, { key: "getTimeUnitsfromTimestamp", value: function(t5, e3, i3) {
      var a3 = this.w;
      void 0 !== a3.config.xaxis.min && (t5 = a3.config.xaxis.min), void 0 !== a3.config.xaxis.max && (e3 = a3.config.xaxis.max);
      var s3 = this.getDate(t5), r3 = this.getDate(e3), n3 = this.formatDate(s3, "yyyy MM dd HH mm ss fff").split(" "), o3 = this.formatDate(r3, "yyyy MM dd HH mm ss fff").split(" ");
      return { minMillisecond: parseInt(n3[6], 10), maxMillisecond: parseInt(o3[6], 10), minSecond: parseInt(n3[5], 10), maxSecond: parseInt(o3[5], 10), minMinute: parseInt(n3[4], 10), maxMinute: parseInt(o3[4], 10), minHour: parseInt(n3[3], 10), maxHour: parseInt(o3[3], 10), minDate: parseInt(n3[2], 10), maxDate: parseInt(o3[2], 10), minMonth: parseInt(n3[1], 10) - 1, maxMonth: parseInt(o3[1], 10) - 1, minYear: parseInt(n3[0], 10), maxYear: parseInt(o3[0], 10) };
    } }, { key: "isLeapYear", value: function(t5) {
      return t5 % 4 == 0 && t5 % 100 != 0 || t5 % 400 == 0;
    } }, { key: "calculcateLastDaysOfMonth", value: function(t5, e3, i3) {
      return this.determineDaysOfMonths(t5, e3) - i3;
    } }, { key: "determineDaysOfYear", value: function(t5) {
      var e3 = 365;
      return this.isLeapYear(t5) && (e3 = 366), e3;
    } }, { key: "determineRemainingDaysOfYear", value: function(t5, e3, i3) {
      var a3 = this.daysCntOfYear[e3] + i3;
      return e3 > 1 && this.isLeapYear() && a3++, a3;
    } }, { key: "determineDaysOfMonths", value: function(t5, e3) {
      var i3 = 30;
      switch (t5 = v2.monthMod(t5), true) {
        case this.months30.indexOf(t5) > -1:
          2 === t5 && (i3 = this.isLeapYear(e3) ? 29 : 28);
          break;
        case this.months31.indexOf(t5) > -1:
        default:
          i3 = 31;
      }
      return i3;
    } }]), t4;
  }();
  var Xi2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.tooltipKeyFormat = "dd MMM";
    }
    return s2(t4, [{ key: "xLabelFormat", value: function(t5, e3, i3, a3) {
      var s3 = this.w;
      if ("datetime" === s3.config.xaxis.type && void 0 === s3.config.xaxis.labels.formatter && void 0 === s3.config.tooltip.x.formatter) {
        var r3 = new zi2(this.ctx);
        return r3.formatDate(r3.getDate(e3), s3.config.tooltip.x.format);
      }
      return t5(e3, i3, a3);
    } }, { key: "defaultGeneralFormatter", value: function(t5) {
      return Array.isArray(t5) ? t5.map(function(t6) {
        return t6;
      }) : t5;
    } }, { key: "defaultYFormatter", value: function(t5, e3, i3) {
      var a3 = this.w;
      if (v2.isNumber(t5)) if (0 !== a3.globals.yValueDecimal) t5 = t5.toFixed(void 0 !== e3.decimalsInFloat ? e3.decimalsInFloat : a3.globals.yValueDecimal);
      else {
        var s3 = t5.toFixed(0);
        t5 = t5 == s3 ? s3 : t5.toFixed(1);
      }
      return t5;
    } }, { key: "setLabelFormatters", value: function() {
      var t5 = this, e3 = this.w;
      return e3.globals.xaxisTooltipFormatter = function(e4) {
        return t5.defaultGeneralFormatter(e4);
      }, e3.globals.ttKeyFormatter = function(e4) {
        return t5.defaultGeneralFormatter(e4);
      }, e3.globals.ttZFormatter = function(t6) {
        return t6;
      }, e3.globals.legendFormatter = function(e4) {
        return t5.defaultGeneralFormatter(e4);
      }, void 0 !== e3.config.xaxis.labels.formatter ? e3.globals.xLabelFormatter = e3.config.xaxis.labels.formatter : e3.globals.xLabelFormatter = function(t6) {
        if (v2.isNumber(t6)) {
          if (!e3.config.xaxis.convertedCatToNumeric && "numeric" === e3.config.xaxis.type) {
            if (v2.isNumber(e3.config.xaxis.decimalsInFloat)) return t6.toFixed(e3.config.xaxis.decimalsInFloat);
            var i3 = e3.globals.maxX - e3.globals.minX;
            return i3 > 0 && i3 < 100 ? t6.toFixed(1) : t6.toFixed(0);
          }
          if (e3.globals.isBarHorizontal) {
            if (e3.globals.maxY - e3.globals.minYArr < 4) return t6.toFixed(1);
          }
          return t6.toFixed(0);
        }
        return t6;
      }, "function" == typeof e3.config.tooltip.x.formatter ? e3.globals.ttKeyFormatter = e3.config.tooltip.x.formatter : e3.globals.ttKeyFormatter = e3.globals.xLabelFormatter, "function" == typeof e3.config.xaxis.tooltip.formatter && (e3.globals.xaxisTooltipFormatter = e3.config.xaxis.tooltip.formatter), (Array.isArray(e3.config.tooltip.y) || void 0 !== e3.config.tooltip.y.formatter) && (e3.globals.ttVal = e3.config.tooltip.y), void 0 !== e3.config.tooltip.z.formatter && (e3.globals.ttZFormatter = e3.config.tooltip.z.formatter), void 0 !== e3.config.legend.formatter && (e3.globals.legendFormatter = e3.config.legend.formatter), e3.config.yaxis.forEach(function(i3, a3) {
        void 0 !== i3.labels.formatter ? e3.globals.yLabelFormatters[a3] = i3.labels.formatter : e3.globals.yLabelFormatters[a3] = function(s3) {
          return e3.globals.xyCharts ? Array.isArray(s3) ? s3.map(function(e4) {
            return t5.defaultYFormatter(e4, i3, a3);
          }) : t5.defaultYFormatter(s3, i3, a3) : s3;
        };
      }), e3.globals;
    } }, { key: "heatmapLabelFormatters", value: function() {
      var t5 = this.w;
      if ("heatmap" === t5.config.chart.type) {
        t5.globals.yAxisScale[0].result = t5.globals.seriesNames.slice();
        var e3 = t5.globals.seriesNames.reduce(function(t6, e4) {
          return t6.length > e4.length ? t6 : e4;
        }, 0);
        t5.globals.yAxisScale[0].niceMax = e3, t5.globals.yAxisScale[0].niceMin = e3;
      }
    } }]), t4;
  }();
  var Ri2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "getLabel", value: function(t5, e3, i3, a3) {
      var s3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [], r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px", n3 = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6], o3 = this.w, l3 = void 0 === t5[a3] ? "" : t5[a3], h3 = l3, c3 = o3.globals.xLabelFormatter, d3 = o3.config.xaxis.labels.formatter, u3 = false, g3 = new Xi2(this.ctx), p3 = l3;
      n3 && (h3 = g3.xLabelFormat(c3, l3, p3, { i: a3, dateFormatter: new zi2(this.ctx).formatDate, w: o3 }), void 0 !== d3 && (h3 = d3(l3, t5[a3], { i: a3, dateFormatter: new zi2(this.ctx).formatDate, w: o3 })));
      var f3, x3;
      e3.length > 0 ? (f3 = e3[a3].unit, x3 = null, e3.forEach(function(t6) {
        "month" === t6.unit ? x3 = "year" : "day" === t6.unit ? x3 = "month" : "hour" === t6.unit ? x3 = "day" : "minute" === t6.unit && (x3 = "hour");
      }), u3 = x3 === f3, i3 = e3[a3].position, h3 = e3[a3].value) : "datetime" === o3.config.xaxis.type && void 0 === d3 && (h3 = ""), void 0 === h3 && (h3 = ""), h3 = Array.isArray(h3) ? h3 : h3.toString();
      var b3 = new Mi2(this.ctx), m3 = {};
      m3 = o3.globals.rotateXLabels && n3 ? b3.getTextRects(h3, parseInt(r3, 10), null, "rotate(".concat(o3.config.xaxis.labels.rotate, " 0 0)"), false) : b3.getTextRects(h3, parseInt(r3, 10));
      var v3 = !o3.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
      return !Array.isArray(h3) && ("NaN" === String(h3) || s3.indexOf(h3) >= 0 && v3) && (h3 = ""), { x: i3, text: h3, textRect: m3, isBold: u3 };
    } }, { key: "checkLabelBasedOnTickamount", value: function(t5, e3, i3) {
      var a3 = this.w, s3 = a3.config.xaxis.tickAmount;
      return "dataPoints" === s3 && (s3 = Math.round(a3.globals.gridWidth / 120)), s3 > i3 || t5 % Math.round(i3 / (s3 + 1)) == 0 || (e3.text = ""), e3;
    } }, { key: "checkForOverflowingLabels", value: function(t5, e3, i3, a3, s3) {
      var r3 = this.w;
      if (0 === t5 && r3.globals.skipFirstTimelinelabel && (e3.text = ""), t5 === i3 - 1 && r3.globals.skipLastTimelinelabel && (e3.text = ""), r3.config.xaxis.labels.hideOverlappingLabels && a3.length > 0) {
        var n3 = s3[s3.length - 1];
        e3.x < n3.textRect.width / (r3.globals.rotateXLabels ? Math.abs(r3.config.xaxis.labels.rotate) / 12 : 1.01) + n3.x && (e3.text = "");
      }
      return e3;
    } }, { key: "checkForReversedLabels", value: function(t5, e3) {
      var i3 = this.w;
      return i3.config.yaxis[t5] && i3.config.yaxis[t5].reversed && e3.reverse(), e3;
    } }, { key: "yAxisAllSeriesCollapsed", value: function(t5) {
      var e3 = this.w.globals;
      return !e3.seriesYAxisMap[t5].some(function(t6) {
        return -1 === e3.collapsedSeriesIndices.indexOf(t6);
      });
    } }, { key: "translateYAxisIndex", value: function(t5) {
      var e3 = this.w, i3 = e3.globals, a3 = e3.config.yaxis;
      return i3.series.length > a3.length || a3.some(function(t6) {
        return Array.isArray(t6.seriesName);
      }) ? t5 : i3.seriesYAxisReverseMap[t5];
    } }, { key: "isYAxisHidden", value: function(t5) {
      var e3 = this.w, i3 = e3.config.yaxis[t5];
      if (!i3.show || this.yAxisAllSeriesCollapsed(t5)) return true;
      if (!i3.showForNullSeries) {
        var a3 = e3.globals.seriesYAxisMap[t5], s3 = new Pi2(this.ctx);
        return a3.every(function(t6) {
          return s3.isSeriesNull(t6);
        });
      }
      return false;
    } }, { key: "getYAxisForeColor", value: function(t5, e3) {
      var i3 = this.w;
      return Array.isArray(t5) && i3.globals.yAxisScale[e3] && this.ctx.theme.pushExtraColors(t5, i3.globals.yAxisScale[e3].result.length, false), t5;
    } }, { key: "drawYAxisTicks", value: function(t5, e3, i3, a3, s3, r3, n3) {
      var o3 = this.w, l3 = new Mi2(this.ctx), h3 = o3.globals.translateY + o3.config.yaxis[s3].labels.offsetY;
      if (o3.globals.isBarHorizontal ? h3 = 0 : "heatmap" === o3.config.chart.type && (h3 += r3 / 2), a3.show && e3 > 0) {
        true === o3.config.yaxis[s3].opposite && (t5 += a3.width);
        for (var c3 = e3; c3 >= 0; c3--) {
          var d3 = l3.drawLine(t5 + i3.offsetX - a3.width + a3.offsetX, h3 + a3.offsetY, t5 + i3.offsetX + a3.offsetX, h3 + a3.offsetY, a3.color);
          n3.add(d3), h3 += r3;
        }
      }
    } }]), t4;
  }();
  var Ei2 = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.annoCtx = e3, this.helpers = new Ii2(this.annoCtx), this.axesUtils = new Ri2(this.annoCtx);
    }
    return s2(t4, [{ key: "addYaxisAnnotation", value: function(t5, e3, i3) {
      var a3, s3 = this.w, r3 = t5.strokeDashArray, n3 = this.helpers.getY1Y2("y1", t5), o3 = n3.yP, l3 = n3.clipped, h3 = true, c3 = false, d3 = t5.label.text;
      if (null === t5.y2 || void 0 === t5.y2) {
        if (!l3) {
          c3 = true;
          var u3 = this.annoCtx.graphics.drawLine(0 + t5.offsetX, o3 + t5.offsetY, this._getYAxisAnnotationWidth(t5), o3 + t5.offsetY, t5.borderColor, r3, t5.borderWidth);
          e3.appendChild(u3.node), t5.id && u3.node.classList.add(t5.id);
        }
      } else {
        if (a3 = (n3 = this.helpers.getY1Y2("y2", t5)).yP, h3 = n3.clipped, a3 > o3) {
          var g3 = o3;
          o3 = a3, a3 = g3;
        }
        if (!l3 || !h3) {
          c3 = true;
          var p3 = this.annoCtx.graphics.drawRect(0 + t5.offsetX, a3 + t5.offsetY, this._getYAxisAnnotationWidth(t5), o3 - a3, 0, t5.fillColor, t5.opacity, 1, t5.borderColor, r3);
          p3.node.classList.add("apexcharts-annotation-rect"), p3.attr("clip-path", "url(#gridRectMask".concat(s3.globals.cuid, ")")), e3.appendChild(p3.node), t5.id && p3.node.classList.add(t5.id);
        }
      }
      if (c3) {
        var f3 = "right" === t5.label.position ? s3.globals.gridWidth : "center" === t5.label.position ? s3.globals.gridWidth / 2 : 0, x3 = this.annoCtx.graphics.drawText({ x: f3 + t5.label.offsetX, y: (null != a3 ? a3 : o3) + t5.label.offsetY - 3, text: d3, textAnchor: t5.label.textAnchor, fontSize: t5.label.style.fontSize, fontFamily: t5.label.style.fontFamily, fontWeight: t5.label.style.fontWeight, foreColor: t5.label.style.color, cssClass: "apexcharts-yaxis-annotation-label ".concat(t5.label.style.cssClass, " ").concat(t5.id ? t5.id : "") });
        x3.attr({ rel: i3 }), e3.appendChild(x3.node);
      }
    } }, { key: "_getYAxisAnnotationWidth", value: function(t5) {
      var e3 = this.w;
      e3.globals.gridWidth;
      return (t5.width.indexOf("%") > -1 ? e3.globals.gridWidth * parseInt(t5.width, 10) / 100 : parseInt(t5.width, 10)) + t5.offsetX;
    } }, { key: "drawYAxisAnnotations", value: function() {
      var t5 = this, e3 = this.w, i3 = this.annoCtx.graphics.group({ class: "apexcharts-yaxis-annotations" });
      return e3.config.annotations.yaxis.forEach(function(e4, a3) {
        e4.yAxisIndex = t5.axesUtils.translateYAxisIndex(e4.yAxisIndex), t5.axesUtils.isYAxisHidden(e4.yAxisIndex) && t5.axesUtils.yAxisAllSeriesCollapsed(e4.yAxisIndex) || t5.addYaxisAnnotation(e4, i3.node, a3);
      }), i3;
    } }]), t4;
  }();
  var Yi2 = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.annoCtx = e3, this.helpers = new Ii2(this.annoCtx);
    }
    return s2(t4, [{ key: "addPointAnnotation", value: function(t5, e3, i3) {
      if (!(this.w.globals.collapsedSeriesIndices.indexOf(t5.seriesIndex) > -1)) {
        var a3 = this.helpers.getX1X2("x1", t5), s3 = a3.x, r3 = a3.clipped, n3 = (a3 = this.helpers.getY1Y2("y1", t5)).yP, o3 = a3.clipped;
        if (v2.isNumber(s3) && !o3 && !r3) {
          var l3 = { pSize: t5.marker.size, pointStrokeWidth: t5.marker.strokeWidth, pointFillColor: t5.marker.fillColor, pointStrokeColor: t5.marker.strokeColor, shape: t5.marker.shape, pRadius: t5.marker.radius, class: "apexcharts-point-annotation-marker ".concat(t5.marker.cssClass, " ").concat(t5.id ? t5.id : "") }, h3 = this.annoCtx.graphics.drawMarker(s3 + t5.marker.offsetX, n3 + t5.marker.offsetY, l3);
          e3.appendChild(h3.node);
          var c3 = t5.label.text ? t5.label.text : "", d3 = this.annoCtx.graphics.drawText({ x: s3 + t5.label.offsetX, y: n3 + t5.label.offsetY - t5.marker.size - parseFloat(t5.label.style.fontSize) / 1.6, text: c3, textAnchor: t5.label.textAnchor, fontSize: t5.label.style.fontSize, fontFamily: t5.label.style.fontFamily, fontWeight: t5.label.style.fontWeight, foreColor: t5.label.style.color, cssClass: "apexcharts-point-annotation-label ".concat(t5.label.style.cssClass, " ").concat(t5.id ? t5.id : "") });
          if (d3.attr({ rel: i3 }), e3.appendChild(d3.node), t5.customSVG.SVG) {
            var u3 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations-custom-svg " + t5.customSVG.cssClass });
            u3.attr({ transform: "translate(".concat(s3 + t5.customSVG.offsetX, ", ").concat(n3 + t5.customSVG.offsetY, ")") }), u3.node.innerHTML = t5.customSVG.SVG, e3.appendChild(u3.node);
          }
          if (t5.image.path) {
            var g3 = t5.image.width ? t5.image.width : 20, p3 = t5.image.height ? t5.image.height : 20;
            h3 = this.annoCtx.addImage({ x: s3 + t5.image.offsetX - g3 / 2, y: n3 + t5.image.offsetY - p3 / 2, width: g3, height: p3, path: t5.image.path, appendTo: ".apexcharts-point-annotations" });
          }
          t5.mouseEnter && h3.node.addEventListener("mouseenter", t5.mouseEnter.bind(this, t5)), t5.mouseLeave && h3.node.addEventListener("mouseleave", t5.mouseLeave.bind(this, t5)), t5.click && h3.node.addEventListener("click", t5.click.bind(this, t5));
        }
      }
    } }, { key: "drawPointAnnotations", value: function() {
      var t5 = this, e3 = this.w, i3 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations" });
      return e3.config.annotations.points.map(function(e4, a3) {
        t5.addPointAnnotation(e4, i3.node, a3);
      }), i3;
    } }]), t4;
  }();
  var Hi2 = { name: "en", options: { months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], toolbar: { exportToSVG: "Download SVG", exportToPNG: "Download PNG", exportToCSV: "Download CSV", menu: "Menu", selection: "Selection", selectionZoom: "Selection Zoom", zoomIn: "Zoom In", zoomOut: "Zoom Out", pan: "Panning", reset: "Reset Zoom" } } };
  var Oi2 = function() {
    function t4() {
      i2(this, t4), this.yAxis = { show: true, showAlways: false, showForNullSeries: true, seriesName: void 0, opposite: false, reversed: false, logarithmic: false, logBase: 10, tickAmount: void 0, stepSize: void 0, forceNiceScale: false, max: void 0, min: void 0, floating: false, decimalsInFloat: void 0, labels: { show: true, showDuplicates: false, minWidth: 0, maxWidth: 160, offsetX: 0, offsetY: 0, align: void 0, rotate: 0, padding: 20, style: { colors: [], fontSize: "11px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, formatter: void 0 }, axisBorder: { show: false, color: "#e0e0e0", width: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: false, color: "#e0e0e0", width: 6, offsetX: 0, offsetY: 0 }, title: { text: void 0, rotate: -90, offsetY: 0, offsetX: 0, style: { color: void 0, fontSize: "11px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, tooltip: { enabled: false, offsetX: 0 }, crosshairs: { show: true, position: "front", stroke: { color: "#b6b6b6", width: 1, dashArray: 0 } } }, this.pointAnnotation = { id: void 0, x: 0, y: null, yAxisIndex: 0, seriesIndex: void 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, marker: { size: 4, fillColor: "#fff", strokeWidth: 2, strokeColor: "#333", shape: "circle", offsetX: 0, offsetY: 0, cssClass: "" }, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } }, customSVG: { SVG: void 0, cssClass: void 0, offsetX: 0, offsetY: 0 }, image: { path: void 0, width: 20, height: 20, offsetX: 0, offsetY: 0 } }, this.yAxisAnnotation = { id: void 0, y: 0, y2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, width: "100%", yAxisIndex: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "end", position: "right", offsetX: 0, offsetY: -3, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.xAxisAnnotation = { id: void 0, x: 0, x2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", orientation: "vertical", position: "top", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.text = { x: 0, y: 0, text: "", textAnchor: "start", foreColor: void 0, fontSize: "13px", fontFamily: void 0, fontWeight: 400, appendTo: ".apexcharts-annotations", backgroundColor: "transparent", borderColor: "#c2c2c2", borderRadius: 0, borderWidth: 0, paddingLeft: 4, paddingRight: 4, paddingTop: 2, paddingBottom: 2 };
    }
    return s2(t4, [{ key: "init", value: function() {
      return { annotations: { yaxis: [this.yAxisAnnotation], xaxis: [this.xAxisAnnotation], points: [this.pointAnnotation], texts: [], images: [], shapes: [] }, chart: { animations: { enabled: true, speed: 800, animateGradually: { delay: 150, enabled: true }, dynamicAnimation: { enabled: true, speed: 350 } }, background: "", locales: [Hi2], defaultLocale: "en", dropShadow: { enabled: false, enabledOnSeries: void 0, top: 2, left: 2, blur: 4, color: "#000", opacity: 0.7 }, events: { animationEnd: void 0, beforeMount: void 0, mounted: void 0, updated: void 0, click: void 0, mouseMove: void 0, mouseLeave: void 0, xAxisLabelClick: void 0, legendClick: void 0, markerClick: void 0, selection: void 0, dataPointSelection: void 0, dataPointMouseEnter: void 0, dataPointMouseLeave: void 0, beforeZoom: void 0, beforeResetZoom: void 0, zoomed: void 0, scrolled: void 0, brushScrolled: void 0 }, foreColor: "#373d3f", fontFamily: "Helvetica, Arial, sans-serif", height: "auto", parentHeightOffset: 15, redrawOnParentResize: true, redrawOnWindowResize: true, id: void 0, group: void 0, nonce: void 0, offsetX: 0, offsetY: 0, selection: { enabled: false, type: "x", fill: { color: "#24292e", opacity: 0.1 }, stroke: { width: 1, color: "#24292e", opacity: 0.4, dashArray: 3 }, xaxis: { min: void 0, max: void 0 }, yaxis: { min: void 0, max: void 0 } }, sparkline: { enabled: false }, brush: { enabled: false, autoScaleYaxis: true, target: void 0, targets: void 0 }, stacked: false, stackOnlyBar: true, stackType: "normal", toolbar: { show: true, offsetX: 0, offsetY: 0, tools: { download: true, selection: true, zoom: true, zoomin: true, zoomout: true, pan: true, reset: true, customIcons: [] }, export: { csv: { filename: void 0, columnDelimiter: ",", headerCategory: "category", headerValue: "value", categoryFormatter: void 0, valueFormatter: void 0 }, png: { filename: void 0 }, svg: { filename: void 0 }, scale: void 0, width: void 0 }, autoSelected: "zoom" }, type: "line", width: "100%", zoom: { enabled: true, type: "x", autoScaleYaxis: false, allowMouseWheelZoom: true, zoomedArea: { fill: { color: "#90CAF9", opacity: 0.4 }, stroke: { color: "#0D47A1", opacity: 0.4, width: 1 } } } }, plotOptions: { line: { isSlopeChart: false, colors: { threshold: 0, colorAboveThreshold: void 0, colorBelowThreshold: void 0 } }, area: { fillTo: "origin" }, bar: { horizontal: false, columnWidth: "70%", barHeight: "70%", distributed: false, borderRadius: 0, borderRadiusApplication: "around", borderRadiusWhenStacked: "last", rangeBarOverlap: true, rangeBarGroupRows: false, hideZeroBarsWhenGrouped: false, isDumbbell: false, dumbbellColors: void 0, isFunnel: false, isFunnel3d: true, colors: { ranges: [], backgroundBarColors: [], backgroundBarOpacity: 1, backgroundBarRadius: 0 }, dataLabels: { position: "top", maxItems: 100, hideOverflowingLabels: true, orientation: "horizontal", total: { enabled: false, formatter: void 0, offsetX: 0, offsetY: 0, style: { color: "#373d3f", fontSize: "12px", fontFamily: void 0, fontWeight: 600 } } } }, bubble: { zScaling: true, minBubbleRadius: void 0, maxBubbleRadius: void 0 }, candlestick: { colors: { upward: "#00B746", downward: "#EF403C" }, wick: { useFillColor: true } }, boxPlot: { colors: { upper: "#00E396", lower: "#008FFB" } }, heatmap: { radius: 2, enableShades: true, shadeIntensity: 0.5, reverseNegativeShade: false, distributed: false, useFillColorAsStroke: false, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 } }, treemap: { enableShades: true, shadeIntensity: 0.5, distributed: false, reverseNegativeShade: false, useFillColorAsStroke: false, borderRadius: 4, dataLabels: { format: "scale" }, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 }, seriesTitle: { show: true, offsetY: 1, offsetX: 1, borderColor: "#000", borderWidth: 1, borderRadius: 2, style: { background: "rgba(0, 0, 0, 0.6)", color: "#fff", fontSize: "12px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 6, right: 6, top: 2, bottom: 2 } } } }, radialBar: { inverseOrder: false, startAngle: 0, endAngle: 360, offsetX: 0, offsetY: 0, hollow: { margin: 5, size: "50%", background: "transparent", image: void 0, imageWidth: 150, imageHeight: 150, imageOffsetX: 0, imageOffsetY: 0, imageClipped: true, position: "front", dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, track: { show: true, startAngle: void 0, endAngle: void 0, background: "#f2f2f2", strokeWidth: "97%", opacity: 1, margin: 5, dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, dataLabels: { show: true, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: 0, formatter: function(t5) {
        return t5;
      } }, value: { show: true, fontSize: "14px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 16, formatter: function(t5) {
        return t5 + "%";
      } }, total: { show: false, label: "Total", fontSize: "16px", fontWeight: 600, fontFamily: void 0, color: void 0, formatter: function(t5) {
        return t5.globals.seriesTotals.reduce(function(t6, e3) {
          return t6 + e3;
        }, 0) / t5.globals.series.length + "%";
      } } }, barLabels: { enabled: false, offsetX: 0, offsetY: 0, useSeriesColors: true, fontFamily: void 0, fontWeight: 600, fontSize: "16px", formatter: function(t5) {
        return t5;
      }, onClick: void 0 } }, pie: { customScale: 1, offsetX: 0, offsetY: 0, startAngle: 0, endAngle: 360, expandOnClick: true, dataLabels: { offset: 0, minAngleToShowLabel: 10 }, donut: { size: "65%", background: "transparent", labels: { show: false, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: -10, formatter: function(t5) {
        return t5;
      } }, value: { show: true, fontSize: "20px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 10, formatter: function(t5) {
        return t5;
      } }, total: { show: false, showAlways: false, label: "Total", fontSize: "16px", fontWeight: 400, fontFamily: void 0, color: void 0, formatter: function(t5) {
        return t5.globals.seriesTotals.reduce(function(t6, e3) {
          return t6 + e3;
        }, 0);
      } } } } }, polarArea: { rings: { strokeWidth: 1, strokeColor: "#e8e8e8" }, spokes: { strokeWidth: 1, connectorColors: "#e8e8e8" } }, radar: { size: void 0, offsetX: 0, offsetY: 0, polygons: { strokeWidth: 1, strokeColors: "#e8e8e8", connectorColors: "#e8e8e8", fill: { colors: void 0 } } } }, colors: void 0, dataLabels: { enabled: true, enabledOnSeries: void 0, formatter: function(t5) {
        return null !== t5 ? t5 : "";
      }, textAnchor: "middle", distributed: false, offsetX: 0, offsetY: 0, style: { fontSize: "12px", fontFamily: void 0, fontWeight: 600, colors: void 0 }, background: { enabled: true, foreColor: "#fff", backgroundColor: void 0, borderRadius: 2, padding: 4, opacity: 0.9, borderWidth: 1, borderColor: "#fff", dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.8 } }, dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.8 } }, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] }, image: { src: [], width: void 0, height: void 0 }, pattern: { style: "squares", width: 6, height: 6, strokeWidth: 2 } }, forecastDataPoints: { count: 0, fillOpacity: 0.5, strokeWidth: void 0, dashArray: 4 }, grid: { show: true, borderColor: "#e0e0e0", strokeDashArray: 0, position: "back", xaxis: { lines: { show: false } }, yaxis: { lines: { show: true } }, row: { colors: void 0, opacity: 0.5 }, column: { colors: void 0, opacity: 0.5 }, padding: { top: 0, right: 10, bottom: 0, left: 12 } }, labels: [], legend: { show: true, showForSingleSeries: false, showForNullSeries: true, showForZeroSeries: true, floating: false, position: "bottom", horizontalAlign: "center", inverseOrder: false, fontSize: "12px", fontFamily: void 0, fontWeight: 400, width: void 0, height: void 0, formatter: void 0, tooltipHoverFormatter: void 0, offsetX: -20, offsetY: 4, customLegendItems: [], clusterGroupedSeries: true, clusterGroupedSeriesOrientation: "vertical", labels: { colors: void 0, useSeriesColors: false }, markers: { size: 7, fillColors: void 0, strokeWidth: 1, shape: void 0, offsetX: 0, offsetY: 0, customHTML: void 0, onClick: void 0 }, itemMargin: { horizontal: 5, vertical: 4 }, onItemClick: { toggleDataSeries: true }, onItemHover: { highlightDataSeries: true } }, markers: { discrete: [], size: 0, colors: void 0, strokeColors: "#fff", strokeWidth: 2, strokeOpacity: 0.9, strokeDashArray: 0, fillOpacity: 1, shape: "circle", offsetX: 0, offsetY: 0, showNullDataPoints: true, onClick: void 0, onDblClick: void 0, hover: { size: void 0, sizeOffset: 3 } }, noData: { text: void 0, align: "center", verticalAlign: "middle", offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "14px", fontFamily: void 0 } }, responsive: [], series: void 0, states: { hover: { filter: { type: "lighten" } }, active: { allowMultipleDataPointsSelection: false, filter: { type: "darken" } } }, title: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 0, floating: false, style: { fontSize: "14px", fontWeight: 900, fontFamily: void 0, color: void 0 } }, subtitle: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 30, floating: false, style: { fontSize: "12px", fontWeight: 400, fontFamily: void 0, color: void 0 } }, stroke: { show: true, curve: "smooth", lineCap: "butt", width: 2, colors: void 0, dashArray: 0, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] } } }, tooltip: { enabled: true, enabledOnSeries: void 0, shared: true, hideEmptySeries: false, followCursor: false, intersect: false, inverseOrder: false, custom: void 0, fillSeriesColor: false, theme: "light", cssClass: "", style: { fontSize: "12px", fontFamily: void 0 }, onDatasetHover: { highlightDataSeries: false }, x: { show: true, format: "dd MMM", formatter: void 0 }, y: { formatter: void 0, title: { formatter: function(t5) {
        return t5 ? t5 + ": " : "";
      } } }, z: { formatter: void 0, title: "Size: " }, marker: { show: true, fillColors: void 0 }, items: { display: "flex" }, fixed: { enabled: false, position: "topRight", offsetX: 0, offsetY: 0 } }, xaxis: { type: "category", categories: [], convertedCatToNumeric: false, offsetX: 0, offsetY: 0, overwriteCategories: void 0, labels: { show: true, rotate: -45, rotateAlways: false, hideOverlappingLabels: true, trim: false, minHeight: void 0, maxHeight: 120, showDuplicates: true, style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, offsetX: 0, offsetY: 0, format: void 0, formatter: void 0, datetimeUTC: true, datetimeFormatter: { year: "yyyy", month: "MMM 'yy", day: "dd MMM", hour: "HH:mm", minute: "HH:mm:ss", second: "HH:mm:ss" } }, group: { groups: [], style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" } }, axisBorder: { show: true, color: "#e0e0e0", width: "100%", height: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: true, color: "#e0e0e0", height: 6, offsetX: 0, offsetY: 0 }, stepSize: void 0, tickAmount: void 0, tickPlacement: "on", min: void 0, max: void 0, range: void 0, floating: false, decimalsInFloat: void 0, position: "bottom", title: { text: void 0, offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "12px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, crosshairs: { show: true, width: 1, position: "back", opacity: 0.9, stroke: { color: "#b6b6b6", width: 1, dashArray: 3 }, fill: { type: "solid", color: "#B1B9C4", gradient: { colorFrom: "#D8E3F0", colorTo: "#BED1E6", stops: [0, 100], opacityFrom: 0.4, opacityTo: 0.5 } }, dropShadow: { enabled: false, left: 0, top: 0, blur: 1, opacity: 0.8 } }, tooltip: { enabled: true, offsetY: 0, formatter: void 0, style: { fontSize: "12px", fontFamily: void 0 } } }, yaxis: this.yAxis, theme: { mode: "", palette: "palette1", monochrome: { enabled: false, color: "#008FFB", shadeTo: "light", shadeIntensity: 0.65 } } };
    } }]), t4;
  }();
  var Fi2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.graphics = new Mi2(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = true), this.helpers = new Ii2(this), this.xAxisAnnotations = new Ti2(this), this.yAxisAnnotations = new Ei2(this), this.pointsAnnotations = new Yi2(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = true), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
    }
    return s2(t4, [{ key: "drawAxesAnnotations", value: function() {
      var t5 = this.w;
      if (t5.globals.axisCharts && t5.globals.dataPoints) {
        for (var e3 = this.yAxisAnnotations.drawYAxisAnnotations(), i3 = this.xAxisAnnotations.drawXAxisAnnotations(), a3 = this.pointsAnnotations.drawPointAnnotations(), s3 = t5.config.chart.animations.enabled, r3 = [e3, i3, a3], n3 = [i3.node, e3.node, a3.node], o3 = 0; o3 < 3; o3++) t5.globals.dom.elGraphical.add(r3[o3]), !s3 || t5.globals.resized || t5.globals.dataChanged || "scatter" !== t5.config.chart.type && "bubble" !== t5.config.chart.type && t5.globals.dataPoints > 1 && n3[o3].classList.add("apexcharts-element-hidden"), t5.globals.delayedElements.push({ el: n3[o3], index: 0 });
        this.helpers.annotationsBackground();
      }
    } }, { key: "drawImageAnnos", value: function() {
      var t5 = this;
      this.w.config.annotations.images.map(function(e3, i3) {
        t5.addImage(e3, i3);
      });
    } }, { key: "drawTextAnnos", value: function() {
      var t5 = this;
      this.w.config.annotations.texts.map(function(e3, i3) {
        t5.addText(e3, i3);
      });
    } }, { key: "addXaxisAnnotation", value: function(t5, e3, i3) {
      this.xAxisAnnotations.addXaxisAnnotation(t5, e3, i3);
    } }, { key: "addYaxisAnnotation", value: function(t5, e3, i3) {
      this.yAxisAnnotations.addYaxisAnnotation(t5, e3, i3);
    } }, { key: "addPointAnnotation", value: function(t5, e3, i3) {
      this.pointsAnnotations.addPointAnnotation(t5, e3, i3);
    } }, { key: "addText", value: function(t5, e3) {
      var i3 = t5.x, a3 = t5.y, s3 = t5.text, r3 = t5.textAnchor, n3 = t5.foreColor, o3 = t5.fontSize, l3 = t5.fontFamily, h3 = t5.fontWeight, c3 = t5.cssClass, d3 = t5.backgroundColor, u3 = t5.borderWidth, g3 = t5.strokeDashArray, p3 = t5.borderRadius, f3 = t5.borderColor, x3 = t5.appendTo, b3 = void 0 === x3 ? ".apexcharts-svg" : x3, m3 = t5.paddingLeft, v3 = void 0 === m3 ? 4 : m3, y3 = t5.paddingRight, w3 = void 0 === y3 ? 4 : y3, k3 = t5.paddingBottom, A3 = void 0 === k3 ? 2 : k3, C3 = t5.paddingTop, S3 = void 0 === C3 ? 2 : C3, L3 = this.w, M3 = this.graphics.drawText({ x: i3, y: a3, text: s3, textAnchor: r3 || "start", fontSize: o3 || "12px", fontWeight: h3 || "regular", fontFamily: l3 || L3.config.chart.fontFamily, foreColor: n3 || L3.config.chart.foreColor, cssClass: c3 }), P3 = L3.globals.dom.baseEl.querySelector(b3);
      P3 && P3.appendChild(M3.node);
      var I3 = M3.bbox();
      if (s3) {
        var T3 = this.graphics.drawRect(I3.x - v3, I3.y - S3, I3.width + v3 + w3, I3.height + A3 + S3, p3, d3 || "transparent", 1, u3, f3, g3);
        P3.insertBefore(T3.node, M3.node);
      }
    } }, { key: "addImage", value: function(t5, e3) {
      var i3 = this.w, a3 = t5.path, s3 = t5.x, r3 = void 0 === s3 ? 0 : s3, n3 = t5.y, o3 = void 0 === n3 ? 0 : n3, l3 = t5.width, h3 = void 0 === l3 ? 20 : l3, c3 = t5.height, d3 = void 0 === c3 ? 20 : c3, u3 = t5.appendTo, g3 = void 0 === u3 ? ".apexcharts-svg" : u3, p3 = i3.globals.dom.Paper.image(a3);
      p3.size(h3, d3).move(r3, o3);
      var f3 = i3.globals.dom.baseEl.querySelector(g3);
      return f3 && f3.appendChild(p3.node), p3;
    } }, { key: "addXaxisAnnotationExternal", value: function(t5, e3, i3) {
      return this.addAnnotationExternal({ params: t5, pushToMemory: e3, context: i3, type: "xaxis", contextMethod: i3.addXaxisAnnotation }), i3;
    } }, { key: "addYaxisAnnotationExternal", value: function(t5, e3, i3) {
      return this.addAnnotationExternal({ params: t5, pushToMemory: e3, context: i3, type: "yaxis", contextMethod: i3.addYaxisAnnotation }), i3;
    } }, { key: "addPointAnnotationExternal", value: function(t5, e3, i3) {
      return void 0 === this.invertAxis && (this.invertAxis = i3.w.globals.isBarHorizontal), this.addAnnotationExternal({ params: t5, pushToMemory: e3, context: i3, type: "point", contextMethod: i3.addPointAnnotation }), i3;
    } }, { key: "addAnnotationExternal", value: function(t5) {
      var e3 = t5.params, i3 = t5.pushToMemory, a3 = t5.context, s3 = t5.type, r3 = t5.contextMethod, n3 = a3, o3 = n3.w, l3 = o3.globals.dom.baseEl.querySelector(".apexcharts-".concat(s3, "-annotations")), h3 = l3.childNodes.length + 1, c3 = new Oi2(), d3 = Object.assign({}, "xaxis" === s3 ? c3.xAxisAnnotation : "yaxis" === s3 ? c3.yAxisAnnotation : c3.pointAnnotation), u3 = v2.extend(d3, e3);
      switch (s3) {
        case "xaxis":
          this.addXaxisAnnotation(u3, l3, h3);
          break;
        case "yaxis":
          this.addYaxisAnnotation(u3, l3, h3);
          break;
        case "point":
          this.addPointAnnotation(u3, l3, h3);
      }
      var g3 = o3.globals.dom.baseEl.querySelector(".apexcharts-".concat(s3, "-annotations .apexcharts-").concat(s3, "-annotation-label[rel='").concat(h3, "']")), p3 = this.helpers.addBackgroundToAnno(g3, u3);
      return p3 && l3.insertBefore(p3.node, g3), i3 && o3.globals.memory.methodsToExec.push({ context: n3, id: u3.id ? u3.id : v2.randomId(), method: r3, label: "addAnnotation", params: e3 }), a3;
    } }, { key: "clearAnnotations", value: function(t5) {
      for (var e3 = t5.w, i3 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations"), a3 = e3.globals.memory.methodsToExec.length - 1; a3 >= 0; a3--) "addText" !== e3.globals.memory.methodsToExec[a3].label && "addAnnotation" !== e3.globals.memory.methodsToExec[a3].label || e3.globals.memory.methodsToExec.splice(a3, 1);
      i3 = v2.listToArray(i3), Array.prototype.forEach.call(i3, function(t6) {
        for (; t6.firstChild; ) t6.removeChild(t6.firstChild);
      });
    } }, { key: "removeAnnotation", value: function(t5, e3) {
      var i3 = t5.w, a3 = i3.globals.dom.baseEl.querySelectorAll(".".concat(e3));
      a3 && (i3.globals.memory.methodsToExec.map(function(t6, a4) {
        t6.id === e3 && i3.globals.memory.methodsToExec.splice(a4, 1);
      }), Object.keys(i3.config.annotations).forEach(function(t6) {
        var a4 = i3.config.annotations[t6];
        Array.isArray(a4) && (i3.config.annotations[t6] = a4.filter(function(t7) {
          return t7.id !== e3;
        }));
      }), Array.prototype.forEach.call(a3, function(t6) {
        t6.parentElement.removeChild(t6);
      }));
    } }]), t4;
  }();
  var Di2 = function(t4) {
    var e3, i3 = t4.isTimeline, a3 = t4.ctx, s3 = t4.seriesIndex, r3 = t4.dataPointIndex, n3 = t4.y1, o3 = t4.y2, l3 = t4.w, h3 = l3.globals.seriesRangeStart[s3][r3], c3 = l3.globals.seriesRangeEnd[s3][r3], d3 = l3.globals.labels[r3], u3 = l3.config.series[s3].name ? l3.config.series[s3].name : "", g3 = l3.globals.ttKeyFormatter, p3 = l3.config.tooltip.y.title.formatter, f3 = { w: l3, seriesIndex: s3, dataPointIndex: r3, start: h3, end: c3 };
    ("function" == typeof p3 && (u3 = p3(u3, f3)), null !== (e3 = l3.config.series[s3].data[r3]) && void 0 !== e3 && e3.x && (d3 = l3.config.series[s3].data[r3].x), i3) || "datetime" === l3.config.xaxis.type && (d3 = new Xi2(a3).xLabelFormat(l3.globals.ttKeyFormatter, d3, d3, { i: void 0, dateFormatter: new zi2(a3).formatDate, w: l3 }));
    "function" == typeof g3 && (d3 = g3(d3, f3)), Number.isFinite(n3) && Number.isFinite(o3) && (h3 = n3, c3 = o3);
    var x3 = "", b3 = "", m3 = l3.globals.colors[s3];
    if (void 0 === l3.config.tooltip.x.formatter) if ("datetime" === l3.config.xaxis.type) {
      var v3 = new zi2(a3);
      x3 = v3.formatDate(v3.getDate(h3), l3.config.tooltip.x.format), b3 = v3.formatDate(v3.getDate(c3), l3.config.tooltip.x.format);
    } else x3 = h3, b3 = c3;
    else x3 = l3.config.tooltip.x.formatter(h3), b3 = l3.config.tooltip.x.formatter(c3);
    return { start: h3, end: c3, startVal: x3, endVal: b3, ylabel: d3, color: m3, seriesName: u3 };
  };
  var _i2 = function(t4) {
    var e3 = t4.color, i3 = t4.seriesName, a3 = t4.ylabel, s3 = t4.start, r3 = t4.end, n3 = t4.seriesIndex, o3 = t4.dataPointIndex, l3 = t4.ctx.tooltip.tooltipLabels.getFormatters(n3);
    s3 = l3.yLbFormatter(s3), r3 = l3.yLbFormatter(r3);
    var h3 = l3.yLbFormatter(t4.w.globals.series[n3][o3]), c3 = '<span class="value start-value">\n  '.concat(s3, '\n  </span> <span class="separator">-</span> <span class="value end-value">\n  ').concat(r3, "\n  </span>");
    return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + e3 + '">' + (i3 || "") + '</span></div><div> <span class="category">' + a3 + ": </span> " + (t4.w.globals.comboCharts ? "rangeArea" === t4.w.config.series[n3].type || "rangeBar" === t4.w.config.series[n3].type ? c3 : "<span>".concat(h3, "</span>") : c3) + " </div></div>";
  };
  var Ni2 = function() {
    function t4(e3) {
      i2(this, t4), this.opts = e3;
    }
    return s2(t4, [{ key: "hideYAxis", value: function() {
      this.opts.yaxis[0].show = false, this.opts.yaxis[0].title.text = "", this.opts.yaxis[0].axisBorder.show = false, this.opts.yaxis[0].axisTicks.show = false, this.opts.yaxis[0].floating = true;
    } }, { key: "line", value: function() {
      return { dataLabels: { enabled: false }, stroke: { width: 5, curve: "straight" }, markers: { size: 0, hover: { sizeOffset: 6 } }, xaxis: { crosshairs: { width: 1 } } };
    } }, { key: "sparkline", value: function(t5) {
      this.hideYAxis();
      return v2.extend(t5, { grid: { show: false, padding: { left: 0, right: 0, top: 0, bottom: 0 } }, legend: { show: false }, xaxis: { labels: { show: false }, tooltip: { enabled: false }, axisBorder: { show: false }, axisTicks: { show: false } }, chart: { toolbar: { show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false } });
    } }, { key: "slope", value: function() {
      return this.hideYAxis(), { chart: { toolbar: { show: false }, zoom: { enabled: false } }, dataLabels: { enabled: true, formatter: function(t5, e3) {
        var i3 = e3.w.config.series[e3.seriesIndex].name;
        return null !== t5 ? i3 + ": " + t5 : "";
      }, background: { enabled: false }, offsetX: -5 }, grid: { xaxis: { lines: { show: true } }, yaxis: { lines: { show: false } } }, xaxis: { position: "top", labels: { style: { fontSize: 14, fontWeight: 900 } }, tooltip: { enabled: false }, crosshairs: { show: false } }, markers: { size: 8, hover: { sizeOffset: 1 } }, legend: { show: false }, tooltip: { shared: false, intersect: true, followCursor: true }, stroke: { width: 5, curve: "straight" } };
    } }, { key: "bar", value: function() {
      return { chart: { stacked: false }, plotOptions: { bar: { dataLabels: { position: "center" } } }, dataLabels: { style: { colors: ["#fff"] }, background: { enabled: false } }, stroke: { width: 0, lineCap: "square" }, fill: { opacity: 0.85 }, legend: { markers: { shape: "square" } }, tooltip: { shared: false, intersect: true }, xaxis: { tooltip: { enabled: false }, tickPlacement: "between", crosshairs: { width: "barWidth", position: "back", fill: { type: "gradient" }, dropShadow: { enabled: false }, stroke: { width: 0 } } } };
    } }, { key: "funnel", value: function() {
      return this.hideYAxis(), u2(u2({}, this.bar()), {}, { chart: { animations: { speed: 800, animateGradually: { enabled: false } } }, plotOptions: { bar: { horizontal: true, borderRadiusApplication: "around", borderRadius: 0, dataLabels: { position: "center" } } }, grid: { show: false, padding: { left: 0, right: 0 } }, xaxis: { labels: { show: false }, tooltip: { enabled: false }, axisBorder: { show: false }, axisTicks: { show: false } } });
    } }, { key: "candlestick", value: function() {
      var t5 = this;
      return { stroke: { width: 1 }, fill: { opacity: 1 }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e3) {
        var i3 = e3.seriesIndex, a3 = e3.dataPointIndex, s3 = e3.w;
        return t5._getBoxTooltip(s3, i3, a3, ["Open", "High", "", "Low", "Close"], "candlestick");
      } }, states: { active: { filter: { type: "none" } } }, xaxis: { crosshairs: { width: 1 } } };
    } }, { key: "boxPlot", value: function() {
      var t5 = this;
      return { chart: { animations: { dynamicAnimation: { enabled: false } } }, stroke: { width: 1, colors: ["#24292e"] }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e3) {
        var i3 = e3.seriesIndex, a3 = e3.dataPointIndex, s3 = e3.w;
        return t5._getBoxTooltip(s3, i3, a3, ["Minimum", "Q1", "Median", "Q3", "Maximum"], "boxPlot");
      } }, markers: { size: 7, strokeWidth: 1, strokeColors: "#111" }, xaxis: { crosshairs: { width: 1 } } };
    } }, { key: "rangeBar", value: function() {
      return { chart: { animations: { animateGradually: false } }, stroke: { width: 0, lineCap: "square" }, plotOptions: { bar: { borderRadius: 0, dataLabels: { position: "center" } } }, dataLabels: { enabled: false, formatter: function(t5, e3) {
        e3.ctx;
        var i3 = e3.seriesIndex, a3 = e3.dataPointIndex, s3 = e3.w, r3 = function() {
          var t6 = s3.globals.seriesRangeStart[i3][a3];
          return s3.globals.seriesRangeEnd[i3][a3] - t6;
        };
        return s3.globals.comboCharts ? "rangeBar" === s3.config.series[i3].type || "rangeArea" === s3.config.series[i3].type ? r3() : t5 : r3();
      }, background: { enabled: false }, style: { colors: ["#fff"] } }, markers: { size: 10 }, tooltip: { shared: false, followCursor: true, custom: function(t5) {
        return t5.w.config.plotOptions && t5.w.config.plotOptions.bar && t5.w.config.plotOptions.bar.horizontal ? function(t6) {
          var e3 = Di2(u2(u2({}, t6), {}, { isTimeline: true })), i3 = e3.color, a3 = e3.seriesName, s3 = e3.ylabel, r3 = e3.startVal, n3 = e3.endVal;
          return _i2(u2(u2({}, t6), {}, { color: i3, seriesName: a3, ylabel: s3, start: r3, end: n3 }));
        }(t5) : function(t6) {
          var e3 = Di2(t6), i3 = e3.color, a3 = e3.seriesName, s3 = e3.ylabel, r3 = e3.start, n3 = e3.end;
          return _i2(u2(u2({}, t6), {}, { color: i3, seriesName: a3, ylabel: s3, start: r3, end: n3 }));
        }(t5);
      } }, xaxis: { tickPlacement: "between", tooltip: { enabled: false }, crosshairs: { stroke: { width: 0 } } } };
    } }, { key: "dumbbell", value: function(t5) {
      var e3, i3;
      return null !== (e3 = t5.plotOptions.bar) && void 0 !== e3 && e3.barHeight || (t5.plotOptions.bar.barHeight = 2), null !== (i3 = t5.plotOptions.bar) && void 0 !== i3 && i3.columnWidth || (t5.plotOptions.bar.columnWidth = 2), t5;
    } }, { key: "area", value: function() {
      return { stroke: { width: 4, fill: { type: "solid", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } } }, fill: { type: "gradient", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } }, markers: { size: 0, hover: { sizeOffset: 6 } }, tooltip: { followCursor: false } };
    } }, { key: "rangeArea", value: function() {
      return { stroke: { curve: "straight", width: 0 }, fill: { type: "solid", opacity: 0.6 }, markers: { size: 0 }, states: { hover: { filter: { type: "none" } }, active: { filter: { type: "none" } } }, tooltip: { intersect: false, shared: true, followCursor: true, custom: function(t5) {
        return function(t6) {
          var e3 = Di2(t6), i3 = e3.color, a3 = e3.seriesName, s3 = e3.ylabel, r3 = e3.start, n3 = e3.end;
          return _i2(u2(u2({}, t6), {}, { color: i3, seriesName: a3, ylabel: s3, start: r3, end: n3 }));
        }(t5);
      } } };
    } }, { key: "brush", value: function(t5) {
      return v2.extend(t5, { chart: { toolbar: { autoSelected: "selection", show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false }, stroke: { width: 1 }, tooltip: { enabled: false }, xaxis: { tooltip: { enabled: false } } });
    } }, { key: "stacked100", value: function(t5) {
      t5.dataLabels = t5.dataLabels || {}, t5.dataLabels.formatter = t5.dataLabels.formatter || void 0;
      var e3 = t5.dataLabels.formatter;
      return t5.yaxis.forEach(function(e4, i3) {
        t5.yaxis[i3].min = 0, t5.yaxis[i3].max = 100;
      }), "bar" === t5.chart.type && (t5.dataLabels.formatter = e3 || function(t6) {
        return "number" == typeof t6 && t6 ? t6.toFixed(0) + "%" : t6;
      }), t5;
    } }, { key: "stackedBars", value: function() {
      var t5 = this.bar();
      return u2(u2({}, t5), {}, { plotOptions: u2(u2({}, t5.plotOptions), {}, { bar: u2(u2({}, t5.plotOptions.bar), {}, { borderRadiusApplication: "end", borderRadiusWhenStacked: "last" }) }) });
    } }, { key: "convertCatToNumeric", value: function(t5) {
      return t5.xaxis.convertedCatToNumeric = true, t5;
    } }, { key: "convertCatToNumericXaxis", value: function(t5, e3, i3) {
      t5.xaxis.type = "numeric", t5.xaxis.labels = t5.xaxis.labels || {}, t5.xaxis.labels.formatter = t5.xaxis.labels.formatter || function(t6) {
        return v2.isNumber(t6) ? Math.floor(t6) : t6;
      };
      var a3 = t5.xaxis.labels.formatter, s3 = t5.xaxis.categories && t5.xaxis.categories.length ? t5.xaxis.categories : t5.labels;
      return i3 && i3.length && (s3 = i3.map(function(t6) {
        return Array.isArray(t6) ? t6 : String(t6);
      })), s3 && s3.length && (t5.xaxis.labels.formatter = function(t6) {
        return v2.isNumber(t6) ? a3(s3[Math.floor(t6) - 1]) : a3(t6);
      }), t5.xaxis.categories = [], t5.labels = [], t5.xaxis.tickAmount = t5.xaxis.tickAmount || "dataPoints", t5;
    } }, { key: "bubble", value: function() {
      return { dataLabels: { style: { colors: ["#fff"] } }, tooltip: { shared: false, intersect: true }, xaxis: { crosshairs: { width: 0 } }, fill: { type: "solid", gradient: { shade: "light", inverse: true, shadeIntensity: 0.55, opacityFrom: 0.4, opacityTo: 0.8 } } };
    } }, { key: "scatter", value: function() {
      return { dataLabels: { enabled: false }, tooltip: { shared: false, intersect: true }, markers: { size: 6, strokeWidth: 1, hover: { sizeOffset: 2 } } };
    } }, { key: "heatmap", value: function() {
      return { chart: { stacked: false }, fill: { opacity: 1 }, dataLabels: { style: { colors: ["#fff"] } }, stroke: { colors: ["#fff"] }, tooltip: { followCursor: true, marker: { show: false }, x: { show: false } }, legend: { position: "top", markers: { shape: "square" } }, grid: { padding: { right: 20 } } };
    } }, { key: "treemap", value: function() {
      return { chart: { zoom: { enabled: false } }, dataLabels: { style: { fontSize: 14, fontWeight: 600, colors: ["#fff"] } }, stroke: { show: true, width: 2, colors: ["#fff"] }, legend: { show: false }, fill: { opacity: 1, gradient: { stops: [0, 100] } }, tooltip: { followCursor: true, x: { show: false } }, grid: { padding: { left: 0, right: 0 } }, xaxis: { crosshairs: { show: false }, tooltip: { enabled: false } } };
    } }, { key: "pie", value: function() {
      return { chart: { toolbar: { show: false } }, plotOptions: { pie: { donut: { labels: { show: false } } } }, dataLabels: { formatter: function(t5) {
        return t5.toFixed(1) + "%";
      }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", stops: [0, 100] } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" }, grid: { padding: { left: 0, right: 0, top: 0, bottom: 0 } } };
    } }, { key: "donut", value: function() {
      return { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t5) {
        return t5.toFixed(1) + "%";
      }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", shadeIntensity: 0.35, stops: [80, 100], opacityFrom: 1, opacityTo: 1 } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" }, grid: { padding: { left: 0, right: 0, top: 0, bottom: 0 } } };
    } }, { key: "polarArea", value: function() {
      return { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t5) {
        return t5.toFixed(1) + "%";
      }, enabled: false }, stroke: { show: true, width: 2 }, fill: { opacity: 0.7 }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" }, grid: { padding: { left: 0, right: 0, top: 0, bottom: 0 } } };
    } }, { key: "radar", value: function() {
      return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, { dataLabels: { enabled: false, style: { fontSize: "11px" } }, stroke: { width: 2 }, markers: { size: 5, strokeWidth: 1, strokeOpacity: 1 }, fill: { opacity: 0.2 }, tooltip: { shared: false, intersect: true, followCursor: true }, grid: { show: false, padding: { left: 0, right: 0, top: 0, bottom: 0 } }, xaxis: { labels: { formatter: function(t5) {
        return t5;
      }, style: { colors: ["#a8a8a8"], fontSize: "11px" } }, tooltip: { enabled: false }, crosshairs: { show: false } } };
    } }, { key: "radialBar", value: function() {
      return { chart: { animations: { dynamicAnimation: { enabled: true, speed: 800 } }, toolbar: { show: false } }, fill: { gradient: { shade: "dark", shadeIntensity: 0.4, inverseColors: false, type: "diagonal2", opacityFrom: 1, opacityTo: 1, stops: [70, 98, 100] } }, legend: { show: false, position: "right" }, tooltip: { enabled: false, fillSeriesColor: true }, grid: { padding: { left: 0, right: 0, top: 0, bottom: 0 } } };
    } }, { key: "_getBoxTooltip", value: function(t5, e3, i3, a3, s3) {
      var r3 = t5.globals.seriesCandleO[e3][i3], n3 = t5.globals.seriesCandleH[e3][i3], o3 = t5.globals.seriesCandleM[e3][i3], l3 = t5.globals.seriesCandleL[e3][i3], h3 = t5.globals.seriesCandleC[e3][i3];
      return t5.config.series[e3].type && t5.config.series[e3].type !== s3 ? '<div class="apexcharts-custom-tooltip">\n          '.concat(t5.config.series[e3].name ? t5.config.series[e3].name : "series-" + (e3 + 1), ": <strong>").concat(t5.globals.series[e3][i3], "</strong>\n        </div>") : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(t5.config.chart.type, '">') + "<div>".concat(a3[0], ': <span class="value">') + r3 + "</span></div>" + "<div>".concat(a3[1], ': <span class="value">') + n3 + "</span></div>" + (o3 ? "<div>".concat(a3[2], ': <span class="value">') + o3 + "</span></div>" : "") + "<div>".concat(a3[3], ': <span class="value">') + l3 + "</span></div>" + "<div>".concat(a3[4], ': <span class="value">') + h3 + "</span></div></div>";
    } }]), t4;
  }();
  var Wi2 = function() {
    function t4(e3) {
      i2(this, t4), this.opts = e3;
    }
    return s2(t4, [{ key: "init", value: function(t5) {
      var e3 = t5.responsiveOverride, i3 = this.opts, a3 = new Oi2(), s3 = new Ni2(i3);
      this.chartType = i3.chart.type, i3 = this.extendYAxis(i3), i3 = this.extendAnnotations(i3);
      var r3 = a3.init(), n3 = {};
      if (i3 && "object" === b2(i3)) {
        var o3, l3, h3, c3, d3, u3, g3, p3, f3, x3, m3 = {};
        m3 = -1 !== ["line", "area", "bar", "candlestick", "boxPlot", "rangeBar", "rangeArea", "bubble", "scatter", "heatmap", "treemap", "pie", "polarArea", "donut", "radar", "radialBar"].indexOf(i3.chart.type) ? s3[i3.chart.type]() : s3.line(), null !== (o3 = i3.plotOptions) && void 0 !== o3 && null !== (l3 = o3.bar) && void 0 !== l3 && l3.isFunnel && (m3 = s3.funnel()), i3.chart.stacked && "bar" === i3.chart.type && (m3 = s3.stackedBars()), null !== (h3 = i3.chart.brush) && void 0 !== h3 && h3.enabled && (m3 = s3.brush(m3)), null !== (c3 = i3.plotOptions) && void 0 !== c3 && null !== (d3 = c3.line) && void 0 !== d3 && d3.isSlopeChart && (m3 = s3.slope()), i3.chart.stacked && "100%" === i3.chart.stackType && (i3 = s3.stacked100(i3)), null !== (u3 = i3.plotOptions) && void 0 !== u3 && null !== (g3 = u3.bar) && void 0 !== g3 && g3.isDumbbell && (i3 = s3.dumbbell(i3)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(i3), i3.xaxis = i3.xaxis || window.Apex.xaxis || {}, e3 || (i3.xaxis.convertedCatToNumeric = false), (null !== (p3 = (i3 = this.checkForCatToNumericXAxis(this.chartType, m3, i3)).chart.sparkline) && void 0 !== p3 && p3.enabled || null !== (f3 = window.Apex.chart) && void 0 !== f3 && null !== (x3 = f3.sparkline) && void 0 !== x3 && x3.enabled) && (m3 = s3.sparkline(m3)), n3 = v2.extend(r3, m3);
      }
      var y3 = v2.extend(n3, window.Apex);
      return r3 = v2.extend(y3, i3), r3 = this.handleUserInputErrors(r3);
    } }, { key: "checkForCatToNumericXAxis", value: function(t5, e3, i3) {
      var a3, s3, r3 = new Ni2(i3), n3 = ("bar" === t5 || "boxPlot" === t5) && (null === (a3 = i3.plotOptions) || void 0 === a3 || null === (s3 = a3.bar) || void 0 === s3 ? void 0 : s3.horizontal), o3 = "pie" === t5 || "polarArea" === t5 || "donut" === t5 || "radar" === t5 || "radialBar" === t5 || "heatmap" === t5, l3 = "datetime" !== i3.xaxis.type && "numeric" !== i3.xaxis.type, h3 = i3.xaxis.tickPlacement ? i3.xaxis.tickPlacement : e3.xaxis && e3.xaxis.tickPlacement;
      return n3 || o3 || !l3 || "between" === h3 || (i3 = r3.convertCatToNumeric(i3)), i3;
    } }, { key: "extendYAxis", value: function(t5, e3) {
      var i3 = new Oi2();
      (void 0 === t5.yaxis || !t5.yaxis || Array.isArray(t5.yaxis) && 0 === t5.yaxis.length) && (t5.yaxis = {}), t5.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t5.yaxis = v2.extend(t5.yaxis, window.Apex.yaxis)), t5.yaxis.constructor !== Array ? t5.yaxis = [v2.extend(i3.yAxis, t5.yaxis)] : t5.yaxis = v2.extendArray(t5.yaxis, i3.yAxis);
      var a3 = false;
      t5.yaxis.forEach(function(t6) {
        t6.logarithmic && (a3 = true);
      });
      var s3 = t5.series;
      return e3 && !s3 && (s3 = e3.config.series), a3 && s3.length !== t5.yaxis.length && s3.length && (t5.yaxis = s3.map(function(e4, a4) {
        if (e4.name || (s3[a4].name = "series-".concat(a4 + 1)), t5.yaxis[a4]) return t5.yaxis[a4].seriesName = s3[a4].name, t5.yaxis[a4];
        var r3 = v2.extend(i3.yAxis, t5.yaxis[0]);
        return r3.show = false, r3;
      })), a3 && s3.length > 1 && s3.length !== t5.yaxis.length && console.warn("A multi-series logarithmic chart should have equal number of series and y-axes"), t5;
    } }, { key: "extendAnnotations", value: function(t5) {
      return void 0 === t5.annotations && (t5.annotations = {}, t5.annotations.yaxis = [], t5.annotations.xaxis = [], t5.annotations.points = []), t5 = this.extendYAxisAnnotations(t5), t5 = this.extendXAxisAnnotations(t5), t5 = this.extendPointAnnotations(t5);
    } }, { key: "extendYAxisAnnotations", value: function(t5) {
      var e3 = new Oi2();
      return t5.annotations.yaxis = v2.extendArray(void 0 !== t5.annotations.yaxis ? t5.annotations.yaxis : [], e3.yAxisAnnotation), t5;
    } }, { key: "extendXAxisAnnotations", value: function(t5) {
      var e3 = new Oi2();
      return t5.annotations.xaxis = v2.extendArray(void 0 !== t5.annotations.xaxis ? t5.annotations.xaxis : [], e3.xAxisAnnotation), t5;
    } }, { key: "extendPointAnnotations", value: function(t5) {
      var e3 = new Oi2();
      return t5.annotations.points = v2.extendArray(void 0 !== t5.annotations.points ? t5.annotations.points : [], e3.pointAnnotation), t5;
    } }, { key: "checkForDarkTheme", value: function(t5) {
      t5.theme && "dark" === t5.theme.mode && (t5.tooltip || (t5.tooltip = {}), "light" !== t5.tooltip.theme && (t5.tooltip.theme = "dark"), t5.chart.foreColor || (t5.chart.foreColor = "#f6f7f8"), t5.theme.palette || (t5.theme.palette = "palette4"));
    } }, { key: "handleUserInputErrors", value: function(t5) {
      var e3 = t5;
      if (e3.tooltip.shared && e3.tooltip.intersect) throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");
      if ("bar" === e3.chart.type && e3.plotOptions.bar.horizontal) {
        if (e3.yaxis.length > 1) throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
        e3.yaxis[0].reversed && (e3.yaxis[0].opposite = true), e3.xaxis.tooltip.enabled = false, e3.yaxis[0].tooltip.enabled = false, e3.chart.zoom.enabled = false;
      }
      return "bar" !== e3.chart.type && "rangeBar" !== e3.chart.type || e3.tooltip.shared && "barWidth" === e3.xaxis.crosshairs.width && e3.series.length > 1 && (e3.xaxis.crosshairs.width = "tickWidth"), "candlestick" !== e3.chart.type && "boxPlot" !== e3.chart.type || e3.yaxis[0].reversed && (console.warn("Reversed y-axis in ".concat(e3.chart.type, " chart is not supported.")), e3.yaxis[0].reversed = false), e3;
    } }]), t4;
  }();
  var Bi2 = function() {
    function t4() {
      i2(this, t4);
    }
    return s2(t4, [{ key: "initGlobalVars", value: function(t5) {
      t5.series = [], t5.seriesCandleO = [], t5.seriesCandleH = [], t5.seriesCandleM = [], t5.seriesCandleL = [], t5.seriesCandleC = [], t5.seriesRangeStart = [], t5.seriesRangeEnd = [], t5.seriesRange = [], t5.seriesPercent = [], t5.seriesGoals = [], t5.seriesX = [], t5.seriesZ = [], t5.seriesNames = [], t5.seriesTotals = [], t5.seriesLog = [], t5.seriesColors = [], t5.stackedSeriesTotals = [], t5.seriesXvalues = [], t5.seriesYvalues = [], t5.labels = [], t5.hasXaxisGroups = false, t5.groups = [], t5.barGroups = [], t5.lineGroups = [], t5.areaGroups = [], t5.hasSeriesGroups = false, t5.seriesGroups = [], t5.categoryLabels = [], t5.timescaleLabels = [], t5.noLabelsProvided = false, t5.resizeTimer = null, t5.selectionResizeTimer = null, t5.lastWheelExecution = 0, t5.delayedElements = [], t5.pointsArray = [], t5.dataLabelsRects = [], t5.isXNumeric = false, t5.skipLastTimelinelabel = false, t5.skipFirstTimelinelabel = false, t5.isDataXYZ = false, t5.isMultiLineX = false, t5.isMultipleYAxis = false, t5.maxY = -Number.MAX_VALUE, t5.minY = Number.MIN_VALUE, t5.minYArr = [], t5.maxYArr = [], t5.maxX = -Number.MAX_VALUE, t5.minX = Number.MAX_VALUE, t5.initialMaxX = -Number.MAX_VALUE, t5.initialMinX = Number.MAX_VALUE, t5.maxDate = 0, t5.minDate = Number.MAX_VALUE, t5.minZ = Number.MAX_VALUE, t5.maxZ = -Number.MAX_VALUE, t5.minXDiff = Number.MAX_VALUE, t5.yAxisScale = [], t5.xAxisScale = null, t5.xAxisTicksPositions = [], t5.yLabelsCoords = [], t5.yTitleCoords = [], t5.barPadForNumericAxis = 0, t5.padHorizontal = 0, t5.xRange = 0, t5.yRange = [], t5.zRange = 0, t5.dataPoints = 0, t5.xTickAmount = 0, t5.multiAxisTickAmount = 0;
    } }, { key: "globalVars", value: function(t5) {
      return { chartID: null, cuid: null, events: { beforeMount: [], mounted: [], updated: [], clicked: [], selection: [], dataPointSelection: [], zoomed: [], scrolled: [] }, colors: [], clientX: null, clientY: null, fill: { colors: [] }, stroke: { colors: [] }, dataLabels: { style: { colors: [] } }, radarPolygons: { fill: { colors: [] } }, markers: { colors: [], size: t5.markers.size, largestSize: 0 }, animationEnded: false, isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints, isDirty: false, isExecCalled: false, initialConfig: null, initialSeries: [], lastXAxis: [], lastYAxis: [], columnSeries: null, labels: [], timescaleLabels: [], noLabelsProvided: false, allSeriesCollapsed: false, collapsedSeries: [], collapsedSeriesIndices: [], ancillaryCollapsedSeries: [], ancillaryCollapsedSeriesIndices: [], risingSeries: [], dataFormatXNumeric: false, capturedSeriesIndex: -1, capturedDataPointIndex: -1, selectedDataPoints: [], invalidLogScale: false, ignoreYAxisIndexes: [], maxValsInArrayIndex: 0, radialSize: 0, selection: void 0, zoomEnabled: "zoom" === t5.chart.toolbar.autoSelected && t5.chart.toolbar.tools.zoom && t5.chart.zoom.enabled, panEnabled: "pan" === t5.chart.toolbar.autoSelected && t5.chart.toolbar.tools.pan, selectionEnabled: "selection" === t5.chart.toolbar.autoSelected && t5.chart.toolbar.tools.selection, yaxis: null, mousedown: false, lastClientPosition: {}, visibleXRange: void 0, yValueDecimal: 0, total: 0, SVGNS: "http://www.w3.org/2000/svg", svgWidth: 0, svgHeight: 0, noData: false, locale: {}, dom: {}, memory: { methodsToExec: [] }, shouldAnimate: true, skipLastTimelinelabel: false, skipFirstTimelinelabel: false, delayedElements: [], axisCharts: true, isDataXYZ: false, isSlopeChart: t5.plotOptions.line.isSlopeChart, resized: false, resizeTimer: null, comboCharts: false, dataChanged: false, previousPaths: [], allSeriesHasEqualX: true, pointsArray: [], dataLabelsRects: [], lastDrawnDataLabelsIndexes: [], hasNullValues: false, zoomed: false, gridWidth: 0, gridHeight: 0, rotateXLabels: false, defaultLabels: false, xLabelFormatter: void 0, yLabelFormatters: [], xaxisTooltipFormatter: void 0, ttKeyFormatter: void 0, ttVal: void 0, ttZFormatter: void 0, LINE_HEIGHT_RATIO: 1.618, xAxisLabelsHeight: 0, xAxisGroupLabelsHeight: 0, xAxisLabelsWidth: 0, yAxisLabelsWidth: 0, scaleX: 1, scaleY: 1, translateX: 0, translateY: 0, translateYAxisX: [], yAxisWidths: [], translateXAxisY: 0, translateXAxisX: 0, tooltip: null, niceScaleAllowedMagMsd: [[1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10], [1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10]], niceScaleDefaultTicks: [1, 2, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 24], seriesYAxisMap: [], seriesYAxisReverseMap: [] };
    } }, { key: "init", value: function(t5) {
      var e3 = this.globalVars(t5);
      return this.initGlobalVars(e3), e3.initialConfig = v2.extend({}, t5), e3.initialSeries = v2.clone(t5.series), e3.lastXAxis = v2.clone(e3.initialConfig.xaxis), e3.lastYAxis = v2.clone(e3.initialConfig.yaxis), e3;
    } }]), t4;
  }();
  var Gi2 = function() {
    function t4(e3) {
      i2(this, t4), this.opts = e3;
    }
    return s2(t4, [{ key: "init", value: function() {
      var t5 = new Wi2(this.opts).init({ responsiveOverride: false });
      return { config: t5, globals: new Bi2().init(t5) };
    } }]), t4;
  }();
  var ji2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.opts = null, this.seriesIndex = 0, this.patternIDs = [];
    }
    return s2(t4, [{ key: "clippedImgArea", value: function(t5) {
      var e3 = this.w, i3 = e3.config, a3 = parseInt(e3.globals.gridWidth, 10), s3 = parseInt(e3.globals.gridHeight, 10), r3 = a3 > s3 ? a3 : s3, n3 = t5.image, o3 = 0, l3 = 0;
      void 0 === t5.width && void 0 === t5.height ? void 0 !== i3.fill.image.width && void 0 !== i3.fill.image.height ? (o3 = i3.fill.image.width + 1, l3 = i3.fill.image.height) : (o3 = r3 + 1, l3 = r3) : (o3 = t5.width, l3 = t5.height);
      var h3 = document.createElementNS(e3.globals.SVGNS, "pattern");
      Mi2.setAttrs(h3, { id: t5.patternID, patternUnits: t5.patternUnits ? t5.patternUnits : "userSpaceOnUse", width: o3 + "px", height: l3 + "px" });
      var c3 = document.createElementNS(e3.globals.SVGNS, "image");
      h3.appendChild(c3), c3.setAttributeNS(window.SVG.xlink, "href", n3), Mi2.setAttrs(c3, { x: 0, y: 0, preserveAspectRatio: "none", width: o3 + "px", height: l3 + "px" }), c3.style.opacity = t5.opacity, e3.globals.dom.elDefs.node.appendChild(h3);
    } }, { key: "getSeriesIndex", value: function(t5) {
      var e3 = this.w, i3 = e3.config.chart.type;
      return ("bar" === i3 || "rangeBar" === i3) && e3.config.plotOptions.bar.distributed || "heatmap" === i3 || "treemap" === i3 ? this.seriesIndex = t5.seriesNumber : this.seriesIndex = t5.seriesNumber % e3.globals.series.length, this.seriesIndex;
    } }, { key: "computeColorStops", value: function(t5, e3) {
      var i3, a3 = this.w, s3 = null, n3 = null, o3 = r2(t5);
      try {
        for (o3.s(); !(i3 = o3.n()).done; ) {
          var l3 = i3.value;
          l3 >= e3.threshold ? (null === s3 || l3 > s3) && (s3 = l3) : (null === n3 || l3 < n3) && (n3 = l3);
        }
      } catch (t6) {
        o3.e(t6);
      } finally {
        o3.f();
      }
      null === s3 && (s3 = e3.threshold), null === n3 && (n3 = e3.threshold);
      var h3 = s3 - e3.threshold + (e3.threshold - n3);
      0 === h3 && (h3 = 1);
      var c3 = 100 - (e3.threshold - n3) / h3 * 100;
      return [{ offset: c3 = Math.max(0, Math.min(c3, 100)), color: e3.colorAboveThreshold, opacity: a3.config.fill.opacity }, { offset: 0, color: e3.colorBelowThreshold, opacity: a3.config.fill.opacity }];
    } }, { key: "fillPath", value: function(t5) {
      var e3, i3, a3, s3 = this.w;
      this.opts = t5;
      var r3, n3, o3, l3 = this.w.config;
      this.seriesIndex = this.getSeriesIndex(t5);
      var h3 = l3.plotOptions.line.colors.colorAboveThreshold && l3.plotOptions.line.colors.colorBelowThreshold, c3 = this.getFillColors()[this.seriesIndex];
      void 0 !== s3.globals.seriesColors[this.seriesIndex] && (c3 = s3.globals.seriesColors[this.seriesIndex]), "function" == typeof c3 && (c3 = c3({ seriesIndex: this.seriesIndex, dataPointIndex: t5.dataPointIndex, value: t5.value, w: s3 }));
      var d3, u3, g3, p3 = t5.fillType ? t5.fillType : this.getFillType(this.seriesIndex), x3 = Array.isArray(l3.fill.opacity) ? l3.fill.opacity[this.seriesIndex] : l3.fill.opacity, b3 = "gradient" === p3 || h3;
      (t5.color && (c3 = t5.color), null !== (e3 = s3.config.series[this.seriesIndex]) && void 0 !== e3 && null !== (i3 = e3.data) && void 0 !== i3 && null !== (a3 = i3[t5.dataPointIndex]) && void 0 !== a3 && a3.fillColor) && (c3 = null === (d3 = s3.config.series[this.seriesIndex]) || void 0 === d3 || null === (u3 = d3.data) || void 0 === u3 || null === (g3 = u3[t5.dataPointIndex]) || void 0 === g3 ? void 0 : g3.fillColor);
      c3 || (c3 = "#fff", console.warn("undefined color - ApexCharts"));
      var m3 = c3;
      if (-1 === c3.indexOf("rgb") ? -1 === c3.indexOf("#") ? m3 = c3 : c3.length < 9 && (m3 = v2.hexToRgba(c3, x3)) : c3.indexOf("rgba") > -1 ? x3 = v2.getOpacityFromRGBA(c3) : m3 = v2.hexToRgba(v2.rgb2hex(c3), x3), t5.opacity && (x3 = t5.opacity), "pattern" === p3 && (n3 = this.handlePatternFill({ fillConfig: t5.fillConfig, patternFill: n3, fillColor: c3, fillOpacity: x3, defaultColor: m3 })), b3) {
        var y3 = f2(l3.fill.gradient.colorStops) || [], w3 = l3.fill.gradient.type;
        h3 && (y3[this.seriesIndex] = this.computeColorStops(s3.globals.series[this.seriesIndex], l3.plotOptions.line.colors), w3 = "vertical"), o3 = this.handleGradientFill({ type: w3, fillConfig: t5.fillConfig, fillColor: c3, fillOpacity: x3, colorStops: y3, i: this.seriesIndex });
      }
      if ("image" === p3) {
        var k3 = l3.fill.image.src, A3 = t5.patternID ? t5.patternID : "", C3 = "pattern".concat(s3.globals.cuid).concat(t5.seriesNumber + 1).concat(A3);
        -1 === this.patternIDs.indexOf(C3) && (this.clippedImgArea({ opacity: x3, image: Array.isArray(k3) ? t5.seriesNumber < k3.length ? k3[t5.seriesNumber] : k3[0] : k3, width: t5.width ? t5.width : void 0, height: t5.height ? t5.height : void 0, patternUnits: t5.patternUnits, patternID: C3 }), this.patternIDs.push(C3)), r3 = "url(#".concat(C3, ")");
      } else r3 = b3 ? o3 : "pattern" === p3 ? n3 : m3;
      return t5.solid && (r3 = m3), r3;
    } }, { key: "getFillType", value: function(t5) {
      var e3 = this.w;
      return Array.isArray(e3.config.fill.type) ? e3.config.fill.type[t5] : e3.config.fill.type;
    } }, { key: "getFillColors", value: function() {
      var t5 = this.w, e3 = t5.config, i3 = this.opts, a3 = [];
      return t5.globals.comboCharts ? "line" === t5.config.series[this.seriesIndex].type ? Array.isArray(t5.globals.stroke.colors) ? a3 = t5.globals.stroke.colors : a3.push(t5.globals.stroke.colors) : Array.isArray(t5.globals.fill.colors) ? a3 = t5.globals.fill.colors : a3.push(t5.globals.fill.colors) : "line" === e3.chart.type ? Array.isArray(t5.globals.stroke.colors) ? a3 = t5.globals.stroke.colors : a3.push(t5.globals.stroke.colors) : Array.isArray(t5.globals.fill.colors) ? a3 = t5.globals.fill.colors : a3.push(t5.globals.fill.colors), void 0 !== i3.fillColors && (a3 = [], Array.isArray(i3.fillColors) ? a3 = i3.fillColors.slice() : a3.push(i3.fillColors)), a3;
    } }, { key: "handlePatternFill", value: function(t5) {
      var e3 = t5.fillConfig, i3 = t5.patternFill, a3 = t5.fillColor, s3 = t5.fillOpacity, r3 = t5.defaultColor, n3 = this.w.config.fill;
      e3 && (n3 = e3);
      var o3 = this.opts, l3 = new Mi2(this.ctx), h3 = Array.isArray(n3.pattern.strokeWidth) ? n3.pattern.strokeWidth[this.seriesIndex] : n3.pattern.strokeWidth, c3 = a3;
      Array.isArray(n3.pattern.style) ? i3 = void 0 !== n3.pattern.style[o3.seriesNumber] ? l3.drawPattern(n3.pattern.style[o3.seriesNumber], n3.pattern.width, n3.pattern.height, c3, h3, s3) : r3 : i3 = l3.drawPattern(n3.pattern.style, n3.pattern.width, n3.pattern.height, c3, h3, s3);
      return i3;
    } }, { key: "handleGradientFill", value: function(t5) {
      var e3 = t5.type, i3 = t5.fillColor, a3 = t5.fillOpacity, s3 = t5.fillConfig, r3 = t5.colorStops, n3 = t5.i, o3 = this.w.config.fill;
      s3 && (o3 = u2(u2({}, o3), s3));
      var l3 = this.opts, h3 = new Mi2(this.ctx), c3 = new v2();
      e3 = e3 || o3.gradient.type;
      var d3, g3 = i3, p3 = void 0 === o3.gradient.opacityFrom ? a3 : Array.isArray(o3.gradient.opacityFrom) ? o3.gradient.opacityFrom[n3] : o3.gradient.opacityFrom;
      g3.indexOf("rgba") > -1 && (p3 = v2.getOpacityFromRGBA(g3));
      var f3 = void 0 === o3.gradient.opacityTo ? a3 : Array.isArray(o3.gradient.opacityTo) ? o3.gradient.opacityTo[n3] : o3.gradient.opacityTo;
      if (void 0 === o3.gradient.gradientToColors || 0 === o3.gradient.gradientToColors.length) d3 = "dark" === o3.gradient.shade ? c3.shadeColor(-1 * parseFloat(o3.gradient.shadeIntensity), i3.indexOf("rgb") > -1 ? v2.rgb2hex(i3) : i3) : c3.shadeColor(parseFloat(o3.gradient.shadeIntensity), i3.indexOf("rgb") > -1 ? v2.rgb2hex(i3) : i3);
      else if (o3.gradient.gradientToColors[l3.seriesNumber]) {
        var x3 = o3.gradient.gradientToColors[l3.seriesNumber];
        d3 = x3, x3.indexOf("rgba") > -1 && (f3 = v2.getOpacityFromRGBA(x3));
      } else d3 = i3;
      if (o3.gradient.gradientFrom && (g3 = o3.gradient.gradientFrom), o3.gradient.gradientTo && (d3 = o3.gradient.gradientTo), o3.gradient.inverseColors) {
        var b3 = g3;
        g3 = d3, d3 = b3;
      }
      return g3.indexOf("rgb") > -1 && (g3 = v2.rgb2hex(g3)), d3.indexOf("rgb") > -1 && (d3 = v2.rgb2hex(d3)), h3.drawGradient(e3, g3, d3, p3, f3, l3.size, o3.gradient.stops, r3, n3);
    } }]), t4;
  }();
  var Vi2 = function() {
    function t4(e3, a3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "setGlobalMarkerSize", value: function() {
      var t5 = this.w;
      if (t5.globals.markers.size = Array.isArray(t5.config.markers.size) ? t5.config.markers.size : [t5.config.markers.size], t5.globals.markers.size.length > 0) {
        if (t5.globals.markers.size.length < t5.globals.series.length + 1) for (var e3 = 0; e3 <= t5.globals.series.length; e3++) void 0 === t5.globals.markers.size[e3] && t5.globals.markers.size.push(t5.globals.markers.size[0]);
      } else t5.globals.markers.size = t5.config.series.map(function(e4) {
        return t5.config.markers.size;
      });
    } }, { key: "plotChartMarkers", value: function(t5) {
      var e3 = t5.pointsPos, i3 = t5.seriesIndex, a3 = t5.j, s3 = t5.pSize, r3 = t5.alwaysDrawMarker, n3 = void 0 !== r3 && r3, o3 = t5.isVirtualPoint, l3 = void 0 !== o3 && o3, h3 = this.w, c3 = i3, d3 = e3, u3 = null, g3 = new Mi2(this.ctx), p3 = h3.config.markers.discrete && h3.config.markers.discrete.length;
      if (Array.isArray(d3.x)) for (var f3 = 0; f3 < d3.x.length; f3++) {
        var x3 = void 0, b3 = a3, m3 = !v2.isNumber(d3.y[f3]);
        0 === h3.globals.markers.largestSize && h3.globals.hasNullValues && null !== h3.globals.series[c3][a3 + 1] && !l3 && (m3 = true), 1 === a3 && 0 === f3 && (b3 = 0), 1 === a3 && 1 === f3 && (b3 = 1);
        var y3 = "apexcharts-marker";
        if ("line" !== h3.config.chart.type && "area" !== h3.config.chart.type || h3.globals.comboCharts || h3.config.tooltip.intersect || (y3 += " no-pointer-events"), (Array.isArray(h3.config.markers.size) ? h3.globals.markers.size[i3] > 0 : h3.config.markers.size > 0) || n3 || p3) {
          m3 || (y3 += " w".concat(v2.randomId()));
          var w3 = this.getMarkerConfig({ cssClass: y3, seriesIndex: i3, dataPointIndex: b3 });
          if (h3.config.series[c3].data[b3] && (h3.config.series[c3].data[b3].fillColor && (w3.pointFillColor = h3.config.series[c3].data[b3].fillColor), h3.config.series[c3].data[b3].strokeColor && (w3.pointStrokeColor = h3.config.series[c3].data[b3].strokeColor)), void 0 !== s3 && (w3.pSize = s3), (d3.x[f3] < -h3.globals.markers.largestSize || d3.x[f3] > h3.globals.gridWidth + h3.globals.markers.largestSize || d3.y[f3] < -h3.globals.markers.largestSize || d3.y[f3] > h3.globals.gridHeight + h3.globals.markers.largestSize) && (w3.pSize = 0), !m3) (h3.globals.markers.size[i3] > 0 || n3 || p3) && !u3 && (u3 = g3.group({ class: n3 || p3 ? "" : "apexcharts-series-markers" })).attr("clip-path", "url(#gridRectMarkerMask".concat(h3.globals.cuid, ")")), (x3 = g3.drawMarker(d3.x[f3], d3.y[f3], w3)).attr("rel", b3), x3.attr("j", b3), x3.attr("index", i3), x3.node.setAttribute("default-marker-size", w3.pSize), new Li2(this.ctx).setSelectionFilter(x3, i3, b3), this.addEvents(x3), u3 && u3.add(x3);
        } else void 0 === h3.globals.pointsArray[i3] && (h3.globals.pointsArray[i3] = []), h3.globals.pointsArray[i3].push([d3.x[f3], d3.y[f3]]);
      }
      return u3;
    } }, { key: "getMarkerConfig", value: function(t5) {
      var e3 = t5.cssClass, i3 = t5.seriesIndex, a3 = t5.dataPointIndex, s3 = void 0 === a3 ? null : a3, r3 = t5.radius, n3 = void 0 === r3 ? null : r3, o3 = t5.size, l3 = void 0 === o3 ? null : o3, h3 = t5.strokeWidth, c3 = void 0 === h3 ? null : h3, d3 = this.w, u3 = this.getMarkerStyle(i3), g3 = null === l3 ? d3.globals.markers.size[i3] : l3, p3 = d3.config.markers;
      return null !== s3 && p3.discrete.length && p3.discrete.map(function(t6) {
        t6.seriesIndex === i3 && t6.dataPointIndex === s3 && (u3.pointStrokeColor = t6.strokeColor, u3.pointFillColor = t6.fillColor, g3 = t6.size, u3.pointShape = t6.shape);
      }), { pSize: null === n3 ? g3 : n3, pRadius: null !== n3 ? n3 : p3.radius, pointStrokeWidth: null !== c3 ? c3 : Array.isArray(p3.strokeWidth) ? p3.strokeWidth[i3] : p3.strokeWidth, pointStrokeColor: u3.pointStrokeColor, pointFillColor: u3.pointFillColor, shape: u3.pointShape || (Array.isArray(p3.shape) ? p3.shape[i3] : p3.shape), class: e3, pointStrokeOpacity: Array.isArray(p3.strokeOpacity) ? p3.strokeOpacity[i3] : p3.strokeOpacity, pointStrokeDashArray: Array.isArray(p3.strokeDashArray) ? p3.strokeDashArray[i3] : p3.strokeDashArray, pointFillOpacity: Array.isArray(p3.fillOpacity) ? p3.fillOpacity[i3] : p3.fillOpacity, seriesIndex: i3 };
    } }, { key: "addEvents", value: function(t5) {
      var e3 = this.w, i3 = new Mi2(this.ctx);
      t5.node.addEventListener("mouseenter", i3.pathMouseEnter.bind(this.ctx, t5)), t5.node.addEventListener("mouseleave", i3.pathMouseLeave.bind(this.ctx, t5)), t5.node.addEventListener("mousedown", i3.pathMouseDown.bind(this.ctx, t5)), t5.node.addEventListener("click", e3.config.markers.onClick), t5.node.addEventListener("dblclick", e3.config.markers.onDblClick), t5.node.addEventListener("touchstart", i3.pathMouseDown.bind(this.ctx, t5), { passive: true });
    } }, { key: "getMarkerStyle", value: function(t5) {
      var e3 = this.w, i3 = e3.globals.markers.colors, a3 = e3.config.markers.strokeColor || e3.config.markers.strokeColors;
      return { pointStrokeColor: Array.isArray(a3) ? a3[t5] : a3, pointFillColor: Array.isArray(i3) ? i3[t5] : i3 };
    } }]), t4;
  }();
  var Ui2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.initialAnim = this.w.config.chart.animations.enabled;
    }
    return s2(t4, [{ key: "draw", value: function(t5, e3, i3) {
      var a3 = this.w, s3 = new Mi2(this.ctx), r3 = i3.realIndex, n3 = i3.pointsPos, o3 = i3.zRatio, l3 = i3.elParent, h3 = s3.group({ class: "apexcharts-series-markers apexcharts-series-".concat(a3.config.chart.type) });
      if (h3.attr("clip-path", "url(#gridRectMarkerMask".concat(a3.globals.cuid, ")")), Array.isArray(n3.x)) for (var c3 = 0; c3 < n3.x.length; c3++) {
        var d3 = e3 + 1, u3 = true;
        0 === e3 && 0 === c3 && (d3 = 0), 0 === e3 && 1 === c3 && (d3 = 1);
        var g3 = a3.globals.markers.size[r3];
        if (o3 !== 1 / 0) {
          var p3 = a3.config.plotOptions.bubble;
          g3 = a3.globals.seriesZ[r3][d3], p3.zScaling && (g3 /= o3), p3.minBubbleRadius && g3 < p3.minBubbleRadius && (g3 = p3.minBubbleRadius), p3.maxBubbleRadius && g3 > p3.maxBubbleRadius && (g3 = p3.maxBubbleRadius);
        }
        var f3 = n3.x[c3], x3 = n3.y[c3];
        if (g3 = g3 || 0, null !== x3 && void 0 !== a3.globals.series[r3][d3] || (u3 = false), u3) {
          var b3 = this.drawPoint(f3, x3, g3, r3, d3, e3);
          h3.add(b3);
        }
        l3.add(h3);
      }
    } }, { key: "drawPoint", value: function(t5, e3, i3, a3, s3, r3) {
      var n3 = this.w, o3 = a3, l3 = new y2(this.ctx), h3 = new Li2(this.ctx), c3 = new ji2(this.ctx), d3 = new Vi2(this.ctx), u3 = new Mi2(this.ctx), g3 = d3.getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: o3, dataPointIndex: s3, radius: "bubble" === n3.config.chart.type || n3.globals.comboCharts && n3.config.series[a3] && "bubble" === n3.config.series[a3].type ? i3 : null }), p3 = c3.fillPath({ seriesNumber: a3, dataPointIndex: s3, color: g3.pointFillColor, patternUnits: "objectBoundingBox", value: n3.globals.series[a3][r3] }), f3 = u3.drawMarker(t5, e3, g3);
      if (n3.config.series[o3].data[s3] && n3.config.series[o3].data[s3].fillColor && (p3 = n3.config.series[o3].data[s3].fillColor), f3.attr({ fill: p3 }), n3.config.chart.dropShadow.enabled) {
        var x3 = n3.config.chart.dropShadow;
        h3.dropShadow(f3, x3, a3);
      }
      if (!this.initialAnim || n3.globals.dataChanged || n3.globals.resized) n3.globals.animationEnded = true;
      else {
        var b3 = n3.config.chart.animations.speed;
        l3.animateMarker(f3, b3, n3.globals.easing, function() {
          window.setTimeout(function() {
            l3.animationCompleted(f3);
          }, 100);
        });
      }
      return f3.attr({ rel: s3, j: s3, index: a3, "default-marker-size": g3.pSize }), h3.setSelectionFilter(f3, a3, s3), d3.addEvents(f3), f3.node.classList.add("apexcharts-marker"), f3;
    } }, { key: "centerTextInBubble", value: function(t5) {
      var e3 = this.w;
      return { y: t5 += parseInt(e3.config.dataLabels.style.fontSize, 10) / 4 };
    } }]), t4;
  }();
  var qi2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "dataLabelsCorrection", value: function(t5, e3, i3, a3, s3, r3, n3) {
      var o3 = this.w, l3 = false, h3 = new Mi2(this.ctx).getTextRects(i3, n3), c3 = h3.width, d3 = h3.height;
      e3 < 0 && (e3 = 0), e3 > o3.globals.gridHeight + d3 && (e3 = o3.globals.gridHeight + d3 / 2), void 0 === o3.globals.dataLabelsRects[a3] && (o3.globals.dataLabelsRects[a3] = []), o3.globals.dataLabelsRects[a3].push({ x: t5, y: e3, width: c3, height: d3 });
      var u3 = o3.globals.dataLabelsRects[a3].length - 2, g3 = void 0 !== o3.globals.lastDrawnDataLabelsIndexes[a3] ? o3.globals.lastDrawnDataLabelsIndexes[a3][o3.globals.lastDrawnDataLabelsIndexes[a3].length - 1] : 0;
      if (void 0 !== o3.globals.dataLabelsRects[a3][u3]) {
        var p3 = o3.globals.dataLabelsRects[a3][g3];
        (t5 > p3.x + p3.width || e3 > p3.y + p3.height || e3 + d3 < p3.y || t5 + c3 < p3.x) && (l3 = true);
      }
      return (0 === s3 || r3) && (l3 = true), { x: t5, y: e3, textRects: h3, drawnextLabel: l3 };
    } }, { key: "drawDataLabel", value: function(t5) {
      var e3 = this, i3 = t5.type, a3 = t5.pos, s3 = t5.i, r3 = t5.j, n3 = t5.isRangeStart, o3 = t5.strokeWidth, l3 = void 0 === o3 ? 2 : o3, h3 = this.w, c3 = new Mi2(this.ctx), d3 = h3.config.dataLabels, u3 = 0, g3 = 0, p3 = r3, f3 = null;
      if (-1 !== h3.globals.collapsedSeriesIndices.indexOf(s3) || !d3.enabled || !Array.isArray(a3.x)) return f3;
      f3 = c3.group({ class: "apexcharts-data-labels" });
      for (var x3 = 0; x3 < a3.x.length; x3++) if (u3 = a3.x[x3] + d3.offsetX, g3 = a3.y[x3] + d3.offsetY + l3, !isNaN(u3)) {
        1 === r3 && 0 === x3 && (p3 = 0), 1 === r3 && 1 === x3 && (p3 = 1);
        var b3 = h3.globals.series[s3][p3];
        "rangeArea" === i3 && (b3 = n3 ? h3.globals.seriesRangeStart[s3][p3] : h3.globals.seriesRangeEnd[s3][p3]);
        var m3 = "", v3 = function(t6) {
          return h3.config.dataLabels.formatter(t6, { ctx: e3.ctx, seriesIndex: s3, dataPointIndex: p3, w: h3 });
        };
        if ("bubble" === h3.config.chart.type) m3 = v3(b3 = h3.globals.seriesZ[s3][p3]), g3 = a3.y[x3], g3 = new Ui2(this.ctx).centerTextInBubble(g3, s3, p3).y;
        else void 0 !== b3 && (m3 = v3(b3));
        var y3 = h3.config.dataLabels.textAnchor;
        h3.globals.isSlopeChart && (y3 = 0 === p3 ? "end" : p3 === h3.config.series[s3].data.length - 1 ? "start" : "middle"), this.plotDataLabelsText({ x: u3, y: g3, text: m3, i: s3, j: p3, parent: f3, offsetCorrection: true, dataLabelsConfig: h3.config.dataLabels, textAnchor: y3 });
      }
      return f3;
    } }, { key: "plotDataLabelsText", value: function(t5) {
      var e3 = this.w, i3 = new Mi2(this.ctx), a3 = t5.x, s3 = t5.y, r3 = t5.i, n3 = t5.j, o3 = t5.text, l3 = t5.textAnchor, h3 = t5.fontSize, c3 = t5.parent, d3 = t5.dataLabelsConfig, u3 = t5.color, g3 = t5.alwaysDrawDataLabel, p3 = t5.offsetCorrection, f3 = t5.className, x3 = null;
      if (Array.isArray(e3.config.dataLabels.enabledOnSeries) && e3.config.dataLabels.enabledOnSeries.indexOf(r3) < 0) return x3;
      var b3 = { x: a3, y: s3, drawnextLabel: true, textRects: null };
      p3 && (b3 = this.dataLabelsCorrection(a3, s3, o3, r3, n3, g3, parseInt(d3.style.fontSize, 10))), e3.globals.zoomed || (a3 = b3.x, s3 = b3.y), b3.textRects && (a3 < -20 - b3.textRects.width || a3 > e3.globals.gridWidth + b3.textRects.width + 30) && (o3 = "");
      var m3 = e3.globals.dataLabels.style.colors[r3];
      (("bar" === e3.config.chart.type || "rangeBar" === e3.config.chart.type) && e3.config.plotOptions.bar.distributed || e3.config.dataLabels.distributed) && (m3 = e3.globals.dataLabels.style.colors[n3]), "function" == typeof m3 && (m3 = m3({ series: e3.globals.series, seriesIndex: r3, dataPointIndex: n3, w: e3 })), u3 && (m3 = u3);
      var v3 = d3.offsetX, y3 = d3.offsetY;
      if ("bar" !== e3.config.chart.type && "rangeBar" !== e3.config.chart.type || (v3 = 0, y3 = 0), e3.globals.isSlopeChart && (0 !== n3 && (v3 = -2 * d3.offsetX + 5), 0 !== n3 && n3 !== e3.config.series[r3].data.length - 1 && (v3 = 0)), b3.drawnextLabel) {
        if ((x3 = i3.drawText({ width: 100, height: parseInt(d3.style.fontSize, 10), x: a3 + v3, y: s3 + y3, foreColor: m3, textAnchor: l3 || d3.textAnchor, text: o3, fontSize: h3 || d3.style.fontSize, fontFamily: d3.style.fontFamily, fontWeight: d3.style.fontWeight || "normal" })).attr({ class: f3 || "apexcharts-datalabel", cx: a3, cy: s3 }), d3.dropShadow.enabled) {
          var w3 = d3.dropShadow;
          new Li2(this.ctx).dropShadow(x3, w3);
        }
        c3.add(x3), void 0 === e3.globals.lastDrawnDataLabelsIndexes[r3] && (e3.globals.lastDrawnDataLabelsIndexes[r3] = []), e3.globals.lastDrawnDataLabelsIndexes[r3].push(n3);
      }
      return x3;
    } }, { key: "addBackgroundToDataLabel", value: function(t5, e3) {
      var i3 = this.w, a3 = i3.config.dataLabels.background, s3 = a3.padding, r3 = a3.padding / 2, n3 = e3.width, o3 = e3.height, l3 = new Mi2(this.ctx).drawRect(e3.x - s3, e3.y - r3 / 2, n3 + 2 * s3, o3 + r3, a3.borderRadius, "transparent" !== i3.config.chart.background && i3.config.chart.background ? i3.config.chart.background : "#fff", a3.opacity, a3.borderWidth, a3.borderColor);
      a3.dropShadow.enabled && new Li2(this.ctx).dropShadow(l3, a3.dropShadow);
      return l3;
    } }, { key: "dataLabelsBackground", value: function() {
      var t5 = this.w;
      if ("bubble" !== t5.config.chart.type) for (var e3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), i3 = 0; i3 < e3.length; i3++) {
        var a3 = e3[i3], s3 = a3.getBBox(), r3 = null;
        if (s3.width && s3.height && (r3 = this.addBackgroundToDataLabel(a3, s3)), r3) {
          a3.parentNode.insertBefore(r3.node, a3);
          var n3 = t5.config.dataLabels.background.backgroundColor || a3.getAttribute("fill");
          t5.config.chart.animations.enabled && !t5.globals.resized && !t5.globals.dataChanged ? r3.animate().attr({ fill: n3 }) : r3.attr({ fill: n3 }), a3.setAttribute("fill", t5.config.dataLabels.background.foreColor);
        }
      }
    } }, { key: "bringForward", value: function() {
      for (var t5 = this.w, e3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), i3 = t5.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), a3 = 0; a3 < e3.length; a3++) i3 && i3.insertBefore(e3[a3], i3.nextSibling);
    } }]), t4;
  }();
  var Zi2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.legendInactiveClass = "legend-mouseover-inactive";
    }
    return s2(t4, [{ key: "getAllSeriesEls", value: function() {
      return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series");
    } }, { key: "getSeriesByName", value: function(t5) {
      return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(v2.escapeString(t5), "']"));
    } }, { key: "isSeriesHidden", value: function(t5) {
      var e3 = this.getSeriesByName(t5), i3 = parseInt(e3.getAttribute("data:realIndex"), 10);
      return { isHidden: e3.classList.contains("apexcharts-series-collapsed"), realIndex: i3 };
    } }, { key: "addCollapsedClassToSeries", value: function(t5, e3) {
      var i3 = this.w;
      function a3(i4) {
        for (var a4 = 0; a4 < i4.length; a4++) i4[a4].index === e3 && t5.node.classList.add("apexcharts-series-collapsed");
      }
      a3(i3.globals.collapsedSeries), a3(i3.globals.ancillaryCollapsedSeries);
    } }, { key: "toggleSeries", value: function(t5) {
      var e3 = this.isSeriesHidden(t5);
      return this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, e3.isHidden), e3.isHidden;
    } }, { key: "showSeries", value: function(t5) {
      var e3 = this.isSeriesHidden(t5);
      e3.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, true);
    } }, { key: "hideSeries", value: function(t5) {
      var e3 = this.isSeriesHidden(t5);
      e3.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, false);
    } }, { key: "resetSeries", value: function() {
      var t5 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a3 = this.w, s3 = v2.clone(a3.globals.initialSeries);
      a3.globals.previousPaths = [], i3 ? (a3.globals.collapsedSeries = [], a3.globals.ancillaryCollapsedSeries = [], a3.globals.collapsedSeriesIndices = [], a3.globals.ancillaryCollapsedSeriesIndices = []) : s3 = this.emptyCollapsedSeries(s3), a3.config.series = s3, t5 && (e3 && (a3.globals.zoomed = false, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s3, a3.config.chart.animations.dynamicAnimation.enabled));
    } }, { key: "emptyCollapsedSeries", value: function(t5) {
      for (var e3 = this.w, i3 = 0; i3 < t5.length; i3++) e3.globals.collapsedSeriesIndices.indexOf(i3) > -1 && (t5[i3].data = []);
      return t5;
    } }, { key: "highlightSeries", value: function(t5) {
      var e3 = this.w, i3 = this.getSeriesByName(t5), a3 = parseInt(null == i3 ? void 0 : i3.getAttribute("data:realIndex"), 10), s3 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis"), r3 = null, n3 = null, o3 = null;
      if (e3.globals.axisCharts || "radialBar" === e3.config.chart.type) if (e3.globals.axisCharts) {
        r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(a3, "']")), n3 = e3.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(a3, "']"));
        var l3 = e3.globals.seriesYAxisReverseMap[a3];
        o3 = e3.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(l3, "']"));
      } else r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(a3 + 1, "']"));
      else r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(a3 + 1, "'] path"));
      for (var h3 = 0; h3 < s3.length; h3++) s3[h3].classList.add(this.legendInactiveClass);
      if (r3) e3.globals.axisCharts || r3.parentNode.classList.remove(this.legendInactiveClass), r3.classList.remove(this.legendInactiveClass), null !== n3 && n3.classList.remove(this.legendInactiveClass), null !== o3 && o3.classList.remove(this.legendInactiveClass);
      else for (var c3 = 0; c3 < s3.length; c3++) s3[c3].classList.remove(this.legendInactiveClass);
    } }, { key: "toggleSeriesOnHover", value: function(t5, e3) {
      var i3 = this.w;
      e3 || (e3 = t5.target);
      var a3 = i3.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis");
      if ("mousemove" === t5.type) {
        var s3 = parseInt(e3.getAttribute("rel"), 10) - 1;
        this.highlightSeries(i3.globals.seriesNames[s3]);
      } else if ("mouseout" === t5.type) for (var r3 = 0; r3 < a3.length; r3++) a3[r3].classList.remove(this.legendInactiveClass);
    } }, { key: "highlightRangeInSeries", value: function(t5, e3) {
      var i3 = this, a3 = this.w, s3 = a3.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"), r3 = function(t6) {
        for (var e4 = 0; e4 < s3.length; e4++) s3[e4].classList[t6](i3.legendInactiveClass);
      };
      if ("mousemove" === t5.type) {
        var n3 = parseInt(e3.getAttribute("rel"), 10) - 1;
        r3("add");
        var o3 = a3.config.plotOptions.heatmap.colorScale.ranges;
        !function(t6, e4) {
          for (var a4 = 0; a4 < s3.length; a4++) {
            var r4 = Number(s3[a4].getAttribute("val"));
            r4 >= t6.from && (r4 < t6.to || t6.to === e4 && r4 === e4) && s3[a4].classList.remove(i3.legendInactiveClass);
          }
        }(o3[n3], o3.reduce(function(t6, e4) {
          return Math.max(t6, e4.to);
        }, 0));
      } else "mouseout" === t5.type && r3("remove");
    } }, { key: "getActiveConfigSeriesIndex", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "asc", e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i3 = this.w, a3 = 0;
      if (i3.config.series.length > 1) {
        for (var s3 = i3.config.series.map(function(t6, a4) {
          return t6.data && t6.data.length > 0 && -1 === i3.globals.collapsedSeriesIndices.indexOf(a4) && (!i3.globals.comboCharts || 0 === e3.length || e3.length && e3.indexOf(i3.config.series[a4].type) > -1) ? a4 : -1;
        }), r3 = "asc" === t5 ? 0 : s3.length - 1; "asc" === t5 ? r3 < s3.length : r3 >= 0; "asc" === t5 ? r3++ : r3--) if (-1 !== s3[r3]) {
          a3 = s3[r3];
          break;
        }
      }
      return a3;
    } }, { key: "getBarSeriesIndices", value: function() {
      return this.w.globals.comboCharts ? this.w.config.series.map(function(t5, e3) {
        return "bar" === t5.type || "column" === t5.type ? e3 : -1;
      }).filter(function(t5) {
        return -1 !== t5;
      }) : this.w.config.series.map(function(t5, e3) {
        return e3;
      });
    } }, { key: "getPreviousPaths", value: function() {
      var t5 = this.w;
      function e3(e4, i4, a4) {
        for (var s4 = e4[i4].childNodes, r3 = { type: a4, paths: [], realIndex: e4[i4].getAttribute("data:realIndex") }, n3 = 0; n3 < s4.length; n3++) if (s4[n3].hasAttribute("pathTo")) {
          var o3 = s4[n3].getAttribute("pathTo");
          r3.paths.push({ d: o3 });
        }
        t5.globals.previousPaths.push(r3);
      }
      t5.globals.previousPaths = [];
      ["line", "area", "bar", "rangebar", "rangeArea", "candlestick", "radar"].forEach(function(i4) {
        for (var a4, s4 = (a4 = i4, t5.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(a4, "-series .apexcharts-series"))), r3 = 0; r3 < s4.length; r3++) e3(s4, r3, i4);
      });
      var i3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t5.config.chart.type, " .apexcharts-series"));
      if (i3.length > 0) for (var a3 = function(e4) {
        for (var i4 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t5.config.chart.type, " .apexcharts-series[data\\:realIndex='").concat(e4, "'] rect")), a4 = [], s4 = function(t6) {
          var e5 = function(e6) {
            return i4[t6].getAttribute(e6);
          }, s5 = { x: parseFloat(e5("x")), y: parseFloat(e5("y")), width: parseFloat(e5("width")), height: parseFloat(e5("height")) };
          a4.push({ rect: s5, color: i4[t6].getAttribute("color") });
        }, r3 = 0; r3 < i4.length; r3++) s4(r3);
        t5.globals.previousPaths.push(a4);
      }, s3 = 0; s3 < i3.length; s3++) a3(s3);
      t5.globals.axisCharts || (t5.globals.previousPaths = t5.globals.series);
    } }, { key: "clearPreviousPaths", value: function() {
      var t5 = this.w;
      t5.globals.previousPaths = [], t5.globals.allSeriesCollapsed = false;
    } }, { key: "handleNoData", value: function() {
      var t5 = this.w, e3 = t5.config.noData, i3 = new Mi2(this.ctx), a3 = t5.globals.svgWidth / 2, s3 = t5.globals.svgHeight / 2, r3 = "middle";
      if (t5.globals.noData = true, t5.globals.animationEnded = true, "left" === e3.align ? (a3 = 10, r3 = "start") : "right" === e3.align && (a3 = t5.globals.svgWidth - 10, r3 = "end"), "top" === e3.verticalAlign ? s3 = 50 : "bottom" === e3.verticalAlign && (s3 = t5.globals.svgHeight - 50), a3 += e3.offsetX, s3 = s3 + parseInt(e3.style.fontSize, 10) + 2 + e3.offsetY, void 0 !== e3.text && "" !== e3.text) {
        var n3 = i3.drawText({ x: a3, y: s3, text: e3.text, textAnchor: r3, fontSize: e3.style.fontSize, fontFamily: e3.style.fontFamily, foreColor: e3.style.color, opacity: 1, class: "apexcharts-text-nodata" });
        t5.globals.dom.Paper.add(n3);
      }
    } }, { key: "setNullSeriesToZeroValues", value: function(t5) {
      for (var e3 = this.w, i3 = 0; i3 < t5.length; i3++) if (0 === t5[i3].length) for (var a3 = 0; a3 < t5[e3.globals.maxValsInArrayIndex].length; a3++) t5[i3].push(0);
      return t5;
    } }, { key: "hasAllSeriesEqualX", value: function() {
      for (var t5 = true, e3 = this.w, i3 = this.filteredSeriesX(), a3 = 0; a3 < i3.length - 1; a3++) if (i3[a3][0] !== i3[a3 + 1][0]) {
        t5 = false;
        break;
      }
      return e3.globals.allSeriesHasEqualX = t5, t5;
    } }, { key: "filteredSeriesX", value: function() {
      var t5 = this.w.globals.seriesX.map(function(t6) {
        return t6.length > 0 ? t6 : [];
      });
      return t5;
    } }]), t4;
  }();
  var $i2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new Pi2(this.ctx);
    }
    return s2(t4, [{ key: "isMultiFormat", value: function() {
      return this.isFormatXY() || this.isFormat2DArray();
    } }, { key: "isFormatXY", value: function() {
      var t5 = this.w.config.series.slice(), e3 = new Zi2(this.ctx);
      if (this.activeSeriesIndex = e3.getActiveConfigSeriesIndex(), void 0 !== t5[this.activeSeriesIndex].data && t5[this.activeSeriesIndex].data.length > 0 && null !== t5[this.activeSeriesIndex].data[0] && void 0 !== t5[this.activeSeriesIndex].data[0].x && null !== t5[this.activeSeriesIndex].data[0]) return true;
    } }, { key: "isFormat2DArray", value: function() {
      var t5 = this.w.config.series.slice(), e3 = new Zi2(this.ctx);
      if (this.activeSeriesIndex = e3.getActiveConfigSeriesIndex(), void 0 !== t5[this.activeSeriesIndex].data && t5[this.activeSeriesIndex].data.length > 0 && void 0 !== t5[this.activeSeriesIndex].data[0] && null !== t5[this.activeSeriesIndex].data[0] && t5[this.activeSeriesIndex].data[0].constructor === Array) return true;
    } }, { key: "handleFormat2DArray", value: function(t5, e3) {
      for (var i3 = this.w.config, a3 = this.w.globals, s3 = "boxPlot" === i3.chart.type || "boxPlot" === i3.series[e3].type, r3 = 0; r3 < t5[e3].data.length; r3++) if (void 0 !== t5[e3].data[r3][1] && (Array.isArray(t5[e3].data[r3][1]) && 4 === t5[e3].data[r3][1].length && !s3 ? this.twoDSeries.push(v2.parseNumber(t5[e3].data[r3][1][3])) : t5[e3].data[r3].length >= 5 ? this.twoDSeries.push(v2.parseNumber(t5[e3].data[r3][4])) : this.twoDSeries.push(v2.parseNumber(t5[e3].data[r3][1])), a3.dataFormatXNumeric = true), "datetime" === i3.xaxis.type) {
        var n3 = new Date(t5[e3].data[r3][0]);
        n3 = new Date(n3).getTime(), this.twoDSeriesX.push(n3);
      } else this.twoDSeriesX.push(t5[e3].data[r3][0]);
      for (var o3 = 0; o3 < t5[e3].data.length; o3++) void 0 !== t5[e3].data[o3][2] && (this.threeDSeries.push(t5[e3].data[o3][2]), a3.isDataXYZ = true);
    } }, { key: "handleFormatXY", value: function(t5, e3) {
      var i3 = this.w.config, a3 = this.w.globals, s3 = new zi2(this.ctx), r3 = e3;
      a3.collapsedSeriesIndices.indexOf(e3) > -1 && (r3 = this.activeSeriesIndex);
      for (var n3 = 0; n3 < t5[e3].data.length; n3++) void 0 !== t5[e3].data[n3].y && (Array.isArray(t5[e3].data[n3].y) ? this.twoDSeries.push(v2.parseNumber(t5[e3].data[n3].y[t5[e3].data[n3].y.length - 1])) : this.twoDSeries.push(v2.parseNumber(t5[e3].data[n3].y))), void 0 !== t5[e3].data[n3].goals && Array.isArray(t5[e3].data[n3].goals) ? (void 0 === this.seriesGoals[e3] && (this.seriesGoals[e3] = []), this.seriesGoals[e3].push(t5[e3].data[n3].goals)) : (void 0 === this.seriesGoals[e3] && (this.seriesGoals[e3] = []), this.seriesGoals[e3].push(null));
      for (var o3 = 0; o3 < t5[r3].data.length; o3++) {
        var l3 = "string" == typeof t5[r3].data[o3].x, h3 = Array.isArray(t5[r3].data[o3].x), c3 = !h3 && !!s3.isValidDate(t5[r3].data[o3].x);
        if (l3 || c3) if (l3 || i3.xaxis.convertedCatToNumeric) {
          var d3 = a3.isBarHorizontal && a3.isRangeData;
          "datetime" !== i3.xaxis.type || d3 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t5[r3].data[o3].x), isNaN(t5[r3].data[o3].x) || "category" === this.w.config.xaxis.type || "string" == typeof t5[r3].data[o3].x || (a3.isXNumeric = true)) : this.twoDSeriesX.push(s3.parseDate(t5[r3].data[o3].x));
        } else "datetime" === i3.xaxis.type ? this.twoDSeriesX.push(s3.parseDate(t5[r3].data[o3].x.toString())) : (a3.dataFormatXNumeric = true, a3.isXNumeric = true, this.twoDSeriesX.push(parseFloat(t5[r3].data[o3].x)));
        else h3 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t5[r3].data[o3].x)) : (a3.isXNumeric = true, a3.dataFormatXNumeric = true, this.twoDSeriesX.push(t5[r3].data[o3].x));
      }
      if (t5[e3].data[0] && void 0 !== t5[e3].data[0].z) {
        for (var u3 = 0; u3 < t5[e3].data.length; u3++) this.threeDSeries.push(t5[e3].data[u3].z);
        a3.isDataXYZ = true;
      }
    } }, { key: "handleRangeData", value: function(t5, e3) {
      var i3 = this.w.globals, a3 = {};
      return this.isFormat2DArray() ? a3 = this.handleRangeDataFormat("array", t5, e3) : this.isFormatXY() && (a3 = this.handleRangeDataFormat("xy", t5, e3)), i3.seriesRangeStart[e3] = void 0 === a3.start ? [] : a3.start, i3.seriesRangeEnd[e3] = void 0 === a3.end ? [] : a3.end, i3.seriesRange[e3] = a3.rangeUniques, i3.seriesRange.forEach(function(t6, e4) {
        t6 && t6.forEach(function(t7, e5) {
          t7.y.forEach(function(e6, i4) {
            for (var a4 = 0; a4 < t7.y.length; a4++) if (i4 !== a4) {
              var s3 = e6.y1, r3 = e6.y2, n3 = t7.y[a4].y1;
              s3 <= t7.y[a4].y2 && n3 <= r3 && (t7.overlaps.indexOf(e6.rangeName) < 0 && t7.overlaps.push(e6.rangeName), t7.overlaps.indexOf(t7.y[a4].rangeName) < 0 && t7.overlaps.push(t7.y[a4].rangeName));
            }
          });
        });
      }), a3;
    } }, { key: "handleCandleStickBoxData", value: function(t5, e3) {
      var i3 = this.w.globals, a3 = {};
      return this.isFormat2DArray() ? a3 = this.handleCandleStickBoxDataFormat("array", t5, e3) : this.isFormatXY() && (a3 = this.handleCandleStickBoxDataFormat("xy", t5, e3)), i3.seriesCandleO[e3] = a3.o, i3.seriesCandleH[e3] = a3.h, i3.seriesCandleM[e3] = a3.m, i3.seriesCandleL[e3] = a3.l, i3.seriesCandleC[e3] = a3.c, a3;
    } }, { key: "handleRangeDataFormat", value: function(t5, e3, i3) {
      var a3 = [], s3 = [], r3 = e3[i3].data.filter(function(t6, e4, i4) {
        return e4 === i4.findIndex(function(e5) {
          return e5.x === t6.x;
        });
      }).map(function(t6, e4) {
        return { x: t6.x, overlaps: [], y: [] };
      });
      if ("array" === t5) for (var n3 = 0; n3 < e3[i3].data.length; n3++) Array.isArray(e3[i3].data[n3]) ? (a3.push(e3[i3].data[n3][1][0]), s3.push(e3[i3].data[n3][1][1])) : (a3.push(e3[i3].data[n3]), s3.push(e3[i3].data[n3]));
      else if ("xy" === t5) for (var o3 = function(t6) {
        var n4 = Array.isArray(e3[i3].data[t6].y), o4 = v2.randomId(), l4 = e3[i3].data[t6].x, h3 = { y1: n4 ? e3[i3].data[t6].y[0] : e3[i3].data[t6].y, y2: n4 ? e3[i3].data[t6].y[1] : e3[i3].data[t6].y, rangeName: o4 };
        e3[i3].data[t6].rangeName = o4;
        var c3 = r3.findIndex(function(t7) {
          return t7.x === l4;
        });
        r3[c3].y.push(h3), a3.push(h3.y1), s3.push(h3.y2);
      }, l3 = 0; l3 < e3[i3].data.length; l3++) o3(l3);
      return { start: a3, end: s3, rangeUniques: r3 };
    } }, { key: "handleCandleStickBoxDataFormat", value: function(t5, e3, i3) {
      var a3 = this.w, s3 = "boxPlot" === a3.config.chart.type || "boxPlot" === a3.config.series[i3].type, r3 = [], n3 = [], o3 = [], l3 = [], h3 = [];
      if ("array" === t5) if (s3 && 6 === e3[i3].data[0].length || !s3 && 5 === e3[i3].data[0].length) for (var c3 = 0; c3 < e3[i3].data.length; c3++) r3.push(e3[i3].data[c3][1]), n3.push(e3[i3].data[c3][2]), s3 ? (o3.push(e3[i3].data[c3][3]), l3.push(e3[i3].data[c3][4]), h3.push(e3[i3].data[c3][5])) : (l3.push(e3[i3].data[c3][3]), h3.push(e3[i3].data[c3][4]));
      else for (var d3 = 0; d3 < e3[i3].data.length; d3++) Array.isArray(e3[i3].data[d3][1]) && (r3.push(e3[i3].data[d3][1][0]), n3.push(e3[i3].data[d3][1][1]), s3 ? (o3.push(e3[i3].data[d3][1][2]), l3.push(e3[i3].data[d3][1][3]), h3.push(e3[i3].data[d3][1][4])) : (l3.push(e3[i3].data[d3][1][2]), h3.push(e3[i3].data[d3][1][3])));
      else if ("xy" === t5) for (var u3 = 0; u3 < e3[i3].data.length; u3++) Array.isArray(e3[i3].data[u3].y) && (r3.push(e3[i3].data[u3].y[0]), n3.push(e3[i3].data[u3].y[1]), s3 ? (o3.push(e3[i3].data[u3].y[2]), l3.push(e3[i3].data[u3].y[3]), h3.push(e3[i3].data[u3].y[4])) : (l3.push(e3[i3].data[u3].y[2]), h3.push(e3[i3].data[u3].y[3])));
      return { o: r3, h: n3, m: o3, l: l3, c: h3 };
    } }, { key: "parseDataAxisCharts", value: function(t5) {
      var e3 = this, i3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, a3 = this.w.config, s3 = this.w.globals, r3 = new zi2(i3), n3 = a3.labels.length > 0 ? a3.labels.slice() : a3.xaxis.categories.slice();
      s3.isRangeBar = "rangeBar" === a3.chart.type && s3.isBarHorizontal, s3.hasXaxisGroups = "category" === a3.xaxis.type && a3.xaxis.group.groups.length > 0, s3.hasXaxisGroups && (s3.groups = a3.xaxis.group.groups), t5.forEach(function(t6, e4) {
        void 0 !== t6.name ? s3.seriesNames.push(t6.name) : s3.seriesNames.push("series-" + parseInt(e4 + 1, 10));
      }), this.coreUtils.setSeriesYAxisMappings();
      var o3 = [], l3 = f2(new Set(a3.series.map(function(t6) {
        return t6.group;
      })));
      a3.series.forEach(function(t6, e4) {
        var i4 = l3.indexOf(t6.group);
        o3[i4] || (o3[i4] = []), o3[i4].push(s3.seriesNames[e4]);
      }), s3.seriesGroups = o3;
      for (var h3 = function() {
        for (var t6 = 0; t6 < n3.length; t6++) if ("string" == typeof n3[t6]) {
          if (!r3.isValidDate(n3[t6])) throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
          e3.twoDSeriesX.push(r3.parseDate(n3[t6]));
        } else e3.twoDSeriesX.push(n3[t6]);
      }, c3 = 0; c3 < t5.length; c3++) {
        if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t5[c3].data) return void console.error("It is a possibility that you may have not included 'data' property in series.");
        if ("rangeBar" !== a3.chart.type && "rangeArea" !== a3.chart.type && "rangeBar" !== t5[c3].type && "rangeArea" !== t5[c3].type || (s3.isRangeData = true, this.handleRangeData(t5, c3)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t5, c3) : this.isFormatXY() && this.handleFormatXY(t5, c3), "candlestick" !== a3.chart.type && "candlestick" !== t5[c3].type && "boxPlot" !== a3.chart.type && "boxPlot" !== t5[c3].type || this.handleCandleStickBoxData(t5, c3), s3.series.push(this.twoDSeries), s3.labels.push(this.twoDSeriesX), s3.seriesX.push(this.twoDSeriesX), s3.seriesGoals = this.seriesGoals, c3 !== this.activeSeriesIndex || this.fallbackToCategory || (s3.isXNumeric = true);
        else {
          "datetime" === a3.xaxis.type ? (s3.isXNumeric = true, h3(), s3.seriesX.push(this.twoDSeriesX)) : "numeric" === a3.xaxis.type && (s3.isXNumeric = true, n3.length > 0 && (this.twoDSeriesX = n3, s3.seriesX.push(this.twoDSeriesX))), s3.labels.push(this.twoDSeriesX);
          var d3 = t5[c3].data.map(function(t6) {
            return v2.parseNumber(t6);
          });
          s3.series.push(d3);
        }
        s3.seriesZ.push(this.threeDSeries), void 0 !== t5[c3].color ? s3.seriesColors.push(t5[c3].color) : s3.seriesColors.push(void 0);
      }
      return this.w;
    } }, { key: "parseDataNonAxisCharts", value: function(t5) {
      var e3 = this.w.globals, i3 = this.w.config;
      e3.series = t5.slice(), e3.seriesNames = i3.labels.slice();
      for (var a3 = 0; a3 < e3.series.length; a3++) void 0 === e3.seriesNames[a3] && e3.seriesNames.push("series-" + (a3 + 1));
      return this.w;
    } }, { key: "handleExternalLabelsData", value: function(t5) {
      var e3 = this.w.config, i3 = this.w.globals;
      if (e3.xaxis.categories.length > 0) i3.labels = e3.xaxis.categories;
      else if (e3.labels.length > 0) i3.labels = e3.labels.slice();
      else if (this.fallbackToCategory) {
        if (i3.labels = i3.labels[0], i3.seriesRange.length && (i3.seriesRange.map(function(t6) {
          t6.forEach(function(t7) {
            i3.labels.indexOf(t7.x) < 0 && t7.x && i3.labels.push(t7.x);
          });
        }), i3.labels = Array.from(new Set(i3.labels.map(JSON.stringify)), JSON.parse)), e3.xaxis.convertedCatToNumeric) new Ni2(e3).convertCatToNumericXaxis(e3, this.ctx, i3.seriesX[0]), this._generateExternalLabels(t5);
      } else this._generateExternalLabels(t5);
    } }, { key: "_generateExternalLabels", value: function(t5) {
      var e3 = this.w.globals, i3 = this.w.config, a3 = [];
      if (e3.axisCharts) {
        if (e3.series.length > 0) if (this.isFormatXY()) for (var s3 = i3.series.map(function(t6, e4) {
          return t6.data.filter(function(t7, e5, i4) {
            return i4.findIndex(function(e6) {
              return e6.x === t7.x;
            }) === e5;
          });
        }), r3 = s3.reduce(function(t6, e4, i4, a4) {
          return a4[t6].length > e4.length ? t6 : i4;
        }, 0), n3 = 0; n3 < s3[r3].length; n3++) a3.push(n3 + 1);
        else for (var o3 = 0; o3 < e3.series[e3.maxValsInArrayIndex].length; o3++) a3.push(o3 + 1);
        e3.seriesX = [];
        for (var l3 = 0; l3 < t5.length; l3++) e3.seriesX.push(a3);
        this.w.globals.isBarHorizontal || (e3.isXNumeric = true);
      }
      if (0 === a3.length) {
        a3 = e3.axisCharts ? [] : e3.series.map(function(t6, e4) {
          return e4 + 1;
        });
        for (var h3 = 0; h3 < t5.length; h3++) e3.seriesX.push(a3);
      }
      e3.labels = a3, i3.xaxis.convertedCatToNumeric && (e3.categoryLabels = a3.map(function(t6) {
        return i3.xaxis.labels.formatter(t6);
      })), e3.noLabelsProvided = true;
    } }, { key: "parseData", value: function(t5) {
      var e3 = this.w, i3 = e3.config, a3 = e3.globals;
      if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = false, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a3.axisCharts ? (this.parseDataAxisCharts(t5), this.coreUtils.getLargestSeries()) : this.parseDataNonAxisCharts(t5), i3.chart.stacked) {
        var s3 = new Zi2(this.ctx);
        a3.series = s3.setNullSeriesToZeroValues(a3.series);
      }
      this.coreUtils.getSeriesTotals(), a3.axisCharts && (a3.stackedSeriesTotals = this.coreUtils.getStackedSeriesTotals(), a3.stackedSeriesTotalsByGroups = this.coreUtils.getStackedSeriesTotalsByGroups()), this.coreUtils.getPercentSeries(), a3.dataFormatXNumeric || a3.isXNumeric && ("numeric" !== i3.xaxis.type || 0 !== i3.labels.length || 0 !== i3.xaxis.categories.length) || this.handleExternalLabelsData(t5);
      for (var r3 = this.coreUtils.getCategoryLabels(a3.labels), n3 = 0; n3 < r3.length; n3++) if (Array.isArray(r3[n3])) {
        a3.isMultiLineX = true;
        break;
      }
    } }, { key: "excludeCollapsedSeriesInYAxis", value: function() {
      var t5 = this.w, e3 = [];
      t5.globals.seriesYAxisMap.forEach(function(i3, a3) {
        var s3 = 0;
        i3.forEach(function(e4) {
          -1 !== t5.globals.collapsedSeriesIndices.indexOf(e4) && s3++;
        }), s3 > 0 && s3 == i3.length && e3.push(a3);
      }), t5.globals.ignoreYAxisIndexes = e3.map(function(t6) {
        return t6;
      });
    } }]), t4;
  }();
  var Ji2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "svgStringToNode", value: function(t5) {
      return new DOMParser().parseFromString(t5, "image/svg+xml").documentElement;
    } }, { key: "scaleSvgNode", value: function(t5, e3) {
      var i3 = parseFloat(t5.getAttributeNS(null, "width")), a3 = parseFloat(t5.getAttributeNS(null, "height"));
      t5.setAttributeNS(null, "width", i3 * e3), t5.setAttributeNS(null, "height", a3 * e3), t5.setAttributeNS(null, "viewBox", "0 0 " + i3 + " " + a3);
    } }, { key: "getSvgString", value: function(t5) {
      var e3 = this;
      return new Promise(function(i3) {
        var a3 = e3.w, s3 = t5 || a3.config.chart.toolbar.export.scale || a3.config.chart.toolbar.export.width / a3.globals.svgWidth;
        s3 || (s3 = 1);
        var r3 = a3.globals.svgWidth * s3, n3 = a3.globals.svgHeight * s3, o3 = a3.globals.dom.elWrap.cloneNode(true);
        o3.style.width = r3 + "px", o3.style.height = n3 + "px";
        var l3 = new XMLSerializer().serializeToString(o3), h3 = '\n        <svg xmlns="http://www.w3.org/2000/svg"\n          version="1.1"\n          xmlns:xlink="http://www.w3.org/1999/xlink"\n          class="apexcharts-svg"\n          xmlns:data="ApexChartsNS"\n          transform="translate(0, 0)"\n          width="'.concat(a3.globals.svgWidth, 'px" height="').concat(a3.globals.svgHeight, 'px">\n          <foreignObject width="100%" height="100%">\n            <div xmlns="http://www.w3.org/1999/xhtml" style="width:').concat(r3, "px; height:").concat(n3, 'px;">\n            <style type="text/css">\n              .apexcharts-tooltip, .apexcharts-toolbar, .apexcharts-xaxistooltip, .apexcharts-yaxistooltip, .apexcharts-xcrosshairs, .apexcharts-ycrosshairs, .apexcharts-zoom-rect, .apexcharts-selection-rect {\n                display: none;\n              }\n            </style>\n              ').concat(l3, "\n            </div>\n          </foreignObject>\n        </svg>\n      "), c3 = e3.svgStringToNode(h3);
        1 !== s3 && e3.scaleSvgNode(c3, s3), e3.convertImagesToBase64(c3).then(function() {
          h3 = new XMLSerializer().serializeToString(c3), i3(h3.replace(/&nbsp;/g, "&#160;"));
        });
      });
    } }, { key: "convertImagesToBase64", value: function(t5) {
      var e3 = this, i3 = t5.getElementsByTagName("image"), a3 = Array.from(i3).map(function(t6) {
        var i4 = t6.getAttributeNS("http://www.w3.org/1999/xlink", "href");
        return i4 && !i4.startsWith("data:") ? e3.getBase64FromUrl(i4).then(function(e4) {
          t6.setAttributeNS("http://www.w3.org/1999/xlink", "href", e4);
        }).catch(function(t7) {
          console.error("Error converting image to base64:", t7);
        }) : Promise.resolve();
      });
      return Promise.all(a3);
    } }, { key: "getBase64FromUrl", value: function(t5) {
      return new Promise(function(e3, i3) {
        var a3 = new Image();
        a3.crossOrigin = "Anonymous", a3.onload = function() {
          var t6 = document.createElement("canvas");
          t6.width = a3.width, t6.height = a3.height, t6.getContext("2d").drawImage(a3, 0, 0), e3(t6.toDataURL());
        }, a3.onerror = i3, a3.src = t5;
      });
    } }, { key: "svgUrl", value: function() {
      var t5 = this;
      return new Promise(function(e3) {
        t5.getSvgString().then(function(t6) {
          var i3 = new Blob([t6], { type: "image/svg+xml;charset=utf-8" });
          e3(URL.createObjectURL(i3));
        });
      });
    } }, { key: "dataURI", value: function(t5) {
      var e3 = this;
      return new Promise(function(i3) {
        var a3 = e3.w, s3 = t5 ? t5.scale || t5.width / a3.globals.svgWidth : 1, r3 = document.createElement("canvas");
        r3.width = a3.globals.svgWidth * s3, r3.height = parseInt(a3.globals.dom.elWrap.style.height, 10) * s3;
        var n3 = "transparent" !== a3.config.chart.background && a3.config.chart.background ? a3.config.chart.background : "#fff", o3 = r3.getContext("2d");
        o3.fillStyle = n3, o3.fillRect(0, 0, r3.width * s3, r3.height * s3), e3.getSvgString(s3).then(function(t6) {
          var e4 = "data:image/svg+xml," + encodeURIComponent(t6), a4 = new Image();
          a4.crossOrigin = "anonymous", a4.onload = function() {
            if (o3.drawImage(a4, 0, 0), r3.msToBlob) {
              var t7 = r3.msToBlob();
              i3({ blob: t7 });
            } else {
              var e5 = r3.toDataURL("image/png");
              i3({ imgURI: e5 });
            }
          }, a4.src = e4;
        });
      });
    } }, { key: "exportToSVG", value: function() {
      var t5 = this;
      this.svgUrl().then(function(e3) {
        t5.triggerDownload(e3, t5.w.config.chart.toolbar.export.svg.filename, ".svg");
      });
    } }, { key: "exportToPng", value: function() {
      var t5 = this, e3 = this.w.config.chart.toolbar.export.scale, i3 = this.w.config.chart.toolbar.export.width, a3 = e3 ? { scale: e3 } : i3 ? { width: i3 } : void 0;
      this.dataURI(a3).then(function(e4) {
        var i4 = e4.imgURI, a4 = e4.blob;
        a4 ? navigator.msSaveOrOpenBlob(a4, t5.w.globals.chartID + ".png") : t5.triggerDownload(i4, t5.w.config.chart.toolbar.export.png.filename, ".png");
      });
    } }, { key: "exportToCSV", value: function(t5) {
      var e3 = this, i3 = t5.series, a3 = t5.fileName, s3 = t5.columnDelimiter, r3 = void 0 === s3 ? "," : s3, n3 = t5.lineDelimiter, o3 = void 0 === n3 ? "\n" : n3, l3 = this.w;
      i3 || (i3 = l3.config.series);
      var h3 = [], c3 = [], d3 = "", u3 = l3.globals.series.map(function(t6, e4) {
        return -1 === l3.globals.collapsedSeriesIndices.indexOf(e4) ? t6 : [];
      }), g3 = function(t6) {
        return "function" == typeof l3.config.chart.toolbar.export.csv.categoryFormatter ? l3.config.chart.toolbar.export.csv.categoryFormatter(t6) : "datetime" === l3.config.xaxis.type && String(t6).length >= 10 ? new Date(t6).toDateString() : v2.isNumber(t6) ? t6 : t6.split(r3).join("");
      }, p3 = function(t6) {
        return "function" == typeof l3.config.chart.toolbar.export.csv.valueFormatter ? l3.config.chart.toolbar.export.csv.valueFormatter(t6) : t6;
      }, x3 = Math.max.apply(Math, f2(i3.map(function(t6) {
        return t6.data ? t6.data.length : 0;
      }))), b3 = new $i2(this.ctx), m3 = new Ri2(this.ctx), y3 = function(t6) {
        var i4 = "";
        if (l3.globals.axisCharts) {
          if ("category" === l3.config.xaxis.type || l3.config.xaxis.convertedCatToNumeric) if (l3.globals.isBarHorizontal) {
            var a4 = l3.globals.yLabelFormatters[0], s4 = new Zi2(e3.ctx).getActiveConfigSeriesIndex();
            i4 = a4(l3.globals.labels[t6], { seriesIndex: s4, dataPointIndex: t6, w: l3 });
          } else i4 = m3.getLabel(l3.globals.labels, l3.globals.timescaleLabels, 0, t6).text;
          "datetime" === l3.config.xaxis.type && (l3.config.xaxis.categories.length ? i4 = l3.config.xaxis.categories[t6] : l3.config.labels.length && (i4 = l3.config.labels[t6]));
        } else i4 = l3.config.labels[t6];
        return null === i4 ? "nullvalue" : (Array.isArray(i4) && (i4 = i4.join(" ")), v2.isNumber(i4) ? i4 : i4.split(r3).join(""));
      }, w3 = function(t6, e4) {
        if (h3.length && 0 === e4 && c3.push(h3.join(r3)), t6.data) {
          t6.data = t6.data.length && t6.data || f2(Array(x3)).map(function() {
            return "";
          });
          for (var a4 = 0; a4 < t6.data.length; a4++) {
            h3 = [];
            var s4 = y3(a4);
            if ("nullvalue" !== s4) {
              if (s4 || (b3.isFormatXY() ? s4 = i3[e4].data[a4].x : b3.isFormat2DArray() && (s4 = i3[e4].data[a4] ? i3[e4].data[a4][0] : "")), 0 === e4) {
                h3.push(g3(s4));
                for (var n4 = 0; n4 < l3.globals.series.length; n4++) {
                  var o4, d4 = b3.isFormatXY() ? null === (o4 = i3[n4].data[a4]) || void 0 === o4 ? void 0 : o4.y : u3[n4][a4];
                  h3.push(p3(d4));
                }
              }
              ("candlestick" === l3.config.chart.type || t6.type && "candlestick" === t6.type) && (h3.pop(), h3.push(l3.globals.seriesCandleO[e4][a4]), h3.push(l3.globals.seriesCandleH[e4][a4]), h3.push(l3.globals.seriesCandleL[e4][a4]), h3.push(l3.globals.seriesCandleC[e4][a4])), ("boxPlot" === l3.config.chart.type || t6.type && "boxPlot" === t6.type) && (h3.pop(), h3.push(l3.globals.seriesCandleO[e4][a4]), h3.push(l3.globals.seriesCandleH[e4][a4]), h3.push(l3.globals.seriesCandleM[e4][a4]), h3.push(l3.globals.seriesCandleL[e4][a4]), h3.push(l3.globals.seriesCandleC[e4][a4])), "rangeBar" === l3.config.chart.type && (h3.pop(), h3.push(l3.globals.seriesRangeStart[e4][a4]), h3.push(l3.globals.seriesRangeEnd[e4][a4])), h3.length && c3.push(h3.join(r3));
            }
          }
        }
      };
      h3.push(l3.config.chart.toolbar.export.csv.headerCategory), "boxPlot" === l3.config.chart.type ? (h3.push("minimum"), h3.push("q1"), h3.push("median"), h3.push("q3"), h3.push("maximum")) : "candlestick" === l3.config.chart.type ? (h3.push("open"), h3.push("high"), h3.push("low"), h3.push("close")) : "rangeBar" === l3.config.chart.type ? (h3.push("minimum"), h3.push("maximum")) : i3.map(function(t6, e4) {
        var i4 = (t6.name ? t6.name : "series-".concat(e4)) + "";
        l3.globals.axisCharts && h3.push(i4.split(r3).join("") ? i4.split(r3).join("") : "series-".concat(e4));
      }), l3.globals.axisCharts || (h3.push(l3.config.chart.toolbar.export.csv.headerValue), c3.push(h3.join(r3))), l3.globals.allSeriesHasEqualX || !l3.globals.axisCharts || l3.config.xaxis.categories.length || l3.config.labels.length ? i3.map(function(t6, e4) {
        l3.globals.axisCharts ? w3(t6, e4) : ((h3 = []).push(g3(l3.globals.labels[e4])), h3.push(p3(u3[e4])), c3.push(h3.join(r3)));
      }) : function() {
        var t6 = /* @__PURE__ */ new Set(), e4 = {};
        i3.forEach(function(a4, s4) {
          null == a4 || a4.data.forEach(function(a5) {
            var r4, n4;
            if (b3.isFormatXY()) r4 = a5.x, n4 = a5.y;
            else {
              if (!b3.isFormat2DArray()) return;
              r4 = a5[0], n4 = a5[1];
            }
            e4[r4] || (e4[r4] = Array(i3.length).fill("")), e4[r4][s4] = p3(n4), t6.add(r4);
          });
        }), h3.length && c3.push(h3.join(r3)), Array.from(t6).sort().forEach(function(t7) {
          c3.push([g3(t7), e4[t7].join(r3)]);
        });
      }(), d3 += c3.join(o3), this.triggerDownload("data:text/csv; charset=utf-8," + encodeURIComponent("\uFEFF" + d3), a3 || l3.config.chart.toolbar.export.csv.filename, ".csv");
    } }, { key: "triggerDownload", value: function(t5, e3, i3) {
      var a3 = document.createElement("a");
      a3.href = t5, a3.download = (e3 || this.w.globals.chartID) + i3, document.body.appendChild(a3), a3.click(), document.body.removeChild(a3);
    } }]), t4;
  }();
  var Qi2 = function() {
    function t4(e3, a3) {
      i2(this, t4), this.ctx = e3, this.elgrid = a3, this.w = e3.w;
      var s3 = this.w;
      this.axesUtils = new Ri2(e3), this.xaxisLabels = s3.globals.labels.slice(), s3.globals.timescaleLabels.length > 0 && !s3.globals.isBarHorizontal && (this.xaxisLabels = s3.globals.timescaleLabels.slice()), s3.config.xaxis.overwriteCategories && (this.xaxisLabels = s3.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], "top" === s3.config.xaxis.position ? this.offY = 0 : this.offY = s3.globals.gridHeight, this.offY = this.offY + s3.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = "bar" === s3.config.chart.type && s3.config.plotOptions.bar.horizontal, this.xaxisFontSize = s3.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = s3.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s3.config.xaxis.labels.style.colors, this.xaxisBorderWidth = s3.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = s3.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = s3.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = s3.config.xaxis.axisBorder.height, this.yaxis = s3.config.yaxis[0];
    }
    return s2(t4, [{ key: "drawXaxis", value: function() {
      var t5 = this.w, e3 = new Mi2(this.ctx), i3 = e3.group({ class: "apexcharts-xaxis", transform: "translate(".concat(t5.config.xaxis.offsetX, ", ").concat(t5.config.xaxis.offsetY, ")") }), a3 = e3.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(t5.globals.translateXAxisX, ", ").concat(t5.globals.translateXAxisY, ")") });
      i3.add(a3);
      for (var s3 = [], r3 = 0; r3 < this.xaxisLabels.length; r3++) s3.push(this.xaxisLabels[r3]);
      if (this.drawXAxisLabelAndGroup(true, e3, a3, s3, t5.globals.isXNumeric, function(t6, e4) {
        return e4;
      }), t5.globals.hasXaxisGroups) {
        var n3 = t5.globals.groups;
        s3 = [];
        for (var o3 = 0; o3 < n3.length; o3++) s3.push(n3[o3].title);
        var l3 = {};
        t5.config.xaxis.group.style && (l3.xaxisFontSize = t5.config.xaxis.group.style.fontSize, l3.xaxisFontFamily = t5.config.xaxis.group.style.fontFamily, l3.xaxisForeColors = t5.config.xaxis.group.style.colors, l3.fontWeight = t5.config.xaxis.group.style.fontWeight, l3.cssClass = t5.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(false, e3, a3, s3, false, function(t6, e4) {
          return n3[t6].cols * e4;
        }, l3);
      }
      if (void 0 !== t5.config.xaxis.title.text) {
        var h3 = e3.group({ class: "apexcharts-xaxis-title" }), c3 = e3.drawText({ x: t5.globals.gridWidth / 2 + t5.config.xaxis.title.offsetX, y: this.offY + parseFloat(this.xaxisFontSize) + ("bottom" === t5.config.xaxis.position ? t5.globals.xAxisLabelsHeight : -t5.globals.xAxisLabelsHeight - 10) + t5.config.xaxis.title.offsetY, text: t5.config.xaxis.title.text, textAnchor: "middle", fontSize: t5.config.xaxis.title.style.fontSize, fontFamily: t5.config.xaxis.title.style.fontFamily, fontWeight: t5.config.xaxis.title.style.fontWeight, foreColor: t5.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text " + t5.config.xaxis.title.style.cssClass });
        h3.add(c3), i3.add(h3);
      }
      if (t5.config.xaxis.axisBorder.show) {
        var d3 = t5.globals.barPadForNumericAxis, u3 = e3.drawLine(t5.globals.padHorizontal + t5.config.xaxis.axisBorder.offsetX - d3, this.offY, this.xaxisBorderWidth + d3, this.offY, t5.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
        this.elgrid && this.elgrid.elGridBorders && t5.config.grid.show ? this.elgrid.elGridBorders.add(u3) : i3.add(u3);
      }
      return i3;
    } }, { key: "drawXAxisLabelAndGroup", value: function(t5, e3, i3, a3, s3, r3) {
      var n3, o3 = this, l3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {}, h3 = [], c3 = [], d3 = this.w, u3 = l3.xaxisFontSize || this.xaxisFontSize, g3 = l3.xaxisFontFamily || this.xaxisFontFamily, p3 = l3.xaxisForeColors || this.xaxisForeColors, f3 = l3.fontWeight || d3.config.xaxis.labels.style.fontWeight, x3 = l3.cssClass || d3.config.xaxis.labels.style.cssClass, b3 = d3.globals.padHorizontal, m3 = a3.length, v3 = "category" === d3.config.xaxis.type ? d3.globals.dataPoints : m3;
      if (0 === v3 && m3 > v3 && (v3 = m3), s3) {
        var y3 = Math.max(Number(d3.config.xaxis.tickAmount) || 1, v3 > 1 ? v3 - 1 : v3);
        n3 = d3.globals.gridWidth / Math.min(y3, m3 - 1), b3 = b3 + r3(0, n3) / 2 + d3.config.xaxis.labels.offsetX;
      } else n3 = d3.globals.gridWidth / v3, b3 = b3 + r3(0, n3) + d3.config.xaxis.labels.offsetX;
      for (var w3 = function(s4) {
        var l4 = b3 - r3(s4, n3) / 2 + d3.config.xaxis.labels.offsetX;
        0 === s4 && 1 === m3 && n3 / 2 === b3 && 1 === v3 && (l4 = d3.globals.gridWidth / 2);
        var y4 = o3.axesUtils.getLabel(a3, d3.globals.timescaleLabels, l4, s4, h3, u3, t5), w4 = 28;
        d3.globals.rotateXLabels && t5 && (w4 = 22), d3.config.xaxis.title.text && "top" === d3.config.xaxis.position && (w4 += parseFloat(d3.config.xaxis.title.style.fontSize) + 2), t5 || (w4 = w4 + parseFloat(u3) + (d3.globals.xAxisLabelsHeight - d3.globals.xAxisGroupLabelsHeight) + (d3.globals.rotateXLabels ? 10 : 0)), y4 = void 0 !== d3.config.xaxis.tickAmount && "dataPoints" !== d3.config.xaxis.tickAmount && "datetime" !== d3.config.xaxis.type ? o3.axesUtils.checkLabelBasedOnTickamount(s4, y4, m3) : o3.axesUtils.checkForOverflowingLabels(s4, y4, m3, h3, c3);
        if (d3.config.xaxis.labels.show) {
          var k4 = e3.drawText({ x: y4.x, y: o3.offY + d3.config.xaxis.labels.offsetY + w4 - ("top" === d3.config.xaxis.position ? d3.globals.xAxisHeight + d3.config.xaxis.axisTicks.height - 2 : 0), text: y4.text, textAnchor: "middle", fontWeight: y4.isBold ? 600 : f3, fontSize: u3, fontFamily: g3, foreColor: Array.isArray(p3) ? t5 && d3.config.xaxis.convertedCatToNumeric ? p3[d3.globals.minX + s4 - 1] : p3[s4] : p3, isPlainText: false, cssClass: (t5 ? "apexcharts-xaxis-label " : "apexcharts-xaxis-group-label ") + x3 });
          if (i3.add(k4), k4.on("click", function(t6) {
            if ("function" == typeof d3.config.chart.events.xAxisLabelClick) {
              var e4 = Object.assign({}, d3, { labelIndex: s4 });
              d3.config.chart.events.xAxisLabelClick(t6, o3.ctx, e4);
            }
          }), t5) {
            var A3 = document.createElementNS(d3.globals.SVGNS, "title");
            A3.textContent = Array.isArray(y4.text) ? y4.text.join(" ") : y4.text, k4.node.appendChild(A3), "" !== y4.text && (h3.push(y4.text), c3.push(y4));
          }
        }
        s4 < m3 - 1 && (b3 += r3(s4 + 1, n3));
      }, k3 = 0; k3 <= m3 - 1; k3++) w3(k3);
    } }, { key: "drawXaxisInversed", value: function(t5) {
      var e3, i3, a3 = this, s3 = this.w, r3 = new Mi2(this.ctx), n3 = s3.config.yaxis[0].opposite ? s3.globals.translateYAxisX[t5] : 0, o3 = r3.group({ class: "apexcharts-yaxis apexcharts-xaxis-inversed", rel: t5 }), l3 = r3.group({ class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g", transform: "translate(" + n3 + ", 0)" });
      o3.add(l3);
      var h3 = [];
      if (s3.config.yaxis[t5].show) for (var c3 = 0; c3 < this.xaxisLabels.length; c3++) h3.push(this.xaxisLabels[c3]);
      e3 = s3.globals.gridHeight / h3.length, i3 = -e3 / 2.2;
      var d3 = s3.globals.yLabelFormatters[0], u3 = s3.config.yaxis[0].labels;
      if (u3.show) for (var g3 = function(n4) {
        var o4 = void 0 === h3[n4] ? "" : h3[n4];
        o4 = d3(o4, { seriesIndex: t5, dataPointIndex: n4, w: s3 });
        var c4 = a3.axesUtils.getYAxisForeColor(u3.style.colors, t5), g4 = 0;
        Array.isArray(o4) && (g4 = o4.length / 2 * parseInt(u3.style.fontSize, 10));
        var p4 = u3.offsetX - 15, f4 = "end";
        a3.yaxis.opposite && (f4 = "start"), "left" === s3.config.yaxis[0].labels.align ? (p4 = u3.offsetX, f4 = "start") : "center" === s3.config.yaxis[0].labels.align ? (p4 = u3.offsetX, f4 = "middle") : "right" === s3.config.yaxis[0].labels.align && (f4 = "end");
        var x4 = r3.drawText({ x: p4, y: i3 + e3 + u3.offsetY - g4, text: o4, textAnchor: f4, foreColor: Array.isArray(c4) ? c4[n4] : c4, fontSize: u3.style.fontSize, fontFamily: u3.style.fontFamily, fontWeight: u3.style.fontWeight, isPlainText: false, cssClass: "apexcharts-yaxis-label " + u3.style.cssClass, maxWidth: u3.maxWidth });
        l3.add(x4), x4.on("click", function(t6) {
          if ("function" == typeof s3.config.chart.events.xAxisLabelClick) {
            var e4 = Object.assign({}, s3, { labelIndex: n4 });
            s3.config.chart.events.xAxisLabelClick(t6, a3.ctx, e4);
          }
        });
        var b4 = document.createElementNS(s3.globals.SVGNS, "title");
        if (b4.textContent = Array.isArray(o4) ? o4.join(" ") : o4, x4.node.appendChild(b4), 0 !== s3.config.yaxis[t5].labels.rotate) {
          var m4 = r3.rotateAroundCenter(x4.node);
          x4.node.setAttribute("transform", "rotate(".concat(s3.config.yaxis[t5].labels.rotate, " 0 ").concat(m4.y, ")"));
        }
        i3 += e3;
      }, p3 = 0; p3 <= h3.length - 1; p3++) g3(p3);
      if (void 0 !== s3.config.yaxis[0].title.text) {
        var f3 = r3.group({ class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed", transform: "translate(" + n3 + ", 0)" }), x3 = r3.drawText({ x: s3.config.yaxis[0].title.offsetX, y: s3.globals.gridHeight / 2 + s3.config.yaxis[0].title.offsetY, text: s3.config.yaxis[0].title.text, textAnchor: "middle", foreColor: s3.config.yaxis[0].title.style.color, fontSize: s3.config.yaxis[0].title.style.fontSize, fontWeight: s3.config.yaxis[0].title.style.fontWeight, fontFamily: s3.config.yaxis[0].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text " + s3.config.yaxis[0].title.style.cssClass });
        f3.add(x3), o3.add(f3);
      }
      var b3 = 0;
      this.isCategoryBarHorizontal && s3.config.yaxis[0].opposite && (b3 = s3.globals.gridWidth);
      var m3 = s3.config.xaxis.axisBorder;
      if (m3.show) {
        var v3 = r3.drawLine(s3.globals.padHorizontal + m3.offsetX + b3, 1 + m3.offsetY, s3.globals.padHorizontal + m3.offsetX + b3, s3.globals.gridHeight + m3.offsetY, m3.color, 0);
        this.elgrid && this.elgrid.elGridBorders && s3.config.grid.show ? this.elgrid.elGridBorders.add(v3) : o3.add(v3);
      }
      return s3.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b3, h3.length, s3.config.yaxis[0].axisBorder, s3.config.yaxis[0].axisTicks, 0, e3, o3), o3;
    } }, { key: "drawXaxisTicks", value: function(t5, e3, i3) {
      var a3 = this.w, s3 = t5;
      if (!(t5 < 0 || t5 - 2 > a3.globals.gridWidth)) {
        var r3 = this.offY + a3.config.xaxis.axisTicks.offsetY;
        if (e3 = e3 + r3 + a3.config.xaxis.axisTicks.height, "top" === a3.config.xaxis.position && (e3 = r3 - a3.config.xaxis.axisTicks.height), a3.config.xaxis.axisTicks.show) {
          var n3 = new Mi2(this.ctx).drawLine(t5 + a3.config.xaxis.axisTicks.offsetX, r3 + a3.config.xaxis.offsetY, s3 + a3.config.xaxis.axisTicks.offsetX, e3 + a3.config.xaxis.offsetY, a3.config.xaxis.axisTicks.color);
          i3.add(n3), n3.node.classList.add("apexcharts-xaxis-tick");
        }
      }
    } }, { key: "getXAxisTicksPositions", value: function() {
      var t5 = this.w, e3 = [], i3 = this.xaxisLabels.length, a3 = t5.globals.padHorizontal;
      if (t5.globals.timescaleLabels.length > 0) for (var s3 = 0; s3 < i3; s3++) a3 = this.xaxisLabels[s3].position, e3.push(a3);
      else for (var r3 = i3, n3 = 0; n3 < r3; n3++) {
        var o3 = r3;
        t5.globals.isXNumeric && "bar" !== t5.config.chart.type && (o3 -= 1), a3 += t5.globals.gridWidth / o3, e3.push(a3);
      }
      return e3;
    } }, { key: "xAxisLabelCorrections", value: function() {
      var t5 = this.w, e3 = new Mi2(this.ctx), i3 = t5.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"), a3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"), s3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"), r3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
      if (t5.globals.rotateXLabels || t5.config.xaxis.labels.rotateAlways) for (var n3 = 0; n3 < a3.length; n3++) {
        var o3 = e3.rotateAroundCenter(a3[n3]);
        o3.y = o3.y - 1, o3.x = o3.x + 1, a3[n3].setAttribute("transform", "rotate(".concat(t5.config.xaxis.labels.rotate, " ").concat(o3.x, " ").concat(o3.y, ")")), a3[n3].setAttribute("text-anchor", "end");
        i3.setAttribute("transform", "translate(0, ".concat(-10, ")"));
        var l3 = a3[n3].childNodes;
        t5.config.xaxis.labels.trim && Array.prototype.forEach.call(l3, function(i4) {
          e3.placeTextWithEllipsis(i4, i4.textContent, t5.globals.xAxisLabelsHeight - ("bottom" === t5.config.legend.position ? 20 : 10));
        });
      }
      else !function() {
        for (var i4 = t5.globals.gridWidth / (t5.globals.labels.length + 1), s4 = 0; s4 < a3.length; s4++) {
          var r4 = a3[s4].childNodes;
          t5.config.xaxis.labels.trim && "datetime" !== t5.config.xaxis.type && Array.prototype.forEach.call(r4, function(t6) {
            e3.placeTextWithEllipsis(t6, t6.textContent, i4);
          });
        }
      }();
      if (s3.length > 0) {
        var h3 = s3[s3.length - 1].getBBox(), c3 = s3[0].getBBox();
        h3.x < -20 && s3[s3.length - 1].parentNode.removeChild(s3[s3.length - 1]), c3.x + c3.width > t5.globals.gridWidth && !t5.globals.isBarHorizontal && s3[0].parentNode.removeChild(s3[0]);
        for (var d3 = 0; d3 < r3.length; d3++) e3.placeTextWithEllipsis(r3[d3], r3[d3].textContent, t5.config.yaxis[0].labels.maxWidth - (t5.config.yaxis[0].title.text ? 2 * parseFloat(t5.config.yaxis[0].title.style.fontSize) : 0) - 15);
      }
    } }]), t4;
  }();
  var Ki2 = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
      var a3 = this.w;
      this.xaxisLabels = a3.globals.labels.slice(), this.axesUtils = new Ri2(e3), this.isRangeBar = a3.globals.seriesRange.length && a3.globals.isBarHorizontal, a3.globals.timescaleLabels.length > 0 && (this.xaxisLabels = a3.globals.timescaleLabels.slice());
    }
    return s2(t4, [{ key: "drawGridArea", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e3 = this.w, i3 = new Mi2(this.ctx);
      t5 || (t5 = i3.group({ class: "apexcharts-grid" }));
      var a3 = i3.drawLine(e3.globals.padHorizontal, 1, e3.globals.padHorizontal, e3.globals.gridHeight, "transparent"), s3 = i3.drawLine(e3.globals.padHorizontal, e3.globals.gridHeight, e3.globals.gridWidth, e3.globals.gridHeight, "transparent");
      return t5.add(s3), t5.add(a3), t5;
    } }, { key: "drawGrid", value: function() {
      if (this.w.globals.axisCharts) {
        var t5 = this.renderGrid();
        return this.drawGridArea(t5.el), t5;
      }
      return null;
    } }, { key: "createGridMask", value: function() {
      var t5 = this.w, e3 = t5.globals, i3 = new Mi2(this.ctx), a3 = Array.isArray(t5.config.stroke.width) ? Math.max.apply(Math, f2(t5.config.stroke.width)) : t5.config.stroke.width, s3 = function(t6) {
        var i4 = document.createElementNS(e3.SVGNS, "clipPath");
        return i4.setAttribute("id", t6), i4;
      };
      e3.dom.elGridRectMask = s3("gridRectMask".concat(e3.cuid)), e3.dom.elGridRectBarMask = s3("gridRectBarMask".concat(e3.cuid)), e3.dom.elGridRectMarkerMask = s3("gridRectMarkerMask".concat(e3.cuid)), e3.dom.elForecastMask = s3("forecastMask".concat(e3.cuid)), e3.dom.elNonForecastMask = s3("nonForecastMask".concat(e3.cuid));
      var r3 = 0, n3 = 0;
      (["bar", "rangeBar", "candlestick", "boxPlot"].includes(t5.config.chart.type) || t5.globals.comboBarCount > 0) && t5.globals.isXNumeric && !t5.globals.isBarHorizontal && (r3 = Math.max(t5.config.grid.padding.left, e3.barPadForNumericAxis), n3 = Math.max(t5.config.grid.padding.right, e3.barPadForNumericAxis)), e3.dom.elGridRect = i3.drawRect(-a3 / 2 - 2, -a3 / 2 - 2, e3.gridWidth + a3 + 4, e3.gridHeight + a3 + 4, 0, "#fff"), e3.dom.elGridRectBar = i3.drawRect(-a3 / 2 - r3 - 2, -a3 / 2 - 2, e3.gridWidth + a3 + n3 + r3 + 4, e3.gridHeight + a3 + 4, 0, "#fff");
      var o3 = t5.globals.markers.largestSize;
      e3.dom.elGridRectMarker = i3.drawRect(-o3, -o3, e3.gridWidth + 2 * o3, e3.gridHeight + 2 * o3, 0, "#fff"), e3.dom.elGridRectMask.appendChild(e3.dom.elGridRect.node), e3.dom.elGridRectBarMask.appendChild(e3.dom.elGridRectBar.node), e3.dom.elGridRectMarkerMask.appendChild(e3.dom.elGridRectMarker.node);
      var l3 = e3.dom.baseEl.querySelector("defs");
      l3.appendChild(e3.dom.elGridRectMask), l3.appendChild(e3.dom.elGridRectBarMask), l3.appendChild(e3.dom.elGridRectMarkerMask), l3.appendChild(e3.dom.elForecastMask), l3.appendChild(e3.dom.elNonForecastMask);
    } }, { key: "_drawGridLines", value: function(t5) {
      var e3 = t5.i, i3 = t5.x1, a3 = t5.y1, s3 = t5.x2, r3 = t5.y2, n3 = t5.xCount, o3 = t5.parent, l3 = this.w;
      if (!(0 === e3 && l3.globals.skipFirstTimelinelabel || e3 === n3 - 1 && l3.globals.skipLastTimelinelabel && !l3.config.xaxis.labels.formatter || "radar" === l3.config.chart.type)) {
        l3.config.grid.xaxis.lines.show && this._drawGridLine({ i: e3, x1: i3, y1: a3, x2: s3, y2: r3, xCount: n3, parent: o3 });
        var h3 = 0;
        if (l3.globals.hasXaxisGroups && "between" === l3.config.xaxis.tickPlacement) {
          var c3 = l3.globals.groups;
          if (c3) {
            for (var d3 = 0, u3 = 0; d3 < e3 && u3 < c3.length; u3++) d3 += c3[u3].cols;
            d3 === e3 && (h3 = 0.6 * l3.globals.xAxisLabelsHeight);
          }
        }
        new Qi2(this.ctx).drawXaxisTicks(i3, h3, l3.globals.dom.elGraphical);
      }
    } }, { key: "_drawGridLine", value: function(t5) {
      var e3 = t5.i, i3 = t5.x1, a3 = t5.y1, s3 = t5.x2, r3 = t5.y2, n3 = t5.xCount, o3 = t5.parent, l3 = this.w, h3 = o3.node.classList.contains("apexcharts-gridlines-horizontal"), c3 = l3.globals.barPadForNumericAxis, d3 = 0 === a3 && 0 === r3 || 0 === i3 && 0 === s3 || a3 === l3.globals.gridHeight && r3 === l3.globals.gridHeight || l3.globals.isBarHorizontal && (0 === e3 || e3 === n3 - 1), u3 = new Mi2(this).drawLine(i3 - (h3 ? c3 : 0), a3, s3 + (h3 ? c3 : 0), r3, l3.config.grid.borderColor, l3.config.grid.strokeDashArray);
      u3.node.classList.add("apexcharts-gridline"), d3 && l3.config.grid.show ? this.elGridBorders.add(u3) : o3.add(u3);
    } }, { key: "_drawGridBandRect", value: function(t5) {
      var e3 = t5.c, i3 = t5.x1, a3 = t5.y1, s3 = t5.x2, r3 = t5.y2, n3 = t5.type, o3 = this.w, l3 = new Mi2(this.ctx), h3 = o3.globals.barPadForNumericAxis, c3 = o3.config.grid[n3].colors[e3], d3 = l3.drawRect(i3 - ("row" === n3 ? h3 : 0), a3, s3 + ("row" === n3 ? 2 * h3 : 0), r3, 0, c3, o3.config.grid[n3].opacity);
      this.elg.add(d3), d3.attr("clip-path", "url(#gridRectMask".concat(o3.globals.cuid, ")")), d3.node.classList.add("apexcharts-grid-".concat(n3));
    } }, { key: "_drawXYLines", value: function(t5) {
      var e3 = this, i3 = t5.xCount, a3 = t5.tickAmount, s3 = this.w;
      if (s3.config.grid.xaxis.lines.show || s3.config.xaxis.axisTicks.show) {
        var r3, n3 = s3.globals.padHorizontal, o3 = s3.globals.gridHeight;
        s3.globals.timescaleLabels.length ? function(t6) {
          for (var a4 = t6.xC, s4 = t6.x1, r4 = t6.y1, n4 = t6.x2, o4 = t6.y2, l4 = 0; l4 < a4; l4++) s4 = e3.xaxisLabels[l4].position, n4 = e3.xaxisLabels[l4].position, e3._drawGridLines({ i: l4, x1: s4, y1: r4, x2: n4, y2: o4, xCount: i3, parent: e3.elgridLinesV });
        }({ xC: i3, x1: n3, y1: 0, x2: r3, y2: o3 }) : (s3.globals.isXNumeric && (i3 = s3.globals.xAxisScale.result.length), function(t6) {
          for (var a4 = t6.xC, r4 = t6.x1, n4 = t6.y1, o4 = t6.x2, l4 = t6.y2, h4 = 0; h4 < a4 + (s3.globals.isXNumeric ? 0 : 1); h4++) 0 === h4 && 1 === a4 && 1 === s3.globals.dataPoints && (o4 = r4 = s3.globals.gridWidth / 2), e3._drawGridLines({ i: h4, x1: r4, y1: n4, x2: o4, y2: l4, xCount: i3, parent: e3.elgridLinesV }), o4 = r4 += s3.globals.gridWidth / (s3.globals.isXNumeric ? a4 - 1 : a4);
        }({ xC: i3, x1: n3, y1: 0, x2: r3, y2: o3 }));
      }
      if (s3.config.grid.yaxis.lines.show) {
        var l3 = 0, h3 = 0, c3 = s3.globals.gridWidth, d3 = a3 + 1;
        this.isRangeBar && (d3 = s3.globals.labels.length);
        for (var u3 = 0; u3 < d3 + (this.isRangeBar ? 1 : 0); u3++) this._drawGridLine({ i: u3, xCount: d3 + (this.isRangeBar ? 1 : 0), x1: 0, y1: l3, x2: c3, y2: h3, parent: this.elgridLinesH }), h3 = l3 += s3.globals.gridHeight / (this.isRangeBar ? d3 : a3);
      }
    } }, { key: "_drawInvertedXYLines", value: function(t5) {
      var e3 = t5.xCount, i3 = this.w;
      if (i3.config.grid.xaxis.lines.show || i3.config.xaxis.axisTicks.show) for (var a3, s3 = i3.globals.padHorizontal, r3 = i3.globals.gridHeight, n3 = 0; n3 < e3 + 1; n3++) {
        i3.config.grid.xaxis.lines.show && this._drawGridLine({ i: n3, xCount: e3 + 1, x1: s3, y1: 0, x2: a3, y2: r3, parent: this.elgridLinesV }), new Qi2(this.ctx).drawXaxisTicks(s3, 0, i3.globals.dom.elGraphical), a3 = s3 += i3.globals.gridWidth / e3;
      }
      if (i3.config.grid.yaxis.lines.show) for (var o3 = 0, l3 = 0, h3 = i3.globals.gridWidth, c3 = 0; c3 < i3.globals.dataPoints + 1; c3++) this._drawGridLine({ i: c3, xCount: i3.globals.dataPoints + 1, x1: 0, y1: o3, x2: h3, y2: l3, parent: this.elgridLinesH }), l3 = o3 += i3.globals.gridHeight / i3.globals.dataPoints;
    } }, { key: "renderGrid", value: function() {
      var t5 = this.w, e3 = t5.globals, i3 = new Mi2(this.ctx);
      this.elg = i3.group({ class: "apexcharts-grid" }), this.elgridLinesH = i3.group({ class: "apexcharts-gridlines-horizontal" }), this.elgridLinesV = i3.group({ class: "apexcharts-gridlines-vertical" }), this.elGridBorders = i3.group({ class: "apexcharts-grid-borders" }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t5.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide(), this.elGridBorders.hide());
      for (var a3 = 0; a3 < e3.seriesYAxisMap.length && e3.ignoreYAxisIndexes.includes(a3); ) a3++;
      a3 === e3.seriesYAxisMap.length && (a3 = 0);
      var s3, r3 = e3.yAxisScale[a3].result.length - 1;
      if (!e3.isBarHorizontal || this.isRangeBar) {
        var n3, o3, l3;
        if (s3 = this.xaxisLabels.length, this.isRangeBar) r3 = e3.labels.length, t5.config.xaxis.tickAmount && t5.config.xaxis.labels.formatter && (s3 = t5.config.xaxis.tickAmount), (null === (n3 = e3.yAxisScale) || void 0 === n3 || null === (o3 = n3[a3]) || void 0 === o3 || null === (l3 = o3.result) || void 0 === l3 ? void 0 : l3.length) > 0 && "datetime" !== t5.config.xaxis.type && (s3 = e3.yAxisScale[a3].result.length - 1);
        this._drawXYLines({ xCount: s3, tickAmount: r3 });
      } else s3 = r3, r3 = e3.xTickAmount, this._drawInvertedXYLines({ xCount: s3, tickAmount: r3 });
      return this.drawGridBands(s3, r3), { el: this.elg, elGridBorders: this.elGridBorders, xAxisTickWidth: e3.gridWidth / s3 };
    } }, { key: "drawGridBands", value: function(t5, e3) {
      var i3, a3, s3 = this, r3 = this.w;
      if ((null === (i3 = r3.config.grid.row.colors) || void 0 === i3 ? void 0 : i3.length) > 0 && function(t6, i4, a4, n4, o4, l4) {
        for (var h4 = 0, c4 = 0; h4 < i4; h4++, c4++) c4 >= r3.config.grid[t6].colors.length && (c4 = 0), s3._drawGridBandRect({ c: c4, x1: a4, y1: n4, x2: o4, y2: l4, type: t6 }), n4 += r3.globals.gridHeight / e3;
      }("row", e3, 0, 0, r3.globals.gridWidth, r3.globals.gridHeight / e3), (null === (a3 = r3.config.grid.column.colors) || void 0 === a3 ? void 0 : a3.length) > 0) {
        var n3 = r3.globals.isBarHorizontal || "on" !== r3.config.xaxis.tickPlacement || "category" !== r3.config.xaxis.type && !r3.config.xaxis.convertedCatToNumeric ? t5 : t5 - 1;
        r3.globals.isXNumeric && (n3 = r3.globals.xAxisScale.result.length - 1);
        for (var o3 = r3.globals.padHorizontal, l3 = r3.globals.padHorizontal + r3.globals.gridWidth / n3, h3 = r3.globals.gridHeight, c3 = 0, d3 = 0; c3 < t5; c3++, d3++) {
          var u3;
          if (d3 >= r3.config.grid.column.colors.length && (d3 = 0), "datetime" === r3.config.xaxis.type) o3 = this.xaxisLabels[c3].position, l3 = ((null === (u3 = this.xaxisLabels[c3 + 1]) || void 0 === u3 ? void 0 : u3.position) || r3.globals.gridWidth) - this.xaxisLabels[c3].position;
          this._drawGridBandRect({ c: d3, x1: o3, y1: 0, x2: l3, y2: h3, type: "column" }), o3 += r3.globals.gridWidth / n3;
        }
      }
    } }]), t4;
  }();
  var ta = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.coreUtils = new Pi2(this.ctx);
    }
    return s2(t4, [{ key: "niceScale", value: function(t5, e3) {
      var i3, a3, s3, r3, n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, o3 = 1e-11, l3 = this.w, h3 = l3.globals;
      h3.isBarHorizontal ? (i3 = l3.config.xaxis, a3 = Math.max((h3.svgWidth - 100) / 25, 2)) : (i3 = l3.config.yaxis[n3], a3 = Math.max((h3.svgHeight - 100) / 15, 2)), v2.isNumber(a3) || (a3 = 10), s3 = void 0 !== i3.min && null !== i3.min, r3 = void 0 !== i3.max && null !== i3.min;
      var c3 = void 0 !== i3.stepSize && null !== i3.stepSize, d3 = void 0 !== i3.tickAmount && null !== i3.tickAmount, u3 = d3 ? i3.tickAmount : h3.niceScaleDefaultTicks[Math.min(Math.round(a3 / 2), h3.niceScaleDefaultTicks.length - 1)];
      if (h3.isMultipleYAxis && !d3 && h3.multiAxisTickAmount > 0 && (u3 = h3.multiAxisTickAmount, d3 = true), u3 = "dataPoints" === u3 ? h3.dataPoints - 1 : Math.abs(Math.round(u3)), (t5 === Number.MIN_VALUE && 0 === e3 || !v2.isNumber(t5) && !v2.isNumber(e3) || t5 === Number.MIN_VALUE && e3 === -Number.MAX_VALUE) && (t5 = v2.isNumber(i3.min) ? i3.min : 0, e3 = v2.isNumber(i3.max) ? i3.max : t5 + u3, h3.allSeriesCollapsed = false), t5 > e3) {
        console.warn("axis.min cannot be greater than axis.max: swapping min and max");
        var g3 = e3;
        e3 = t5, t5 = g3;
      } else t5 === e3 && (t5 = 0 === t5 ? 0 : t5 - 1, e3 = 0 === e3 ? 2 : e3 + 1);
      var p3 = [];
      u3 < 1 && (u3 = 1);
      var f3 = u3, x3 = Math.abs(e3 - t5);
      !s3 && t5 > 0 && t5 / x3 < 0.15 && (t5 = 0, s3 = true), !r3 && e3 < 0 && -e3 / x3 < 0.15 && (e3 = 0, r3 = true);
      var b3 = (x3 = Math.abs(e3 - t5)) / f3, m3 = b3, y3 = Math.floor(Math.log10(m3)), w3 = Math.pow(10, y3), k3 = Math.ceil(m3 / w3);
      if (b3 = m3 = (k3 = h3.niceScaleAllowedMagMsd[0 === h3.yValueDecimal ? 0 : 1][k3]) * w3, h3.isBarHorizontal && i3.stepSize && "datetime" !== i3.type ? (b3 = i3.stepSize, c3 = true) : c3 && (b3 = i3.stepSize), c3 && i3.forceNiceScale) {
        var A3 = Math.floor(Math.log10(b3));
        b3 *= Math.pow(10, y3 - A3);
      }
      if (s3 && r3) {
        var C3 = x3 / f3;
        if (d3) if (c3) if (0 != v2.mod(x3, b3)) {
          var S3 = v2.getGCD(b3, C3);
          b3 = C3 / S3 < 10 ? S3 : C3;
        } else 0 == v2.mod(b3, C3) ? b3 = C3 : (C3 = b3, d3 = false);
        else b3 = C3;
        else if (c3) 0 == v2.mod(x3, b3) ? C3 = b3 : b3 = C3;
        else if (0 == v2.mod(x3, b3)) C3 = b3;
        else {
          C3 = x3 / (f3 = Math.ceil(x3 / b3));
          var L3 = v2.getGCD(x3, b3);
          x3 / L3 < a3 && (C3 = L3), b3 = C3;
        }
        f3 = Math.round(x3 / b3);
      } else {
        if (s3 || r3) {
          if (r3) if (d3) t5 = e3 - b3 * f3;
          else {
            var M3 = t5;
            t5 = b3 * Math.floor(t5 / b3), Math.abs(e3 - t5) / v2.getGCD(x3, b3) > a3 && (t5 = e3 - b3 * u3, t5 += b3 * Math.floor((M3 - t5) / b3));
          }
          else if (s3) if (d3) e3 = t5 + b3 * f3;
          else {
            var P3 = e3;
            e3 = b3 * Math.ceil(e3 / b3), Math.abs(e3 - t5) / v2.getGCD(x3, b3) > a3 && (e3 = t5 + b3 * u3, e3 += b3 * Math.ceil((P3 - e3) / b3));
          }
        } else if (h3.isMultipleYAxis && d3) {
          var I3 = b3 * Math.floor(t5 / b3), T3 = I3 + b3 * f3;
          T3 < e3 && (b3 *= 2), T3 = e3, e3 = (t5 = I3) + b3 * f3, x3 = Math.abs(e3 - t5), t5 > 0 && t5 < Math.abs(T3 - e3) && (t5 = 0, e3 = b3 * f3), e3 < 0 && -e3 < Math.abs(I3 - t5) && (e3 = 0, t5 = -b3 * f3);
        } else t5 = b3 * Math.floor(t5 / b3), e3 = b3 * Math.ceil(e3 / b3);
        x3 = Math.abs(e3 - t5), b3 = v2.getGCD(x3, b3), f3 = Math.round(x3 / b3);
      }
      if (d3 || s3 || r3 || (f3 = Math.ceil((x3 - o3) / (b3 + o3))) > 16 && v2.getPrimeFactors(f3).length < 2 && f3++, !d3 && i3.forceNiceScale && 0 === h3.yValueDecimal && f3 > x3 && (f3 = x3, b3 = Math.round(x3 / f3)), f3 > a3 && (!d3 && !c3 || i3.forceNiceScale)) {
        var z3 = v2.getPrimeFactors(f3), X3 = z3.length - 1, R3 = f3;
        t: for (var E3 = 0; E3 < X3; E3++) for (var Y3 = 0; Y3 <= X3 - E3; Y3++) {
          for (var H3 = Math.min(Y3 + E3, X3), O3 = R3, F3 = 1, D3 = Y3; D3 <= H3; D3++) F3 *= z3[D3];
          if ((O3 /= F3) < a3) {
            R3 = O3;
            break t;
          }
        }
        b3 = R3 === f3 ? x3 : x3 / R3, f3 = Math.round(x3 / b3);
      }
      h3.isMultipleYAxis && 0 == h3.multiAxisTickAmount && h3.ignoreYAxisIndexes.indexOf(n3) < 0 && (h3.multiAxisTickAmount = f3);
      var _3 = t5 - b3, N3 = b3 * o3;
      do {
        _3 += b3, p3.push(v2.stripNumber(_3, 7));
      } while (e3 - _3 > N3);
      return { result: p3, niceMin: p3[0], niceMax: p3[p3.length - 1] };
    } }, { key: "linearScale", value: function(t5, e3) {
      var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0, r3 = Math.abs(e3 - t5), n3 = [];
      if (t5 === e3) return { result: n3 = [t5], niceMin: n3[0], niceMax: n3[n3.length - 1] };
      "dataPoints" === (i3 = this._adjustTicksForSmallRange(i3, a3, r3)) && (i3 = this.w.globals.dataPoints - 1), s3 || (s3 = r3 / i3), s3 = Math.round(100 * (s3 + Number.EPSILON)) / 100, i3 === Number.MAX_VALUE && (i3 = 5, s3 = 1);
      for (var o3 = t5; i3 >= 0; ) n3.push(o3), o3 = v2.preciseAddition(o3, s3), i3 -= 1;
      return { result: n3, niceMin: n3[0], niceMax: n3[n3.length - 1] };
    } }, { key: "logarithmicScaleNice", value: function(t5, e3, i3) {
      e3 <= 0 && (e3 = Math.max(t5, i3)), t5 <= 0 && (t5 = Math.min(e3, i3));
      for (var a3 = [], s3 = Math.ceil(Math.log(e3) / Math.log(i3) + 1), r3 = Math.floor(Math.log(t5) / Math.log(i3)); r3 < s3; r3++) a3.push(Math.pow(i3, r3));
      return { result: a3, niceMin: a3[0], niceMax: a3[a3.length - 1] };
    } }, { key: "logarithmicScale", value: function(t5, e3, i3) {
      e3 <= 0 && (e3 = Math.max(t5, i3)), t5 <= 0 && (t5 = Math.min(e3, i3));
      for (var a3 = [], s3 = Math.log(e3) / Math.log(i3), r3 = Math.log(t5) / Math.log(i3), n3 = s3 - r3, o3 = Math.round(n3), l3 = n3 / o3, h3 = 0, c3 = r3; h3 < o3; h3++, c3 += l3) a3.push(Math.pow(i3, c3));
      return a3.push(Math.pow(i3, s3)), { result: a3, niceMin: t5, niceMax: e3 };
    } }, { key: "_adjustTicksForSmallRange", value: function(t5, e3, i3) {
      var a3 = t5;
      if (void 0 !== e3 && this.w.config.yaxis[e3].labels.formatter && void 0 === this.w.config.yaxis[e3].tickAmount) {
        var s3 = Number(this.w.config.yaxis[e3].labels.formatter(1));
        v2.isNumber(s3) && 0 === this.w.globals.yValueDecimal && (a3 = Math.ceil(i3));
      }
      return a3 < t5 ? a3 : t5;
    } }, { key: "setYScaleForIndex", value: function(t5, e3, i3) {
      var a3 = this.w.globals, s3 = this.w.config, r3 = a3.isBarHorizontal ? s3.xaxis : s3.yaxis[t5];
      void 0 === a3.yAxisScale[t5] && (a3.yAxisScale[t5] = []);
      var n3 = Math.abs(i3 - e3);
      r3.logarithmic && n3 <= 5 && (a3.invalidLogScale = true), r3.logarithmic && n3 > 5 ? (a3.allSeriesCollapsed = false, a3.yAxisScale[t5] = r3.forceNiceScale ? this.logarithmicScaleNice(e3, i3, r3.logBase) : this.logarithmicScale(e3, i3, r3.logBase)) : i3 !== -Number.MAX_VALUE && v2.isNumber(i3) && e3 !== Number.MAX_VALUE && v2.isNumber(e3) ? (a3.allSeriesCollapsed = false, a3.yAxisScale[t5] = this.niceScale(e3, i3, t5)) : a3.yAxisScale[t5] = this.niceScale(Number.MIN_VALUE, 0, t5);
    } }, { key: "setXScale", value: function(t5, e3) {
      var i3 = this.w, a3 = i3.globals;
      if (e3 !== -Number.MAX_VALUE && v2.isNumber(e3)) {
        var s3 = a3.xTickAmount;
        a3.xAxisScale = this.linearScale(t5, e3, s3, 0, i3.config.xaxis.stepSize);
      } else a3.xAxisScale = this.linearScale(0, 10, 10);
      return a3.xAxisScale;
    } }, { key: "scaleMultipleYAxes", value: function() {
      var t5 = this, e3 = this.w.config, i3 = this.w.globals;
      this.coreUtils.setSeriesYAxisMappings();
      var a3 = i3.seriesYAxisMap, s3 = i3.minYArr, r3 = i3.maxYArr;
      i3.allSeriesCollapsed = true, i3.barGroups = [], a3.forEach(function(a4, n3) {
        var o3 = [];
        a4.forEach(function(t6) {
          var i4, a5 = null === (i4 = e3.series[t6]) || void 0 === i4 ? void 0 : i4.group;
          o3.indexOf(a5) < 0 && o3.push(a5);
        }), a4.length > 0 ? function() {
          var l3, h3, c3 = Number.MAX_VALUE, d3 = -Number.MAX_VALUE, u3 = c3, g3 = d3;
          if (e3.chart.stacked) !function() {
            var t6 = new Array(i3.dataPoints).fill(0), s4 = [], r4 = [], p4 = [];
            o3.forEach(function() {
              s4.push(t6.map(function() {
                return Number.MIN_VALUE;
              })), r4.push(t6.map(function() {
                return Number.MIN_VALUE;
              })), p4.push(t6.map(function() {
                return Number.MIN_VALUE;
              }));
            });
            for (var f4 = function(t7) {
              !l3 && e3.series[a4[t7]].type && (l3 = e3.series[a4[t7]].type);
              var c4 = a4[t7];
              h3 = e3.series[c4].group ? e3.series[c4].group : "axis-".concat(n3), !(i3.collapsedSeriesIndices.indexOf(c4) < 0 && i3.ancillaryCollapsedSeriesIndices.indexOf(c4) < 0) || (i3.allSeriesCollapsed = false, o3.forEach(function(t8, a5) {
                if (e3.series[c4].group === t8) for (var n4 = 0; n4 < i3.series[c4].length; n4++) {
                  var o4 = i3.series[c4][n4];
                  o4 >= 0 ? r4[a5][n4] += o4 : p4[a5][n4] += o4, s4[a5][n4] += o4, u3 = Math.min(u3, o4), g3 = Math.max(g3, o4);
                }
              })), "bar" !== l3 && "column" !== l3 || i3.barGroups.push(h3);
            }, x3 = 0; x3 < a4.length; x3++) f4(x3);
            l3 || (l3 = e3.chart.type), "bar" === l3 || "column" === l3 ? o3.forEach(function(t7, e4) {
              c3 = Math.min(c3, Math.min.apply(null, p4[e4])), d3 = Math.max(d3, Math.max.apply(null, r4[e4]));
            }) : (o3.forEach(function(t7, e4) {
              u3 = Math.min(u3, Math.min.apply(null, s4[e4])), g3 = Math.max(g3, Math.max.apply(null, s4[e4]));
            }), c3 = u3, d3 = g3), c3 === Number.MIN_VALUE && d3 === Number.MIN_VALUE && (d3 = -Number.MAX_VALUE);
          }();
          else for (var p3 = 0; p3 < a4.length; p3++) {
            var f3 = a4[p3];
            c3 = Math.min(c3, s3[f3]), d3 = Math.max(d3, r3[f3]), !(i3.collapsedSeriesIndices.indexOf(f3) < 0 && i3.ancillaryCollapsedSeriesIndices.indexOf(f3) < 0) || (i3.allSeriesCollapsed = false);
          }
          void 0 !== e3.yaxis[n3].min && (c3 = "function" == typeof e3.yaxis[n3].min ? e3.yaxis[n3].min(c3) : e3.yaxis[n3].min), void 0 !== e3.yaxis[n3].max && (d3 = "function" == typeof e3.yaxis[n3].max ? e3.yaxis[n3].max(d3) : e3.yaxis[n3].max), i3.barGroups = i3.barGroups.filter(function(t6, e4, i4) {
            return i4.indexOf(t6) === e4;
          }), t5.setYScaleForIndex(n3, c3, d3), a4.forEach(function(t6) {
            s3[t6] = i3.yAxisScale[n3].niceMin, r3[t6] = i3.yAxisScale[n3].niceMax;
          });
        }() : t5.setYScaleForIndex(n3, 0, -Number.MAX_VALUE);
      });
    } }]), t4;
  }();
  var ea = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.scales = new ta(e3);
    }
    return s2(t4, [{ key: "init", value: function() {
      this.setYRange(), this.setXRange(), this.setZRange();
    } }, { key: "getMinYMaxY", value: function(t5) {
      var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE, i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s3 = this.w.config, r3 = this.w.globals, n3 = -Number.MAX_VALUE, o3 = Number.MIN_VALUE;
      null === a3 && (a3 = t5 + 1);
      var l3 = r3.series, h3 = l3, c3 = l3;
      "candlestick" === s3.chart.type ? (h3 = r3.seriesCandleL, c3 = r3.seriesCandleH) : "boxPlot" === s3.chart.type ? (h3 = r3.seriesCandleO, c3 = r3.seriesCandleC) : r3.isRangeData && (h3 = r3.seriesRangeStart, c3 = r3.seriesRangeEnd);
      var d3 = false;
      if (r3.seriesX.length >= a3) {
        var u3, g3 = null === (u3 = r3.brushSource) || void 0 === u3 ? void 0 : u3.w.config.chart.brush;
        (s3.chart.zoom.enabled && s3.chart.zoom.autoScaleYaxis || null != g3 && g3.enabled && null != g3 && g3.autoScaleYaxis) && (d3 = true);
      }
      for (var p3 = t5; p3 < a3; p3++) {
        r3.dataPoints = Math.max(r3.dataPoints, l3[p3].length);
        var f3 = s3.series[p3].type;
        r3.categoryLabels.length && (r3.dataPoints = r3.categoryLabels.filter(function(t6) {
          return void 0 !== t6;
        }).length), r3.labels.length && "datetime" !== s3.xaxis.type && 0 !== r3.series.reduce(function(t6, e4) {
          return t6 + e4.length;
        }, 0) && (r3.dataPoints = Math.max(r3.dataPoints, r3.labels.length));
        var x3 = 0, b3 = l3[p3].length - 1;
        if (d3) {
          if (s3.xaxis.min) for (; x3 < b3 && r3.seriesX[p3][x3] < s3.xaxis.min; x3++) ;
          if (s3.xaxis.max) for (; b3 > x3 && r3.seriesX[p3][b3] > s3.xaxis.max; b3--) ;
        }
        for (var m3 = x3; m3 <= b3 && m3 < r3.series[p3].length; m3++) {
          var y3 = l3[p3][m3];
          if (null !== y3 && v2.isNumber(y3)) {
            var w3, k3, A3, C3;
            switch (void 0 !== (null === (w3 = c3[p3]) || void 0 === w3 ? void 0 : w3[m3]) && (n3 = Math.max(n3, c3[p3][m3]), e3 = Math.min(e3, c3[p3][m3])), void 0 !== (null === (k3 = h3[p3]) || void 0 === k3 ? void 0 : k3[m3]) && (e3 = Math.min(e3, h3[p3][m3]), i3 = Math.max(i3, h3[p3][m3])), f3) {
              case "candlestick":
                void 0 !== r3.seriesCandleC[p3][m3] && (n3 = Math.max(n3, r3.seriesCandleH[p3][m3]), e3 = Math.min(e3, r3.seriesCandleL[p3][m3]));
                break;
              case "boxPlot":
                void 0 !== r3.seriesCandleC[p3][m3] && (n3 = Math.max(n3, r3.seriesCandleC[p3][m3]), e3 = Math.min(e3, r3.seriesCandleO[p3][m3]));
            }
            f3 && "candlestick" !== f3 && "boxPlot" !== f3 && "rangeArea" !== f3 && "rangeBar" !== f3 && (n3 = Math.max(n3, r3.series[p3][m3]), e3 = Math.min(e3, r3.series[p3][m3])), r3.seriesGoals[p3] && r3.seriesGoals[p3][m3] && Array.isArray(r3.seriesGoals[p3][m3]) && r3.seriesGoals[p3][m3].forEach(function(t6) {
              n3 = Math.max(n3, t6.value), e3 = Math.min(e3, t6.value);
            }), i3 = n3, y3 = v2.noExponents(y3), v2.isFloat(y3) && (r3.yValueDecimal = Math.max(r3.yValueDecimal, y3.toString().split(".")[1].length)), o3 > (null === (A3 = h3[p3]) || void 0 === A3 ? void 0 : A3[m3]) && (null === (C3 = h3[p3]) || void 0 === C3 ? void 0 : C3[m3]) < 0 && (o3 = h3[p3][m3]);
          } else r3.hasNullValues = true;
        }
        "bar" !== f3 && "column" !== f3 || (o3 < 0 && n3 < 0 && (n3 = 0, i3 = Math.max(i3, 0)), o3 === Number.MIN_VALUE && (o3 = 0, e3 = Math.min(e3, 0)));
      }
      return "rangeBar" === s3.chart.type && r3.seriesRangeStart.length && r3.isBarHorizontal && (o3 = e3), "bar" === s3.chart.type && (o3 < 0 && n3 < 0 && (n3 = 0), o3 === Number.MIN_VALUE && (o3 = 0)), { minY: o3, maxY: n3, lowestY: e3, highestY: i3 };
    } }, { key: "setYRange", value: function() {
      var t5 = this.w.globals, e3 = this.w.config;
      t5.maxY = -Number.MAX_VALUE, t5.minY = Number.MIN_VALUE;
      var i3, a3 = Number.MAX_VALUE;
      if (t5.isMultipleYAxis) {
        a3 = Number.MAX_VALUE;
        for (var s3 = 0; s3 < t5.series.length; s3++) i3 = this.getMinYMaxY(s3), t5.minYArr[s3] = i3.lowestY, t5.maxYArr[s3] = i3.highestY, a3 = Math.min(a3, i3.lowestY);
      }
      if (i3 = this.getMinYMaxY(0, a3, null, t5.series.length), "bar" === e3.chart.type ? (t5.minY = i3.minY, t5.maxY = i3.maxY) : (t5.minY = i3.lowestY, t5.maxY = i3.highestY), a3 = i3.lowestY, e3.chart.stacked && this._setStackedMinMax(), "line" === e3.chart.type || "area" === e3.chart.type || "scatter" === e3.chart.type || "candlestick" === e3.chart.type || "boxPlot" === e3.chart.type || "rangeBar" === e3.chart.type && !t5.isBarHorizontal ? t5.minY === Number.MIN_VALUE && a3 !== -Number.MAX_VALUE && a3 !== t5.maxY && (t5.minY = a3) : t5.minY = t5.minY !== Number.MIN_VALUE ? Math.min(i3.minY, t5.minY) : i3.minY, e3.yaxis.forEach(function(e4, i4) {
        void 0 !== e4.max && ("number" == typeof e4.max ? t5.maxYArr[i4] = e4.max : "function" == typeof e4.max && (t5.maxYArr[i4] = e4.max(t5.isMultipleYAxis ? t5.maxYArr[i4] : t5.maxY)), t5.maxY = t5.maxYArr[i4]), void 0 !== e4.min && ("number" == typeof e4.min ? t5.minYArr[i4] = e4.min : "function" == typeof e4.min && (t5.minYArr[i4] = e4.min(t5.isMultipleYAxis ? t5.minYArr[i4] === Number.MIN_VALUE ? 0 : t5.minYArr[i4] : t5.minY)), t5.minY = t5.minYArr[i4]);
      }), t5.isBarHorizontal) {
        ["min", "max"].forEach(function(i4) {
          void 0 !== e3.xaxis[i4] && "number" == typeof e3.xaxis[i4] && ("min" === i4 ? t5.minY = e3.xaxis[i4] : t5.maxY = e3.xaxis[i4]);
        });
      }
      return t5.isMultipleYAxis ? (this.scales.scaleMultipleYAxes(), t5.minY = a3) : (this.scales.setYScaleForIndex(0, t5.minY, t5.maxY), t5.minY = t5.yAxisScale[0].niceMin, t5.maxY = t5.yAxisScale[0].niceMax, t5.minYArr[0] = t5.minY, t5.maxYArr[0] = t5.maxY), t5.barGroups = [], t5.lineGroups = [], t5.areaGroups = [], e3.series.forEach(function(i4) {
        switch (i4.type || e3.chart.type) {
          case "bar":
          case "column":
            t5.barGroups.push(i4.group);
            break;
          case "line":
            t5.lineGroups.push(i4.group);
            break;
          case "area":
            t5.areaGroups.push(i4.group);
        }
      }), t5.barGroups = t5.barGroups.filter(function(t6, e4, i4) {
        return i4.indexOf(t6) === e4;
      }), t5.lineGroups = t5.lineGroups.filter(function(t6, e4, i4) {
        return i4.indexOf(t6) === e4;
      }), t5.areaGroups = t5.areaGroups.filter(function(t6, e4, i4) {
        return i4.indexOf(t6) === e4;
      }), { minY: t5.minY, maxY: t5.maxY, minYArr: t5.minYArr, maxYArr: t5.maxYArr, yAxisScale: t5.yAxisScale };
    } }, { key: "setXRange", value: function() {
      var t5 = this.w.globals, e3 = this.w.config, i3 = "numeric" === e3.xaxis.type || "datetime" === e3.xaxis.type || "category" === e3.xaxis.type && !t5.noLabelsProvided || t5.noLabelsProvided || t5.isXNumeric;
      if (t5.isXNumeric && function() {
        for (var e4 = 0; e4 < t5.series.length; e4++) if (t5.labels[e4]) for (var i4 = 0; i4 < t5.labels[e4].length; i4++) null !== t5.labels[e4][i4] && v2.isNumber(t5.labels[e4][i4]) && (t5.maxX = Math.max(t5.maxX, t5.labels[e4][i4]), t5.initialMaxX = Math.max(t5.maxX, t5.labels[e4][i4]), t5.minX = Math.min(t5.minX, t5.labels[e4][i4]), t5.initialMinX = Math.min(t5.minX, t5.labels[e4][i4]));
      }(), t5.noLabelsProvided && 0 === e3.xaxis.categories.length && (t5.maxX = t5.labels[t5.labels.length - 1], t5.initialMaxX = t5.labels[t5.labels.length - 1], t5.minX = 1, t5.initialMinX = 1), t5.isXNumeric || t5.noLabelsProvided || t5.dataFormatXNumeric) {
        var a3 = 10;
        if (void 0 === e3.xaxis.tickAmount) a3 = Math.round(t5.svgWidth / 150), "numeric" === e3.xaxis.type && t5.dataPoints < 30 && (a3 = t5.dataPoints - 1), a3 > t5.dataPoints && 0 !== t5.dataPoints && (a3 = t5.dataPoints - 1);
        else if ("dataPoints" === e3.xaxis.tickAmount) {
          if (t5.series.length > 1 && (a3 = t5.series[t5.maxValsInArrayIndex].length - 1), t5.isXNumeric) {
            var s3 = Math.round(t5.maxX - t5.minX);
            s3 < 30 && (a3 = s3 - 1);
          }
        } else a3 = e3.xaxis.tickAmount;
        if (t5.xTickAmount = a3, void 0 !== e3.xaxis.max && "number" == typeof e3.xaxis.max && (t5.maxX = e3.xaxis.max), void 0 !== e3.xaxis.min && "number" == typeof e3.xaxis.min && (t5.minX = e3.xaxis.min), void 0 !== e3.xaxis.range && (t5.minX = t5.maxX - e3.xaxis.range), t5.minX !== Number.MAX_VALUE && t5.maxX !== -Number.MAX_VALUE) if (e3.xaxis.convertedCatToNumeric && !t5.dataFormatXNumeric) {
          for (var r3 = [], n3 = t5.minX - 1; n3 < t5.maxX; n3++) r3.push(n3 + 1);
          t5.xAxisScale = { result: r3, niceMin: r3[0], niceMax: r3[r3.length - 1] };
        } else t5.xAxisScale = this.scales.setXScale(t5.minX, t5.maxX);
        else t5.xAxisScale = this.scales.linearScale(0, a3, a3, 0, e3.xaxis.stepSize), t5.noLabelsProvided && t5.labels.length > 0 && (t5.xAxisScale = this.scales.linearScale(1, t5.labels.length, a3 - 1, 0, e3.xaxis.stepSize), t5.seriesX = t5.labels.slice());
        i3 && (t5.labels = t5.xAxisScale.result.slice());
      }
      return t5.isBarHorizontal && t5.labels.length && (t5.xTickAmount = t5.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), { minX: t5.minX, maxX: t5.maxX };
    } }, { key: "setZRange", value: function() {
      var t5 = this.w.globals;
      if (t5.isDataXYZ) {
        for (var e3 = 0; e3 < t5.series.length; e3++) if (void 0 !== t5.seriesZ[e3]) for (var i3 = 0; i3 < t5.seriesZ[e3].length; i3++) null !== t5.seriesZ[e3][i3] && v2.isNumber(t5.seriesZ[e3][i3]) && (t5.maxZ = Math.max(t5.maxZ, t5.seriesZ[e3][i3]), t5.minZ = Math.min(t5.minZ, t5.seriesZ[e3][i3]));
      }
    } }, { key: "_handleSingleDataPoint", value: function() {
      var t5 = this.w.globals, e3 = this.w.config;
      if (t5.minX === t5.maxX) {
        var i3 = new zi2(this.ctx);
        if ("datetime" === e3.xaxis.type) {
          var a3 = i3.getDate(t5.minX);
          e3.xaxis.labels.datetimeUTC ? a3.setUTCDate(a3.getUTCDate() - 2) : a3.setDate(a3.getDate() - 2), t5.minX = new Date(a3).getTime();
          var s3 = i3.getDate(t5.maxX);
          e3.xaxis.labels.datetimeUTC ? s3.setUTCDate(s3.getUTCDate() + 2) : s3.setDate(s3.getDate() + 2), t5.maxX = new Date(s3).getTime();
        } else ("numeric" === e3.xaxis.type || "category" === e3.xaxis.type && !t5.noLabelsProvided) && (t5.minX = t5.minX - 2, t5.initialMinX = t5.minX, t5.maxX = t5.maxX + 2, t5.initialMaxX = t5.maxX);
      }
    } }, { key: "_getMinXDiff", value: function() {
      var t5 = this.w.globals;
      t5.isXNumeric && t5.seriesX.forEach(function(e3, i3) {
        if (e3.length) {
          1 === e3.length && e3.push(t5.seriesX[t5.maxValsInArrayIndex][t5.seriesX[t5.maxValsInArrayIndex].length - 1]);
          var a3 = e3.slice();
          a3.sort(function(t6, e4) {
            return t6 - e4;
          }), a3.forEach(function(e4, i4) {
            if (i4 > 0) {
              var s3 = e4 - a3[i4 - 1];
              s3 > 0 && (t5.minXDiff = Math.min(s3, t5.minXDiff));
            }
          }), 1 !== t5.dataPoints && t5.minXDiff !== Number.MAX_VALUE || (t5.minXDiff = 0.5);
        }
      });
    } }, { key: "_setStackedMinMax", value: function() {
      var t5 = this, e3 = this.w.globals;
      if (e3.series.length) {
        var i3 = e3.seriesGroups;
        i3.length || (i3 = [this.w.globals.seriesNames.map(function(t6) {
          return t6;
        })]);
        var a3 = {}, s3 = {};
        i3.forEach(function(i4) {
          a3[i4] = [], s3[i4] = [], t5.w.config.series.map(function(t6, a4) {
            return i4.indexOf(e3.seriesNames[a4]) > -1 ? a4 : null;
          }).filter(function(t6) {
            return null !== t6;
          }).forEach(function(r3) {
            for (var n3 = 0; n3 < e3.series[e3.maxValsInArrayIndex].length; n3++) {
              var o3, l3, h3, c3;
              void 0 === a3[i4][n3] && (a3[i4][n3] = 0, s3[i4][n3] = 0), (t5.w.config.chart.stacked && !e3.comboCharts || t5.w.config.chart.stacked && e3.comboCharts && (!t5.w.config.chart.stackOnlyBar || "bar" === (null === (o3 = t5.w.config.series) || void 0 === o3 || null === (l3 = o3[r3]) || void 0 === l3 ? void 0 : l3.type) || "column" === (null === (h3 = t5.w.config.series) || void 0 === h3 || null === (c3 = h3[r3]) || void 0 === c3 ? void 0 : c3.type))) && null !== e3.series[r3][n3] && v2.isNumber(e3.series[r3][n3]) && (e3.series[r3][n3] > 0 ? a3[i4][n3] += parseFloat(e3.series[r3][n3]) + 1e-4 : s3[i4][n3] += parseFloat(e3.series[r3][n3]));
            }
          });
        }), Object.entries(a3).forEach(function(t6) {
          var i4 = p2(t6, 1)[0];
          a3[i4].forEach(function(t7, r3) {
            e3.maxY = Math.max(e3.maxY, a3[i4][r3]), e3.minY = Math.min(e3.minY, s3[i4][r3]);
          });
        });
      }
    } }]), t4;
  }();
  var ia = function() {
    function t4(e3, a3) {
      i2(this, t4), this.ctx = e3, this.elgrid = a3, this.w = e3.w;
      var s3 = this.w;
      this.xaxisFontSize = s3.config.xaxis.labels.style.fontSize, this.axisFontFamily = s3.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s3.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = "bar" === s3.config.chart.type && s3.config.plotOptions.bar.horizontal, this.xAxisoffX = "bottom" === s3.config.xaxis.position ? s3.globals.gridHeight : 0, this.drawnLabels = [], this.axesUtils = new Ri2(e3);
    }
    return s2(t4, [{ key: "drawYaxis", value: function(t5) {
      var e3 = this.w, i3 = new Mi2(this.ctx), a3 = e3.config.yaxis[t5].labels.style, s3 = a3.fontSize, r3 = a3.fontFamily, n3 = a3.fontWeight, o3 = i3.group({ class: "apexcharts-yaxis", rel: t5, transform: "translate(".concat(e3.globals.translateYAxisX[t5], ", 0)") });
      if (this.axesUtils.isYAxisHidden(t5)) return o3;
      var l3 = i3.group({ class: "apexcharts-yaxis-texts-g" });
      o3.add(l3);
      var h3 = e3.globals.yAxisScale[t5].result.length - 1, c3 = e3.globals.gridHeight / h3, d3 = e3.globals.yLabelFormatters[t5], u3 = this.axesUtils.checkForReversedLabels(t5, e3.globals.yAxisScale[t5].result.slice());
      if (e3.config.yaxis[t5].labels.show) {
        var g3 = e3.globals.translateY + e3.config.yaxis[t5].labels.offsetY;
        e3.globals.isBarHorizontal ? g3 = 0 : "heatmap" === e3.config.chart.type && (g3 -= c3 / 2), g3 += parseInt(s3, 10) / 3;
        for (var p3 = h3; p3 >= 0; p3--) {
          var f3 = d3(u3[p3], p3, e3), x3 = e3.config.yaxis[t5].labels.padding;
          e3.config.yaxis[t5].opposite && 0 !== e3.config.yaxis.length && (x3 *= -1);
          var b3 = this.getTextAnchor(e3.config.yaxis[t5].labels.align, e3.config.yaxis[t5].opposite), m3 = this.axesUtils.getYAxisForeColor(a3.colors, t5), y3 = Array.isArray(m3) ? m3[p3] : m3, w3 = v2.listToArray(e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(t5, "'] .apexcharts-yaxis-label tspan"))).map(function(t6) {
            return t6.textContent;
          }), k3 = i3.drawText({ x: x3, y: g3, text: w3.includes(f3) && !e3.config.yaxis[t5].labels.showDuplicates ? "" : f3, textAnchor: b3, fontSize: s3, fontFamily: r3, fontWeight: n3, maxWidth: e3.config.yaxis[t5].labels.maxWidth, foreColor: y3, isPlainText: false, cssClass: "apexcharts-yaxis-label ".concat(a3.cssClass) });
          l3.add(k3), this.addTooltip(k3, f3), 0 !== e3.config.yaxis[t5].labels.rotate && this.rotateLabel(i3, k3, firstLabel, e3.config.yaxis[t5].labels.rotate), g3 += c3;
        }
      }
      return this.addYAxisTitle(i3, o3, t5), this.addAxisBorder(i3, o3, t5, h3, c3), o3;
    } }, { key: "getTextAnchor", value: function(t5, e3) {
      return "left" === t5 ? "start" : "center" === t5 ? "middle" : "right" === t5 ? "end" : e3 ? "start" : "end";
    } }, { key: "addTooltip", value: function(t5, e3) {
      var i3 = document.createElementNS(this.w.globals.SVGNS, "title");
      i3.textContent = Array.isArray(e3) ? e3.join(" ") : e3, t5.node.appendChild(i3);
    } }, { key: "rotateLabel", value: function(t5, e3, i3, a3) {
      var s3 = t5.rotateAroundCenter(i3.node), r3 = t5.rotateAroundCenter(e3.node);
      e3.node.setAttribute("transform", "rotate(".concat(a3, " ").concat(s3.x, " ").concat(r3.y, ")"));
    } }, { key: "addYAxisTitle", value: function(t5, e3, i3) {
      var a3 = this.w;
      if (void 0 !== a3.config.yaxis[i3].title.text) {
        var s3 = t5.group({ class: "apexcharts-yaxis-title" }), r3 = a3.config.yaxis[i3].opposite ? a3.globals.translateYAxisX[i3] : 0, n3 = t5.drawText({ x: r3, y: a3.globals.gridHeight / 2 + a3.globals.translateY + a3.config.yaxis[i3].title.offsetY, text: a3.config.yaxis[i3].title.text, textAnchor: "end", foreColor: a3.config.yaxis[i3].title.style.color, fontSize: a3.config.yaxis[i3].title.style.fontSize, fontWeight: a3.config.yaxis[i3].title.style.fontWeight, fontFamily: a3.config.yaxis[i3].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text ".concat(a3.config.yaxis[i3].title.style.cssClass) });
        s3.add(n3), e3.add(s3);
      }
    } }, { key: "addAxisBorder", value: function(t5, e3, i3, a3, s3) {
      var r3 = this.w, n3 = r3.config.yaxis[i3].axisBorder, o3 = 31 + n3.offsetX;
      if (r3.config.yaxis[i3].opposite && (o3 = -31 - n3.offsetX), n3.show) {
        var l3 = t5.drawLine(o3, r3.globals.translateY + n3.offsetY - 2, o3, r3.globals.gridHeight + r3.globals.translateY + n3.offsetY + 2, n3.color, 0, n3.width);
        e3.add(l3);
      }
      r3.config.yaxis[i3].axisTicks.show && this.axesUtils.drawYAxisTicks(o3, a3, n3, r3.config.yaxis[i3].axisTicks, i3, s3, e3);
    } }, { key: "drawYaxisInversed", value: function(t5) {
      var e3 = this.w, i3 = new Mi2(this.ctx), a3 = i3.group({ class: "apexcharts-xaxis apexcharts-yaxis-inversed" }), s3 = i3.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(e3.globals.translateXAxisX, ", ").concat(e3.globals.translateXAxisY, ")") });
      a3.add(s3);
      var r3 = e3.globals.yAxisScale[t5].result.length - 1, n3 = e3.globals.gridWidth / r3 + 0.1, o3 = n3 + e3.config.xaxis.labels.offsetX, l3 = e3.globals.xLabelFormatter, h3 = this.axesUtils.checkForReversedLabels(t5, e3.globals.yAxisScale[t5].result.slice()), c3 = e3.globals.timescaleLabels;
      if (c3.length > 0 && (this.xaxisLabels = c3.slice(), r3 = (h3 = c3.slice()).length), e3.config.xaxis.labels.show) for (var d3 = c3.length ? 0 : r3; c3.length ? d3 < c3.length : d3 >= 0; c3.length ? d3++ : d3--) {
        var u3 = l3(h3[d3], d3, e3), g3 = e3.globals.gridWidth + e3.globals.padHorizontal - (o3 - n3 + e3.config.xaxis.labels.offsetX);
        if (c3.length) {
          var p3 = this.axesUtils.getLabel(h3, c3, g3, d3, this.drawnLabels, this.xaxisFontSize);
          g3 = p3.x, u3 = p3.text, this.drawnLabels.push(p3.text), 0 === d3 && e3.globals.skipFirstTimelinelabel && (u3 = ""), d3 === h3.length - 1 && e3.globals.skipLastTimelinelabel && (u3 = "");
        }
        var f3 = i3.drawText({ x: g3, y: this.xAxisoffX + e3.config.xaxis.labels.offsetY + 30 - ("top" === e3.config.xaxis.position ? e3.globals.xAxisHeight + e3.config.xaxis.axisTicks.height - 2 : 0), text: u3, textAnchor: "middle", foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t5] : this.xaxisForeColors, fontSize: this.xaxisFontSize, fontFamily: this.xaxisFontFamily, fontWeight: e3.config.xaxis.labels.style.fontWeight, isPlainText: false, cssClass: "apexcharts-xaxis-label ".concat(e3.config.xaxis.labels.style.cssClass) });
        s3.add(f3), f3.tspan(u3), this.addTooltip(f3, u3), o3 += n3;
      }
      return this.inversedYAxisTitleText(a3), this.inversedYAxisBorder(a3), a3;
    } }, { key: "inversedYAxisBorder", value: function(t5) {
      var e3 = this.w, i3 = new Mi2(this.ctx), a3 = e3.config.xaxis.axisBorder;
      if (a3.show) {
        var s3 = 0;
        "bar" === e3.config.chart.type && e3.globals.isXNumeric && (s3 -= 15);
        var r3 = i3.drawLine(e3.globals.padHorizontal + s3 + a3.offsetX, this.xAxisoffX, e3.globals.gridWidth, this.xAxisoffX, a3.color, 0, a3.height);
        this.elgrid && this.elgrid.elGridBorders && e3.config.grid.show ? this.elgrid.elGridBorders.add(r3) : t5.add(r3);
      }
    } }, { key: "inversedYAxisTitleText", value: function(t5) {
      var e3 = this.w, i3 = new Mi2(this.ctx);
      if (void 0 !== e3.config.xaxis.title.text) {
        var a3 = i3.group({ class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed" }), s3 = i3.drawText({ x: e3.globals.gridWidth / 2 + e3.config.xaxis.title.offsetX, y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e3.config.xaxis.title.style.fontSize) + e3.config.xaxis.title.offsetY + 20, text: e3.config.xaxis.title.text, textAnchor: "middle", fontSize: e3.config.xaxis.title.style.fontSize, fontFamily: e3.config.xaxis.title.style.fontFamily, fontWeight: e3.config.xaxis.title.style.fontWeight, foreColor: e3.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text ".concat(e3.config.xaxis.title.style.cssClass) });
        a3.add(s3), t5.add(a3);
      }
    } }, { key: "yAxisTitleRotate", value: function(t5, e3) {
      var i3 = this.w, a3 = new Mi2(this.ctx), s3 = i3.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t5, "'] .apexcharts-yaxis-texts-g")), r3 = s3 ? s3.getBoundingClientRect() : { width: 0, height: 0 }, n3 = i3.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t5, "'] .apexcharts-yaxis-title text")), o3 = n3 ? n3.getBoundingClientRect() : { width: 0, height: 0 };
      if (n3) {
        var l3 = this.xPaddingForYAxisTitle(t5, r3, o3, e3);
        n3.setAttribute("x", l3.xPos - (e3 ? 10 : 0));
        var h3 = a3.rotateAroundCenter(n3);
        n3.setAttribute("transform", "rotate(".concat(e3 ? -1 * i3.config.yaxis[t5].title.rotate : i3.config.yaxis[t5].title.rotate, " ").concat(h3.x, " ").concat(h3.y, ")"));
      }
    } }, { key: "xPaddingForYAxisTitle", value: function(t5, e3, i3, a3) {
      var s3 = this.w, r3 = 0, n3 = 10;
      return void 0 === s3.config.yaxis[t5].title.text || t5 < 0 ? { xPos: r3, padd: 0 } : (a3 ? r3 = e3.width + s3.config.yaxis[t5].title.offsetX + i3.width / 2 + n3 / 2 : (r3 = -1 * e3.width + s3.config.yaxis[t5].title.offsetX + n3 / 2 + i3.width / 2, s3.globals.isBarHorizontal && (n3 = 25, r3 = -1 * e3.width - s3.config.yaxis[t5].title.offsetX - n3)), { xPos: r3, padd: n3 });
    } }, { key: "setYAxisXPosition", value: function(t5, e3) {
      var i3 = this.w, a3 = 0, s3 = 0, r3 = 18, n3 = 1;
      i3.config.yaxis.length > 1 && (this.multipleYs = true), i3.config.yaxis.forEach(function(o3, l3) {
        var h3 = i3.globals.ignoreYAxisIndexes.includes(l3) || !o3.show || o3.floating || 0 === t5[l3].width, c3 = t5[l3].width + e3[l3].width;
        o3.opposite ? i3.globals.isBarHorizontal ? (s3 = i3.globals.gridWidth + i3.globals.translateX - 1, i3.globals.translateYAxisX[l3] = s3 - o3.labels.offsetX) : (s3 = i3.globals.gridWidth + i3.globals.translateX + n3, h3 || (n3 += c3 + 20), i3.globals.translateYAxisX[l3] = s3 - o3.labels.offsetX + 20) : (a3 = i3.globals.translateX - r3, h3 || (r3 += c3 + 20), i3.globals.translateYAxisX[l3] = a3 + o3.labels.offsetX);
      });
    } }, { key: "setYAxisTextAlignments", value: function() {
      var t5 = this.w;
      v2.listToArray(t5.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis")).forEach(function(e3, i3) {
        var a3 = t5.config.yaxis[i3];
        if (a3 && !a3.floating && void 0 !== a3.labels.align) {
          var s3 = t5.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(i3, "'] .apexcharts-yaxis-texts-g")), r3 = v2.listToArray(t5.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(i3, "'] .apexcharts-yaxis-label"))), n3 = s3.getBoundingClientRect();
          r3.forEach(function(t6) {
            t6.setAttribute("text-anchor", a3.labels.align);
          }), "left" !== a3.labels.align || a3.opposite ? "center" === a3.labels.align ? s3.setAttribute("transform", "translate(".concat(n3.width / 2 * (a3.opposite ? 1 : -1), ", 0)")) : "right" === a3.labels.align && a3.opposite && s3.setAttribute("transform", "translate(".concat(n3.width, ", 0)")) : s3.setAttribute("transform", "translate(-".concat(n3.width, ", 0)"));
        }
      });
    } }]), t4;
  }();
  var aa = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.documentEvent = v2.bind(this.documentEvent, this);
    }
    return s2(t4, [{ key: "addEventListener", value: function(t5, e3) {
      var i3 = this.w;
      i3.globals.events.hasOwnProperty(t5) ? i3.globals.events[t5].push(e3) : i3.globals.events[t5] = [e3];
    } }, { key: "removeEventListener", value: function(t5, e3) {
      var i3 = this.w;
      if (i3.globals.events.hasOwnProperty(t5)) {
        var a3 = i3.globals.events[t5].indexOf(e3);
        -1 !== a3 && i3.globals.events[t5].splice(a3, 1);
      }
    } }, { key: "fireEvent", value: function(t5, e3) {
      var i3 = this.w;
      if (i3.globals.events.hasOwnProperty(t5)) {
        e3 && e3.length || (e3 = []);
        for (var a3 = i3.globals.events[t5], s3 = a3.length, r3 = 0; r3 < s3; r3++) a3[r3].apply(null, e3);
      }
    } }, { key: "setupEventHandlers", value: function() {
      var t5 = this, e3 = this.w, i3 = this.ctx, a3 = e3.globals.dom.baseEl.querySelector(e3.globals.chartClass);
      this.ctx.eventList.forEach(function(t6) {
        a3.addEventListener(t6, function(t7) {
          var a4 = null === t7.target.getAttribute("i") && -1 !== e3.globals.capturedSeriesIndex ? e3.globals.capturedSeriesIndex : t7.target.getAttribute("i"), s3 = null === t7.target.getAttribute("j") && -1 !== e3.globals.capturedDataPointIndex ? e3.globals.capturedDataPointIndex : t7.target.getAttribute("j"), r3 = Object.assign({}, e3, { seriesIndex: e3.globals.axisCharts ? a4 : 0, dataPointIndex: s3 });
          "mousemove" === t7.type || "touchmove" === t7.type ? "function" == typeof e3.config.chart.events.mouseMove && e3.config.chart.events.mouseMove(t7, i3, r3) : "mouseleave" === t7.type || "touchleave" === t7.type ? "function" == typeof e3.config.chart.events.mouseLeave && e3.config.chart.events.mouseLeave(t7, i3, r3) : ("mouseup" === t7.type && 1 === t7.which || "touchend" === t7.type) && ("function" == typeof e3.config.chart.events.click && e3.config.chart.events.click(t7, i3, r3), i3.ctx.events.fireEvent("click", [t7, i3, r3]));
        }, { capture: false, passive: true });
      }), this.ctx.eventList.forEach(function(i4) {
        e3.globals.dom.baseEl.addEventListener(i4, t5.documentEvent, { passive: true });
      }), this.ctx.core.setupBrushHandler();
    } }, { key: "documentEvent", value: function(t5) {
      var e3 = this.w, i3 = t5.target.className;
      if ("click" === t5.type) {
        var a3 = e3.globals.dom.baseEl.querySelector(".apexcharts-menu");
        a3 && a3.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== i3 && a3.classList.remove("apexcharts-menu-open");
      }
      e3.globals.clientX = "touchmove" === t5.type ? t5.touches[0].clientX : t5.clientX, e3.globals.clientY = "touchmove" === t5.type ? t5.touches[0].clientY : t5.clientY;
    } }]), t4;
  }();
  var sa = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "setCurrentLocaleValues", value: function(t5) {
      var e3 = this.w.config.chart.locales;
      window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e3 = this.w.config.chart.locales.concat(window.Apex.chart.locales));
      var i3 = e3.filter(function(e4) {
        return e4.name === t5;
      })[0];
      if (!i3) throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
      var a3 = v2.extend(Hi2, i3);
      this.w.globals.locale = a3.options;
    } }]), t4;
  }();
  var ra = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "drawAxis", value: function(t5, e3) {
      var i3, a3, s3 = this, r3 = this.w.globals, n3 = this.w.config, o3 = new Qi2(this.ctx, e3), l3 = new ia(this.ctx, e3);
      r3.axisCharts && "radar" !== t5 && (r3.isBarHorizontal ? (a3 = l3.drawYaxisInversed(0), i3 = o3.drawXaxisInversed(0), r3.dom.elGraphical.add(i3), r3.dom.elGraphical.add(a3)) : (i3 = o3.drawXaxis(), r3.dom.elGraphical.add(i3), n3.yaxis.map(function(t6, e4) {
        if (-1 === r3.ignoreYAxisIndexes.indexOf(e4) && (a3 = l3.drawYaxis(e4), r3.dom.Paper.add(a3), "back" === s3.w.config.grid.position)) {
          var i4 = r3.dom.Paper.children()[1];
          i4.remove(), r3.dom.Paper.add(i4);
        }
      })));
    } }]), t4;
  }();
  var na = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "drawXCrosshairs", value: function() {
      var t5 = this.w, e3 = new Mi2(this.ctx), i3 = new Li2(this.ctx), a3 = t5.config.xaxis.crosshairs.fill.gradient, s3 = t5.config.xaxis.crosshairs.dropShadow, r3 = t5.config.xaxis.crosshairs.fill.type, n3 = a3.colorFrom, o3 = a3.colorTo, l3 = a3.opacityFrom, h3 = a3.opacityTo, c3 = a3.stops, d3 = s3.enabled, u3 = s3.left, g3 = s3.top, p3 = s3.blur, f3 = s3.color, x3 = s3.opacity, b3 = t5.config.xaxis.crosshairs.fill.color;
      if (t5.config.xaxis.crosshairs.show) {
        "gradient" === r3 && (b3 = e3.drawGradient("vertical", n3, o3, l3, h3, null, c3, null));
        var m3 = e3.drawRect();
        1 === t5.config.xaxis.crosshairs.width && (m3 = e3.drawLine());
        var y3 = t5.globals.gridHeight;
        (!v2.isNumber(y3) || y3 < 0) && (y3 = 0);
        var w3 = t5.config.xaxis.crosshairs.width;
        (!v2.isNumber(w3) || w3 < 0) && (w3 = 0), m3.attr({ class: "apexcharts-xcrosshairs", x: 0, y: 0, y2: y3, width: w3, height: y3, fill: b3, filter: "none", "fill-opacity": t5.config.xaxis.crosshairs.opacity, stroke: t5.config.xaxis.crosshairs.stroke.color, "stroke-width": t5.config.xaxis.crosshairs.stroke.width, "stroke-dasharray": t5.config.xaxis.crosshairs.stroke.dashArray }), d3 && (m3 = i3.dropShadow(m3, { left: u3, top: g3, blur: p3, color: f3, opacity: x3 })), t5.globals.dom.elGraphical.add(m3);
      }
    } }, { key: "drawYCrosshairs", value: function() {
      var t5 = this.w, e3 = new Mi2(this.ctx), i3 = t5.config.yaxis[0].crosshairs, a3 = t5.globals.barPadForNumericAxis;
      if (t5.config.yaxis[0].crosshairs.show) {
        var s3 = e3.drawLine(-a3, 0, t5.globals.gridWidth + a3, 0, i3.stroke.color, i3.stroke.dashArray, i3.stroke.width);
        s3.attr({ class: "apexcharts-ycrosshairs" }), t5.globals.dom.elGraphical.add(s3);
      }
      var r3 = e3.drawLine(-a3, 0, t5.globals.gridWidth + a3, 0, i3.stroke.color, 0, 0);
      r3.attr({ class: "apexcharts-ycrosshairs-hidden" }), t5.globals.dom.elGraphical.add(r3);
    } }]), t4;
  }();
  var oa = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "checkResponsiveConfig", value: function(t5) {
      var e3 = this, i3 = this.w, a3 = i3.config;
      if (0 !== a3.responsive.length) {
        var s3 = a3.responsive.slice();
        s3.sort(function(t6, e4) {
          return t6.breakpoint > e4.breakpoint ? 1 : e4.breakpoint > t6.breakpoint ? -1 : 0;
        }).reverse();
        var r3 = new Wi2({}), n3 = function() {
          var t6 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a4 = s3[0].breakpoint, n4 = window.innerWidth > 0 ? window.innerWidth : screen.width;
          if (n4 > a4) {
            var o4 = v2.clone(i3.globals.initialConfig);
            o4.series = v2.clone(i3.config.series);
            var l3 = Pi2.extendArrayProps(r3, o4, i3);
            t6 = v2.extend(l3, t6), t6 = v2.extend(i3.config, t6), e3.overrideResponsiveOptions(t6);
          } else for (var h3 = 0; h3 < s3.length; h3++) n4 < s3[h3].breakpoint && (t6 = Pi2.extendArrayProps(r3, s3[h3].options, i3), t6 = v2.extend(i3.config, t6), e3.overrideResponsiveOptions(t6));
        };
        if (t5) {
          var o3 = Pi2.extendArrayProps(r3, t5, i3);
          o3 = v2.extend(i3.config, o3), n3(o3 = v2.extend(o3, t5));
        } else n3({});
      }
    } }, { key: "overrideResponsiveOptions", value: function(t5) {
      var e3 = new Wi2(t5).init({ responsiveOverride: true });
      this.w.config = e3;
    } }]), t4;
  }();
  var la = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.colors = [], this.isColorFn = false, this.isHeatmapDistributed = this.checkHeatmapDistributed(), this.isBarDistributed = this.checkBarDistributed();
    }
    return s2(t4, [{ key: "checkHeatmapDistributed", value: function() {
      var t5 = this.w.config, e3 = t5.chart, i3 = t5.plotOptions;
      return "treemap" === e3.type && i3.treemap && i3.treemap.distributed || "heatmap" === e3.type && i3.heatmap && i3.heatmap.distributed;
    } }, { key: "checkBarDistributed", value: function() {
      var t5 = this.w.config, e3 = t5.chart, i3 = t5.plotOptions;
      return i3.bar && i3.bar.distributed && ("bar" === e3.type || "rangeBar" === e3.type);
    } }, { key: "init", value: function() {
      this.setDefaultColors();
    } }, { key: "setDefaultColors", value: function() {
      var t5 = this.w, e3 = new v2();
      t5.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(t5.config.theme.mode || "light"));
      var i3 = f2(t5.config.colors || t5.config.fill.colors || []);
      t5.globals.colors = this.getColors(i3), this.applySeriesColors(t5.globals.seriesColors, t5.globals.colors), t5.config.theme.monochrome.enabled && (t5.globals.colors = this.getMonochromeColors(t5.config.theme.monochrome, t5.globals.series, e3));
      var a3 = t5.globals.colors.slice();
      this.pushExtraColors(t5.globals.colors), this.applyColorTypes(["fill", "stroke"], a3), this.applyDataLabelsColors(a3), this.applyRadarPolygonsColors(), this.applyMarkersColors(a3);
    } }, { key: "getColors", value: function(t5) {
      var e3 = this, i3 = this.w;
      return t5 && 0 !== t5.length ? Array.isArray(t5) && t5.length > 0 && "function" == typeof t5[0] ? (this.isColorFn = true, i3.config.series.map(function(a3, s3) {
        var r3 = t5[s3] || t5[0];
        return "function" == typeof r3 ? r3({ value: i3.globals.axisCharts ? i3.globals.series[s3][0] || 0 : i3.globals.series[s3], seriesIndex: s3, dataPointIndex: s3, w: e3.w }) : r3;
      })) : t5 : this.predefined();
    } }, { key: "applySeriesColors", value: function(t5, e3) {
      t5.forEach(function(t6, i3) {
        t6 && (e3[i3] = t6);
      });
    } }, { key: "getMonochromeColors", value: function(t5, e3, i3) {
      var a3 = t5.color, s3 = t5.shadeIntensity, r3 = t5.shadeTo, n3 = this.isBarDistributed || this.isHeatmapDistributed ? e3[0].length * e3.length : e3.length, o3 = 1 / (n3 / s3), l3 = 0;
      return Array.from({ length: n3 }, function() {
        var t6 = "dark" === r3 ? i3.shadeColor(-1 * l3, a3) : i3.shadeColor(l3, a3);
        return l3 += o3, t6;
      });
    } }, { key: "applyColorTypes", value: function(t5, e3) {
      var i3 = this, a3 = this.w;
      t5.forEach(function(t6) {
        a3.globals[t6].colors = void 0 === a3.config[t6].colors ? i3.isColorFn ? a3.config.colors : e3 : a3.config[t6].colors.slice(), i3.pushExtraColors(a3.globals[t6].colors);
      });
    } }, { key: "applyDataLabelsColors", value: function(t5) {
      var e3 = this.w;
      e3.globals.dataLabels.style.colors = void 0 === e3.config.dataLabels.style.colors ? t5 : e3.config.dataLabels.style.colors.slice(), this.pushExtraColors(e3.globals.dataLabels.style.colors, 50);
    } }, { key: "applyRadarPolygonsColors", value: function() {
      var t5 = this.w;
      t5.globals.radarPolygons.fill.colors = void 0 === t5.config.plotOptions.radar.polygons.fill.colors ? ["dark" === t5.config.theme.mode ? "#343A3F" : "none"] : t5.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(t5.globals.radarPolygons.fill.colors, 20);
    } }, { key: "applyMarkersColors", value: function(t5) {
      var e3 = this.w;
      e3.globals.markers.colors = void 0 === e3.config.markers.colors ? t5 : e3.config.markers.colors.slice(), this.pushExtraColors(e3.globals.markers.colors);
    } }, { key: "pushExtraColors", value: function(t5, e3) {
      var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = this.w, s3 = e3 || a3.globals.series.length;
      if (null === i3 && (i3 = this.isBarDistributed || this.isHeatmapDistributed || "heatmap" === a3.config.chart.type && a3.config.plotOptions.heatmap && a3.config.plotOptions.heatmap.colorScale.inverse), i3 && a3.globals.series.length && (s3 = a3.globals.series[a3.globals.maxValsInArrayIndex].length * a3.globals.series.length), t5.length < s3) for (var r3 = s3 - t5.length, n3 = 0; n3 < r3; n3++) t5.push(t5[n3]);
    } }, { key: "updateThemeOptions", value: function(t5) {
      t5.chart = t5.chart || {}, t5.tooltip = t5.tooltip || {};
      var e3 = t5.theme.mode, i3 = "dark" === e3 ? "palette4" : "light" === e3 ? "palette1" : t5.theme.palette || "palette1", a3 = "dark" === e3 ? "#f6f7f8" : "light" === e3 ? "#373d3f" : t5.chart.foreColor || "#373d3f";
      return t5.tooltip.theme = e3 || "light", t5.chart.foreColor = a3, t5.theme.palette = i3, t5;
    } }, { key: "predefined", value: function() {
      var t5 = { palette1: ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"], palette2: ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"], palette3: ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"], palette4: ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"], palette5: ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"], palette6: ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"], palette7: ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"], palette8: ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"], palette9: ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"], palette10: ["#A300D6", "#7D02EB", "#5653FE", "#2983FF", "#00B1F2"], default: ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"] };
      return t5[this.w.config.theme.palette] || t5.default;
    } }]), t4;
  }();
  var ha = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "draw", value: function() {
      this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
    } }, { key: "drawTitleSubtitle", value: function(t5) {
      var e3 = this.w, i3 = "title" === t5 ? e3.config.title : e3.config.subtitle, a3 = e3.globals.svgWidth / 2, s3 = i3.offsetY, r3 = "middle";
      if ("left" === i3.align ? (a3 = 10, r3 = "start") : "right" === i3.align && (a3 = e3.globals.svgWidth - 10, r3 = "end"), a3 += i3.offsetX, s3 = s3 + parseInt(i3.style.fontSize, 10) + i3.margin / 2, void 0 !== i3.text) {
        var n3 = new Mi2(this.ctx).drawText({ x: a3, y: s3, text: i3.text, textAnchor: r3, fontSize: i3.style.fontSize, fontFamily: i3.style.fontFamily, fontWeight: i3.style.fontWeight, foreColor: i3.style.color, opacity: 1 });
        n3.node.setAttribute("class", "apexcharts-".concat(t5, "-text")), e3.globals.dom.Paper.add(n3);
      }
    } }]), t4;
  }();
  var ca = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.dCtx = e3;
    }
    return s2(t4, [{ key: "getTitleSubtitleCoords", value: function(t5) {
      var e3 = this.w, i3 = 0, a3 = 0, s3 = "title" === t5 ? e3.config.title.floating : e3.config.subtitle.floating, r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-".concat(t5, "-text"));
      if (null !== r3 && !s3) {
        var n3 = r3.getBoundingClientRect();
        i3 = n3.width, a3 = e3.globals.axisCharts ? n3.height + 5 : n3.height;
      }
      return { width: i3, height: a3 };
    } }, { key: "getLegendsRect", value: function() {
      var t5 = this.w, e3 = t5.globals.dom.elLegendWrap;
      t5.config.legend.height || "top" !== t5.config.legend.position && "bottom" !== t5.config.legend.position || (e3.style.maxHeight = t5.globals.svgHeight / 2 + "px");
      var i3 = Object.assign({}, v2.getBoundingClientRect(e3));
      return null !== e3 && !t5.config.legend.floating && t5.config.legend.show ? this.dCtx.lgRect = { x: i3.x, y: i3.y, height: i3.height, width: 0 === i3.height ? 0 : i3.width } : this.dCtx.lgRect = { x: 0, y: 0, height: 0, width: 0 }, "left" !== t5.config.legend.position && "right" !== t5.config.legend.position || 1.5 * this.dCtx.lgRect.width > t5.globals.svgWidth && (this.dCtx.lgRect.width = t5.globals.svgWidth / 1.5), this.dCtx.lgRect;
    } }, { key: "getDatalabelsRect", value: function() {
      var t5 = this, e3 = this.w, i3 = [];
      e3.config.series.forEach(function(s4, r4) {
        s4.data.forEach(function(s5, n4) {
          var o3;
          o3 = e3.globals.series[r4][n4], a3 = e3.config.dataLabels.formatter(o3, { ctx: t5.dCtx.ctx, seriesIndex: r4, dataPointIndex: n4, w: e3 }), i3.push(a3);
        });
      });
      var a3 = v2.getLargestStringFromArr(i3), s3 = new Mi2(this.dCtx.ctx), r3 = e3.config.dataLabels.style, n3 = s3.getTextRects(a3, parseInt(r3.fontSize), r3.fontFamily);
      return { width: 1.05 * n3.width, height: n3.height };
    } }, { key: "getLargestStringFromMultiArr", value: function(t5, e3) {
      var i3 = t5;
      if (this.w.globals.isMultiLineX) {
        var a3 = e3.map(function(t6, e4) {
          return Array.isArray(t6) ? t6.length : 1;
        }), s3 = Math.max.apply(Math, f2(a3));
        i3 = e3[a3.indexOf(s3)];
      }
      return i3;
    } }]), t4;
  }();
  var da = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.dCtx = e3;
    }
    return s2(t4, [{ key: "getxAxisLabelsCoords", value: function() {
      var t5, e3 = this.w, i3 = e3.globals.labels.slice();
      if (e3.config.xaxis.convertedCatToNumeric && 0 === i3.length && (i3 = e3.globals.categoryLabels), e3.globals.timescaleLabels.length > 0) {
        var a3 = this.getxAxisTimeScaleLabelsCoords();
        t5 = { width: a3.width, height: a3.height }, e3.globals.rotateXLabels = false;
      } else {
        this.dCtx.lgWidthForSideLegends = "left" !== e3.config.legend.position && "right" !== e3.config.legend.position || e3.config.legend.floating ? 0 : this.dCtx.lgRect.width;
        var s3 = e3.globals.xLabelFormatter, r3 = v2.getLargestStringFromArr(i3), n3 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r3, i3);
        e3.globals.isBarHorizontal && (n3 = r3 = e3.globals.yAxisScale[0].result.reduce(function(t6, e4) {
          return t6.length > e4.length ? t6 : e4;
        }, 0));
        var o3 = new Xi2(this.dCtx.ctx), l3 = r3;
        r3 = o3.xLabelFormat(s3, r3, l3, { i: void 0, dateFormatter: new zi2(this.dCtx.ctx).formatDate, w: e3 }), n3 = o3.xLabelFormat(s3, n3, l3, { i: void 0, dateFormatter: new zi2(this.dCtx.ctx).formatDate, w: e3 }), (e3.config.xaxis.convertedCatToNumeric && void 0 === r3 || "" === String(r3).trim()) && (n3 = r3 = "1");
        var h3 = new Mi2(this.dCtx.ctx), c3 = h3.getTextRects(r3, e3.config.xaxis.labels.style.fontSize), d3 = c3;
        if (r3 !== n3 && (d3 = h3.getTextRects(n3, e3.config.xaxis.labels.style.fontSize)), (t5 = { width: c3.width >= d3.width ? c3.width : d3.width, height: c3.height >= d3.height ? c3.height : d3.height }).width * i3.length > e3.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e3.config.xaxis.labels.rotate || e3.config.xaxis.labels.rotateAlways) {
          if (!e3.globals.isBarHorizontal) {
            e3.globals.rotateXLabels = true;
            var u3 = function(t6) {
              return h3.getTextRects(t6, e3.config.xaxis.labels.style.fontSize, e3.config.xaxis.labels.style.fontFamily, "rotate(".concat(e3.config.xaxis.labels.rotate, " 0 0)"), false);
            };
            c3 = u3(r3), r3 !== n3 && (d3 = u3(n3)), t5.height = (c3.height > d3.height ? c3.height : d3.height) / 1.5, t5.width = c3.width > d3.width ? c3.width : d3.width;
          }
        } else e3.globals.rotateXLabels = false;
      }
      return e3.config.xaxis.labels.show || (t5 = { width: 0, height: 0 }), { width: t5.width, height: t5.height };
    } }, { key: "getxAxisGroupLabelsCoords", value: function() {
      var t5, e3 = this.w;
      if (!e3.globals.hasXaxisGroups) return { width: 0, height: 0 };
      var i3, a3 = (null === (t5 = e3.config.xaxis.group.style) || void 0 === t5 ? void 0 : t5.fontSize) || e3.config.xaxis.labels.style.fontSize, s3 = e3.globals.groups.map(function(t6) {
        return t6.title;
      }), r3 = v2.getLargestStringFromArr(s3), n3 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r3, s3), o3 = new Mi2(this.dCtx.ctx), l3 = o3.getTextRects(r3, a3), h3 = l3;
      return r3 !== n3 && (h3 = o3.getTextRects(n3, a3)), i3 = { width: l3.width >= h3.width ? l3.width : h3.width, height: l3.height >= h3.height ? l3.height : h3.height }, e3.config.xaxis.labels.show || (i3 = { width: 0, height: 0 }), { width: i3.width, height: i3.height };
    } }, { key: "getxAxisTitleCoords", value: function() {
      var t5 = this.w, e3 = 0, i3 = 0;
      if (void 0 !== t5.config.xaxis.title.text) {
        var a3 = new Mi2(this.dCtx.ctx).getTextRects(t5.config.xaxis.title.text, t5.config.xaxis.title.style.fontSize);
        e3 = a3.width, i3 = a3.height;
      }
      return { width: e3, height: i3 };
    } }, { key: "getxAxisTimeScaleLabelsCoords", value: function() {
      var t5, e3 = this.w;
      this.dCtx.timescaleLabels = e3.globals.timescaleLabels.slice();
      var i3 = this.dCtx.timescaleLabels.map(function(t6) {
        return t6.value;
      }), a3 = i3.reduce(function(t6, e4) {
        return void 0 === t6 ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t6.length > e4.length ? t6 : e4;
      }, 0);
      return 1.05 * (t5 = new Mi2(this.dCtx.ctx).getTextRects(a3, e3.config.xaxis.labels.style.fontSize)).width * i3.length > e3.globals.gridWidth && 0 !== e3.config.xaxis.labels.rotate && (e3.globals.overlappingXLabels = true), t5;
    } }, { key: "additionalPaddingXLabels", value: function(t5) {
      var e3 = this, i3 = this.w, a3 = i3.globals, s3 = i3.config, r3 = s3.xaxis.type, n3 = t5.width;
      a3.skipLastTimelinelabel = false, a3.skipFirstTimelinelabel = false;
      var o3 = i3.config.yaxis[0].opposite && i3.globals.isBarHorizontal, l3 = function(t6, o4) {
        s3.yaxis.length > 1 && function(t7) {
          return -1 !== a3.collapsedSeriesIndices.indexOf(t7);
        }(o4) || function(t7) {
          if (e3.dCtx.timescaleLabels && e3.dCtx.timescaleLabels.length) {
            var o5 = e3.dCtx.timescaleLabels[0], l4 = e3.dCtx.timescaleLabels[e3.dCtx.timescaleLabels.length - 1].position + n3 / 1.75 - e3.dCtx.yAxisWidthRight, h3 = o5.position - n3 / 1.75 + e3.dCtx.yAxisWidthLeft, c3 = "right" === i3.config.legend.position && e3.dCtx.lgRect.width > 0 ? e3.dCtx.lgRect.width : 0;
            l4 > a3.svgWidth - a3.translateX - c3 && (a3.skipLastTimelinelabel = true), h3 < -(t7.show && !t7.floating || "bar" !== s3.chart.type && "candlestick" !== s3.chart.type && "rangeBar" !== s3.chart.type && "boxPlot" !== s3.chart.type ? 10 : n3 / 1.75) && (a3.skipFirstTimelinelabel = true);
          } else "datetime" === r3 ? e3.dCtx.gridPad.right < n3 && !a3.rotateXLabels && (a3.skipLastTimelinelabel = true) : "datetime" !== r3 && e3.dCtx.gridPad.right < n3 / 2 - e3.dCtx.yAxisWidthRight && !a3.rotateXLabels && !i3.config.xaxis.labels.trim && (e3.dCtx.xPadRight = n3 / 2 + 1);
        }(t6);
      };
      s3.yaxis.forEach(function(t6, i4) {
        o3 ? (e3.dCtx.gridPad.left < n3 && (e3.dCtx.xPadLeft = n3 / 2 + 1), e3.dCtx.xPadRight = n3 / 2 + 1) : l3(t6, i4);
      });
    } }]), t4;
  }();
  var ua = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.dCtx = e3;
    }
    return s2(t4, [{ key: "getyAxisLabelsCoords", value: function() {
      var t5 = this, e3 = this.w, i3 = [], a3 = 10, s3 = new Ri2(this.dCtx.ctx);
      return e3.config.yaxis.map(function(r3, n3) {
        var o3 = { seriesIndex: n3, dataPointIndex: -1, w: e3 }, l3 = e3.globals.yAxisScale[n3], h3 = 0;
        if (!s3.isYAxisHidden(n3) && r3.labels.show && void 0 !== r3.labels.minWidth && (h3 = r3.labels.minWidth), !s3.isYAxisHidden(n3) && r3.labels.show && l3.result.length) {
          var c3 = e3.globals.yLabelFormatters[n3], d3 = l3.niceMin === Number.MIN_VALUE ? 0 : l3.niceMin, u3 = l3.result.reduce(function(t6, e4) {
            var i4, a4;
            return (null === (i4 = String(c3(t6, o3))) || void 0 === i4 ? void 0 : i4.length) > (null === (a4 = String(c3(e4, o3))) || void 0 === a4 ? void 0 : a4.length) ? t6 : e4;
          }, d3), g3 = u3 = c3(u3, o3);
          if (void 0 !== u3 && 0 !== u3.length || (u3 = l3.niceMax), e3.globals.isBarHorizontal) {
            a3 = 0;
            var p3 = e3.globals.labels.slice();
            u3 = v2.getLargestStringFromArr(p3), u3 = c3(u3, { seriesIndex: n3, dataPointIndex: -1, w: e3 }), g3 = t5.dCtx.dimHelpers.getLargestStringFromMultiArr(u3, p3);
          }
          var f3 = new Mi2(t5.dCtx.ctx), x3 = "rotate(".concat(r3.labels.rotate, " 0 0)"), b3 = f3.getTextRects(u3, r3.labels.style.fontSize, r3.labels.style.fontFamily, x3, false), m3 = b3;
          u3 !== g3 && (m3 = f3.getTextRects(g3, r3.labels.style.fontSize, r3.labels.style.fontFamily, x3, false)), i3.push({ width: (h3 > m3.width || h3 > b3.width ? h3 : m3.width > b3.width ? m3.width : b3.width) + a3, height: m3.height > b3.height ? m3.height : b3.height });
        } else i3.push({ width: 0, height: 0 });
      }), i3;
    } }, { key: "getyAxisTitleCoords", value: function() {
      var t5 = this, e3 = this.w, i3 = [];
      return e3.config.yaxis.map(function(e4, a3) {
        if (e4.show && void 0 !== e4.title.text) {
          var s3 = new Mi2(t5.dCtx.ctx), r3 = "rotate(".concat(e4.title.rotate, " 0 0)"), n3 = s3.getTextRects(e4.title.text, e4.title.style.fontSize, e4.title.style.fontFamily, r3, false);
          i3.push({ width: n3.width, height: n3.height });
        } else i3.push({ width: 0, height: 0 });
      }), i3;
    } }, { key: "getTotalYAxisWidth", value: function() {
      var t5 = this.w, e3 = 0, i3 = 0, a3 = 0, s3 = t5.globals.yAxisScale.length > 1 ? 10 : 0, r3 = new Ri2(this.dCtx.ctx), n3 = function(n4, o3) {
        var l3 = t5.config.yaxis[o3].floating, h3 = 0;
        n4.width > 0 && !l3 ? (h3 = n4.width + s3, function(e4) {
          return t5.globals.ignoreYAxisIndexes.indexOf(e4) > -1;
        }(o3) && (h3 = h3 - n4.width - s3)) : h3 = l3 || r3.isYAxisHidden(o3) ? 0 : 5, t5.config.yaxis[o3].opposite ? a3 += h3 : i3 += h3, e3 += h3;
      };
      return t5.globals.yLabelsCoords.map(function(t6, e4) {
        n3(t6, e4);
      }), t5.globals.yTitleCoords.map(function(t6, e4) {
        n3(t6, e4);
      }), t5.globals.isBarHorizontal && !t5.config.yaxis[0].floating && (e3 = t5.globals.yLabelsCoords[0].width + t5.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i3, this.dCtx.yAxisWidthRight = a3, e3;
    } }]), t4;
  }();
  var ga = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.dCtx = e3;
    }
    return s2(t4, [{ key: "gridPadForColumnsInNumericAxis", value: function(t5) {
      var e3 = this.w, i3 = e3.config, a3 = e3.globals;
      if (a3.noData || a3.collapsedSeries.length + a3.ancillaryCollapsedSeries.length === i3.series.length) return 0;
      var s3 = function(t6) {
        return ["bar", "rangeBar", "candlestick", "boxPlot"].includes(t6);
      }, r3 = i3.chart.type, n3 = 0, o3 = s3(r3) ? i3.series.length : 1;
      a3.comboBarCount > 0 && (o3 = a3.comboBarCount), a3.collapsedSeries.forEach(function(t6) {
        s3(t6.type) && (o3 -= 1);
      }), i3.chart.stacked && (o3 = 1);
      var l3 = s3(r3) || a3.comboBarCount > 0, h3 = Math.abs(a3.initialMaxX - a3.initialMinX);
      if (l3 && a3.isXNumeric && !a3.isBarHorizontal && o3 > 0 && 0 !== h3) {
        h3 <= 3 && (h3 = a3.dataPoints);
        var c3 = h3 / t5, d3 = a3.minXDiff && a3.minXDiff / c3 > 0 ? a3.minXDiff / c3 : 0;
        d3 > t5 / 2 && (d3 /= 2), (n3 = d3 * parseInt(i3.plotOptions.bar.columnWidth, 10) / 100) < 1 && (n3 = 1), a3.barPadForNumericAxis = n3;
      }
      return n3;
    } }, { key: "gridPadFortitleSubtitle", value: function() {
      var t5 = this, e3 = this.w, i3 = e3.globals, a3 = this.dCtx.isSparkline || !i3.axisCharts ? 0 : 10;
      ["title", "subtitle"].forEach(function(s4) {
        void 0 !== e3.config[s4].text ? a3 += e3.config[s4].margin : a3 += t5.dCtx.isSparkline || !i3.axisCharts ? 0 : 5;
      }), !e3.config.legend.show || "bottom" !== e3.config.legend.position || e3.config.legend.floating || i3.axisCharts || (a3 += 10);
      var s3 = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"), r3 = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
      i3.gridHeight -= s3.height + r3.height + a3, i3.translateY += s3.height + r3.height + a3;
    } }, { key: "setGridXPosForDualYAxis", value: function(t5, e3) {
      var i3 = this.w, a3 = new Ri2(this.dCtx.ctx);
      i3.config.yaxis.forEach(function(s3, r3) {
        -1 !== i3.globals.ignoreYAxisIndexes.indexOf(r3) || s3.floating || a3.isYAxisHidden(r3) || (s3.opposite && (i3.globals.translateX -= e3[r3].width + t5[r3].width + parseInt(s3.labels.style.fontSize, 10) / 1.2 + 12), i3.globals.translateX < 2 && (i3.globals.translateX = 2));
      });
    } }]), t4;
  }();
  var pa = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new ca(this), this.dimYAxis = new ua(this), this.dimXAxis = new da(this), this.dimGrid = new ga(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;
    }
    return s2(t4, [{ key: "plotCoords", value: function() {
      var t5 = this, e3 = this.w, i3 = e3.globals;
      this.lgRect = this.dimHelpers.getLegendsRect(), this.datalabelsCoords = { width: 0, height: 0 };
      var a3 = Array.isArray(e3.config.stroke.width) ? Math.max.apply(Math, f2(e3.config.stroke.width)) : e3.config.stroke.width;
      this.isSparkline && ((e3.config.markers.discrete.length > 0 || e3.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function(e4) {
        var i4 = p2(e4, 2), a4 = i4[0], s4 = i4[1];
        t5.gridPad[a4] = Math.max(s4, t5.w.globals.markers.largestSize / 1.5);
      }), this.gridPad.top = Math.max(a3 / 2, this.gridPad.top), this.gridPad.bottom = Math.max(a3 / 2, this.gridPad.bottom)), i3.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i3.gridHeight = i3.gridHeight - this.gridPad.top - this.gridPad.bottom, i3.gridWidth = i3.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
      var s3 = this.dimGrid.gridPadForColumnsInNumericAxis(i3.gridWidth);
      i3.gridWidth = i3.gridWidth - 2 * s3, i3.translateX = i3.translateX + this.gridPad.left + this.xPadLeft + (s3 > 0 ? s3 : 0), i3.translateY = i3.translateY + this.gridPad.top;
    } }, { key: "setDimensionsForAxisCharts", value: function() {
      var t5 = this, e3 = this.w, i3 = e3.globals, a3 = this.dimYAxis.getyAxisLabelsCoords(), s3 = this.dimYAxis.getyAxisTitleCoords();
      i3.isSlopeChart && (this.datalabelsCoords = this.dimHelpers.getDatalabelsRect()), e3.globals.yLabelsCoords = [], e3.globals.yTitleCoords = [], e3.config.yaxis.map(function(t6, i4) {
        e3.globals.yLabelsCoords.push({ width: a3[i4].width, index: i4 }), e3.globals.yTitleCoords.push({ width: s3[i4].width, index: i4 });
      }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
      var r3 = this.dimXAxis.getxAxisLabelsCoords(), n3 = this.dimXAxis.getxAxisGroupLabelsCoords(), o3 = this.dimXAxis.getxAxisTitleCoords();
      this.conditionalChecksForAxisCoords(r3, o3, n3), i3.translateXAxisY = e3.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i3.translateXAxisX = e3.globals.rotateXLabels && e3.globals.isXNumeric && e3.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e3.globals.isBarHorizontal && (i3.rotateXLabels = false, i3.translateXAxisY = parseInt(e3.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i3.translateXAxisY = i3.translateXAxisY + e3.config.xaxis.labels.offsetY, i3.translateXAxisX = i3.translateXAxisX + e3.config.xaxis.labels.offsetX;
      var l3 = this.yAxisWidth, h3 = this.xAxisHeight;
      i3.xAxisLabelsHeight = this.xAxisHeight - o3.height, i3.xAxisGroupLabelsHeight = i3.xAxisLabelsHeight - r3.height, i3.xAxisLabelsWidth = this.xAxisWidth, i3.xAxisHeight = this.xAxisHeight;
      var c3 = 10;
      ("radar" === e3.config.chart.type || this.isSparkline) && (l3 = 0, h3 = 0), this.isSparkline && (this.lgRect = { height: 0, width: 0 }), (this.isSparkline || "treemap" === e3.config.chart.type) && (l3 = 0, h3 = 0, c3 = 0), this.isSparkline || "treemap" === e3.config.chart.type || this.dimXAxis.additionalPaddingXLabels(r3);
      var d3 = function() {
        i3.translateX = l3 + t5.datalabelsCoords.width, i3.gridHeight = i3.svgHeight - t5.lgRect.height - h3 - (t5.isSparkline || "treemap" === e3.config.chart.type ? 0 : e3.globals.rotateXLabels ? 10 : 15), i3.gridWidth = i3.svgWidth - l3 - 2 * t5.datalabelsCoords.width;
      };
      switch ("top" === e3.config.xaxis.position && (c3 = i3.xAxisHeight - e3.config.xaxis.axisTicks.height - 5), e3.config.legend.position) {
        case "bottom":
          i3.translateY = c3, d3();
          break;
        case "top":
          i3.translateY = this.lgRect.height + c3, d3();
          break;
        case "left":
          i3.translateY = c3, i3.translateX = this.lgRect.width + l3 + this.datalabelsCoords.width, i3.gridHeight = i3.svgHeight - h3 - 12, i3.gridWidth = i3.svgWidth - this.lgRect.width - l3 - 2 * this.datalabelsCoords.width;
          break;
        case "right":
          i3.translateY = c3, i3.translateX = l3 + this.datalabelsCoords.width, i3.gridHeight = i3.svgHeight - h3 - 12, i3.gridWidth = i3.svgWidth - this.lgRect.width - l3 - 2 * this.datalabelsCoords.width - 5;
          break;
        default:
          throw new Error("Legend position not supported");
      }
      this.dimGrid.setGridXPosForDualYAxis(s3, a3), new ia(this.ctx).setYAxisXPosition(a3, s3);
    } }, { key: "setDimensionsForNonAxisCharts", value: function() {
      var t5 = this.w, e3 = t5.globals, i3 = t5.config, a3 = 0;
      t5.config.legend.show && !t5.config.legend.floating && (a3 = 20);
      var s3 = "pie" === i3.chart.type || "polarArea" === i3.chart.type || "donut" === i3.chart.type ? "pie" : "radialBar", r3 = i3.plotOptions[s3].offsetY, n3 = i3.plotOptions[s3].offsetX;
      if (!i3.legend.show || i3.legend.floating) {
        e3.gridHeight = e3.svgHeight;
        var o3 = e3.dom.elWrap.getBoundingClientRect().width;
        return e3.gridWidth = Math.min(o3, e3.gridHeight), e3.translateY = r3, void (e3.translateX = n3 + (e3.svgWidth - e3.gridWidth) / 2);
      }
      switch (i3.legend.position) {
        case "bottom":
          e3.gridHeight = e3.svgHeight - this.lgRect.height, e3.gridWidth = e3.svgWidth, e3.translateY = r3 - 10, e3.translateX = n3 + (e3.svgWidth - e3.gridWidth) / 2;
          break;
        case "top":
          e3.gridHeight = e3.svgHeight - this.lgRect.height, e3.gridWidth = e3.svgWidth, e3.translateY = this.lgRect.height + r3 + 10, e3.translateX = n3 + (e3.svgWidth - e3.gridWidth) / 2;
          break;
        case "left":
          e3.gridWidth = e3.svgWidth - this.lgRect.width - a3, e3.gridHeight = "auto" !== i3.chart.height ? e3.svgHeight : e3.gridWidth, e3.translateY = r3, e3.translateX = n3 + this.lgRect.width + a3;
          break;
        case "right":
          e3.gridWidth = e3.svgWidth - this.lgRect.width - a3 - 5, e3.gridHeight = "auto" !== i3.chart.height ? e3.svgHeight : e3.gridWidth, e3.translateY = r3, e3.translateX = n3 + 10;
          break;
        default:
          throw new Error("Legend position not supported");
      }
    } }, { key: "conditionalChecksForAxisCoords", value: function(t5, e3, i3) {
      var a3 = this.w, s3 = a3.globals.hasXaxisGroups ? 2 : 1, r3 = i3.height + t5.height + e3.height, n3 = a3.globals.isMultiLineX ? 1.2 : a3.globals.LINE_HEIGHT_RATIO, o3 = a3.globals.rotateXLabels ? 22 : 10, l3 = a3.globals.rotateXLabels && "bottom" === a3.config.legend.position ? 10 : 0;
      this.xAxisHeight = r3 * n3 + s3 * o3 + l3, this.xAxisWidth = t5.width, this.xAxisHeight - e3.height > a3.config.xaxis.labels.maxHeight && (this.xAxisHeight = a3.config.xaxis.labels.maxHeight), a3.config.xaxis.labels.minHeight && this.xAxisHeight < a3.config.xaxis.labels.minHeight && (this.xAxisHeight = a3.config.xaxis.labels.minHeight), a3.config.xaxis.floating && (this.xAxisHeight = 0);
      var h3 = 0, c3 = 0;
      a3.config.yaxis.forEach(function(t6) {
        h3 += t6.labels.minWidth, c3 += t6.labels.maxWidth;
      }), this.yAxisWidth < h3 && (this.yAxisWidth = h3), this.yAxisWidth > c3 && (this.yAxisWidth = c3);
    } }]), t4;
  }();
  var fa = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.lgCtx = e3;
    }
    return s2(t4, [{ key: "getLegendStyles", value: function() {
      var t5, e3, i3, a3 = document.createElement("style");
      a3.setAttribute("type", "text/css");
      var s3 = (null === (t5 = this.lgCtx.ctx) || void 0 === t5 || null === (e3 = t5.opts) || void 0 === e3 || null === (i3 = e3.chart) || void 0 === i3 ? void 0 : i3.nonce) || this.w.config.chart.nonce;
      s3 && a3.setAttribute("nonce", s3);
      var r3 = document.createTextNode("\n      .apexcharts-flip-y {\n        transform: scaleY(-1) translateY(-100%);\n        transform-origin: top;\n        transform-box: fill-box;\n      }\n      .apexcharts-flip-x {\n        transform: scaleX(-1);\n        transform-origin: center;\n        transform-box: fill-box;\n      }\n      .apexcharts-legend {\n        display: flex;\n        overflow: auto;\n        padding: 0 10px;\n      }\n      .apexcharts-legend.apexcharts-legend-group-horizontal {\n        flex-direction: column;\n      }\n      .apexcharts-legend-group {\n        display: flex;\n      }\n      .apexcharts-legend-group-vertical {\n        flex-direction: column-reverse;\n      }\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\n        flex-wrap: wrap\n      }\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\n        flex-direction: column;\n        bottom: 0;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\n        justify-content: flex-start;\n        align-items: flex-start;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\n        justify-content: center;\n        align-items: center;\n      }\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\n        justify-content: flex-end;\n        align-items: flex-end;\n      }\n      .apexcharts-legend-series {\n        cursor: pointer;\n        line-height: normal;\n        display: flex;\n        align-items: center;\n      }\n      .apexcharts-legend-text {\n        position: relative;\n        font-size: 14px;\n      }\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\n        pointer-events: none;\n      }\n      .apexcharts-legend-marker {\n        position: relative;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        margin-right: 1px;\n      }\n\n      .apexcharts-legend-series.apexcharts-no-click {\n        cursor: auto;\n      }\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\n        display: none !important;\n      }\n      .apexcharts-inactive-legend {\n        opacity: 0.45;\n      }\n\n    ");
      return a3.appendChild(r3), a3;
    } }, { key: "getLegendDimensions", value: function() {
      var t5 = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(), e3 = t5.width;
      return { clwh: t5.height, clww: e3 };
    } }, { key: "appendToForeignObject", value: function() {
      this.w.globals.dom.elLegendForeign.appendChild(this.getLegendStyles());
    } }, { key: "toggleDataSeries", value: function(t5, e3) {
      var i3 = this, a3 = this.w;
      if (a3.globals.axisCharts || "radialBar" === a3.config.chart.type) {
        a3.globals.resized = true;
        var s3 = null, r3 = null;
        if (a3.globals.risingSeries = [], a3.globals.axisCharts ? (s3 = a3.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t5, "']")), r3 = parseInt(s3.getAttribute("data:realIndex"), 10)) : (s3 = a3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t5 + 1, "']")), r3 = parseInt(s3.getAttribute("rel"), 10) - 1), e3) [{ cs: a3.globals.collapsedSeries, csi: a3.globals.collapsedSeriesIndices }, { cs: a3.globals.ancillaryCollapsedSeries, csi: a3.globals.ancillaryCollapsedSeriesIndices }].forEach(function(t6) {
          i3.riseCollapsedSeries(t6.cs, t6.csi, r3);
        });
        else this.hideSeries({ seriesEl: s3, realIndex: r3 });
      } else {
        var n3 = a3.globals.dom.Paper.findOne(" .apexcharts-series[rel='".concat(t5 + 1, "'] path")), o3 = a3.config.chart.type;
        if ("pie" === o3 || "polarArea" === o3 || "donut" === o3) {
          var l3 = a3.config.plotOptions.pie.donut.labels;
          new Mi2(this.lgCtx.ctx).pathMouseDown(n3, null), this.lgCtx.ctx.pie.printDataLabelsInner(n3.node, l3);
        }
        n3.fire("click");
      }
    } }, { key: "getSeriesAfterCollapsing", value: function(t5) {
      var e3 = t5.realIndex, i3 = this.w, a3 = i3.globals, s3 = v2.clone(i3.config.series);
      if (a3.axisCharts) {
        var r3 = i3.config.yaxis[a3.seriesYAxisReverseMap[e3]], n3 = { index: e3, data: s3[e3].data.slice(), type: s3[e3].type || i3.config.chart.type };
        if (r3 && r3.show && r3.showAlways) a3.ancillaryCollapsedSeriesIndices.indexOf(e3) < 0 && (a3.ancillaryCollapsedSeries.push(n3), a3.ancillaryCollapsedSeriesIndices.push(e3));
        else if (a3.collapsedSeriesIndices.indexOf(e3) < 0) {
          a3.collapsedSeries.push(n3), a3.collapsedSeriesIndices.push(e3);
          var o3 = a3.risingSeries.indexOf(e3);
          a3.risingSeries.splice(o3, 1);
        }
      } else a3.collapsedSeries.push({ index: e3, data: s3[e3] }), a3.collapsedSeriesIndices.push(e3);
      return a3.allSeriesCollapsed = a3.collapsedSeries.length + a3.ancillaryCollapsedSeries.length === i3.config.series.length, this._getSeriesBasedOnCollapsedState(s3);
    } }, { key: "hideSeries", value: function(t5) {
      for (var e3 = t5.seriesEl, i3 = t5.realIndex, a3 = this.w, s3 = this.getSeriesAfterCollapsing({ realIndex: i3 }), r3 = e3.childNodes, n3 = 0; n3 < r3.length; n3++) r3[n3].classList.contains("apexcharts-series-markers-wrap") && (r3[n3].classList.contains("apexcharts-hide") ? r3[n3].classList.remove("apexcharts-hide") : r3[n3].classList.add("apexcharts-hide"));
      this.lgCtx.ctx.updateHelpers._updateSeries(s3, a3.config.chart.animations.dynamicAnimation.enabled);
    } }, { key: "riseCollapsedSeries", value: function(t5, e3, i3) {
      var a3 = this.w, s3 = v2.clone(a3.config.series);
      if (t5.length > 0) {
        for (var r3 = 0; r3 < t5.length; r3++) t5[r3].index === i3 && (a3.globals.axisCharts ? s3[i3].data = t5[r3].data.slice() : s3[i3] = t5[r3].data, "number" != typeof s3[i3] && (s3[i3].hidden = false), t5.splice(r3, 1), e3.splice(r3, 1), a3.globals.risingSeries.push(i3));
        s3 = this._getSeriesBasedOnCollapsedState(s3), this.lgCtx.ctx.updateHelpers._updateSeries(s3, a3.config.chart.animations.dynamicAnimation.enabled);
      }
    } }, { key: "_getSeriesBasedOnCollapsedState", value: function(t5) {
      var e3 = this.w, i3 = 0;
      return e3.globals.axisCharts ? t5.forEach(function(a3, s3) {
        e3.globals.collapsedSeriesIndices.indexOf(s3) < 0 && e3.globals.ancillaryCollapsedSeriesIndices.indexOf(s3) < 0 || (t5[s3].data = [], i3++);
      }) : t5.forEach(function(a3, s3) {
        !e3.globals.collapsedSeriesIndices.indexOf(s3) < 0 && (t5[s3] = 0, i3++);
      }), e3.globals.allSeriesCollapsed = i3 === t5.length, t5;
    } }]), t4;
  }();
  var xa = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new fa(this);
    }
    return s2(t4, [{ key: "init", value: function() {
      var t5 = this.w, e3 = t5.globals, i3 = t5.config, a3 = i3.legend.showForSingleSeries && 1 === e3.series.length || this.isBarsDistributed || e3.series.length > 1;
      if (this.legendHelpers.appendToForeignObject(), (a3 || !e3.axisCharts) && i3.legend.show) {
        for (; e3.dom.elLegendWrap.firstChild; ) e3.dom.elLegendWrap.removeChild(e3.dom.elLegendWrap.firstChild);
        this.drawLegends(), "bottom" === i3.legend.position || "top" === i3.legend.position ? this.legendAlignHorizontal() : "right" !== i3.legend.position && "left" !== i3.legend.position || this.legendAlignVertical();
      }
    } }, { key: "createLegendMarker", value: function(t5) {
      var e3 = t5.i, i3 = t5.fillcolor, a3 = this.w, s3 = document.createElement("span");
      s3.classList.add("apexcharts-legend-marker");
      var r3 = a3.config.legend.markers.shape || a3.config.markers.shape, n3 = r3;
      Array.isArray(r3) && (n3 = r3[e3]);
      var o3 = Array.isArray(a3.config.legend.markers.size) ? parseFloat(a3.config.legend.markers.size[e3]) : parseFloat(a3.config.legend.markers.size), l3 = Array.isArray(a3.config.legend.markers.offsetX) ? parseFloat(a3.config.legend.markers.offsetX[e3]) : parseFloat(a3.config.legend.markers.offsetX), h3 = Array.isArray(a3.config.legend.markers.offsetY) ? parseFloat(a3.config.legend.markers.offsetY[e3]) : parseFloat(a3.config.legend.markers.offsetY), c3 = Array.isArray(a3.config.legend.markers.strokeWidth) ? parseFloat(a3.config.legend.markers.strokeWidth[e3]) : parseFloat(a3.config.legend.markers.strokeWidth), d3 = s3.style;
      if (d3.height = 2 * (o3 + c3) + "px", d3.width = 2 * (o3 + c3) + "px", d3.left = l3 + "px", d3.top = h3 + "px", a3.config.legend.markers.customHTML) d3.background = "transparent", d3.color = i3[e3], Array.isArray(a3.config.legend.markers.customHTML) ? a3.config.legend.markers.customHTML[e3] && (s3.innerHTML = a3.config.legend.markers.customHTML[e3]()) : s3.innerHTML = a3.config.legend.markers.customHTML();
      else {
        var g3 = new Vi2(this.ctx).getMarkerConfig({ cssClass: "apexcharts-legend-marker apexcharts-marker apexcharts-marker-".concat(n3), seriesIndex: e3, strokeWidth: c3, size: o3 }), p3 = window.SVG().addTo(s3).size("100%", "100%"), f3 = new Mi2(this.ctx).drawMarker(0, 0, u2(u2({}, g3), {}, { pointFillColor: Array.isArray(i3) ? i3[e3] : g3.pointFillColor, shape: n3 }));
        a3.globals.dom.Paper.find(".apexcharts-legend-marker.apexcharts-marker").forEach(function(t6) {
          t6.node.classList.contains("apexcharts-marker-triangle") ? t6.node.style.transform = "translate(50%, 45%)" : t6.node.style.transform = "translate(50%, 50%)";
        }), p3.add(f3);
      }
      return s3;
    } }, { key: "drawLegends", value: function() {
      var t5 = this, e3 = this, i3 = this.w, a3 = i3.config.legend.fontFamily, s3 = i3.globals.seriesNames, r3 = i3.config.legend.markers.fillColors ? i3.config.legend.markers.fillColors.slice() : i3.globals.colors.slice();
      if ("heatmap" === i3.config.chart.type) {
        var n3 = i3.config.plotOptions.heatmap.colorScale.ranges;
        s3 = n3.map(function(t6) {
          return t6.name ? t6.name : t6.from + " - " + t6.to;
        }), r3 = n3.map(function(t6) {
          return t6.color;
        });
      } else this.isBarsDistributed && (s3 = i3.globals.labels.slice());
      i3.config.legend.customLegendItems.length && (s3 = i3.config.legend.customLegendItems);
      var o3 = i3.globals.legendFormatter, l3 = i3.config.legend.inverseOrder, h3 = [];
      i3.globals.seriesGroups.length > 1 && i3.config.legend.clusterGroupedSeries && i3.globals.seriesGroups.forEach(function(t6, e4) {
        h3[e4] = document.createElement("div"), h3[e4].classList.add("apexcharts-legend-group", "apexcharts-legend-group-".concat(e4)), "horizontal" === i3.config.legend.clusterGroupedSeriesOrientation ? i3.globals.dom.elLegendWrap.classList.add("apexcharts-legend-group-horizontal") : h3[e4].classList.add("apexcharts-legend-group-vertical");
      });
      for (var c3 = function(e4) {
        var n4, l4 = o3(s3[e4], { seriesIndex: e4, w: i3 }), c4 = false, d4 = false;
        if (i3.globals.collapsedSeries.length > 0) for (var u3 = 0; u3 < i3.globals.collapsedSeries.length; u3++) i3.globals.collapsedSeries[u3].index === e4 && (c4 = true);
        if (i3.globals.ancillaryCollapsedSeriesIndices.length > 0) for (var g3 = 0; g3 < i3.globals.ancillaryCollapsedSeriesIndices.length; g3++) i3.globals.ancillaryCollapsedSeriesIndices[g3] === e4 && (d4 = true);
        var p3 = t5.createLegendMarker({ i: e4, fillcolor: r3 });
        Mi2.setAttrs(p3, { rel: e4 + 1, "data:collapsed": c4 || d4 }), (c4 || d4) && p3.classList.add("apexcharts-inactive-legend");
        var f3 = document.createElement("div"), x3 = document.createElement("span");
        x3.classList.add("apexcharts-legend-text"), x3.innerHTML = Array.isArray(l4) ? l4.join(" ") : l4;
        var b3 = i3.config.legend.labels.useSeriesColors ? i3.globals.colors[e4] : Array.isArray(i3.config.legend.labels.colors) ? null === (n4 = i3.config.legend.labels.colors) || void 0 === n4 ? void 0 : n4[e4] : i3.config.legend.labels.colors;
        b3 || (b3 = i3.config.chart.foreColor), x3.style.color = b3, x3.style.fontSize = parseFloat(i3.config.legend.fontSize) + "px", x3.style.fontWeight = i3.config.legend.fontWeight, x3.style.fontFamily = a3 || i3.config.chart.fontFamily, Mi2.setAttrs(x3, { rel: e4 + 1, i: e4, "data:default-text": encodeURIComponent(l4), "data:collapsed": c4 || d4 }), f3.appendChild(p3), f3.appendChild(x3);
        var m3 = new Pi2(t5.ctx);
        i3.config.legend.showForZeroSeries || 0 === m3.getSeriesTotalByIndex(e4) && m3.seriesHaveSameValues(e4) && !m3.isSeriesNull(e4) && -1 === i3.globals.collapsedSeriesIndices.indexOf(e4) && -1 === i3.globals.ancillaryCollapsedSeriesIndices.indexOf(e4) && f3.classList.add("apexcharts-hidden-zero-series");
        i3.config.legend.showForNullSeries || m3.isSeriesNull(e4) && -1 === i3.globals.collapsedSeriesIndices.indexOf(e4) && -1 === i3.globals.ancillaryCollapsedSeriesIndices.indexOf(e4) && f3.classList.add("apexcharts-hidden-null-series"), h3.length ? i3.globals.seriesGroups.forEach(function(t6, a4) {
          var s4;
          t6.includes(null === (s4 = i3.config.series[e4]) || void 0 === s4 ? void 0 : s4.name) && (i3.globals.dom.elLegendWrap.appendChild(h3[a4]), h3[a4].appendChild(f3));
        }) : i3.globals.dom.elLegendWrap.appendChild(f3), i3.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(i3.config.legend.horizontalAlign)), i3.globals.dom.elLegendWrap.classList.add("apx-legend-position-" + i3.config.legend.position), f3.classList.add("apexcharts-legend-series"), f3.style.margin = "".concat(i3.config.legend.itemMargin.vertical, "px ").concat(i3.config.legend.itemMargin.horizontal, "px"), i3.globals.dom.elLegendWrap.style.width = i3.config.legend.width ? i3.config.legend.width + "px" : "", i3.globals.dom.elLegendWrap.style.height = i3.config.legend.height ? i3.config.legend.height + "px" : "", Mi2.setAttrs(f3, { rel: e4 + 1, seriesName: v2.escapeString(s3[e4]), "data:collapsed": c4 || d4 }), (c4 || d4) && f3.classList.add("apexcharts-inactive-legend"), i3.config.legend.onItemClick.toggleDataSeries || f3.classList.add("apexcharts-no-click");
      }, d3 = l3 ? s3.length - 1 : 0; l3 ? d3 >= 0 : d3 <= s3.length - 1; l3 ? d3-- : d3++) c3(d3);
      i3.globals.dom.elWrap.addEventListener("click", e3.onLegendClick, true), i3.config.legend.onItemHover.highlightDataSeries && 0 === i3.config.legend.customLegendItems.length && (i3.globals.dom.elWrap.addEventListener("mousemove", e3.onLegendHovered, true), i3.globals.dom.elWrap.addEventListener("mouseout", e3.onLegendHovered, true));
    } }, { key: "setLegendWrapXY", value: function(t5, e3) {
      var i3 = this.w, a3 = i3.globals.dom.elLegendWrap, s3 = a3.clientHeight, r3 = 0, n3 = 0;
      if ("bottom" === i3.config.legend.position) n3 = i3.globals.svgHeight - Math.min(s3, i3.globals.svgHeight / 2) - 5;
      else if ("top" === i3.config.legend.position) {
        var o3 = new pa(this.ctx), l3 = o3.dimHelpers.getTitleSubtitleCoords("title").height, h3 = o3.dimHelpers.getTitleSubtitleCoords("subtitle").height;
        n3 = (l3 > 0 ? l3 - 10 : 0) + (h3 > 0 ? h3 - 10 : 0);
      }
      a3.style.position = "absolute", r3 = r3 + t5 + i3.config.legend.offsetX, n3 = n3 + e3 + i3.config.legend.offsetY, a3.style.left = r3 + "px", a3.style.top = n3 + "px", "right" === i3.config.legend.position && (a3.style.left = "auto", a3.style.right = 25 + i3.config.legend.offsetX + "px");
      ["width", "height"].forEach(function(t6) {
        a3.style[t6] && (a3.style[t6] = parseInt(i3.config.legend[t6], 10) + "px");
      });
    } }, { key: "legendAlignHorizontal", value: function() {
      var t5 = this.w;
      t5.globals.dom.elLegendWrap.style.right = 0;
      var e3 = new pa(this.ctx), i3 = e3.dimHelpers.getTitleSubtitleCoords("title"), a3 = e3.dimHelpers.getTitleSubtitleCoords("subtitle"), s3 = 0;
      "top" === t5.config.legend.position && (s3 = i3.height + a3.height + t5.config.title.margin + t5.config.subtitle.margin - 10), this.setLegendWrapXY(20, s3);
    } }, { key: "legendAlignVertical", value: function() {
      var t5 = this.w, e3 = this.legendHelpers.getLegendDimensions(), i3 = 0;
      "left" === t5.config.legend.position && (i3 = 20), "right" === t5.config.legend.position && (i3 = t5.globals.svgWidth - e3.clww - 10), this.setLegendWrapXY(i3, 20);
    } }, { key: "onLegendHovered", value: function(t5) {
      var e3 = this.w, i3 = t5.target.classList.contains("apexcharts-legend-series") || t5.target.classList.contains("apexcharts-legend-text") || t5.target.classList.contains("apexcharts-legend-marker");
      if ("heatmap" === e3.config.chart.type || this.isBarsDistributed) {
        if (i3) {
          var a3 = parseInt(t5.target.getAttribute("rel"), 10) - 1;
          this.ctx.events.fireEvent("legendHover", [this.ctx, a3, this.w]), new Zi2(this.ctx).highlightRangeInSeries(t5, t5.target);
        }
      } else !t5.target.classList.contains("apexcharts-inactive-legend") && i3 && new Zi2(this.ctx).toggleSeriesOnHover(t5, t5.target);
    } }, { key: "onLegendClick", value: function(t5) {
      var e3 = this.w;
      if (!e3.config.legend.customLegendItems.length && (t5.target.classList.contains("apexcharts-legend-series") || t5.target.classList.contains("apexcharts-legend-text") || t5.target.classList.contains("apexcharts-legend-marker"))) {
        var i3 = parseInt(t5.target.getAttribute("rel"), 10) - 1, a3 = "true" === t5.target.getAttribute("data:collapsed"), s3 = this.w.config.chart.events.legendClick;
        "function" == typeof s3 && s3(this.ctx, i3, this.w), this.ctx.events.fireEvent("legendClick", [this.ctx, i3, this.w]);
        var r3 = this.w.config.legend.markers.onClick;
        "function" == typeof r3 && t5.target.classList.contains("apexcharts-legend-marker") && (r3(this.ctx, i3, this.w), this.ctx.events.fireEvent("legendMarkerClick", [this.ctx, i3, this.w])), "treemap" !== e3.config.chart.type && "heatmap" !== e3.config.chart.type && !this.isBarsDistributed && e3.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i3, a3);
      }
    } }]), t4;
  }();
  var ba = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
      var a3 = this.w;
      this.ev = this.w.config.chart.events, this.selectedClass = "apexcharts-selected", this.localeValues = this.w.globals.locale.toolbar, this.minX = a3.globals.minX, this.maxX = a3.globals.maxX;
    }
    return s2(t4, [{ key: "createToolbar", value: function() {
      var t5 = this, e3 = this.w, i3 = function() {
        return document.createElement("div");
      }, a3 = i3();
      if (a3.setAttribute("class", "apexcharts-toolbar"), a3.style.top = e3.config.chart.toolbar.offsetY + "px", a3.style.right = 3 - e3.config.chart.toolbar.offsetX + "px", e3.globals.dom.elWrap.appendChild(a3), this.elZoom = i3(), this.elZoomIn = i3(), this.elZoomOut = i3(), this.elPan = i3(), this.elSelection = i3(), this.elZoomReset = i3(), this.elMenuIcon = i3(), this.elMenu = i3(), this.elCustomIcons = [], this.t = e3.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for (var s3 = 0; s3 < this.t.customIcons.length; s3++) this.elCustomIcons.push(i3());
      var r3 = [], n3 = function(i4, a4, s4) {
        var n4 = i4.toLowerCase();
        t5.t[n4] && e3.config.chart.zoom.enabled && r3.push({ el: a4, icon: "string" == typeof t5.t[n4] ? t5.t[n4] : s4, title: t5.localeValues[i4], class: "apexcharts-".concat(n4, "-icon") });
      };
      n3("zoomIn", this.elZoomIn, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'), n3("zoomOut", this.elZoomOut, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n');
      var o3 = function(i4) {
        t5.t[i4] && e3.config.chart[i4].enabled && r3.push({ el: "zoom" === i4 ? t5.elZoom : t5.elSelection, icon: "string" == typeof t5.t[i4] ? t5.t[i4] : "zoom" === i4 ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>' : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>', title: t5.localeValues["zoom" === i4 ? "selectionZoom" : "selection"], class: e3.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-".concat(i4, "-icon") });
      };
      o3("zoom"), o3("selection"), this.t.pan && e3.config.chart.zoom.enabled && r3.push({ el: this.elPan, icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>', title: this.localeValues.pan, class: e3.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon" }), n3("reset", this.elZoomReset, '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'), this.t.download && r3.push({ el: this.elMenuIcon, icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>', title: this.localeValues.menu, class: "apexcharts-menu-icon" });
      for (var l3 = 0; l3 < this.elCustomIcons.length; l3++) r3.push({ el: this.elCustomIcons[l3], icon: this.t.customIcons[l3].icon, title: this.t.customIcons[l3].title, index: this.t.customIcons[l3].index, class: "apexcharts-toolbar-custom-icon " + this.t.customIcons[l3].class });
      r3.forEach(function(t6, e4) {
        t6.index && v2.moveIndexInArray(r3, e4, t6.index);
      });
      for (var h3 = 0; h3 < r3.length; h3++) Mi2.setAttrs(r3[h3].el, { class: r3[h3].class, title: r3[h3].title }), r3[h3].el.innerHTML = r3[h3].icon, a3.appendChild(r3[h3].el);
      this._createHamburgerMenu(a3), e3.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e3.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e3.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();
    } }, { key: "_createHamburgerMenu", value: function(t5) {
      this.elMenuItems = [], t5.appendChild(this.elMenu), Mi2.setAttrs(this.elMenu, { class: "apexcharts-menu" });
      for (var e3 = [{ name: "exportSVG", title: this.localeValues.exportToSVG }, { name: "exportPNG", title: this.localeValues.exportToPNG }, { name: "exportCSV", title: this.localeValues.exportToCSV }], i3 = 0; i3 < e3.length; i3++) this.elMenuItems.push(document.createElement("div")), this.elMenuItems[i3].innerHTML = e3[i3].title, Mi2.setAttrs(this.elMenuItems[i3], { class: "apexcharts-menu-item ".concat(e3[i3].name), title: e3[i3].title }), this.elMenu.appendChild(this.elMenuItems[i3]);
    } }, { key: "addToolbarEventListeners", value: function() {
      var t5 = this;
      this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleZoomSelection.bind(this, "selection")), this.elZoom.addEventListener("click", this.toggleZoomSelection.bind(this, "zoom")), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function(e4) {
        e4.classList.contains("exportSVG") ? e4.addEventListener("click", t5.handleDownload.bind(t5, "svg")) : e4.classList.contains("exportPNG") ? e4.addEventListener("click", t5.handleDownload.bind(t5, "png")) : e4.classList.contains("exportCSV") && e4.addEventListener("click", t5.handleDownload.bind(t5, "csv"));
      });
      for (var e3 = 0; e3 < this.t.customIcons.length; e3++) this.elCustomIcons[e3].addEventListener("click", this.t.customIcons[e3].click.bind(this, this.ctx, this.ctx.w));
    } }, { key: "toggleZoomSelection", value: function(t5) {
      this.ctx.getSyncedCharts().forEach(function(e3) {
        e3.ctx.toolbar.toggleOtherControls();
        var i3 = "selection" === t5 ? e3.ctx.toolbar.elSelection : e3.ctx.toolbar.elZoom, a3 = "selection" === t5 ? "selectionEnabled" : "zoomEnabled";
        e3.w.globals[a3] = !e3.w.globals[a3], i3.classList.contains(e3.ctx.toolbar.selectedClass) ? i3.classList.remove(e3.ctx.toolbar.selectedClass) : i3.classList.add(e3.ctx.toolbar.selectedClass);
      });
    } }, { key: "getToolbarIconsReference", value: function() {
      var t5 = this.w;
      this.elZoom || (this.elZoom = t5.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t5.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t5.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
    } }, { key: "enableZoomPanFromToolbar", value: function(t5) {
      this.toggleOtherControls(), "pan" === t5 ? this.w.globals.panEnabled = true : this.w.globals.zoomEnabled = true;
      var e3 = "pan" === t5 ? this.elPan : this.elZoom, i3 = "pan" === t5 ? this.elZoom : this.elPan;
      e3 && e3.classList.add(this.selectedClass), i3 && i3.classList.remove(this.selectedClass);
    } }, { key: "togglePanning", value: function() {
      this.ctx.getSyncedCharts().forEach(function(t5) {
        t5.ctx.toolbar.toggleOtherControls(), t5.w.globals.panEnabled = !t5.w.globals.panEnabled, t5.ctx.toolbar.elPan.classList.contains(t5.ctx.toolbar.selectedClass) ? t5.ctx.toolbar.elPan.classList.remove(t5.ctx.toolbar.selectedClass) : t5.ctx.toolbar.elPan.classList.add(t5.ctx.toolbar.selectedClass);
      });
    } }, { key: "toggleOtherControls", value: function() {
      var t5 = this, e3 = this.w;
      e3.globals.panEnabled = false, e3.globals.zoomEnabled = false, e3.globals.selectionEnabled = false, this.getToolbarIconsReference(), [this.elPan, this.elSelection, this.elZoom].forEach(function(e4) {
        e4 && e4.classList.remove(t5.selectedClass);
      });
    } }, { key: "handleZoomIn", value: function() {
      var t5 = this.w;
      t5.globals.isRangeBar && (this.minX = t5.globals.minY, this.maxX = t5.globals.maxY);
      var e3 = (this.minX + this.maxX) / 2, i3 = (this.minX + e3) / 2, a3 = (this.maxX + e3) / 2, s3 = this._getNewMinXMaxX(i3, a3);
      t5.globals.disableZoomIn || this.zoomUpdateOptions(s3.minX, s3.maxX);
    } }, { key: "handleZoomOut", value: function() {
      var t5 = this.w;
      if (t5.globals.isRangeBar && (this.minX = t5.globals.minY, this.maxX = t5.globals.maxY), !("datetime" === t5.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {
        var e3 = (this.minX + this.maxX) / 2, i3 = this.minX - (e3 - this.minX), a3 = this.maxX - (e3 - this.maxX), s3 = this._getNewMinXMaxX(i3, a3);
        t5.globals.disableZoomOut || this.zoomUpdateOptions(s3.minX, s3.maxX);
      }
    } }, { key: "_getNewMinXMaxX", value: function(t5, e3) {
      var i3 = this.w.config.xaxis.convertedCatToNumeric;
      return { minX: i3 ? Math.floor(t5) : t5, maxX: i3 ? Math.floor(e3) : e3 };
    } }, { key: "zoomUpdateOptions", value: function(t5, e3) {
      var i3 = this.w;
      if (void 0 !== t5 || void 0 !== e3) {
        if (!(i3.config.xaxis.convertedCatToNumeric && (t5 < 1 && (t5 = 1, e3 = i3.globals.dataPoints), e3 - t5 < 2))) {
          var a3 = { min: t5, max: e3 }, s3 = this.getBeforeZoomRange(a3);
          s3 && (a3 = s3.xaxis);
          var r3 = { xaxis: a3 }, n3 = v2.clone(i3.globals.initialConfig.yaxis);
          i3.config.chart.group || (r3.yaxis = n3), this.w.globals.zoomed = true, this.ctx.updateHelpers._updateOptions(r3, false, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a3, n3);
        }
      } else this.handleZoomReset();
    } }, { key: "zoomCallback", value: function(t5, e3) {
      "function" == typeof this.ev.zoomed && (this.ev.zoomed(this.ctx, { xaxis: t5, yaxis: e3 }), this.ctx.events.fireEvent("zoomed", { xaxis: t5, yaxis: e3 }));
    } }, { key: "getBeforeZoomRange", value: function(t5, e3) {
      var i3 = null;
      return "function" == typeof this.ev.beforeZoom && (i3 = this.ev.beforeZoom(this, { xaxis: t5, yaxis: e3 })), i3;
    } }, { key: "toggleMenu", value: function() {
      var t5 = this;
      window.setTimeout(function() {
        t5.elMenu.classList.contains("apexcharts-menu-open") ? t5.elMenu.classList.remove("apexcharts-menu-open") : t5.elMenu.classList.add("apexcharts-menu-open");
      }, 0);
    } }, { key: "handleDownload", value: function(t5) {
      var e3 = this.w, i3 = new Ji2(this.ctx);
      switch (t5) {
        case "svg":
          i3.exportToSVG(this.ctx);
          break;
        case "png":
          i3.exportToPng(this.ctx);
          break;
        case "csv":
          i3.exportToCSV({ series: e3.config.series, columnDelimiter: e3.config.chart.toolbar.export.csv.columnDelimiter });
      }
    } }, { key: "handleZoomReset", value: function(t5) {
      this.ctx.getSyncedCharts().forEach(function(t6) {
        var e3 = t6.w;
        if (e3.globals.lastXAxis.min = e3.globals.initialConfig.xaxis.min, e3.globals.lastXAxis.max = e3.globals.initialConfig.xaxis.max, t6.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof e3.config.chart.events.beforeResetZoom) {
          var i3 = e3.config.chart.events.beforeResetZoom(t6, e3);
          i3 && t6.updateHelpers.revertDefaultAxisMinMax(i3);
        }
        "function" == typeof e3.config.chart.events.zoomed && t6.ctx.toolbar.zoomCallback({ min: e3.config.xaxis.min, max: e3.config.xaxis.max }), e3.globals.zoomed = false;
        var a3 = t6.ctx.series.emptyCollapsedSeries(v2.clone(e3.globals.initialSeries));
        t6.updateHelpers._updateSeries(a3, e3.config.chart.animations.dynamicAnimation.enabled);
      });
    } }, { key: "destroy", value: function() {
      this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;
    } }]), t4;
  }();
  var ma = function(t4) {
    h2(a3, ba);
    var e3 = n2(a3);
    function a3(t5) {
      var s3;
      return i2(this, a3), (s3 = e3.call(this, t5)).ctx = t5, s3.w = t5.w, s3.dragged = false, s3.graphics = new Mi2(s3.ctx), s3.eventList = ["mousedown", "mouseleave", "mousemove", "touchstart", "touchmove", "mouseup", "touchend", "wheel"], s3.clientX = 0, s3.clientY = 0, s3.startX = 0, s3.endX = 0, s3.dragX = 0, s3.startY = 0, s3.endY = 0, s3.dragY = 0, s3.moveDirection = "none", s3.debounceTimer = null, s3.debounceDelay = 100, s3.wheelDelay = 400, s3;
    }
    return s2(a3, [{ key: "init", value: function(t5) {
      var e4 = this, i3 = t5.xyRatios, a4 = this.w, s3 = this;
      this.xyRatios = i3, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a4.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.constraints = new kt2(0, 0, a4.globals.gridWidth, a4.globals.gridHeight), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), a4.globals.dom.Paper.add(this.zoomRect), a4.globals.dom.Paper.add(this.selectionRect), "x" === a4.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, minY: 0, maxX: a4.globals.gridWidth, maxY: a4.globals.gridHeight }).on("dragmove.namespace", this.selectionDragging.bind(this, "dragging")) : "y" === a4.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, maxX: a4.globals.gridWidth }).on("dragmove.namespace", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove.namespace", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = a4.globals.dom.baseEl.querySelector("".concat(a4.globals.chartClass, " .apexcharts-svg")), this.hoverArea.classList.add("apexcharts-zoomable"), this.eventList.forEach(function(t6) {
        e4.hoverArea.addEventListener(t6, s3.svgMouseEvents.bind(s3, i3), { capture: false, passive: true });
      }), a4.config.chart.zoom.enabled && a4.config.chart.zoom.allowMouseWheelZoom && this.hoverArea.addEventListener("wheel", s3.mouseWheelEvent.bind(s3), { capture: false, passive: false });
    } }, { key: "destroy", value: function() {
      this.slDraggableRect && (this.slDraggableRect.draggable(false), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;
    } }, { key: "svgMouseEvents", value: function(t5, e4) {
      var i3 = this.w, a4 = this.ctx.toolbar, s3 = i3.globals.zoomEnabled ? i3.config.chart.zoom.type : i3.config.chart.selection.type, r3 = i3.config.chart.toolbar.autoSelected;
      if (e4.shiftKey ? (this.shiftWasPressed = true, a4.enableZoomPanFromToolbar("pan" === r3 ? "zoom" : "pan")) : this.shiftWasPressed && (a4.enableZoomPanFromToolbar(r3), this.shiftWasPressed = false), e4.target) {
        var n3, o3 = e4.target.classList;
        if (e4.target.parentNode && null !== e4.target.parentNode && (n3 = e4.target.parentNode.classList), !(o3.contains("apexcharts-legend-marker") || o3.contains("apexcharts-legend-text") || n3 && n3.contains("apexcharts-toolbar"))) {
          if (this.clientX = "touchmove" === e4.type || "touchstart" === e4.type ? e4.touches[0].clientX : "touchend" === e4.type ? e4.changedTouches[0].clientX : e4.clientX, this.clientY = "touchmove" === e4.type || "touchstart" === e4.type ? e4.touches[0].clientY : "touchend" === e4.type ? e4.changedTouches[0].clientY : e4.clientY, "mousedown" === e4.type && 1 === e4.which || "touchstart" === e4.type) {
            var l3 = this.gridRect.getBoundingClientRect();
            this.startX = this.clientX - l3.left - i3.globals.barPadForNumericAxis, this.startY = this.clientY - l3.top, this.dragged = false, this.w.globals.mousedown = true;
          }
          ("mousemove" === e4.type && 1 === e4.which || "touchmove" === e4.type) && (this.dragged = true, i3.globals.panEnabled ? (i3.globals.selection = null, this.w.globals.mousedown && this.panDragging({ context: this, zoomtype: s3, xyRatios: t5 })) : (this.w.globals.mousedown && i3.globals.zoomEnabled || this.w.globals.mousedown && i3.globals.selectionEnabled) && (this.selection = this.selectionDrawing({ context: this, zoomtype: s3 }))), "mouseup" !== e4.type && "touchend" !== e4.type && "mouseleave" !== e4.type || this.handleMouseUp({ zoomtype: s3 }), this.makeSelectionRectDraggable();
        }
      }
    } }, { key: "handleMouseUp", value: function(t5) {
      var e4, i3 = t5.zoomtype, a4 = t5.isResized, s3 = this.w, r3 = null === (e4 = this.gridRect) || void 0 === e4 ? void 0 : e4.getBoundingClientRect();
      r3 && (this.w.globals.mousedown || a4) && (this.endX = this.clientX - r3.left - s3.globals.barPadForNumericAxis, this.endY = this.clientY - r3.top, this.dragX = Math.abs(this.endX - this.startX), this.dragY = Math.abs(this.endY - this.startY), (s3.globals.zoomEnabled || s3.globals.selectionEnabled) && this.selectionDrawn({ context: this, zoomtype: i3 })), s3.globals.zoomEnabled && this.hideSelectionRect(this.selectionRect), this.dragged = false, this.w.globals.mousedown = false;
    } }, { key: "mouseWheelEvent", value: function(t5) {
      var e4 = this, i3 = this.w;
      t5.preventDefault();
      var a4 = Date.now();
      a4 - i3.globals.lastWheelExecution > this.wheelDelay && (this.executeMouseWheelZoom(t5), i3.globals.lastWheelExecution = a4), this.debounceTimer && clearTimeout(this.debounceTimer), this.debounceTimer = setTimeout(function() {
        a4 - i3.globals.lastWheelExecution > e4.wheelDelay && (e4.executeMouseWheelZoom(t5), i3.globals.lastWheelExecution = a4);
      }, this.debounceDelay);
    } }, { key: "executeMouseWheelZoom", value: function(t5) {
      var e4, i3 = this.w;
      this.minX = i3.globals.isRangeBar ? i3.globals.minY : i3.globals.minX, this.maxX = i3.globals.isRangeBar ? i3.globals.maxY : i3.globals.maxX;
      var a4 = null === (e4 = this.gridRect) || void 0 === e4 ? void 0 : e4.getBoundingClientRect();
      if (a4) {
        var s3, r3, n3, o3 = (t5.clientX - a4.left) / a4.width, l3 = this.minX, h3 = this.maxX, c3 = h3 - l3;
        if (t5.deltaY < 0) {
          var d3 = l3 + o3 * c3;
          r3 = d3 - (s3 = 0.5 * c3) / 2, n3 = d3 + s3 / 2;
        } else r3 = l3 - (s3 = 1.5 * c3) / 2, n3 = h3 + s3 / 2;
        if (!i3.globals.isRangeBar) {
          r3 = Math.max(r3, i3.globals.initialMinX), n3 = Math.min(n3, i3.globals.initialMaxX);
          var u3 = 0.01 * (i3.globals.initialMaxX - i3.globals.initialMinX);
          if (n3 - r3 < u3) {
            var g3 = (r3 + n3) / 2;
            r3 = g3 - u3 / 2, n3 = g3 + u3 / 2;
          }
        }
        var p3 = this._getNewMinXMaxX(r3, n3);
        isNaN(p3.minX) || isNaN(p3.maxX) || this.zoomUpdateOptions(p3.minX, p3.maxX);
      }
    } }, { key: "makeSelectionRectDraggable", value: function() {
      var t5 = this, e4 = this.w;
      if (this.selectionRect) {
        var i3 = this.selectionRect.node.getBoundingClientRect();
        i3.width > 0 && i3.height > 0 && (this.selectionRect.select(false).resize(false), this.selectionRect.select({ createRot: function() {
        }, updateRot: function() {
        }, createHandle: function(t6, e5, i4, a4, s3) {
          return "l" === s3 || "r" === s3 ? t6.circle(8).css({ "stroke-width": 1, stroke: "#333", fill: "#fff" }) : t6.circle(0);
        }, updateHandle: function(t6, e5) {
          return t6.center(e5[0], e5[1]);
        } }).resize().on("resize", function() {
          var i4 = e4.globals.zoomEnabled ? e4.config.chart.zoom.type : e4.config.chart.selection.type;
          t5.handleMouseUp({ zoomtype: i4, isResized: true });
        }));
      }
    } }, { key: "preselectedSelection", value: function() {
      var t5 = this.w, e4 = this.xyRatios;
      if (!t5.globals.zoomEnabled) {
        if (void 0 !== t5.globals.selection && null !== t5.globals.selection) this.drawSelectionRect(u2(u2({}, t5.globals.selection), {}, { translateX: t5.globals.translateX, translateY: t5.globals.translateY }));
        else if (void 0 !== t5.config.chart.selection.xaxis.min && void 0 !== t5.config.chart.selection.xaxis.max) {
          var i3 = (t5.config.chart.selection.xaxis.min - t5.globals.minX) / e4.xRatio, a4 = t5.globals.gridWidth - (t5.globals.maxX - t5.config.chart.selection.xaxis.max) / e4.xRatio - i3;
          t5.globals.isRangeBar && (i3 = (t5.config.chart.selection.xaxis.min - t5.globals.yAxisScale[0].niceMin) / e4.invertedYRatio, a4 = (t5.config.chart.selection.xaxis.max - t5.config.chart.selection.xaxis.min) / e4.invertedYRatio);
          var s3 = { x: i3, y: 0, width: a4, height: t5.globals.gridHeight, translateX: t5.globals.translateX, translateY: t5.globals.translateY, selectionEnabled: true };
          this.drawSelectionRect(s3), this.makeSelectionRectDraggable(), "function" == typeof t5.config.chart.events.selection && t5.config.chart.events.selection(this.ctx, { xaxis: { min: t5.config.chart.selection.xaxis.min, max: t5.config.chart.selection.xaxis.max }, yaxis: {} });
        }
      }
    } }, { key: "drawSelectionRect", value: function(t5) {
      var e4 = t5.x, i3 = t5.y, a4 = t5.width, s3 = t5.height, r3 = t5.translateX, n3 = void 0 === r3 ? 0 : r3, o3 = t5.translateY, l3 = void 0 === o3 ? 0 : o3, h3 = this.w, c3 = this.zoomRect, d3 = this.selectionRect;
      if (this.dragged || null !== h3.globals.selection) {
        var u3 = { transform: "translate(" + n3 + ", " + l3 + ")" };
        h3.globals.zoomEnabled && this.dragged && (a4 < 0 && (a4 = 1), c3.attr({ x: e4, y: i3, width: a4, height: s3, fill: h3.config.chart.zoom.zoomedArea.fill.color, "fill-opacity": h3.config.chart.zoom.zoomedArea.fill.opacity, stroke: h3.config.chart.zoom.zoomedArea.stroke.color, "stroke-width": h3.config.chart.zoom.zoomedArea.stroke.width, "stroke-opacity": h3.config.chart.zoom.zoomedArea.stroke.opacity }), Mi2.setAttrs(c3.node, u3)), h3.globals.selectionEnabled && (d3.attr({ x: e4, y: i3, width: a4 > 0 ? a4 : 0, height: s3 > 0 ? s3 : 0, fill: h3.config.chart.selection.fill.color, "fill-opacity": h3.config.chart.selection.fill.opacity, stroke: h3.config.chart.selection.stroke.color, "stroke-width": h3.config.chart.selection.stroke.width, "stroke-dasharray": h3.config.chart.selection.stroke.dashArray, "stroke-opacity": h3.config.chart.selection.stroke.opacity }), Mi2.setAttrs(d3.node, u3));
      }
    } }, { key: "hideSelectionRect", value: function(t5) {
      t5 && t5.attr({ x: 0, y: 0, width: 0, height: 0 });
    } }, { key: "selectionDrawing", value: function(t5) {
      var e4 = t5.context, i3 = t5.zoomtype, a4 = this.w, s3 = e4, r3 = this.gridRect.getBoundingClientRect(), n3 = s3.startX - 1, o3 = s3.startY, l3 = false, h3 = false, c3 = s3.clientX - r3.left - a4.globals.barPadForNumericAxis, d3 = s3.clientY - r3.top, g3 = c3 - n3, p3 = d3 - o3, f3 = { translateX: a4.globals.translateX, translateY: a4.globals.translateY };
      return Math.abs(g3 + n3) > a4.globals.gridWidth ? g3 = a4.globals.gridWidth - n3 : c3 < 0 && (g3 = n3), n3 > c3 && (l3 = true, g3 = Math.abs(g3)), o3 > d3 && (h3 = true, p3 = Math.abs(p3)), f3 = u2(u2({}, f3 = "x" === i3 ? { x: l3 ? n3 - g3 : n3, y: 0, width: g3, height: a4.globals.gridHeight } : "y" === i3 ? { x: 0, y: h3 ? o3 - p3 : o3, width: a4.globals.gridWidth, height: p3 } : { x: l3 ? n3 - g3 : n3, y: h3 ? o3 - p3 : o3, width: g3, height: p3 }), {}, { translateX: a4.globals.translateX, translateY: a4.globals.translateY }), s3.drawSelectionRect(f3), s3.selectionDragging("resizing"), f3;
    } }, { key: "selectionDragging", value: function(t5, e4) {
      var i3 = this, a4 = this.w;
      if (e4) {
        e4.preventDefault();
        var s3 = e4.detail, r3 = s3.handler, n3 = s3.box, o3 = n3.x, l3 = n3.y;
        o3 < this.constraints.x && (o3 = this.constraints.x), l3 < this.constraints.y && (l3 = this.constraints.y), n3.x2 > this.constraints.x2 && (o3 = this.constraints.x2 - n3.w), n3.y2 > this.constraints.y2 && (l3 = this.constraints.y2 - n3.h), r3.move(o3, l3);
        var h3 = this.xyRatios, c3 = this.selectionRect, d3 = 0;
        "resizing" === t5 && (d3 = 30);
        var u3 = function(t6) {
          return parseFloat(c3.node.getAttribute(t6));
        }, g3 = { x: u3("x"), y: u3("y"), width: u3("width"), height: u3("height") };
        a4.globals.selection = g3, "function" == typeof a4.config.chart.events.selection && a4.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function() {
          var t6, e5, s4, r4, n4 = i3.gridRect.getBoundingClientRect(), o4 = c3.node.getBoundingClientRect();
          a4.globals.isRangeBar ? (t6 = a4.globals.yAxisScale[0].niceMin + (o4.left - n4.left) * h3.invertedYRatio, e5 = a4.globals.yAxisScale[0].niceMin + (o4.right - n4.left) * h3.invertedYRatio, s4 = 0, r4 = 1) : (t6 = a4.globals.xAxisScale.niceMin + (o4.left - n4.left) * h3.xRatio, e5 = a4.globals.xAxisScale.niceMin + (o4.right - n4.left) * h3.xRatio, s4 = a4.globals.yAxisScale[0].niceMin + (n4.bottom - o4.bottom) * h3.yRatio[0], r4 = a4.globals.yAxisScale[0].niceMax - (o4.top - n4.top) * h3.yRatio[0]);
          var l4 = { xaxis: { min: t6, max: e5 }, yaxis: { min: s4, max: r4 } };
          a4.config.chart.events.selection(i3.ctx, l4), a4.config.chart.brush.enabled && void 0 !== a4.config.chart.events.brushScrolled && a4.config.chart.events.brushScrolled(i3.ctx, l4);
        }, d3));
      }
    } }, { key: "selectionDrawn", value: function(t5) {
      var e4, i3, a4 = t5.context, s3 = t5.zoomtype, r3 = this.w, n3 = a4, o3 = this.xyRatios, l3 = this.ctx.toolbar, h3 = r3.globals.zoomEnabled ? n3.zoomRect.node.getBoundingClientRect() : n3.selectionRect.node.getBoundingClientRect(), c3 = n3.gridRect.getBoundingClientRect(), d3 = h3.left - c3.left - r3.globals.barPadForNumericAxis, u3 = h3.right - c3.left - r3.globals.barPadForNumericAxis, g3 = h3.top - c3.top, p3 = h3.bottom - c3.top;
      r3.globals.isRangeBar ? (e4 = r3.globals.yAxisScale[0].niceMin + d3 * o3.invertedYRatio, i3 = r3.globals.yAxisScale[0].niceMin + u3 * o3.invertedYRatio) : (e4 = r3.globals.xAxisScale.niceMin + d3 * o3.xRatio, i3 = r3.globals.xAxisScale.niceMin + u3 * o3.xRatio);
      var f3 = [], x3 = [];
      if (r3.config.yaxis.forEach(function(t6, e5) {
        var i4 = r3.globals.seriesYAxisMap[e5][0], a5 = r3.globals.yAxisScale[e5].niceMax - o3.yRatio[i4] * g3, s4 = r3.globals.yAxisScale[e5].niceMax - o3.yRatio[i4] * p3;
        f3.push(a5), x3.push(s4);
      }), n3.dragged && (n3.dragX > 10 || n3.dragY > 10) && e4 !== i3) {
        if (r3.globals.zoomEnabled) {
          var b3 = v2.clone(r3.globals.initialConfig.yaxis), m3 = v2.clone(r3.globals.initialConfig.xaxis);
          if (r3.globals.zoomed = true, r3.config.xaxis.convertedCatToNumeric && (e4 = Math.floor(e4), i3 = Math.floor(i3), e4 < 1 && (e4 = 1, i3 = r3.globals.dataPoints), i3 - e4 < 2 && (i3 = e4 + 1)), "xy" !== s3 && "x" !== s3 || (m3 = { min: e4, max: i3 }), "xy" !== s3 && "y" !== s3 || b3.forEach(function(t6, e5) {
            b3[e5].min = x3[e5], b3[e5].max = f3[e5];
          }), l3) {
            var y3 = l3.getBeforeZoomRange(m3, b3);
            y3 && (m3 = y3.xaxis ? y3.xaxis : m3, b3 = y3.yaxis ? y3.yaxis : b3);
          }
          var w3 = { xaxis: m3 };
          r3.config.chart.group || (w3.yaxis = b3), n3.ctx.updateHelpers._updateOptions(w3, false, n3.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof r3.config.chart.events.zoomed && l3.zoomCallback(m3, b3);
        } else if (r3.globals.selectionEnabled) {
          var k3, A3 = null;
          k3 = { min: e4, max: i3 }, "xy" !== s3 && "y" !== s3 || (A3 = v2.clone(r3.config.yaxis)).forEach(function(t6, e5) {
            A3[e5].min = x3[e5], A3[e5].max = f3[e5];
          }), r3.globals.selection = n3.selection, "function" == typeof r3.config.chart.events.selection && r3.config.chart.events.selection(n3.ctx, { xaxis: k3, yaxis: A3 });
        }
      }
    } }, { key: "panDragging", value: function(t5) {
      var e4 = t5.context, i3 = this.w, a4 = e4;
      if (void 0 !== i3.globals.lastClientPosition.x) {
        var s3 = i3.globals.lastClientPosition.x - a4.clientX, r3 = i3.globals.lastClientPosition.y - a4.clientY;
        Math.abs(s3) > Math.abs(r3) && s3 > 0 ? this.moveDirection = "left" : Math.abs(s3) > Math.abs(r3) && s3 < 0 ? this.moveDirection = "right" : Math.abs(r3) > Math.abs(s3) && r3 > 0 ? this.moveDirection = "up" : Math.abs(r3) > Math.abs(s3) && r3 < 0 && (this.moveDirection = "down");
      }
      i3.globals.lastClientPosition = { x: a4.clientX, y: a4.clientY };
      var n3 = i3.globals.isRangeBar ? i3.globals.minY : i3.globals.minX, o3 = i3.globals.isRangeBar ? i3.globals.maxY : i3.globals.maxX;
      a4.panScrolled(n3, o3);
    } }, { key: "panScrolled", value: function(t5, e4) {
      var i3 = this.w, a4 = this.xyRatios, s3 = v2.clone(i3.globals.initialConfig.yaxis), r3 = a4.xRatio, n3 = i3.globals.minX, o3 = i3.globals.maxX;
      i3.globals.isRangeBar && (r3 = a4.invertedYRatio, n3 = i3.globals.minY, o3 = i3.globals.maxY), "left" === this.moveDirection ? (t5 = n3 + i3.globals.gridWidth / 15 * r3, e4 = o3 + i3.globals.gridWidth / 15 * r3) : "right" === this.moveDirection && (t5 = n3 - i3.globals.gridWidth / 15 * r3, e4 = o3 - i3.globals.gridWidth / 15 * r3), i3.globals.isRangeBar || (t5 < i3.globals.initialMinX || e4 > i3.globals.initialMaxX) && (t5 = n3, e4 = o3);
      var l3 = { xaxis: { min: t5, max: e4 } };
      i3.config.chart.group || (l3.yaxis = s3), this.updateScrolledChart(l3, t5, e4);
    } }, { key: "updateScrolledChart", value: function(t5, e4, i3) {
      var a4 = this.w;
      if (this.ctx.updateHelpers._updateOptions(t5, false, false), "function" == typeof a4.config.chart.events.scrolled) {
        var s3 = { xaxis: { min: e4, max: i3 } };
        a4.config.chart.events.scrolled(this.ctx, s3), this.ctx.events.fireEvent("scrolled", s3);
      }
    } }]), a3;
  }();
  var va = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.ttCtx = e3, this.ctx = e3.ctx;
    }
    return s2(t4, [{ key: "getNearestValues", value: function(t5) {
      var e3 = t5.hoverArea, i3 = t5.elGrid, a3 = t5.clientX, s3 = t5.clientY, r3 = this.w, n3 = i3.getBoundingClientRect(), o3 = n3.width, l3 = n3.height, h3 = o3 / (r3.globals.dataPoints - 1), c3 = l3 / r3.globals.dataPoints, d3 = this.hasBars();
      !r3.globals.comboCharts && !d3 || r3.config.xaxis.convertedCatToNumeric || (h3 = o3 / r3.globals.dataPoints);
      var u3 = a3 - n3.left - r3.globals.barPadForNumericAxis, g3 = s3 - n3.top;
      u3 < 0 || g3 < 0 || u3 > o3 || g3 > l3 ? (e3.classList.remove("hovering-zoom"), e3.classList.remove("hovering-pan")) : r3.globals.zoomEnabled ? (e3.classList.remove("hovering-pan"), e3.classList.add("hovering-zoom")) : r3.globals.panEnabled && (e3.classList.remove("hovering-zoom"), e3.classList.add("hovering-pan"));
      var p3 = Math.round(u3 / h3), f3 = Math.floor(g3 / c3);
      d3 && !r3.config.xaxis.convertedCatToNumeric && (p3 = Math.ceil(u3 / h3), p3 -= 1);
      var x3 = null, b3 = null, m3 = r3.globals.seriesXvalues.map(function(t6) {
        return t6.filter(function(t7) {
          return v2.isNumber(t7);
        });
      }), y3 = r3.globals.seriesYvalues.map(function(t6) {
        return t6.filter(function(t7) {
          return v2.isNumber(t7);
        });
      });
      if (r3.globals.isXNumeric) {
        var w3 = this.ttCtx.getElGrid().getBoundingClientRect(), k3 = u3 * (w3.width / o3), A3 = g3 * (w3.height / l3);
        x3 = (b3 = this.closestInMultiArray(k3, A3, m3, y3)).index, p3 = b3.j, null !== x3 && r3.globals.hasNullValues && (m3 = r3.globals.seriesXvalues[x3], p3 = (b3 = this.closestInArray(k3, m3)).j);
      }
      return r3.globals.capturedSeriesIndex = null === x3 ? -1 : x3, (!p3 || p3 < 1) && (p3 = 0), r3.globals.isBarHorizontal ? r3.globals.capturedDataPointIndex = f3 : r3.globals.capturedDataPointIndex = p3, { capturedSeries: x3, j: r3.globals.isBarHorizontal ? f3 : p3, hoverX: u3, hoverY: g3 };
    } }, { key: "getFirstActiveXArray", value: function(t5) {
      for (var e3 = this.w, i3 = 0, a3 = t5.map(function(t6, e4) {
        return t6.length > 0 ? e4 : -1;
      }), s3 = 0; s3 < a3.length; s3++) if (-1 !== a3[s3] && -1 === e3.globals.collapsedSeriesIndices.indexOf(s3) && -1 === e3.globals.ancillaryCollapsedSeriesIndices.indexOf(s3)) {
        i3 = a3[s3];
        break;
      }
      return i3;
    } }, { key: "closestInMultiArray", value: function(t5, e3, i3, a3) {
      for (var s3, r3 = this.w, n3 = 1 / 0, o3 = null, l3 = null, h3 = 0; h3 < i3.length; h3++) if (s3 = h3, -1 === r3.globals.collapsedSeriesIndices.indexOf(s3) && -1 === r3.globals.ancillaryCollapsedSeriesIndices.indexOf(s3)) for (var c3 = i3[h3], d3 = a3[h3], u3 = Math.min(c3.length, d3.length), g3 = 0; g3 < u3; g3++) {
        var p3 = t5 - c3[g3], f3 = Math.sqrt(p3 * p3);
        if (!r3.globals.allSeriesHasEqualX) {
          var x3 = e3 - d3[g3];
          f3 = Math.sqrt(p3 * p3 + x3 * x3);
        }
        f3 < n3 && (n3 = f3, o3 = h3, l3 = g3);
      }
      return { index: o3, j: l3 };
    } }, { key: "closestInArray", value: function(t5, e3) {
      for (var i3 = e3[0], a3 = null, s3 = Math.abs(t5 - i3), r3 = 0; r3 < e3.length; r3++) {
        var n3 = Math.abs(t5 - e3[r3]);
        n3 < s3 && (s3 = n3, a3 = r3);
      }
      return { j: a3 };
    } }, { key: "isXoverlap", value: function(t5) {
      var e3 = [], i3 = this.w.globals.seriesX.filter(function(t6) {
        return void 0 !== t6[0];
      });
      if (i3.length > 0) for (var a3 = 0; a3 < i3.length - 1; a3++) void 0 !== i3[a3][t5] && void 0 !== i3[a3 + 1][t5] && i3[a3][t5] !== i3[a3 + 1][t5] && e3.push("unEqual");
      return 0 === e3.length;
    } }, { key: "isInitialSeriesSameLen", value: function() {
      for (var t5 = true, e3 = this.w.globals.initialSeries, i3 = 0; i3 < e3.length - 1; i3++) if (e3[i3].data.length !== e3[i3 + 1].data.length) {
        t5 = false;
        break;
      }
      return t5;
    } }, { key: "getBarsHeight", value: function(t5) {
      return f2(t5).reduce(function(t6, e3) {
        return t6 + e3.getBBox().height;
      }, 0);
    } }, { key: "getElMarkers", value: function(t5) {
      return "number" == typeof t5 ? this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:realIndex='".concat(t5, "'] .apexcharts-series-markers-wrap > *")) : this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap > *");
    } }, { key: "getAllMarkers", value: function() {
      var t5 = this, e3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], i3 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");
      i3 = f2(i3), e3 && (i3 = i3.filter(function(e4) {
        var i4 = Number(e4.getAttribute("data:realIndex"));
        return -1 === t5.w.globals.collapsedSeriesIndices.indexOf(i4);
      })), i3.sort(function(t6, e4) {
        var i4 = Number(t6.getAttribute("data:realIndex")), a4 = Number(e4.getAttribute("data:realIndex"));
        return a4 < i4 ? 1 : a4 > i4 ? -1 : 0;
      });
      var a3 = [];
      return i3.forEach(function(t6) {
        a3.push(t6.querySelector(".apexcharts-marker"));
      }), a3;
    } }, { key: "hasMarkers", value: function(t5) {
      return this.getElMarkers(t5).length > 0;
    } }, { key: "getPathFromPoint", value: function(t5, e3) {
      var i3 = Number(t5.getAttribute("cx")), a3 = Number(t5.getAttribute("cy")), s3 = t5.getAttribute("shape");
      return new Mi2(this.ctx).getMarkerPath(i3, a3, s3, e3);
    } }, { key: "getElBars", value: function() {
      return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series");
    } }, { key: "hasBars", value: function() {
      return this.getElBars().length > 0;
    } }, { key: "getHoverMarkerSize", value: function(t5) {
      var e3 = this.w, i3 = e3.config.markers.hover.size;
      return void 0 === i3 && (i3 = e3.globals.markers.size[t5] + e3.config.markers.hover.sizeOffset), i3;
    } }, { key: "toggleAllTooltipSeriesGroups", value: function(t5) {
      var e3 = this.w, i3 = this.ttCtx;
      0 === i3.allTooltipSeriesGroups.length && (i3.allTooltipSeriesGroups = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));
      for (var a3 = i3.allTooltipSeriesGroups, s3 = 0; s3 < a3.length; s3++) "enable" === t5 ? (a3[s3].classList.add("apexcharts-active"), a3[s3].style.display = e3.config.tooltip.items.display) : (a3[s3].classList.remove("apexcharts-active"), a3[s3].style.display = "none");
    } }]), t4;
  }();
  var ya = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.ctx = e3.ctx, this.ttCtx = e3, this.tooltipUtil = new va(e3);
    }
    return s2(t4, [{ key: "drawSeriesTexts", value: function(t5) {
      var e3 = t5.shared, i3 = void 0 === e3 || e3, a3 = t5.ttItems, s3 = t5.i, r3 = void 0 === s3 ? 0 : s3, n3 = t5.j, o3 = void 0 === n3 ? null : n3, l3 = t5.y1, h3 = t5.y2, c3 = t5.e, d3 = this.w;
      void 0 !== d3.config.tooltip.custom ? this.handleCustomTooltip({ i: r3, j: o3, y1: l3, y2: h3, w: d3 }) : this.toggleActiveInactiveSeries(i3, r3);
      var u3 = this.getValuesToPrint({ i: r3, j: o3 });
      this.printLabels({ i: r3, j: o3, values: u3, ttItems: a3, shared: i3, e: c3 });
      var g3 = this.ttCtx.getElTooltip();
      this.ttCtx.tooltipRect.ttWidth = g3.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = g3.getBoundingClientRect().height;
    } }, { key: "printLabels", value: function(t5) {
      var e3, i3 = this, a3 = t5.i, s3 = t5.j, r3 = t5.values, n3 = t5.ttItems, o3 = t5.shared, l3 = t5.e, h3 = this.w, c3 = [], d3 = function(t6) {
        return h3.globals.seriesGoals[t6] && h3.globals.seriesGoals[t6][s3] && Array.isArray(h3.globals.seriesGoals[t6][s3]);
      }, g3 = r3.xVal, p3 = r3.zVal, f3 = r3.xAxisTTVal, x3 = "", b3 = h3.globals.colors[a3];
      null !== s3 && h3.config.plotOptions.bar.distributed && (b3 = h3.globals.colors[s3]);
      for (var m3 = function(t6, r4) {
        var m4 = i3.getFormatters(a3);
        x3 = i3.getSeriesName({ fn: m4.yLbTitleFormatter, index: a3, seriesIndex: a3, j: s3 }), "treemap" === h3.config.chart.type && (x3 = m4.yLbTitleFormatter(String(h3.config.series[a3].data[s3].x), { series: h3.globals.series, seriesIndex: a3, dataPointIndex: s3, w: h3 }));
        var v4 = h3.config.tooltip.inverseOrder ? r4 : t6;
        if (h3.globals.axisCharts) {
          var y4 = function(t7) {
            var e4, i4, a4, r5;
            return h3.globals.isRangeData ? m4.yLbFormatter(null === (e4 = h3.globals.seriesRangeStart) || void 0 === e4 || null === (i4 = e4[t7]) || void 0 === i4 ? void 0 : i4[s3], { series: h3.globals.seriesRangeStart, seriesIndex: t7, dataPointIndex: s3, w: h3 }) + " - " + m4.yLbFormatter(null === (a4 = h3.globals.seriesRangeEnd) || void 0 === a4 || null === (r5 = a4[t7]) || void 0 === r5 ? void 0 : r5[s3], { series: h3.globals.seriesRangeEnd, seriesIndex: t7, dataPointIndex: s3, w: h3 }) : m4.yLbFormatter(h3.globals.series[t7][s3], { series: h3.globals.series, seriesIndex: t7, dataPointIndex: s3, w: h3 });
          };
          if (o3) m4 = i3.getFormatters(v4), x3 = i3.getSeriesName({ fn: m4.yLbTitleFormatter, index: v4, seriesIndex: a3, j: s3 }), b3 = h3.globals.colors[v4], e3 = y4(v4), d3(v4) && (c3 = h3.globals.seriesGoals[v4][s3].map(function(t7) {
            return { attrs: t7, val: m4.yLbFormatter(t7.value, { seriesIndex: v4, dataPointIndex: s3, w: h3 }) };
          }));
          else {
            var w3, k3 = null == l3 || null === (w3 = l3.target) || void 0 === w3 ? void 0 : w3.getAttribute("fill");
            k3 && (-1 !== k3.indexOf("url") ? -1 !== k3.indexOf("Pattern") && (b3 = h3.globals.dom.baseEl.querySelector(k3.substr(4).slice(0, -1)).childNodes[0].getAttribute("stroke")) : b3 = k3), e3 = y4(a3), d3(a3) && Array.isArray(h3.globals.seriesGoals[a3][s3]) && (c3 = h3.globals.seriesGoals[a3][s3].map(function(t7) {
              return { attrs: t7, val: m4.yLbFormatter(t7.value, { seriesIndex: a3, dataPointIndex: s3, w: h3 }) };
            }));
          }
        }
        null === s3 && (e3 = m4.yLbFormatter(h3.globals.series[a3], u2(u2({}, h3), {}, { seriesIndex: a3, dataPointIndex: a3 }))), i3.DOMHandling({ i: a3, t: v4, j: s3, ttItems: n3, values: { val: e3, goalVals: c3, xVal: g3, xAxisTTVal: f3, zVal: p3 }, seriesName: x3, shared: o3, pColor: b3 });
      }, v3 = 0, y3 = h3.globals.series.length - 1; v3 < h3.globals.series.length; v3++, y3--) m3(v3, y3);
    } }, { key: "getFormatters", value: function(t5) {
      var e3, i3 = this.w, a3 = i3.globals.yLabelFormatters[t5];
      return void 0 !== i3.globals.ttVal ? Array.isArray(i3.globals.ttVal) ? (a3 = i3.globals.ttVal[t5] && i3.globals.ttVal[t5].formatter, e3 = i3.globals.ttVal[t5] && i3.globals.ttVal[t5].title && i3.globals.ttVal[t5].title.formatter) : (a3 = i3.globals.ttVal.formatter, "function" == typeof i3.globals.ttVal.title.formatter && (e3 = i3.globals.ttVal.title.formatter)) : e3 = i3.config.tooltip.y.title.formatter, "function" != typeof a3 && (a3 = i3.globals.yLabelFormatters[0] ? i3.globals.yLabelFormatters[0] : function(t6) {
        return t6;
      }), "function" != typeof e3 && (e3 = function(t6) {
        return t6 ? t6 + ": " : "";
      }), { yLbFormatter: a3, yLbTitleFormatter: e3 };
    } }, { key: "getSeriesName", value: function(t5) {
      var e3 = t5.fn, i3 = t5.index, a3 = t5.seriesIndex, s3 = t5.j, r3 = this.w;
      return e3(String(r3.globals.seriesNames[i3]), { series: r3.globals.series, seriesIndex: a3, dataPointIndex: s3, w: r3 });
    } }, { key: "DOMHandling", value: function(t5) {
      t5.i;
      var e3 = t5.t, i3 = t5.j, a3 = t5.ttItems, s3 = t5.values, r3 = t5.seriesName, n3 = t5.shared, o3 = t5.pColor, l3 = this.w, h3 = this.ttCtx, c3 = s3.val, d3 = s3.goalVals, u3 = s3.xVal, g3 = s3.xAxisTTVal, p3 = s3.zVal, f3 = null;
      f3 = a3[e3].children, l3.config.tooltip.fillSeriesColor && (a3[e3].style.backgroundColor = o3, f3[0].style.display = "none"), h3.showTooltipTitle && (null === h3.tooltipTitle && (h3.tooltipTitle = l3.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), h3.tooltipTitle.innerHTML = u3), h3.isXAxisTooltipEnabled && (h3.xaxisTooltipText.innerHTML = "" !== g3 ? g3 : u3);
      var x3 = a3[e3].querySelector(".apexcharts-tooltip-text-y-label");
      x3 && (x3.innerHTML = r3 || "");
      var b3 = a3[e3].querySelector(".apexcharts-tooltip-text-y-value");
      b3 && (b3.innerHTML = void 0 !== c3 ? c3 : ""), f3[0] && f3[0].classList.contains("apexcharts-tooltip-marker") && (l3.config.tooltip.marker.fillColors && Array.isArray(l3.config.tooltip.marker.fillColors) && (o3 = l3.config.tooltip.marker.fillColors[e3]), l3.config.tooltip.fillSeriesColor ? f3[0].style.backgroundColor = o3 : f3[0].style.color = o3), l3.config.tooltip.marker.show || (f3[0].style.display = "none");
      var m3 = a3[e3].querySelector(".apexcharts-tooltip-text-goals-label"), v3 = a3[e3].querySelector(".apexcharts-tooltip-text-goals-value");
      if (d3.length && l3.globals.seriesGoals[e3]) {
        var y3 = function() {
          var t6 = "<div>", e4 = "<div>";
          d3.forEach(function(i4, a4) {
            t6 += ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(i4.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(i4.attrs.name, "</div>"), e4 += "<div>".concat(i4.val, "</div>");
          }), m3.innerHTML = t6 + "</div>", v3.innerHTML = e4 + "</div>";
        };
        n3 ? l3.globals.seriesGoals[e3][i3] && Array.isArray(l3.globals.seriesGoals[e3][i3]) ? y3() : (m3.innerHTML = "", v3.innerHTML = "") : y3();
      } else m3.innerHTML = "", v3.innerHTML = "";
      null !== p3 && (a3[e3].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = l3.config.tooltip.z.title, a3[e3].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== p3 ? p3 : "");
      if (n3 && f3[0]) {
        if (l3.config.tooltip.hideEmptySeries) {
          var w3 = a3[e3].querySelector(".apexcharts-tooltip-marker"), k3 = a3[e3].querySelector(".apexcharts-tooltip-text");
          0 == parseFloat(c3) ? (w3.style.display = "none", k3.style.display = "none") : (w3.style.display = "block", k3.style.display = "block");
        }
        null == c3 || l3.globals.ancillaryCollapsedSeriesIndices.indexOf(e3) > -1 || l3.globals.collapsedSeriesIndices.indexOf(e3) > -1 || Array.isArray(h3.tConfig.enabledOnSeries) && -1 === h3.tConfig.enabledOnSeries.indexOf(e3) ? f3[0].parentNode.style.display = "none" : f3[0].parentNode.style.display = l3.config.tooltip.items.display;
      } else Array.isArray(h3.tConfig.enabledOnSeries) && -1 === h3.tConfig.enabledOnSeries.indexOf(e3) && (f3[0].parentNode.style.display = "none");
    } }, { key: "toggleActiveInactiveSeries", value: function(t5, e3) {
      var i3 = this.w;
      if (t5) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
      else {
        this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
        var a3 = i3.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group-".concat(e3));
        a3 && (a3.classList.add("apexcharts-active"), a3.style.display = i3.config.tooltip.items.display);
      }
    } }, { key: "getValuesToPrint", value: function(t5) {
      var e3 = t5.i, i3 = t5.j, a3 = this.w, s3 = this.ctx.series.filteredSeriesX(), r3 = "", n3 = "", o3 = null, l3 = null, h3 = { series: a3.globals.series, seriesIndex: e3, dataPointIndex: i3, w: a3 }, c3 = a3.globals.ttZFormatter;
      null === i3 ? l3 = a3.globals.series[e3] : a3.globals.isXNumeric && "treemap" !== a3.config.chart.type ? (r3 = s3[e3][i3], 0 === s3[e3].length && (r3 = s3[this.tooltipUtil.getFirstActiveXArray(s3)][i3])) : r3 = new $i2(this.ctx).isFormatXY() ? void 0 !== a3.config.series[e3].data[i3] ? a3.config.series[e3].data[i3].x : "" : void 0 !== a3.globals.labels[i3] ? a3.globals.labels[i3] : "";
      var d3 = r3;
      a3.globals.isXNumeric && "datetime" === a3.config.xaxis.type ? r3 = new Xi2(this.ctx).xLabelFormat(a3.globals.ttKeyFormatter, d3, d3, { i: void 0, dateFormatter: new zi2(this.ctx).formatDate, w: this.w }) : r3 = a3.globals.isBarHorizontal ? a3.globals.yLabelFormatters[0](d3, h3) : a3.globals.xLabelFormatter(d3, h3);
      return void 0 !== a3.config.tooltip.x.formatter && (r3 = a3.globals.ttKeyFormatter(d3, h3)), a3.globals.seriesZ.length > 0 && a3.globals.seriesZ[e3].length > 0 && (o3 = c3(a3.globals.seriesZ[e3][i3], a3)), n3 = "function" == typeof a3.config.xaxis.tooltip.formatter ? a3.globals.xaxisTooltipFormatter(d3, h3) : r3, { val: Array.isArray(l3) ? l3.join(" ") : l3, xVal: Array.isArray(r3) ? r3.join(" ") : r3, xAxisTTVal: Array.isArray(n3) ? n3.join(" ") : n3, zVal: o3 };
    } }, { key: "handleCustomTooltip", value: function(t5) {
      var e3 = t5.i, i3 = t5.j, a3 = t5.y1, s3 = t5.y2, r3 = t5.w, n3 = this.ttCtx.getElTooltip(), o3 = r3.config.tooltip.custom;
      Array.isArray(o3) && o3[e3] && (o3 = o3[e3]);
      var l3 = o3({ ctx: this.ctx, series: r3.globals.series, seriesIndex: e3, dataPointIndex: i3, y1: a3, y2: s3, w: r3 });
      "string" == typeof l3 || "number" == typeof l3 ? n3.innerHTML = l3 : (l3 instanceof Element || "string" == typeof l3.nodeName) && (n3.innerHTML = "", n3.appendChild(l3.cloneNode(true)));
    } }]), t4;
  }();
  var wa = function() {
    function t4(e3) {
      i2(this, t4), this.ttCtx = e3, this.ctx = e3.ctx, this.w = e3.w;
    }
    return s2(t4, [{ key: "moveXCrosshairs", value: function(t5) {
      var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i3 = this.ttCtx, a3 = this.w, s3 = i3.getElXCrosshairs(), r3 = t5 - i3.xcrosshairsWidth / 2, n3 = a3.globals.labels.slice().length;
      if (null !== e3 && (r3 = a3.globals.gridWidth / n3 * e3), null === s3 || a3.globals.isBarHorizontal || (s3.setAttribute("x", r3), s3.setAttribute("x1", r3), s3.setAttribute("x2", r3), s3.setAttribute("y2", a3.globals.gridHeight), s3.classList.add("apexcharts-active")), r3 < 0 && (r3 = 0), r3 > a3.globals.gridWidth && (r3 = a3.globals.gridWidth), i3.isXAxisTooltipEnabled) {
        var o3 = r3;
        "tickWidth" !== a3.config.xaxis.crosshairs.width && "barWidth" !== a3.config.xaxis.crosshairs.width || (o3 = r3 + i3.xcrosshairsWidth / 2), this.moveXAxisTooltip(o3);
      }
    } }, { key: "moveYCrosshairs", value: function(t5) {
      var e3 = this.ttCtx;
      null !== e3.ycrosshairs && Mi2.setAttrs(e3.ycrosshairs, { y1: t5, y2: t5 }), null !== e3.ycrosshairsHidden && Mi2.setAttrs(e3.ycrosshairsHidden, { y1: t5, y2: t5 });
    } }, { key: "moveXAxisTooltip", value: function(t5) {
      var e3 = this.w, i3 = this.ttCtx;
      if (null !== i3.xaxisTooltip && 0 !== i3.xcrosshairsWidth) {
        i3.xaxisTooltip.classList.add("apexcharts-active");
        var a3 = i3.xaxisOffY + e3.config.xaxis.tooltip.offsetY + e3.globals.translateY + 1 + e3.config.xaxis.offsetY;
        if (t5 -= i3.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t5)) {
          t5 += e3.globals.translateX;
          var s3;
          s3 = new Mi2(this.ctx).getTextRects(i3.xaxisTooltipText.innerHTML), i3.xaxisTooltipText.style.minWidth = s3.width + "px", i3.xaxisTooltip.style.left = t5 + "px", i3.xaxisTooltip.style.top = a3 + "px";
        }
      }
    } }, { key: "moveYAxisTooltip", value: function(t5) {
      var e3 = this.w, i3 = this.ttCtx;
      null === i3.yaxisTTEls && (i3.yaxisTTEls = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
      var a3 = parseInt(i3.ycrosshairsHidden.getAttribute("y1"), 10), s3 = e3.globals.translateY + a3, r3 = i3.yaxisTTEls[t5].getBoundingClientRect(), n3 = r3.height, o3 = e3.globals.translateYAxisX[t5] - 2;
      e3.config.yaxis[t5].opposite && (o3 -= r3.width), s3 -= n3 / 2, -1 === e3.globals.ignoreYAxisIndexes.indexOf(t5) && s3 > 0 && s3 < e3.globals.gridHeight ? (i3.yaxisTTEls[t5].classList.add("apexcharts-active"), i3.yaxisTTEls[t5].style.top = s3 + "px", i3.yaxisTTEls[t5].style.left = o3 + e3.config.yaxis[t5].tooltip.offsetX + "px") : i3.yaxisTTEls[t5].classList.remove("apexcharts-active");
    } }, { key: "moveTooltip", value: function(t5, e3) {
      var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = this.w, s3 = this.ttCtx, r3 = s3.getElTooltip(), n3 = s3.tooltipRect, o3 = null !== i3 ? parseFloat(i3) : 1, l3 = parseFloat(t5) + o3 + 5, h3 = parseFloat(e3) + o3 / 2;
      if (l3 > a3.globals.gridWidth / 2 && (l3 = l3 - n3.ttWidth - o3 - 10), l3 > a3.globals.gridWidth - n3.ttWidth - 10 && (l3 = a3.globals.gridWidth - n3.ttWidth), l3 < -20 && (l3 = -20), a3.config.tooltip.followCursor) {
        var c3 = s3.getElGrid().getBoundingClientRect();
        (l3 = s3.e.clientX - c3.left) > a3.globals.gridWidth / 2 && (l3 -= s3.tooltipRect.ttWidth), (h3 = s3.e.clientY + a3.globals.translateY - c3.top) > a3.globals.gridHeight / 2 && (h3 -= s3.tooltipRect.ttHeight);
      } else a3.globals.isBarHorizontal || n3.ttHeight / 2 + h3 > a3.globals.gridHeight && (h3 = a3.globals.gridHeight - n3.ttHeight + a3.globals.translateY);
      isNaN(l3) || (l3 += a3.globals.translateX, r3.style.left = l3 + "px", r3.style.top = h3 + "px");
    } }, { key: "moveMarkers", value: function(t5, e3) {
      var i3 = this.w, a3 = this.ttCtx;
      if (i3.globals.markers.size[t5] > 0) for (var s3 = i3.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t5, "'] .apexcharts-marker")), r3 = 0; r3 < s3.length; r3++) parseInt(s3[r3].getAttribute("rel"), 10) === e3 && (a3.marker.resetPointsSize(), a3.marker.enlargeCurrentPoint(e3, s3[r3]));
      else a3.marker.resetPointsSize(), this.moveDynamicPointOnHover(e3, t5);
    } }, { key: "moveDynamicPointOnHover", value: function(t5, e3) {
      var i3, a3, s3, r3, n3 = this.w, o3 = this.ttCtx, l3 = new Mi2(this.ctx), h3 = n3.globals.pointsArray, c3 = o3.tooltipUtil.getHoverMarkerSize(e3), d3 = n3.config.series[e3].type;
      if (!d3 || "column" !== d3 && "candlestick" !== d3 && "boxPlot" !== d3) {
        s3 = null === (i3 = h3[e3][t5]) || void 0 === i3 ? void 0 : i3[0], r3 = (null === (a3 = h3[e3][t5]) || void 0 === a3 ? void 0 : a3[1]) || 0;
        var u3 = n3.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e3, "'] .apexcharts-series-markers path"));
        if (u3 && r3 < n3.globals.gridHeight && r3 > 0) {
          var g3 = u3.getAttribute("shape"), p3 = l3.getMarkerPath(s3, r3, g3, 1.5 * c3);
          u3.setAttribute("d", p3);
        }
        this.moveXCrosshairs(s3), o3.fixedTooltip || this.moveTooltip(s3, r3, c3);
      }
    } }, { key: "moveDynamicPointsOnHover", value: function(t5) {
      var e3, i3 = this.ttCtx, a3 = i3.w, s3 = 0, r3 = 0, n3 = a3.globals.pointsArray, o3 = new Zi2(this.ctx), l3 = new Mi2(this.ctx);
      e3 = o3.getActiveConfigSeriesIndex("asc", ["line", "area", "scatter", "bubble"]);
      var h3 = i3.tooltipUtil.getHoverMarkerSize(e3);
      if (n3[e3] && (s3 = n3[e3][t5][0], r3 = n3[e3][t5][1]), !isNaN(s3)) {
        var c3 = i3.tooltipUtil.getAllMarkers();
        if (c3.length) for (var d3 = 0; d3 < a3.globals.series.length; d3++) {
          var u3 = n3[d3];
          if (a3.globals.comboCharts && void 0 === u3 && c3.splice(d3, 0, null), u3 && u3.length) {
            var g3 = n3[d3][t5][1], p3 = void 0;
            c3[d3].setAttribute("cx", s3);
            var f3 = c3[d3].getAttribute("shape");
            if ("rangeArea" === a3.config.chart.type && !a3.globals.comboCharts) {
              var x3 = t5 + a3.globals.series[d3].length;
              p3 = n3[d3][x3][1], g3 -= Math.abs(g3 - p3) / 2;
            }
            if (null !== g3 && !isNaN(g3) && g3 < a3.globals.gridHeight + h3 && g3 + h3 > 0) {
              var b3 = l3.getMarkerPath(s3, g3, f3, h3);
              c3[d3].setAttribute("d", b3);
            } else c3[d3].setAttribute("d", "");
          }
        }
        this.moveXCrosshairs(s3), i3.fixedTooltip || this.moveTooltip(s3, r3 || a3.globals.gridHeight, h3);
      }
    } }, { key: "moveStickyTooltipOverBars", value: function(t5, e3) {
      var i3 = this.w, a3 = this.ttCtx, s3 = i3.globals.columnSeries ? i3.globals.columnSeries.length : i3.globals.series.length;
      i3.config.chart.stacked && (s3 = i3.globals.barGroups.length);
      var r3 = s3 >= 2 && s3 % 2 == 0 ? Math.floor(s3 / 2) : Math.floor(s3 / 2) + 1;
      i3.globals.isBarHorizontal && (r3 = new Zi2(this.ctx).getActiveConfigSeriesIndex("desc") + 1);
      var n3 = i3.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(r3, "'] path[j='").concat(t5, "'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(r3, "'] path[j='").concat(t5, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(r3, "'] path[j='").concat(t5, "'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(r3, "'] path[j='").concat(t5, "']"));
      n3 || "number" != typeof e3 || (n3 = i3.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[data\\:realIndex='".concat(e3, "'] path[j='").concat(t5, "'],\n        .apexcharts-candlestick-series .apexcharts-series[data\\:realIndex='").concat(e3, "'] path[j='").concat(t5, "'],\n        .apexcharts-boxPlot-series .apexcharts-series[data\\:realIndex='").concat(e3, "'] path[j='").concat(t5, "'],\n        .apexcharts-rangebar-series .apexcharts-series[data\\:realIndex='").concat(e3, "'] path[j='").concat(t5, "']")));
      var o3 = n3 ? parseFloat(n3.getAttribute("cx")) : 0, l3 = n3 ? parseFloat(n3.getAttribute("cy")) : 0, h3 = n3 ? parseFloat(n3.getAttribute("barWidth")) : 0, c3 = a3.getElGrid().getBoundingClientRect(), d3 = n3 && (n3.classList.contains("apexcharts-candlestick-area") || n3.classList.contains("apexcharts-boxPlot-area"));
      i3.globals.isXNumeric ? (n3 && !d3 && (o3 -= s3 % 2 != 0 ? h3 / 2 : 0), n3 && d3 && (o3 -= h3 / 2)) : i3.globals.isBarHorizontal || (o3 = a3.xAxisTicksPositions[t5 - 1] + a3.dataPointsDividedWidth / 2, isNaN(o3) && (o3 = a3.xAxisTicksPositions[t5] - a3.dataPointsDividedWidth / 2)), i3.globals.isBarHorizontal ? l3 -= a3.tooltipRect.ttHeight : i3.config.tooltip.followCursor ? l3 = a3.e.clientY - c3.top - a3.tooltipRect.ttHeight / 2 : l3 + a3.tooltipRect.ttHeight + 15 > i3.globals.gridHeight && (l3 = i3.globals.gridHeight), i3.globals.isBarHorizontal || this.moveXCrosshairs(o3), a3.fixedTooltip || this.moveTooltip(o3, l3 || i3.globals.gridHeight);
    } }]), t4;
  }();
  var ka = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.ttCtx = e3, this.ctx = e3.ctx, this.tooltipPosition = new wa(e3);
    }
    return s2(t4, [{ key: "drawDynamicPoints", value: function() {
      var t5 = this.w, e3 = new Mi2(this.ctx), i3 = new Vi2(this.ctx), a3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
      a3 = f2(a3), t5.config.chart.stacked && a3.sort(function(t6, e4) {
        return parseFloat(t6.getAttribute("data:realIndex")) - parseFloat(e4.getAttribute("data:realIndex"));
      });
      for (var s3 = 0; s3 < a3.length; s3++) {
        var r3 = a3[s3].querySelector(".apexcharts-series-markers-wrap");
        if (null !== r3) {
          var n3 = void 0, o3 = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
          "line" !== t5.config.chart.type && "area" !== t5.config.chart.type || t5.globals.comboCharts || t5.config.tooltip.intersect || (o3 += " no-pointer-events");
          var l3 = i3.getMarkerConfig({ cssClass: o3, seriesIndex: Number(r3.getAttribute("data:realIndex")) });
          (n3 = e3.drawMarker(0, 0, l3)).node.setAttribute("default-marker-size", 0);
          var h3 = document.createElementNS(t5.globals.SVGNS, "g");
          h3.classList.add("apexcharts-series-markers"), h3.appendChild(n3.node), r3.appendChild(h3);
        }
      }
    } }, { key: "enlargeCurrentPoint", value: function(t5, e3) {
      var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s3 = this.w;
      "bubble" !== s3.config.chart.type && this.newPointSize(t5, e3);
      var r3 = e3.getAttribute("cx"), n3 = e3.getAttribute("cy");
      if (null !== i3 && null !== a3 && (r3 = i3, n3 = a3), this.tooltipPosition.moveXCrosshairs(r3), !this.fixedTooltip) {
        if ("radar" === s3.config.chart.type) {
          var o3 = this.ttCtx.getElGrid().getBoundingClientRect();
          r3 = this.ttCtx.e.clientX - o3.left;
        }
        this.tooltipPosition.moveTooltip(r3, n3, s3.config.markers.hover.size);
      }
    } }, { key: "enlargePoints", value: function(t5) {
      for (var e3 = this.w, i3 = this, a3 = this.ttCtx, s3 = t5, r3 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), n3 = e3.config.markers.hover.size, o3 = 0; o3 < r3.length; o3++) {
        var l3 = r3[o3].getAttribute("rel"), h3 = r3[o3].getAttribute("index");
        if (void 0 === n3 && (n3 = e3.globals.markers.size[h3] + e3.config.markers.hover.sizeOffset), s3 === parseInt(l3, 10)) {
          i3.newPointSize(s3, r3[o3]);
          var c3 = r3[o3].getAttribute("cx"), d3 = r3[o3].getAttribute("cy");
          i3.tooltipPosition.moveXCrosshairs(c3), a3.fixedTooltip || i3.tooltipPosition.moveTooltip(c3, d3, n3);
        } else i3.oldPointSize(r3[o3]);
      }
    } }, { key: "newPointSize", value: function(t5, e3) {
      var i3 = this.w, a3 = i3.config.markers.hover.size, s3 = 0 === t5 ? e3.parentNode.firstChild : e3.parentNode.lastChild;
      if ("0" !== s3.getAttribute("default-marker-size")) {
        var r3 = parseInt(s3.getAttribute("index"), 10);
        void 0 === a3 && (a3 = i3.globals.markers.size[r3] + i3.config.markers.hover.sizeOffset), a3 < 0 && (a3 = 0);
        var n3 = this.ttCtx.tooltipUtil.getPathFromPoint(e3, a3);
        e3.setAttribute("d", n3);
      }
    } }, { key: "oldPointSize", value: function(t5) {
      var e3 = parseFloat(t5.getAttribute("default-marker-size")), i3 = this.ttCtx.tooltipUtil.getPathFromPoint(t5, e3);
      t5.setAttribute("d", i3);
    } }, { key: "resetPointsSize", value: function() {
      for (var t5 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e3 = 0; e3 < t5.length; e3++) {
        var i3 = parseFloat(t5[e3].getAttribute("default-marker-size"));
        if (v2.isNumber(i3) && i3 > 0) {
          var a3 = this.ttCtx.tooltipUtil.getPathFromPoint(t5[e3], i3);
          t5[e3].setAttribute("d", a3);
        } else t5[e3].setAttribute("d", "M0,0");
      }
    } }]), t4;
  }();
  var Aa = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w;
      var a3 = this.w;
      this.ttCtx = e3, this.isVerticalGroupedRangeBar = !a3.globals.isBarHorizontal && "rangeBar" === a3.config.chart.type && a3.config.plotOptions.bar.rangeBarGroupRows;
    }
    return s2(t4, [{ key: "getAttr", value: function(t5, e3) {
      return parseFloat(t5.target.getAttribute(e3));
    } }, { key: "handleHeatTreeTooltip", value: function(t5) {
      var e3 = t5.e, i3 = t5.opt, a3 = t5.x, s3 = t5.y, r3 = t5.type, n3 = this.ttCtx, o3 = this.w;
      if (e3.target.classList.contains("apexcharts-".concat(r3, "-rect"))) {
        var l3 = this.getAttr(e3, "i"), h3 = this.getAttr(e3, "j"), c3 = this.getAttr(e3, "cx"), d3 = this.getAttr(e3, "cy"), u3 = this.getAttr(e3, "width"), g3 = this.getAttr(e3, "height");
        if (n3.tooltipLabels.drawSeriesTexts({ ttItems: i3.ttItems, i: l3, j: h3, shared: false, e: e3 }), o3.globals.capturedSeriesIndex = l3, o3.globals.capturedDataPointIndex = h3, a3 = c3 + n3.tooltipRect.ttWidth / 2 + u3, s3 = d3 + n3.tooltipRect.ttHeight / 2 - g3 / 2, n3.tooltipPosition.moveXCrosshairs(c3 + u3 / 2), a3 > o3.globals.gridWidth / 2 && (a3 = c3 - n3.tooltipRect.ttWidth / 2 + u3), n3.w.config.tooltip.followCursor) {
          var p3 = o3.globals.dom.elWrap.getBoundingClientRect();
          a3 = o3.globals.clientX - p3.left - (a3 > o3.globals.gridWidth / 2 ? n3.tooltipRect.ttWidth : 0), s3 = o3.globals.clientY - p3.top - (s3 > o3.globals.gridHeight / 2 ? n3.tooltipRect.ttHeight : 0);
        }
      }
      return { x: a3, y: s3 };
    } }, { key: "handleMarkerTooltip", value: function(t5) {
      var e3, i3, a3 = t5.e, s3 = t5.opt, r3 = t5.x, n3 = t5.y, o3 = this.w, l3 = this.ttCtx;
      if (a3.target.classList.contains("apexcharts-marker")) {
        var h3 = parseInt(s3.paths.getAttribute("cx"), 10), c3 = parseInt(s3.paths.getAttribute("cy"), 10), d3 = parseFloat(s3.paths.getAttribute("val"));
        if (i3 = parseInt(s3.paths.getAttribute("rel"), 10), e3 = parseInt(s3.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1, l3.intersect) {
          var u3 = v2.findAncestor(s3.paths, "apexcharts-series");
          u3 && (e3 = parseInt(u3.getAttribute("data:realIndex"), 10));
        }
        if (l3.tooltipLabels.drawSeriesTexts({ ttItems: s3.ttItems, i: e3, j: i3, shared: !l3.showOnIntersect && o3.config.tooltip.shared, e: a3 }), "mouseup" === a3.type && l3.markerClick(a3, e3, i3), o3.globals.capturedSeriesIndex = e3, o3.globals.capturedDataPointIndex = i3, r3 = h3, n3 = c3 + o3.globals.translateY - 1.4 * l3.tooltipRect.ttHeight, l3.w.config.tooltip.followCursor) {
          var g3 = l3.getElGrid().getBoundingClientRect();
          n3 = l3.e.clientY + o3.globals.translateY - g3.top;
        }
        d3 < 0 && (n3 = c3), l3.marker.enlargeCurrentPoint(i3, s3.paths, r3, n3);
      }
      return { x: r3, y: n3 };
    } }, { key: "handleBarTooltip", value: function(t5) {
      var e3, i3, a3 = t5.e, s3 = t5.opt, r3 = this.w, n3 = this.ttCtx, o3 = n3.getElTooltip(), l3 = 0, h3 = 0, c3 = 0, d3 = this.getBarTooltipXY({ e: a3, opt: s3 });
      if (null !== d3.j || 0 !== d3.barHeight || 0 !== d3.barWidth) {
        e3 = d3.i;
        var u3 = d3.j;
        if (r3.globals.capturedSeriesIndex = e3, r3.globals.capturedDataPointIndex = u3, r3.globals.isBarHorizontal && n3.tooltipUtil.hasBars() || !r3.config.tooltip.shared ? (h3 = d3.x, c3 = d3.y, i3 = Array.isArray(r3.config.stroke.width) ? r3.config.stroke.width[e3] : r3.config.stroke.width, l3 = h3) : r3.globals.comboCharts || r3.config.tooltip.shared || (l3 /= 2), isNaN(c3) && (c3 = r3.globals.svgHeight - n3.tooltipRect.ttHeight), parseInt(s3.paths.parentNode.getAttribute("data:realIndex"), 10), h3 + n3.tooltipRect.ttWidth > r3.globals.gridWidth ? h3 -= n3.tooltipRect.ttWidth : h3 < 0 && (h3 = 0), n3.w.config.tooltip.followCursor) {
          var g3 = n3.getElGrid().getBoundingClientRect();
          c3 = n3.e.clientY - g3.top;
        }
        null === n3.tooltip && (n3.tooltip = r3.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), r3.config.tooltip.shared || (r3.globals.comboBarCount > 0 ? n3.tooltipPosition.moveXCrosshairs(l3 + i3 / 2) : n3.tooltipPosition.moveXCrosshairs(l3)), !n3.fixedTooltip && (!r3.config.tooltip.shared || r3.globals.isBarHorizontal && n3.tooltipUtil.hasBars()) && (c3 = c3 + r3.globals.translateY - n3.tooltipRect.ttHeight / 2, o3.style.left = h3 + r3.globals.translateX + "px", o3.style.top = c3 + "px");
      }
    } }, { key: "getBarTooltipXY", value: function(t5) {
      var e3 = this, i3 = t5.e, a3 = t5.opt, s3 = this.w, r3 = null, n3 = this.ttCtx, o3 = 0, l3 = 0, h3 = 0, c3 = 0, d3 = 0, u3 = i3.target.classList;
      if (u3.contains("apexcharts-bar-area") || u3.contains("apexcharts-candlestick-area") || u3.contains("apexcharts-boxPlot-area") || u3.contains("apexcharts-rangebar-area")) {
        var g3 = i3.target, p3 = g3.getBoundingClientRect(), f3 = a3.elGrid.getBoundingClientRect(), x3 = p3.height;
        d3 = p3.height;
        var b3 = p3.width, m3 = parseInt(g3.getAttribute("cx"), 10), v3 = parseInt(g3.getAttribute("cy"), 10);
        c3 = parseFloat(g3.getAttribute("barWidth"));
        var y3 = "touchmove" === i3.type ? i3.touches[0].clientX : i3.clientX;
        r3 = parseInt(g3.getAttribute("j"), 10), o3 = parseInt(g3.parentNode.getAttribute("rel"), 10) - 1;
        var w3 = g3.getAttribute("data-range-y1"), k3 = g3.getAttribute("data-range-y2");
        s3.globals.comboCharts && (o3 = parseInt(g3.parentNode.getAttribute("data:realIndex"), 10));
        var A3 = function(t6) {
          return s3.globals.isXNumeric ? m3 - b3 / 2 : e3.isVerticalGroupedRangeBar ? m3 + b3 / 2 : m3 - n3.dataPointsDividedWidth + b3 / 2;
        }, C3 = function() {
          return v3 - n3.dataPointsDividedHeight + x3 / 2 - n3.tooltipRect.ttHeight / 2;
        };
        n3.tooltipLabels.drawSeriesTexts({ ttItems: a3.ttItems, i: o3, j: r3, y1: w3 ? parseInt(w3, 10) : null, y2: k3 ? parseInt(k3, 10) : null, shared: !n3.showOnIntersect && s3.config.tooltip.shared, e: i3 }), s3.config.tooltip.followCursor ? s3.globals.isBarHorizontal ? (l3 = y3 - f3.left + 15, h3 = C3()) : (l3 = A3(), h3 = i3.clientY - f3.top - n3.tooltipRect.ttHeight / 2 - 15) : s3.globals.isBarHorizontal ? ((l3 = m3) < n3.xyRatios.baseLineInvertedY && (l3 = m3 - n3.tooltipRect.ttWidth), h3 = C3()) : (l3 = A3(), h3 = v3);
      }
      return { x: l3, y: h3, barHeight: d3, barWidth: c3, i: o3, j: r3 };
    } }]), t4;
  }();
  var Ca = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.ttCtx = e3;
    }
    return s2(t4, [{ key: "drawXaxisTooltip", value: function() {
      var t5 = this.w, e3 = this.ttCtx, i3 = "bottom" === t5.config.xaxis.position;
      e3.xaxisOffY = i3 ? t5.globals.gridHeight + 1 : -t5.globals.xAxisHeight - t5.config.xaxis.axisTicks.height + 3;
      var a3 = i3 ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top", s3 = t5.globals.dom.elWrap;
      e3.isXAxisTooltipEnabled && (null === t5.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e3.xaxisTooltip = document.createElement("div"), e3.xaxisTooltip.setAttribute("class", a3 + " apexcharts-theme-" + t5.config.tooltip.theme), s3.appendChild(e3.xaxisTooltip), e3.xaxisTooltipText = document.createElement("div"), e3.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e3.xaxisTooltipText.style.fontFamily = t5.config.xaxis.tooltip.style.fontFamily || t5.config.chart.fontFamily, e3.xaxisTooltipText.style.fontSize = t5.config.xaxis.tooltip.style.fontSize, e3.xaxisTooltip.appendChild(e3.xaxisTooltipText)));
    } }, { key: "drawYaxisTooltip", value: function() {
      for (var t5 = this.w, e3 = this.ttCtx, i3 = 0; i3 < t5.config.yaxis.length; i3++) {
        var a3 = t5.config.yaxis[i3].opposite || t5.config.yaxis[i3].crosshairs.opposite;
        e3.yaxisOffX = a3 ? t5.globals.gridWidth + 1 : 1;
        var s3 = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i3, a3 ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left"), r3 = t5.globals.dom.elWrap;
        null === t5.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i3)) && (e3.yaxisTooltip = document.createElement("div"), e3.yaxisTooltip.setAttribute("class", s3 + " apexcharts-theme-" + t5.config.tooltip.theme), r3.appendChild(e3.yaxisTooltip), 0 === i3 && (e3.yaxisTooltipText = []), e3.yaxisTooltipText[i3] = document.createElement("div"), e3.yaxisTooltipText[i3].classList.add("apexcharts-yaxistooltip-text"), e3.yaxisTooltip.appendChild(e3.yaxisTooltipText[i3]));
      }
    } }, { key: "setXCrosshairWidth", value: function() {
      var t5 = this.w, e3 = this.ttCtx, i3 = e3.getElXCrosshairs();
      if (e3.xcrosshairsWidth = parseInt(t5.config.xaxis.crosshairs.width, 10), t5.globals.comboCharts) {
        var a3 = t5.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
        if (null !== a3 && "barWidth" === t5.config.xaxis.crosshairs.width) {
          var s3 = parseFloat(a3.getAttribute("barWidth"));
          e3.xcrosshairsWidth = s3;
        } else if ("tickWidth" === t5.config.xaxis.crosshairs.width) {
          var r3 = t5.globals.labels.length;
          e3.xcrosshairsWidth = t5.globals.gridWidth / r3;
        }
      } else if ("tickWidth" === t5.config.xaxis.crosshairs.width) {
        var n3 = t5.globals.labels.length;
        e3.xcrosshairsWidth = t5.globals.gridWidth / n3;
      } else if ("barWidth" === t5.config.xaxis.crosshairs.width) {
        var o3 = t5.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
        if (null !== o3) {
          var l3 = parseFloat(o3.getAttribute("barWidth"));
          e3.xcrosshairsWidth = l3;
        } else e3.xcrosshairsWidth = 1;
      }
      t5.globals.isBarHorizontal && (e3.xcrosshairsWidth = 0), null !== i3 && e3.xcrosshairsWidth > 0 && i3.setAttribute("width", e3.xcrosshairsWidth);
    } }, { key: "handleYCrosshair", value: function() {
      var t5 = this.w, e3 = this.ttCtx;
      e3.ycrosshairs = t5.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e3.ycrosshairsHidden = t5.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden");
    } }, { key: "drawYaxisTooltipText", value: function(t5, e3, i3) {
      var a3 = this.ttCtx, s3 = this.w, r3 = s3.globals, n3 = r3.seriesYAxisMap[t5];
      if (a3.yaxisTooltips[t5] && n3.length > 0) {
        var o3 = r3.yLabelFormatters[t5], l3 = a3.getElGrid().getBoundingClientRect(), h3 = n3[0], c3 = 0;
        i3.yRatio.length > 1 && (c3 = h3);
        var d3 = (e3 - l3.top) * i3.yRatio[c3], u3 = r3.maxYArr[h3] - r3.minYArr[h3], g3 = r3.minYArr[h3] + (u3 - d3);
        s3.config.yaxis[t5].reversed && (g3 = r3.maxYArr[h3] - (u3 - d3)), a3.tooltipPosition.moveYCrosshairs(e3 - l3.top), a3.yaxisTooltipText[t5].innerHTML = o3(g3), a3.tooltipPosition.moveYAxisTooltip(t5);
      }
    } }]), t4;
  }();
  var Sa = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
      var a3 = this.w;
      this.tConfig = a3.config.tooltip, this.tooltipUtil = new va(this), this.tooltipLabels = new ya(this), this.tooltipPosition = new wa(this), this.marker = new ka(this), this.intersect = new Aa(this), this.axesTooltip = new Ca(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !a3.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();
    }
    return s2(t4, [{ key: "getElTooltip", value: function(t5) {
      return t5 || (t5 = this), t5.w.globals.dom.baseEl ? t5.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip") : null;
    } }, { key: "getElXCrosshairs", value: function() {
      return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
    } }, { key: "getElGrid", value: function() {
      return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
    } }, { key: "drawTooltip", value: function(t5) {
      var e3 = this.w;
      this.xyRatios = t5, this.isXAxisTooltipEnabled = e3.config.xaxis.tooltip.enabled && e3.globals.axisCharts, this.yaxisTooltips = e3.config.yaxis.map(function(t6, i4) {
        return !!(t6.show && t6.tooltip.enabled && e3.globals.axisCharts);
      }), this.allTooltipSeriesGroups = [], e3.globals.axisCharts || (this.showTooltipTitle = false);
      var i3 = document.createElement("div");
      if (i3.classList.add("apexcharts-tooltip"), e3.config.tooltip.cssClass && i3.classList.add(e3.config.tooltip.cssClass), i3.classList.add("apexcharts-theme-".concat(this.tConfig.theme || "light")), e3.globals.dom.elWrap.appendChild(i3), e3.globals.axisCharts) {
        this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
        var a3 = new Qi2(this.ctx);
        this.xAxisTicksPositions = a3.getXAxisTicksPositions();
      }
      if (!e3.globals.comboCharts && !this.tConfig.intersect && "rangeBar" !== e3.config.chart.type || this.tConfig.shared || (this.showOnIntersect = true), 0 !== e3.config.markers.size && 0 !== e3.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e3.globals.collapsedSeries.length !== e3.globals.series.length) {
        this.dataPointsDividedHeight = e3.globals.gridHeight / e3.globals.dataPoints, this.dataPointsDividedWidth = e3.globals.gridWidth / e3.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e3.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i3.appendChild(this.tooltipTitle));
        var s3 = e3.globals.series.length;
        (e3.globals.xyCharts || e3.globals.comboCharts) && this.tConfig.shared && (s3 = this.showOnIntersect ? 1 : e3.globals.series.length), this.legendLabels = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"), this.ttItems = this.createTTElements(s3), this.addSVGEvents();
      }
    } }, { key: "createTTElements", value: function(t5) {
      for (var e3 = this, i3 = this.w, a3 = [], s3 = this.getElTooltip(), r3 = function(r4) {
        var n4 = document.createElement("div");
        n4.classList.add("apexcharts-tooltip-series-group", "apexcharts-tooltip-series-group-".concat(r4)), n4.style.order = i3.config.tooltip.inverseOrder ? t5 - r4 : r4 + 1;
        var o3 = document.createElement("span");
        o3.classList.add("apexcharts-tooltip-marker"), i3.config.tooltip.fillSeriesColor ? o3.style.backgroundColor = i3.globals.colors[r4] : o3.style.color = i3.globals.colors[r4];
        var l3 = i3.config.markers.shape, h3 = l3;
        Array.isArray(l3) && (h3 = l3[r4]), o3.setAttribute("shape", h3), n4.appendChild(o3);
        var c3 = document.createElement("div");
        c3.classList.add("apexcharts-tooltip-text"), c3.style.fontFamily = e3.tConfig.style.fontFamily || i3.config.chart.fontFamily, c3.style.fontSize = e3.tConfig.style.fontSize, ["y", "goals", "z"].forEach(function(t6) {
          var e4 = document.createElement("div");
          e4.classList.add("apexcharts-tooltip-".concat(t6, "-group"));
          var i4 = document.createElement("span");
          i4.classList.add("apexcharts-tooltip-text-".concat(t6, "-label")), e4.appendChild(i4);
          var a4 = document.createElement("span");
          a4.classList.add("apexcharts-tooltip-text-".concat(t6, "-value")), e4.appendChild(a4), c3.appendChild(e4);
        }), n4.appendChild(c3), s3.appendChild(n4), a3.push(n4);
      }, n3 = 0; n3 < t5; n3++) r3(n3);
      return a3;
    } }, { key: "addSVGEvents", value: function() {
      var t5 = this.w, e3 = t5.config.chart.type, i3 = this.getElTooltip(), a3 = !("bar" !== e3 && "candlestick" !== e3 && "boxPlot" !== e3 && "rangeBar" !== e3), s3 = "area" === e3 || "line" === e3 || "scatter" === e3 || "bubble" === e3 || "radar" === e3, r3 = t5.globals.dom.Paper.node, n3 = this.getElGrid();
      n3 && (this.seriesBound = n3.getBoundingClientRect());
      var o3, l3 = [], h3 = [], c3 = { hoverArea: r3, elGrid: n3, tooltipEl: i3, tooltipY: l3, tooltipX: h3, ttItems: this.ttItems };
      if (t5.globals.axisCharts && (s3 ? o3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : a3 ? o3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" !== e3 && "treemap" !== e3 || (o3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")), o3 && o3.length)) for (var d3 = 0; d3 < o3.length; d3++) l3.push(o3[d3].getAttribute("cy")), h3.push(o3[d3].getAttribute("cx"));
      if (t5.globals.xyCharts && !this.showOnIntersect || t5.globals.comboCharts && !this.showOnIntersect || a3 && this.tooltipUtil.hasBars() && this.tConfig.shared) this.addPathsEventListeners([r3], c3);
      else if (a3 && !t5.globals.comboCharts || s3 && this.showOnIntersect) this.addDatapointEventsListeners(c3);
      else if (!t5.globals.axisCharts || "heatmap" === e3 || "treemap" === e3) {
        var u3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
        this.addPathsEventListeners(u3, c3);
      }
      if (this.showOnIntersect) {
        var g3 = t5.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");
        g3.length > 0 && this.addPathsEventListeners(g3, c3), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c3);
      }
    } }, { key: "drawFixedTooltipRect", value: function() {
      var t5 = this.w, e3 = this.getElTooltip(), i3 = e3.getBoundingClientRect(), a3 = i3.width + 10, s3 = i3.height + 10, r3 = this.tConfig.fixed.offsetX, n3 = this.tConfig.fixed.offsetY, o3 = this.tConfig.fixed.position.toLowerCase();
      return o3.indexOf("right") > -1 && (r3 = r3 + t5.globals.svgWidth - a3 + 10), o3.indexOf("bottom") > -1 && (n3 = n3 + t5.globals.svgHeight - s3 - 10), e3.style.left = r3 + "px", e3.style.top = n3 + "px", { x: r3, y: n3, ttWidth: a3, ttHeight: s3 };
    } }, { key: "addDatapointEventsListeners", value: function(t5) {
      var e3 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");
      this.addPathsEventListeners(e3, t5);
    } }, { key: "addPathsEventListeners", value: function(t5, e3) {
      for (var i3 = this, a3 = function(a4) {
        var s4 = { paths: t5[a4], tooltipEl: e3.tooltipEl, tooltipY: e3.tooltipY, tooltipX: e3.tooltipX, elGrid: e3.elGrid, hoverArea: e3.hoverArea, ttItems: e3.ttItems };
        ["mousemove", "mouseup", "touchmove", "mouseout", "touchend"].map(function(e4) {
          return t5[a4].addEventListener(e4, i3.onSeriesHover.bind(i3, s4), { capture: false, passive: true });
        });
      }, s3 = 0; s3 < t5.length; s3++) a3(s3);
    } }, { key: "onSeriesHover", value: function(t5, e3) {
      var i3 = this, a3 = Date.now() - this.lastHoverTime;
      a3 >= 20 ? this.seriesHover(t5, e3) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function() {
        i3.seriesHover(t5, e3);
      }, 20 - a3));
    } }, { key: "seriesHover", value: function(t5, e3) {
      var i3 = this;
      this.lastHoverTime = Date.now();
      var a3 = [], s3 = this.w;
      s3.config.chart.group && (a3 = this.ctx.getGroupedCharts()), s3.globals.axisCharts && (s3.globals.minX === -1 / 0 && s3.globals.maxX === 1 / 0 || 0 === s3.globals.dataPoints) || (a3.length ? a3.forEach(function(a4) {
        var s4 = i3.getElTooltip(a4), r3 = { paths: t5.paths, tooltipEl: s4, tooltipY: t5.tooltipY, tooltipX: t5.tooltipX, elGrid: t5.elGrid, hoverArea: t5.hoverArea, ttItems: a4.w.globals.tooltip.ttItems };
        a4.w.globals.minX === i3.w.globals.minX && a4.w.globals.maxX === i3.w.globals.maxX && a4.w.globals.tooltip.seriesHoverByContext({ chartCtx: a4, ttCtx: a4.w.globals.tooltip, opt: r3, e: e3 });
      }) : this.seriesHoverByContext({ chartCtx: this.ctx, ttCtx: this.w.globals.tooltip, opt: t5, e: e3 }));
    } }, { key: "seriesHoverByContext", value: function(t5) {
      var e3 = t5.chartCtx, i3 = t5.ttCtx, a3 = t5.opt, s3 = t5.e, r3 = e3.w, n3 = this.getElTooltip(e3);
      if (n3) {
        if (i3.tooltipRect = { x: 0, y: 0, ttWidth: n3.getBoundingClientRect().width, ttHeight: n3.getBoundingClientRect().height }, i3.e = s3, i3.tooltipUtil.hasBars() && !r3.globals.comboCharts && !i3.isBarShared) {
          if (this.tConfig.onDatasetHover.highlightDataSeries) new Zi2(e3).toggleSeriesOnHover(s3, s3.target.parentNode);
        }
        r3.globals.axisCharts ? i3.axisChartsTooltips({ e: s3, opt: a3, tooltipRect: i3.tooltipRect }) : i3.nonAxisChartsTooltips({ e: s3, opt: a3, tooltipRect: i3.tooltipRect }), i3.fixedTooltip && i3.drawFixedTooltipRect();
      }
    } }, { key: "axisChartsTooltips", value: function(t5) {
      var e3, i3, a3 = t5.e, s3 = t5.opt, r3 = this.w, n3 = s3.elGrid.getBoundingClientRect(), o3 = "touchmove" === a3.type ? a3.touches[0].clientX : a3.clientX, l3 = "touchmove" === a3.type ? a3.touches[0].clientY : a3.clientY;
      if (this.clientY = l3, this.clientX = o3, r3.globals.capturedSeriesIndex = -1, r3.globals.capturedDataPointIndex = -1, l3 < n3.top || l3 > n3.top + n3.height) this.handleMouseOut(s3);
      else {
        if (Array.isArray(this.tConfig.enabledOnSeries) && !r3.config.tooltip.shared) {
          var h3 = parseInt(s3.paths.getAttribute("index"), 10);
          if (this.tConfig.enabledOnSeries.indexOf(h3) < 0) return void this.handleMouseOut(s3);
        }
        var c3 = this.getElTooltip(), d3 = this.getElXCrosshairs(), u3 = [];
        r3.config.chart.group && (u3 = this.ctx.getSyncedCharts());
        var g3 = r3.globals.xyCharts || "bar" === r3.config.chart.type && !r3.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r3.globals.comboCharts && this.tooltipUtil.hasBars();
        if ("mousemove" === a3.type || "touchmove" === a3.type || "mouseup" === a3.type) {
          if (r3.globals.collapsedSeries.length + r3.globals.ancillaryCollapsedSeries.length === r3.globals.series.length) return;
          null !== d3 && d3.classList.add("apexcharts-active");
          var p3 = this.yaxisTooltips.filter(function(t6) {
            return true === t6;
          });
          if (null !== this.ycrosshairs && p3.length && this.ycrosshairs.classList.add("apexcharts-active"), g3 && !this.showOnIntersect || u3.length > 1) this.handleStickyTooltip(a3, o3, l3, s3);
          else if ("heatmap" === r3.config.chart.type || "treemap" === r3.config.chart.type) {
            var f3 = this.intersect.handleHeatTreeTooltip({ e: a3, opt: s3, x: e3, y: i3, type: r3.config.chart.type });
            e3 = f3.x, i3 = f3.y, c3.style.left = e3 + "px", c3.style.top = i3 + "px";
          } else this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({ e: a3, opt: s3 }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({ e: a3, opt: s3, x: e3, y: i3 });
          if (this.yaxisTooltips.length) for (var x3 = 0; x3 < r3.config.yaxis.length; x3++) this.axesTooltip.drawYaxisTooltipText(x3, l3, this.xyRatios);
          r3.globals.dom.baseEl.classList.add("apexcharts-tooltip-active"), s3.tooltipEl.classList.add("apexcharts-active");
        } else "mouseout" !== a3.type && "touchend" !== a3.type || this.handleMouseOut(s3);
      }
    } }, { key: "nonAxisChartsTooltips", value: function(t5) {
      var e3 = t5.e, i3 = t5.opt, a3 = t5.tooltipRect, s3 = this.w, r3 = i3.paths.getAttribute("rel"), n3 = this.getElTooltip(), o3 = s3.globals.dom.elWrap.getBoundingClientRect();
      if ("mousemove" === e3.type || "touchmove" === e3.type) {
        s3.globals.dom.baseEl.classList.add("apexcharts-tooltip-active"), n3.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({ ttItems: i3.ttItems, i: parseInt(r3, 10) - 1, shared: false });
        var l3 = s3.globals.clientX - o3.left - a3.ttWidth / 2, h3 = s3.globals.clientY - o3.top - a3.ttHeight - 10;
        if (n3.style.left = l3 + "px", n3.style.top = h3 + "px", s3.config.legend.tooltipHoverFormatter) {
          var c3 = r3 - 1, d3 = (0, s3.config.legend.tooltipHoverFormatter)(this.legendLabels[c3].getAttribute("data:default-text"), { seriesIndex: c3, dataPointIndex: c3, w: s3 });
          this.legendLabels[c3].innerHTML = d3;
        }
      } else "mouseout" !== e3.type && "touchend" !== e3.type || (n3.classList.remove("apexcharts-active"), s3.globals.dom.baseEl.classList.remove("apexcharts-tooltip-active"), s3.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t6) {
        var e4 = t6.getAttribute("data:default-text");
        t6.innerHTML = decodeURIComponent(e4);
      }));
    } }, { key: "handleStickyTooltip", value: function(t5, e3, i3, a3) {
      var s3 = this.w, r3 = this.tooltipUtil.getNearestValues({ context: this, hoverArea: a3.hoverArea, elGrid: a3.elGrid, clientX: e3, clientY: i3 }), n3 = r3.j, o3 = r3.capturedSeries;
      s3.globals.collapsedSeriesIndices.includes(o3) && (o3 = null);
      var l3 = a3.elGrid.getBoundingClientRect();
      if (r3.hoverX < 0 || r3.hoverX > l3.width) this.handleMouseOut(a3);
      else if (null !== o3) this.handleStickyCapturedSeries(t5, o3, a3, n3);
      else if (this.tooltipUtil.isXoverlap(n3) || s3.globals.isBarHorizontal) {
        var h3 = s3.globals.series.findIndex(function(t6, e4) {
          return !s3.globals.collapsedSeriesIndices.includes(e4);
        });
        this.create(t5, this, h3, n3, a3.ttItems);
      }
    } }, { key: "handleStickyCapturedSeries", value: function(t5, e3, i3, a3) {
      var s3 = this.w;
      if (!this.tConfig.shared && null === s3.globals.series[e3][a3]) return void this.handleMouseOut(i3);
      if (void 0 !== s3.globals.series[e3][a3]) this.tConfig.shared && this.tooltipUtil.isXoverlap(a3) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t5, this, e3, a3, i3.ttItems) : this.create(t5, this, e3, a3, i3.ttItems, false);
      else if (this.tooltipUtil.isXoverlap(a3)) {
        var r3 = s3.globals.series.findIndex(function(t6, e4) {
          return !s3.globals.collapsedSeriesIndices.includes(e4);
        });
        this.create(t5, this, r3, a3, i3.ttItems);
      }
    } }, { key: "deactivateHoverFilter", value: function() {
      for (var t5 = this.w, e3 = new Mi2(this.ctx), i3 = t5.globals.dom.Paper.find(".apexcharts-bar-area"), a3 = 0; a3 < i3.length; a3++) e3.pathMouseLeave(i3[a3]);
    } }, { key: "handleMouseOut", value: function(t5) {
      var e3 = this.w, i3 = this.getElXCrosshairs();
      if (e3.globals.dom.baseEl.classList.remove("apexcharts-tooltip-active"), t5.tooltipEl.classList.remove("apexcharts-active"), this.deactivateHoverFilter(), "bubble" !== e3.config.chart.type && this.marker.resetPointsSize(), null !== i3 && i3.classList.remove("apexcharts-active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove("apexcharts-active"), this.yaxisTooltips.length) {
        null === this.yaxisTTEls && (this.yaxisTTEls = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
        for (var a3 = 0; a3 < this.yaxisTTEls.length; a3++) this.yaxisTTEls[a3].classList.remove("apexcharts-active");
      }
      e3.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t6) {
        var e4 = t6.getAttribute("data:default-text");
        t6.innerHTML = decodeURIComponent(e4);
      });
    } }, { key: "markerClick", value: function(t5, e3, i3) {
      var a3 = this.w;
      "function" == typeof a3.config.chart.events.markerClick && a3.config.chart.events.markerClick(t5, this.ctx, { seriesIndex: e3, dataPointIndex: i3, w: a3 }), this.ctx.events.fireEvent("markerClick", [t5, this.ctx, { seriesIndex: e3, dataPointIndex: i3, w: a3 }]);
    } }, { key: "create", value: function(t5, e3, i3, a3, s3) {
      var r3, n3, o3, l3, h3, c3, d3, g3, p3, f3, x3, b3, m3, v3, y3, w3, k3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, A3 = this.w, C3 = e3;
      "mouseup" === t5.type && this.markerClick(t5, i3, a3), null === k3 && (k3 = this.tConfig.shared);
      var S3 = this.tooltipUtil.hasMarkers(i3), L3 = this.tooltipUtil.getElBars(), M3 = function() {
        A3.globals.markers.largestSize > 0 ? C3.marker.enlargePoints(a3) : C3.tooltipPosition.moveDynamicPointsOnHover(a3);
      };
      if (A3.config.legend.tooltipHoverFormatter) {
        var P3 = A3.config.legend.tooltipHoverFormatter, I3 = Array.from(this.legendLabels);
        I3.forEach(function(t6) {
          var e4 = t6.getAttribute("data:default-text");
          t6.innerHTML = decodeURIComponent(e4);
        });
        for (var T3 = 0; T3 < I3.length; T3++) {
          var z3 = I3[T3], X3 = parseInt(z3.getAttribute("i"), 10), R3 = decodeURIComponent(z3.getAttribute("data:default-text")), E3 = P3(R3, { seriesIndex: k3 ? X3 : i3, dataPointIndex: a3, w: A3 });
          if (k3) z3.innerHTML = A3.globals.collapsedSeriesIndices.indexOf(X3) < 0 ? E3 : R3;
          else if (z3.innerHTML = X3 === i3 ? E3 : R3, i3 === X3) break;
        }
      }
      var Y3 = u2(u2({ ttItems: s3, i: i3, j: a3 }, void 0 !== (null === (r3 = A3.globals.seriesRange) || void 0 === r3 || null === (n3 = r3[i3]) || void 0 === n3 || null === (o3 = n3[a3]) || void 0 === o3 || null === (l3 = o3.y[0]) || void 0 === l3 ? void 0 : l3.y1) && { y1: null === (h3 = A3.globals.seriesRange) || void 0 === h3 || null === (c3 = h3[i3]) || void 0 === c3 || null === (d3 = c3[a3]) || void 0 === d3 || null === (g3 = d3.y[0]) || void 0 === g3 ? void 0 : g3.y1 }), void 0 !== (null === (p3 = A3.globals.seriesRange) || void 0 === p3 || null === (f3 = p3[i3]) || void 0 === f3 || null === (x3 = f3[a3]) || void 0 === x3 || null === (b3 = x3.y[0]) || void 0 === b3 ? void 0 : b3.y2) && { y2: null === (m3 = A3.globals.seriesRange) || void 0 === m3 || null === (v3 = m3[i3]) || void 0 === v3 || null === (y3 = v3[a3]) || void 0 === y3 || null === (w3 = y3.y[0]) || void 0 === w3 ? void 0 : w3.y2 });
      if (k3) {
        if (C3.tooltipLabels.drawSeriesTexts(u2(u2({}, Y3), {}, { shared: !this.showOnIntersect && this.tConfig.shared })), S3) M3();
        else if (this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(L3), this.barSeriesHeight > 0)) {
          var H3 = new Mi2(this.ctx), O3 = A3.globals.dom.Paper.find(".apexcharts-bar-area[j='".concat(a3, "']"));
          this.deactivateHoverFilter(), C3.tooltipUtil.getAllMarkers(true).length && !this.barSeriesHeight && M3(), C3.tooltipPosition.moveStickyTooltipOverBars(a3, i3);
          for (var F3 = 0; F3 < O3.length; F3++) H3.pathMouseEnter(O3[F3]);
        }
      } else C3.tooltipLabels.drawSeriesTexts(u2({ shared: false }, Y3)), this.tooltipUtil.hasBars() && C3.tooltipPosition.moveStickyTooltipOverBars(a3, i3), S3 && C3.tooltipPosition.moveMarkers(i3, a3);
    } }]), t4;
  }();
  var La = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.barCtx = e3, this.totalFormatter = this.w.config.plotOptions.bar.dataLabels.total.formatter, this.totalFormatter || (this.totalFormatter = this.w.config.dataLabels.formatter);
    }
    return s2(t4, [{ key: "handleBarDataLabels", value: function(t5) {
      var e3, i3, a3 = t5.x, s3 = t5.y, r3 = t5.y1, n3 = t5.y2, o3 = t5.i, l3 = t5.j, h3 = t5.realIndex, c3 = t5.columnGroupIndex, d3 = t5.series, g3 = t5.barHeight, p3 = t5.barWidth, f3 = t5.barXPosition, x3 = t5.barYPosition, b3 = t5.visibleSeries, m3 = this.w, v3 = new Mi2(this.barCtx.ctx), y3 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[h3] : this.barCtx.strokeWidth;
      m3.globals.isXNumeric && !m3.globals.isBarHorizontal ? (e3 = a3 + parseFloat(p3 * (b3 + 1)), i3 = s3 + parseFloat(g3 * (b3 + 1)) - y3) : (e3 = a3 + parseFloat(p3 * b3), i3 = s3 + parseFloat(g3 * b3));
      var w3, k3 = null, A3 = a3, C3 = s3, S3 = {}, L3 = m3.config.dataLabels, M3 = this.barCtx.barOptions.dataLabels, P3 = this.barCtx.barOptions.dataLabels.total;
      void 0 !== x3 && this.barCtx.isRangeBar && (i3 = x3, C3 = x3), void 0 !== f3 && this.barCtx.isVerticalGroupedRangeBar && (e3 = f3, A3 = f3);
      var I3 = L3.offsetX, T3 = L3.offsetY, z3 = { width: 0, height: 0 };
      if (m3.config.dataLabels.enabled) {
        var X3 = m3.globals.series[o3][l3];
        z3 = v3.getTextRects(m3.config.dataLabels.formatter ? m3.config.dataLabels.formatter(X3, u2(u2({}, m3), {}, { seriesIndex: o3, dataPointIndex: l3, w: m3 })) : m3.globals.yLabelFormatters[0](X3), parseFloat(L3.style.fontSize));
      }
      var R3 = { x: a3, y: s3, i: o3, j: l3, realIndex: h3, columnGroupIndex: c3, bcx: e3, bcy: i3, barHeight: g3, barWidth: p3, textRects: z3, strokeWidth: y3, dataLabelsX: A3, dataLabelsY: C3, dataLabelsConfig: L3, barDataLabelsConfig: M3, barTotalDataLabelsConfig: P3, offX: I3, offY: T3 };
      return S3 = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(R3) : this.calculateColumnsDataLabelsPosition(R3), w3 = this.drawCalculatedDataLabels({ x: S3.dataLabelsX, y: S3.dataLabelsY, val: this.barCtx.isRangeBar ? [r3, n3] : "100%" === m3.config.chart.stackType ? d3[h3][l3] : m3.globals.series[h3][l3], i: h3, j: l3, barWidth: p3, barHeight: g3, textRects: z3, dataLabelsConfig: L3 }), m3.config.chart.stacked && P3.enabled && (k3 = this.drawTotalDataLabels({ x: S3.totalDataLabelsX, y: S3.totalDataLabelsY, barWidth: p3, barHeight: g3, realIndex: h3, textAnchor: S3.totalDataLabelsAnchor, val: this.getStackedTotalDataLabel({ realIndex: h3, j: l3 }), dataLabelsConfig: L3, barTotalDataLabelsConfig: P3 })), { dataLabelsPos: S3, dataLabels: w3, totalDataLabels: k3 };
    } }, { key: "getStackedTotalDataLabel", value: function(t5) {
      var e3 = t5.realIndex, i3 = t5.j, a3 = this.w, s3 = this.barCtx.stackedSeriesTotals[i3];
      return this.totalFormatter && (s3 = this.totalFormatter(s3, u2(u2({}, a3), {}, { seriesIndex: e3, dataPointIndex: i3, w: a3 }))), s3;
    } }, { key: "calculateColumnsDataLabelsPosition", value: function(t5) {
      var e3 = this, i3 = this.w, a3 = t5.i, s3 = t5.j, r3 = t5.realIndex;
      t5.columnGroupIndex;
      var n3, o3, l3 = t5.y, h3 = t5.bcx, c3 = t5.barWidth, d3 = t5.barHeight, u3 = t5.textRects, g3 = t5.dataLabelsX, p3 = t5.dataLabelsY, f3 = t5.dataLabelsConfig, x3 = t5.barDataLabelsConfig, b3 = t5.barTotalDataLabelsConfig, m3 = t5.strokeWidth, v3 = t5.offX, y3 = t5.offY, w3 = h3;
      d3 = Math.abs(d3);
      var k3 = "vertical" === i3.config.plotOptions.bar.dataLabels.orientation, A3 = this.barCtx.barHelpers.getZeroValueEncounters({ i: a3, j: s3 }).zeroEncounters;
      h3 -= m3 / 2;
      var C3 = i3.globals.gridWidth / i3.globals.dataPoints;
      if (this.barCtx.isVerticalGroupedRangeBar ? g3 += c3 / 2 : (g3 = i3.globals.isXNumeric ? h3 - c3 / 2 + v3 : h3 - C3 + c3 / 2 + v3, !i3.config.chart.stacked && A3 > 0 && i3.config.plotOptions.bar.hideZeroBarsWhenGrouped && (g3 -= c3 * A3)), k3) {
        g3 = g3 + u3.height / 2 - m3 / 2 - 2;
      }
      var S3 = i3.globals.series[a3][s3] < 0, L3 = l3;
      switch (this.barCtx.isReversed && (L3 = l3 + (S3 ? d3 : -d3)), x3.position) {
        case "center":
          p3 = k3 ? S3 ? L3 - d3 / 2 + y3 : L3 + d3 / 2 - y3 : S3 ? L3 - d3 / 2 + u3.height / 2 + y3 : L3 + d3 / 2 + u3.height / 2 - y3;
          break;
        case "bottom":
          p3 = k3 ? S3 ? L3 - d3 + y3 : L3 + d3 - y3 : S3 ? L3 - d3 + u3.height + m3 + y3 : L3 + d3 - u3.height / 2 + m3 - y3;
          break;
        case "top":
          p3 = k3 ? S3 ? L3 + y3 : L3 - y3 : S3 ? L3 - u3.height / 2 - y3 : L3 + u3.height + y3;
      }
      var M3 = L3;
      if (i3.globals.seriesGroups.forEach(function(t6) {
        var i4;
        null === (i4 = e3.barCtx[t6.join(",")]) || void 0 === i4 || i4.prevY.forEach(function(t7) {
          M3 = S3 ? Math.max(t7[s3], M3) : Math.min(t7[s3], M3);
        });
      }), this.barCtx.lastActiveBarSerieIndex === r3 && b3.enabled) {
        var P3 = new Mi2(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: r3, j: s3 }), f3.fontSize);
        n3 = S3 ? M3 - P3.height / 2 - y3 - b3.offsetY + 18 : M3 + P3.height + y3 + b3.offsetY - 18;
        var I3 = C3;
        o3 = w3 + (i3.globals.isXNumeric ? -c3 * i3.globals.barGroups.length / 2 : i3.globals.barGroups.length * c3 / 2 - (i3.globals.barGroups.length - 1) * c3 - I3) + b3.offsetX;
      }
      return i3.config.chart.stacked || (p3 < 0 ? p3 = 0 + m3 : p3 + u3.height / 3 > i3.globals.gridHeight && (p3 = i3.globals.gridHeight - m3)), { bcx: h3, bcy: l3, dataLabelsX: g3, dataLabelsY: p3, totalDataLabelsX: o3, totalDataLabelsY: n3, totalDataLabelsAnchor: "middle" };
    } }, { key: "calculateBarsDataLabelsPosition", value: function(t5) {
      var e3 = this, i3 = this.w, a3 = t5.x, s3 = t5.i, r3 = t5.j, n3 = t5.realIndex, o3 = t5.bcy, l3 = t5.barHeight, h3 = t5.barWidth, c3 = t5.textRects, d3 = t5.dataLabelsX, u3 = t5.strokeWidth, g3 = t5.dataLabelsConfig, p3 = t5.barDataLabelsConfig, f3 = t5.barTotalDataLabelsConfig, x3 = t5.offX, b3 = t5.offY, m3 = i3.globals.gridHeight / i3.globals.dataPoints, v3 = this.barCtx.barHelpers.getZeroValueEncounters({ i: s3, j: r3 }).zeroEncounters;
      h3 = Math.abs(h3);
      var y3, w3, k3 = o3 - (this.barCtx.isRangeBar ? 0 : m3) + l3 / 2 + c3.height / 2 + b3 - 3;
      !i3.config.chart.stacked && v3 > 0 && i3.config.plotOptions.bar.hideZeroBarsWhenGrouped && (k3 -= l3 * v3);
      var A3 = "start", C3 = i3.globals.series[s3][r3] < 0, S3 = a3;
      switch (this.barCtx.isReversed && (S3 = a3 + (C3 ? -h3 : h3), A3 = C3 ? "start" : "end"), p3.position) {
        case "center":
          d3 = C3 ? S3 + h3 / 2 - x3 : Math.max(c3.width / 2, S3 - h3 / 2) + x3;
          break;
        case "bottom":
          d3 = C3 ? S3 + h3 - u3 - x3 : S3 - h3 + u3 + x3;
          break;
        case "top":
          d3 = C3 ? S3 - u3 - x3 : S3 - u3 + x3;
      }
      var L3 = S3;
      if (i3.globals.seriesGroups.forEach(function(t6) {
        var i4;
        null === (i4 = e3.barCtx[t6.join(",")]) || void 0 === i4 || i4.prevX.forEach(function(t7) {
          L3 = C3 ? Math.min(t7[r3], L3) : Math.max(t7[r3], L3);
        });
      }), this.barCtx.lastActiveBarSerieIndex === n3 && f3.enabled) {
        var M3 = new Mi2(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: n3, j: r3 }), g3.fontSize);
        C3 ? (y3 = L3 - u3 - x3 - f3.offsetX, A3 = "end") : y3 = L3 + x3 + f3.offsetX + (this.barCtx.isReversed ? -(h3 + u3) : u3), w3 = k3 - c3.height / 2 + M3.height / 2 + f3.offsetY + u3, i3.globals.barGroups.length > 1 && (w3 -= i3.globals.barGroups.length / 2 * (l3 / 2));
      }
      return i3.config.chart.stacked || ("start" === g3.textAnchor ? d3 - c3.width < 0 ? d3 = C3 ? c3.width + u3 : u3 : d3 + c3.width > i3.globals.gridWidth && (d3 = C3 ? i3.globals.gridWidth - u3 : i3.globals.gridWidth - c3.width - u3) : "middle" === g3.textAnchor ? d3 - c3.width / 2 < 0 ? d3 = c3.width / 2 + u3 : d3 + c3.width / 2 > i3.globals.gridWidth && (d3 = i3.globals.gridWidth - c3.width / 2 - u3) : "end" === g3.textAnchor && (d3 < 1 ? d3 = c3.width + u3 : d3 + 1 > i3.globals.gridWidth && (d3 = i3.globals.gridWidth - c3.width - u3))), { bcx: a3, bcy: o3, dataLabelsX: d3, dataLabelsY: k3, totalDataLabelsX: y3, totalDataLabelsY: w3, totalDataLabelsAnchor: A3 };
    } }, { key: "drawCalculatedDataLabels", value: function(t5) {
      var e3 = t5.x, i3 = t5.y, a3 = t5.val, s3 = t5.i, r3 = t5.j, n3 = t5.textRects, o3 = t5.barHeight, l3 = t5.barWidth, h3 = t5.dataLabelsConfig, c3 = this.w, d3 = "rotate(0)";
      "vertical" === c3.config.plotOptions.bar.dataLabels.orientation && (d3 = "rotate(-90, ".concat(e3, ", ").concat(i3, ")"));
      var g3 = new qi2(this.barCtx.ctx), p3 = new Mi2(this.barCtx.ctx), f3 = h3.formatter, x3 = null, b3 = c3.globals.collapsedSeriesIndices.indexOf(s3) > -1;
      if (h3.enabled && !b3) {
        x3 = p3.group({ class: "apexcharts-data-labels", transform: d3 });
        var m3 = "";
        void 0 !== a3 && (m3 = f3(a3, u2(u2({}, c3), {}, { seriesIndex: s3, dataPointIndex: r3, w: c3 }))), !a3 && c3.config.plotOptions.bar.hideZeroBarsWhenGrouped && (m3 = "");
        var v3 = c3.globals.series[s3][r3] < 0, y3 = c3.config.plotOptions.bar.dataLabels.position;
        if ("vertical" === c3.config.plotOptions.bar.dataLabels.orientation && ("top" === y3 && (h3.textAnchor = v3 ? "end" : "start"), "center" === y3 && (h3.textAnchor = "middle"), "bottom" === y3 && (h3.textAnchor = v3 ? "end" : "start")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) l3 < p3.getTextRects(m3, parseFloat(h3.style.fontSize)).width && (m3 = "");
        c3.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? n3.width / 1.6 > Math.abs(l3) && (m3 = "") : n3.height / 1.6 > Math.abs(o3) && (m3 = ""));
        var w3 = u2({}, h3);
        this.barCtx.isHorizontal && a3 < 0 && ("start" === h3.textAnchor ? w3.textAnchor = "end" : "end" === h3.textAnchor && (w3.textAnchor = "start")), g3.plotDataLabelsText({ x: e3, y: i3, text: m3, i: s3, j: r3, parent: x3, dataLabelsConfig: w3, alwaysDrawDataLabel: true, offsetCorrection: true });
      }
      return x3;
    } }, { key: "drawTotalDataLabels", value: function(t5) {
      var e3 = t5.x, i3 = t5.y, a3 = t5.val, s3 = t5.realIndex, r3 = t5.textAnchor, n3 = t5.barTotalDataLabelsConfig;
      this.w;
      var o3, l3 = new Mi2(this.barCtx.ctx);
      return n3.enabled && void 0 !== e3 && void 0 !== i3 && this.barCtx.lastActiveBarSerieIndex === s3 && (o3 = l3.drawText({ x: e3, y: i3, foreColor: n3.style.color, text: a3, textAnchor: r3, fontFamily: n3.style.fontFamily, fontSize: n3.style.fontSize, fontWeight: n3.style.fontWeight })), o3;
    } }]), t4;
  }();
  var Ma = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.barCtx = e3;
    }
    return s2(t4, [{ key: "initVariables", value: function(t5) {
      var e3 = this.w;
      this.barCtx.series = t5, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;
      for (var i3 = 0; i3 < t5.length; i3++) if (t5[i3].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t5[i3].length), e3.globals.isXNumeric) for (var a3 = 0; a3 < t5[i3].length; a3++) e3.globals.seriesX[i3][a3] > e3.globals.minX && e3.globals.seriesX[i3][a3] < e3.globals.maxX && this.barCtx.visibleItems++;
      else this.barCtx.visibleItems = e3.globals.dataPoints;
      this.arrBorderRadius = this.createBorderRadiusArr(e3.globals.series), v2.isSafari() && (this.arrBorderRadius = this.arrBorderRadius.map(function(t6) {
        return t6.map(function(t7) {
          return "none";
        });
      })), 0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], e3.globals.comboCharts || this.checkZeroSeries({ series: t5 });
    } }, { key: "initialPositions", value: function(t5) {
      var e3, i3, a3, s3, r3, n3, o3, l3, h3 = this.w, c3 = h3.globals.dataPoints;
      this.barCtx.isRangeBar && (c3 = h3.globals.labels.length);
      var d3 = this.barCtx.seriesLen;
      if (h3.config.plotOptions.bar.rangeBarGroupRows && (d3 = 1), this.barCtx.isHorizontal) r3 = (a3 = h3.globals.gridHeight / c3) / d3, h3.globals.isXNumeric && (r3 = (a3 = h3.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), r3 = r3 * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, -1 === String(this.barCtx.barOptions.barHeight).indexOf("%") && (r3 = parseInt(this.barCtx.barOptions.barHeight, 10)), l3 = this.barCtx.baseLineInvertedY + h3.globals.padHorizontal + (this.barCtx.isReversed ? h3.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), this.barCtx.isFunnel && (l3 = h3.globals.gridWidth / 2), i3 = (a3 - r3 * this.barCtx.seriesLen) / 2;
      else {
        if (s3 = h3.globals.gridWidth / this.barCtx.visibleItems, h3.config.xaxis.convertedCatToNumeric && (s3 = h3.globals.gridWidth / h3.globals.dataPoints), n3 = s3 / d3 * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, h3.globals.isXNumeric) {
          var u3 = this.barCtx.xRatio;
          h3.globals.minXDiff && 0.5 !== h3.globals.minXDiff && h3.globals.minXDiff / u3 > 0 && (s3 = h3.globals.minXDiff / u3), (n3 = s3 / d3 * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (n3 = 1);
        }
        if (-1 === String(this.barCtx.barOptions.columnWidth).indexOf("%") && (n3 = parseInt(this.barCtx.barOptions.columnWidth, 10)), o3 = h3.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.translationsIndex] - (this.barCtx.isReversed ? h3.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.translationsIndex] : 0), h3.globals.isXNumeric) e3 = this.barCtx.getBarXForNumericXAxis({ x: e3, j: 0, realIndex: t5, barWidth: n3 }).x;
        else e3 = h3.globals.padHorizontal + v2.noExponents(s3 - n3 * this.barCtx.seriesLen) / 2;
      }
      return h3.globals.barHeight = r3, h3.globals.barWidth = n3, { x: e3, y: i3, yDivision: a3, xDivision: s3, barHeight: r3, barWidth: n3, zeroH: o3, zeroW: l3 };
    } }, { key: "initializeStackedPrevVars", value: function(t5) {
      t5.w.globals.seriesGroups.forEach(function(e3) {
        t5[e3] || (t5[e3] = {}), t5[e3].prevY = [], t5[e3].prevX = [], t5[e3].prevYF = [], t5[e3].prevXF = [], t5[e3].prevYVal = [], t5[e3].prevXVal = [];
      });
    } }, { key: "initializeStackedXYVars", value: function(t5) {
      t5.w.globals.seriesGroups.forEach(function(e3) {
        t5[e3] || (t5[e3] = {}), t5[e3].xArrj = [], t5[e3].xArrjF = [], t5[e3].xArrjVal = [], t5[e3].yArrj = [], t5[e3].yArrjF = [], t5[e3].yArrjVal = [];
      });
    } }, { key: "getPathFillColor", value: function(t5, e3, i3, a3) {
      var s3, r3, n3, o3, l3 = this.w, h3 = this.barCtx.ctx.fill, c3 = null, d3 = this.barCtx.barOptions.distributed ? i3 : e3, u3 = false;
      this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function(a4) {
        t5[e3][i3] >= a4.from && t5[e3][i3] <= a4.to && (c3 = a4.color, u3 = true);
      });
      return { color: h3.fillPath({ seriesNumber: this.barCtx.barOptions.distributed ? d3 : a3, dataPointIndex: i3, color: c3, value: t5[e3][i3], fillConfig: null === (s3 = l3.config.series[e3].data[i3]) || void 0 === s3 ? void 0 : s3.fill, fillType: null !== (r3 = l3.config.series[e3].data[i3]) && void 0 !== r3 && null !== (n3 = r3.fill) && void 0 !== n3 && n3.type ? null === (o3 = l3.config.series[e3].data[i3]) || void 0 === o3 ? void 0 : o3.fill.type : Array.isArray(l3.config.fill.type) ? l3.config.fill.type[a3] : l3.config.fill.type }), useRangeColor: u3 };
    } }, { key: "getStrokeWidth", value: function(t5, e3, i3) {
      var a3 = 0, s3 = this.w;
      return void 0 === this.barCtx.series[t5][e3] || null === this.barCtx.series[t5][e3] ? this.barCtx.isNullValue = true : this.barCtx.isNullValue = false, s3.config.stroke.show && (this.barCtx.isNullValue || (a3 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i3] : this.barCtx.strokeWidth)), a3;
    } }, { key: "createBorderRadiusArr", value: function(t5) {
      var e3, i3 = this.w, a3 = !this.w.config.chart.stacked || i3.config.plotOptions.bar.borderRadius <= 0, s3 = t5.length, n3 = 0 | (null === (e3 = t5[0]) || void 0 === e3 ? void 0 : e3.length), o3 = Array.from({ length: s3 }, function() {
        return Array(n3).fill(a3 ? "top" : "none");
      });
      if (a3) return o3;
      for (var l3 = 0; l3 < n3; l3++) {
        for (var h3 = [], c3 = [], d3 = 0, u3 = 0; u3 < s3; u3++) {
          var g3 = t5[u3][l3];
          g3 > 0 ? (h3.push(u3), d3++) : g3 < 0 && (c3.push(u3), d3++);
        }
        if (h3.length > 0 && 0 === c3.length) if (1 === h3.length) o3[h3[0]][l3] = "both";
        else {
          var p3, f3 = h3[0], x3 = h3[h3.length - 1], b3 = r2(h3);
          try {
            for (b3.s(); !(p3 = b3.n()).done; ) {
              var m3 = p3.value;
              o3[m3][l3] = m3 === f3 ? "bottom" : m3 === x3 ? "top" : "none";
            }
          } catch (t6) {
            b3.e(t6);
          } finally {
            b3.f();
          }
        }
        else if (c3.length > 0 && 0 === h3.length) if (1 === c3.length) o3[c3[0]][l3] = "both";
        else {
          var v3, y3 = Math.max.apply(Math, c3), w3 = Math.min.apply(Math, c3), k3 = r2(c3);
          try {
            for (k3.s(); !(v3 = k3.n()).done; ) {
              var A3 = v3.value;
              o3[A3][l3] = A3 === y3 ? "bottom" : A3 === w3 ? "top" : "none";
            }
          } catch (t6) {
            k3.e(t6);
          } finally {
            k3.f();
          }
        }
        else if (h3.length > 0 && c3.length > 0) {
          var C3, S3 = h3[h3.length - 1], L3 = r2(h3);
          try {
            for (L3.s(); !(C3 = L3.n()).done; ) {
              var M3 = C3.value;
              o3[M3][l3] = M3 === S3 ? "top" : "none";
            }
          } catch (t6) {
            L3.e(t6);
          } finally {
            L3.f();
          }
          var P3, I3 = Math.max.apply(Math, c3), T3 = r2(c3);
          try {
            for (T3.s(); !(P3 = T3.n()).done; ) {
              var z3 = P3.value;
              o3[z3][l3] = z3 === I3 ? "bottom" : "none";
            }
          } catch (t6) {
            T3.e(t6);
          } finally {
            T3.f();
          }
        } else if (1 === d3) {
          o3[h3[0] || c3[0]][l3] = "both";
        }
      }
      return o3;
    } }, { key: "barBackground", value: function(t5) {
      var e3 = t5.j, i3 = t5.i, a3 = t5.x1, s3 = t5.x2, r3 = t5.y1, n3 = t5.y2, o3 = t5.elSeries, l3 = this.w, h3 = new Mi2(this.barCtx.ctx), c3 = new Zi2(this.barCtx.ctx).getActiveConfigSeriesIndex();
      if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c3 === i3) {
        e3 >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e3 %= this.barCtx.barOptions.colors.backgroundBarColors.length);
        var d3 = this.barCtx.barOptions.colors.backgroundBarColors[e3], u3 = h3.drawRect(void 0 !== a3 ? a3 : 0, void 0 !== r3 ? r3 : 0, void 0 !== s3 ? s3 : l3.globals.gridWidth, void 0 !== n3 ? n3 : l3.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d3, this.barCtx.barOptions.colors.backgroundBarOpacity);
        o3.add(u3), u3.node.classList.add("apexcharts-backgroundBar");
      }
    } }, { key: "getColumnPaths", value: function(t5) {
      var e3, i3 = t5.barWidth, a3 = t5.barXPosition, s3 = t5.y1, r3 = t5.y2, n3 = t5.strokeWidth, o3 = t5.isReversed, l3 = t5.series, h3 = t5.seriesGroup, c3 = t5.realIndex, d3 = t5.i, u3 = t5.j, g3 = t5.w, p3 = new Mi2(this.barCtx.ctx);
      (n3 = Array.isArray(n3) ? n3[c3] : n3) || (n3 = 0);
      var f3 = i3, x3 = a3;
      null !== (e3 = g3.config.series[c3].data[u3]) && void 0 !== e3 && e3.columnWidthOffset && (x3 = a3 - g3.config.series[c3].data[u3].columnWidthOffset / 2, f3 = i3 + g3.config.series[c3].data[u3].columnWidthOffset);
      var b3 = n3 / 2, m3 = x3 + b3, v3 = x3 + f3 - b3, y3 = (l3[d3][u3] >= 0 ? 1 : -1) * (o3 ? -1 : 1);
      s3 += 1e-3 - b3 * y3, r3 += 1e-3 + b3 * y3;
      var w3 = p3.move(m3, s3), k3 = p3.move(m3, s3), A3 = p3.line(v3, s3);
      if (g3.globals.previousPaths.length > 0 && (k3 = this.barCtx.getPreviousPath(c3, u3, false)), w3 = w3 + p3.line(m3, r3) + p3.line(v3, r3) + A3 + ("around" === g3.config.plotOptions.bar.borderRadiusApplication || "both" === this.arrBorderRadius[c3][u3] ? " Z" : " z"), k3 = k3 + p3.line(m3, s3) + A3 + A3 + A3 + A3 + A3 + p3.line(m3, s3) + ("around" === g3.config.plotOptions.bar.borderRadiusApplication || "both" === this.arrBorderRadius[c3][u3] ? " Z" : " z"), "none" !== this.arrBorderRadius[c3][u3] && (w3 = p3.roundPathCorners(w3, g3.config.plotOptions.bar.borderRadius)), g3.config.chart.stacked) {
        var C3 = this.barCtx;
        (C3 = this.barCtx[h3]).yArrj.push(r3 - b3 * y3), C3.yArrjF.push(Math.abs(s3 - r3 + n3 * y3)), C3.yArrjVal.push(this.barCtx.series[d3][u3]);
      }
      return { pathTo: w3, pathFrom: k3 };
    } }, { key: "getBarpaths", value: function(t5) {
      var e3, i3 = t5.barYPosition, a3 = t5.barHeight, s3 = t5.x1, r3 = t5.x2, n3 = t5.strokeWidth, o3 = t5.isReversed, l3 = t5.series, h3 = t5.seriesGroup, c3 = t5.realIndex, d3 = t5.i, u3 = t5.j, g3 = t5.w, p3 = new Mi2(this.barCtx.ctx);
      (n3 = Array.isArray(n3) ? n3[c3] : n3) || (n3 = 0);
      var f3 = i3, x3 = a3;
      null !== (e3 = g3.config.series[c3].data[u3]) && void 0 !== e3 && e3.barHeightOffset && (f3 = i3 - g3.config.series[c3].data[u3].barHeightOffset / 2, x3 = a3 + g3.config.series[c3].data[u3].barHeightOffset);
      var b3 = n3 / 2, m3 = f3 + b3, v3 = f3 + x3 - b3, y3 = (l3[d3][u3] >= 0 ? 1 : -1) * (o3 ? -1 : 1);
      s3 += 1e-3 + b3 * y3, r3 += 1e-3 - b3 * y3;
      var w3 = p3.move(s3, m3), k3 = p3.move(s3, m3);
      g3.globals.previousPaths.length > 0 && (k3 = this.barCtx.getPreviousPath(c3, u3, false));
      var A3 = p3.line(s3, v3);
      if (w3 = w3 + p3.line(r3, m3) + p3.line(r3, v3) + A3 + ("around" === g3.config.plotOptions.bar.borderRadiusApplication || "both" === this.arrBorderRadius[c3][u3] ? " Z" : " z"), k3 = k3 + p3.line(s3, m3) + A3 + A3 + A3 + A3 + A3 + p3.line(s3, m3) + ("around" === g3.config.plotOptions.bar.borderRadiusApplication || "both" === this.arrBorderRadius[c3][u3] ? " Z" : " z"), "none" !== this.arrBorderRadius[c3][u3] && (w3 = p3.roundPathCorners(w3, g3.config.plotOptions.bar.borderRadius)), g3.config.chart.stacked) {
        var C3 = this.barCtx;
        (C3 = this.barCtx[h3]).xArrj.push(r3 + b3 * y3), C3.xArrjF.push(Math.abs(s3 - r3 - n3 * y3)), C3.xArrjVal.push(this.barCtx.series[d3][u3]);
      }
      return { pathTo: w3, pathFrom: k3 };
    } }, { key: "checkZeroSeries", value: function(t5) {
      for (var e3 = t5.series, i3 = this.w, a3 = 0; a3 < e3.length; a3++) {
        for (var s3 = 0, r3 = 0; r3 < e3[i3.globals.maxValsInArrayIndex].length; r3++) s3 += e3[a3][r3];
        0 === s3 && this.barCtx.zeroSerieses.push(a3);
      }
    } }, { key: "getXForValue", value: function(t5, e3) {
      var i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2] ? e3 : null;
      return null != t5 && (i3 = e3 + t5 / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t5 / this.barCtx.invertedYRatio : 0)), i3;
    } }, { key: "getYForValue", value: function(t5, e3, i3) {
      var a3 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3] ? e3 : null;
      return null != t5 && (a3 = e3 - t5 / this.barCtx.yRatio[i3] + 2 * (this.barCtx.isReversed ? t5 / this.barCtx.yRatio[i3] : 0)), a3;
    } }, { key: "getGoalValues", value: function(t5, e3, i3, a3, s3, r3) {
      var n3 = this, l3 = this.w, h3 = [], c3 = function(a4, s4) {
        var l4;
        h3.push((o2(l4 = {}, t5, "x" === t5 ? n3.getXForValue(a4, e3, false) : n3.getYForValue(a4, i3, r3, false)), o2(l4, "attrs", s4), l4));
      };
      if (l3.globals.seriesGoals[a3] && l3.globals.seriesGoals[a3][s3] && Array.isArray(l3.globals.seriesGoals[a3][s3]) && l3.globals.seriesGoals[a3][s3].forEach(function(t6) {
        c3(t6.value, t6);
      }), this.barCtx.barOptions.isDumbbell && l3.globals.seriesRange.length) {
        var d3 = this.barCtx.barOptions.dumbbellColors ? this.barCtx.barOptions.dumbbellColors : l3.globals.colors, g3 = { strokeHeight: "x" === t5 ? 0 : l3.globals.markers.size[a3], strokeWidth: "x" === t5 ? l3.globals.markers.size[a3] : 0, strokeDashArray: 0, strokeLineCap: "round", strokeColor: Array.isArray(d3[a3]) ? d3[a3][0] : d3[a3] };
        c3(l3.globals.seriesRangeStart[a3][s3], g3), c3(l3.globals.seriesRangeEnd[a3][s3], u2(u2({}, g3), {}, { strokeColor: Array.isArray(d3[a3]) ? d3[a3][1] : d3[a3] }));
      }
      return h3;
    } }, { key: "drawGoalLine", value: function(t5) {
      var e3 = t5.barXPosition, i3 = t5.barYPosition, a3 = t5.goalX, s3 = t5.goalY, r3 = t5.barWidth, n3 = t5.barHeight, o3 = new Mi2(this.barCtx.ctx), l3 = o3.group({ className: "apexcharts-bar-goals-groups" });
      l3.node.classList.add("apexcharts-element-hidden"), this.barCtx.w.globals.delayedElements.push({ el: l3.node }), l3.attr("clip-path", "url(#gridRectMarkerMask".concat(this.barCtx.w.globals.cuid, ")"));
      var h3 = null;
      return this.barCtx.isHorizontal ? Array.isArray(a3) && a3.forEach(function(t6) {
        if (t6.x >= -1 && t6.x <= o3.w.globals.gridWidth + 1) {
          var e4 = void 0 !== t6.attrs.strokeHeight ? t6.attrs.strokeHeight : n3 / 2, a4 = i3 + e4 + n3 / 2;
          h3 = o3.drawLine(t6.x, a4 - 2 * e4, t6.x, a4, t6.attrs.strokeColor ? t6.attrs.strokeColor : void 0, t6.attrs.strokeDashArray, t6.attrs.strokeWidth ? t6.attrs.strokeWidth : 2, t6.attrs.strokeLineCap), l3.add(h3);
        }
      }) : Array.isArray(s3) && s3.forEach(function(t6) {
        if (t6.y >= -1 && t6.y <= o3.w.globals.gridHeight + 1) {
          var i4 = void 0 !== t6.attrs.strokeWidth ? t6.attrs.strokeWidth : r3 / 2, a4 = e3 + i4 + r3 / 2;
          h3 = o3.drawLine(a4 - 2 * i4, t6.y, a4, t6.y, t6.attrs.strokeColor ? t6.attrs.strokeColor : void 0, t6.attrs.strokeDashArray, t6.attrs.strokeHeight ? t6.attrs.strokeHeight : 2, t6.attrs.strokeLineCap), l3.add(h3);
        }
      }), l3;
    } }, { key: "drawBarShadow", value: function(t5) {
      var e3 = t5.prevPaths, i3 = t5.currPaths, a3 = t5.color, s3 = this.w, r3 = e3.x, n3 = e3.x1, o3 = e3.barYPosition, l3 = i3.x, h3 = i3.x1, c3 = i3.barYPosition, d3 = o3 + i3.barHeight, u3 = new Mi2(this.barCtx.ctx), g3 = new v2(), p3 = u3.move(n3, d3) + u3.line(r3, d3) + u3.line(l3, c3) + u3.line(h3, c3) + u3.line(n3, d3) + ("around" === s3.config.plotOptions.bar.borderRadiusApplication || "both" === this.arrBorderRadius[realIndex][j] ? " Z" : " z");
      return u3.drawPath({ d: p3, fill: g3.shadeColor(0.5, v2.rgb2hex(a3)), stroke: "none", strokeWidth: 0, fillOpacity: 1, classes: "apexcharts-bar-shadow apexcharts-decoration-element" });
    } }, { key: "getZeroValueEncounters", value: function(t5) {
      var e3, i3 = t5.i, a3 = t5.j, s3 = this.w, r3 = 0, n3 = 0;
      return (s3.config.plotOptions.bar.horizontal ? s3.globals.series.map(function(t6, e4) {
        return e4;
      }) : (null === (e3 = s3.globals.columnSeries) || void 0 === e3 ? void 0 : e3.i.map(function(t6) {
        return t6;
      })) || []).forEach(function(t6) {
        var e4 = s3.globals.seriesPercent[t6][a3];
        e4 && r3++, t6 < i3 && 0 === e4 && n3++;
      }), { nonZeroColumns: r3, zeroEncounters: n3 };
    } }, { key: "getGroupIndex", value: function(t5) {
      var e3 = this.w, i3 = e3.globals.seriesGroups.findIndex(function(i4) {
        return i4.indexOf(e3.globals.seriesNames[t5]) > -1;
      }), a3 = this.barCtx.columnGroupIndices, s3 = a3.indexOf(i3);
      return s3 < 0 && (a3.push(i3), s3 = a3.length - 1), { groupIndex: i3, columnGroupIndex: s3 };
    } }]), t4;
  }();
  var Pa = function() {
    function t4(e3, a3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
      var s3 = this.w;
      this.barOptions = s3.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s3.config.stroke.width, this.isNullValue = false, this.isRangeBar = s3.globals.seriesRange.length && this.isHorizontal, this.isVerticalGroupedRangeBar = !s3.globals.isBarHorizontal && s3.globals.seriesRange.length && s3.config.plotOptions.bar.rangeBarGroupRows, this.isFunnel = this.barOptions.isFunnel, this.xyRatios = a3, null !== this.xyRatios && (this.xRatio = a3.xRatio, this.yRatio = a3.yRatio, this.invertedXRatio = a3.invertedXRatio, this.invertedYRatio = a3.invertedYRatio, this.baseLineY = a3.baseLineY, this.baseLineInvertedY = a3.baseLineInvertedY), this.yaxisIndex = 0, this.translationsIndex = 0, this.seriesLen = 0, this.pathArr = [];
      var r3 = new Zi2(this.ctx);
      this.lastActiveBarSerieIndex = r3.getActiveConfigSeriesIndex("desc", ["bar", "column"]), this.columnGroupIndices = [];
      var n3 = r3.getBarSeriesIndices(), o3 = new Pi2(this.ctx);
      this.stackedSeriesTotals = o3.getStackedSeriesTotals(this.w.config.series.map(function(t5, e4) {
        return -1 === n3.indexOf(e4) ? e4 : -1;
      }).filter(function(t5) {
        return -1 !== t5;
      })), this.barHelpers = new Ma(this);
    }
    return s2(t4, [{ key: "draw", value: function(t5, e3) {
      var i3 = this.w, a3 = new Mi2(this.ctx), s3 = new Pi2(this.ctx, i3);
      t5 = s3.getLogSeries(t5), this.series = t5, this.yRatio = s3.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t5);
      var r3 = a3.group({ class: "apexcharts-bar-series apexcharts-plot-series" });
      i3.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering - ApexCharts");
      for (var n3 = 0, o3 = 0; n3 < t5.length; n3++, o3++) {
        var l3, h3, c3, d3, g3 = void 0, p3 = void 0, f3 = [], x3 = [], b3 = i3.globals.comboCharts ? e3[n3] : n3, m3 = this.barHelpers.getGroupIndex(b3).columnGroupIndex, y3 = a3.group({ class: "apexcharts-series", rel: n3 + 1, seriesName: v2.escapeString(i3.globals.seriesNames[b3]), "data:realIndex": b3 });
        this.ctx.series.addCollapsedClassToSeries(y3, b3), t5[n3].length > 0 && (this.visibleI = this.visibleI + 1);
        var w3 = 0, k3 = 0;
        this.yRatio.length > 1 && (this.yaxisIndex = i3.globals.seriesYAxisReverseMap[b3], this.translationsIndex = b3);
        var A3 = this.translationsIndex;
        this.isReversed = i3.config.yaxis[this.yaxisIndex] && i3.config.yaxis[this.yaxisIndex].reversed;
        var C3 = this.barHelpers.initialPositions(b3);
        p3 = C3.y, w3 = C3.barHeight, h3 = C3.yDivision, d3 = C3.zeroW, g3 = C3.x, k3 = C3.barWidth, l3 = C3.xDivision, c3 = C3.zeroH, this.isHorizontal || x3.push(g3 + k3 / 2);
        var S3 = a3.group({ class: "apexcharts-datalabels", "data:realIndex": b3 });
        i3.globals.delayedElements.push({ el: S3.node }), S3.node.classList.add("apexcharts-element-hidden");
        var L3 = a3.group({ class: "apexcharts-bar-goals-markers" }), M3 = a3.group({ class: "apexcharts-bar-shadows" });
        i3.globals.delayedElements.push({ el: M3.node }), M3.node.classList.add("apexcharts-element-hidden");
        for (var P3 = 0; P3 < t5[n3].length; P3++) {
          var I3 = this.barHelpers.getStrokeWidth(n3, P3, b3), T3 = null, z3 = { indexes: { i: n3, j: P3, realIndex: b3, translationsIndex: A3, bc: o3 }, x: g3, y: p3, strokeWidth: I3, elSeries: y3 };
          this.isHorizontal ? (T3 = this.drawBarPaths(u2(u2({}, z3), {}, { barHeight: w3, zeroW: d3, yDivision: h3 })), k3 = this.series[n3][P3] / this.invertedYRatio) : (T3 = this.drawColumnPaths(u2(u2({}, z3), {}, { xDivision: l3, barWidth: k3, zeroH: c3 })), w3 = this.series[n3][P3] / this.yRatio[A3]);
          var X3 = this.barHelpers.getPathFillColor(t5, n3, P3, b3);
          if (this.isFunnel && this.barOptions.isFunnel3d && this.pathArr.length && P3 > 0) {
            var R3, E3 = this.barHelpers.drawBarShadow({ color: "string" == typeof X3.color && -1 === (null === (R3 = X3.color) || void 0 === R3 ? void 0 : R3.indexOf("url")) ? X3.color : v2.hexToRgba(i3.globals.colors[n3]), prevPaths: this.pathArr[this.pathArr.length - 1], currPaths: T3 });
            if (M3.add(E3), i3.config.chart.dropShadow.enabled) new Li2(this.ctx).dropShadow(E3, i3.config.chart.dropShadow, b3);
          }
          this.pathArr.push(T3);
          var Y3 = this.barHelpers.drawGoalLine({ barXPosition: T3.barXPosition, barYPosition: T3.barYPosition, goalX: T3.goalX, goalY: T3.goalY, barHeight: w3, barWidth: k3 });
          Y3 && L3.add(Y3), p3 = T3.y, g3 = T3.x, P3 > 0 && x3.push(g3 + k3 / 2), f3.push(p3), this.renderSeries(u2(u2({ realIndex: b3, pathFill: X3.color }, X3.useRangeColor ? { lineFill: X3.color } : {}), {}, { j: P3, i: n3, columnGroupIndex: m3, pathFrom: T3.pathFrom, pathTo: T3.pathTo, strokeWidth: I3, elSeries: y3, x: g3, y: p3, series: t5, barHeight: Math.abs(T3.barHeight ? T3.barHeight : w3), barWidth: Math.abs(T3.barWidth ? T3.barWidth : k3), elDataLabelsWrap: S3, elGoalsMarkers: L3, elBarShadows: M3, visibleSeries: this.visibleI, type: "bar" }));
        }
        i3.globals.seriesXvalues[b3] = x3, i3.globals.seriesYvalues[b3] = f3, r3.add(y3);
      }
      return r3;
    } }, { key: "renderSeries", value: function(t5) {
      var e3 = t5.realIndex, i3 = t5.pathFill, a3 = t5.lineFill, s3 = t5.j, r3 = t5.i, n3 = t5.columnGroupIndex, o3 = t5.pathFrom, l3 = t5.pathTo, h3 = t5.strokeWidth, c3 = t5.elSeries, d3 = t5.x, u3 = t5.y, g3 = t5.y1, p3 = t5.y2, f3 = t5.series, x3 = t5.barHeight, b3 = t5.barWidth, m3 = t5.barXPosition, v3 = t5.barYPosition, y3 = t5.elDataLabelsWrap, w3 = t5.elGoalsMarkers, k3 = t5.elBarShadows, A3 = t5.visibleSeries, C3 = t5.type, S3 = t5.classes, L3 = this.w, M3 = new Mi2(this.ctx), P3 = false;
      if (!a3) {
        var I3 = "function" == typeof L3.globals.stroke.colors[e3] ? function(t6) {
          var e4, i4 = L3.config.stroke.colors;
          return Array.isArray(i4) && i4.length > 0 && ((e4 = i4[t6]) || (e4 = ""), "function" == typeof e4) ? e4({ value: L3.globals.series[t6][s3], dataPointIndex: s3, w: L3 }) : e4;
        }(e3) : L3.globals.stroke.colors[e3];
        a3 = this.barOptions.distributed ? L3.globals.stroke.colors[s3] : I3;
      }
      var T3 = new La(this).handleBarDataLabels({ x: d3, y: u3, y1: g3, y2: p3, i: r3, j: s3, series: f3, realIndex: e3, columnGroupIndex: n3, barHeight: x3, barWidth: b3, barXPosition: m3, barYPosition: v3, visibleSeries: A3 });
      L3.globals.isBarHorizontal || (T3.dataLabelsPos.dataLabelsX + b3 < 0 || T3.dataLabelsPos.dataLabelsX - b3 > L3.globals.gridWidth) && (P3 = true), L3.config.series[r3].data[s3] && L3.config.series[r3].data[s3].strokeColor && (a3 = L3.config.series[r3].data[s3].strokeColor), this.isNullValue && (i3 = "none");
      var z3 = s3 / L3.config.chart.animations.animateGradually.delay * (L3.config.chart.animations.speed / L3.globals.dataPoints) / 2.4;
      if (!P3) {
        var X3 = M3.renderPaths({ i: r3, j: s3, realIndex: e3, pathFrom: o3, pathTo: l3, stroke: a3, strokeWidth: h3, strokeLineCap: L3.config.stroke.lineCap, fill: i3, animationDelay: z3, initialSpeed: L3.config.chart.animations.speed, dataChangeSpeed: L3.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(C3, "-area ").concat(S3), chartType: C3 });
        X3.attr("clip-path", "url(#gridRectBarMask".concat(L3.globals.cuid, ")"));
        var R3 = L3.config.forecastDataPoints;
        R3.count > 0 && s3 >= L3.globals.dataPoints - R3.count && (X3.node.setAttribute("stroke-dasharray", R3.dashArray), X3.node.setAttribute("stroke-width", R3.strokeWidth), X3.node.setAttribute("fill-opacity", R3.fillOpacity)), void 0 !== g3 && void 0 !== p3 && (X3.attr("data-range-y1", g3), X3.attr("data-range-y2", p3)), new Li2(this.ctx).setSelectionFilter(X3, e3, s3), c3.add(X3), X3.attr({ cy: T3.dataLabelsPos.bcy, cx: T3.dataLabelsPos.bcx, j: s3, val: L3.globals.series[r3][s3], barHeight: x3, barWidth: b3 }), null !== T3.dataLabels && y3.add(T3.dataLabels), T3.totalDataLabels && y3.add(T3.totalDataLabels), c3.add(y3), w3 && c3.add(w3), k3 && c3.add(k3);
      }
      return c3;
    } }, { key: "drawBarPaths", value: function(t5) {
      var e3, i3 = t5.indexes, a3 = t5.barHeight, s3 = t5.strokeWidth, r3 = t5.zeroW, n3 = t5.x, o3 = t5.y, l3 = t5.yDivision, h3 = t5.elSeries, c3 = this.w, d3 = i3.i, u3 = i3.j;
      if (c3.globals.isXNumeric) e3 = (o3 = (c3.globals.seriesX[d3][u3] - c3.globals.minX) / this.invertedXRatio - a3) + a3 * this.visibleI;
      else if (c3.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
        var g3 = this.barHelpers.getZeroValueEncounters({ i: d3, j: u3 }), p3 = g3.nonZeroColumns, f3 = g3.zeroEncounters;
        p3 > 0 && (a3 = this.seriesLen * a3 / p3), e3 = o3 + a3 * this.visibleI, e3 -= a3 * f3;
      } else e3 = o3 + a3 * this.visibleI;
      this.isFunnel && (r3 -= (this.barHelpers.getXForValue(this.series[d3][u3], r3) - r3) / 2), n3 = this.barHelpers.getXForValue(this.series[d3][u3], r3);
      var x3 = this.barHelpers.getBarpaths({ barYPosition: e3, barHeight: a3, x1: r3, x2: n3, strokeWidth: s3, isReversed: this.isReversed, series: this.series, realIndex: i3.realIndex, i: d3, j: u3, w: c3 });
      return c3.globals.isXNumeric || (o3 += l3), this.barHelpers.barBackground({ j: u3, i: d3, y1: e3 - a3 * this.visibleI, y2: a3 * this.seriesLen, elSeries: h3 }), { pathTo: x3.pathTo, pathFrom: x3.pathFrom, x1: r3, x: n3, y: o3, goalX: this.barHelpers.getGoalValues("x", r3, null, d3, u3), barYPosition: e3, barHeight: a3 };
    } }, { key: "drawColumnPaths", value: function(t5) {
      var e3, i3 = t5.indexes, a3 = t5.x, s3 = t5.y, r3 = t5.xDivision, n3 = t5.barWidth, o3 = t5.zeroH, l3 = t5.strokeWidth, h3 = t5.elSeries, c3 = this.w, d3 = i3.realIndex, u3 = i3.translationsIndex, g3 = i3.i, p3 = i3.j, f3 = i3.bc;
      if (c3.globals.isXNumeric) {
        var x3 = this.getBarXForNumericXAxis({ x: a3, j: p3, realIndex: d3, barWidth: n3 });
        a3 = x3.x, e3 = x3.barXPosition;
      } else if (c3.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
        var b3 = this.barHelpers.getZeroValueEncounters({ i: g3, j: p3 }), m3 = b3.nonZeroColumns, v3 = b3.zeroEncounters;
        m3 > 0 && (n3 = this.seriesLen * n3 / m3), e3 = a3 + n3 * this.visibleI, e3 -= n3 * v3;
      } else e3 = a3 + n3 * this.visibleI;
      s3 = this.barHelpers.getYForValue(this.series[g3][p3], o3, u3);
      var y3 = this.barHelpers.getColumnPaths({ barXPosition: e3, barWidth: n3, y1: o3, y2: s3, strokeWidth: l3, isReversed: this.isReversed, series: this.series, realIndex: d3, i: g3, j: p3, w: c3 });
      return c3.globals.isXNumeric || (a3 += r3), this.barHelpers.barBackground({ bc: f3, j: p3, i: g3, x1: e3 - l3 / 2 - n3 * this.visibleI, x2: n3 * this.seriesLen + l3 / 2, elSeries: h3 }), { pathTo: y3.pathTo, pathFrom: y3.pathFrom, x: a3, y: s3, goalY: this.barHelpers.getGoalValues("y", null, o3, g3, p3, u3), barXPosition: e3, barWidth: n3 };
    } }, { key: "getBarXForNumericXAxis", value: function(t5) {
      var e3 = t5.x, i3 = t5.barWidth, a3 = t5.realIndex, s3 = t5.j, r3 = this.w, n3 = a3;
      return r3.globals.seriesX[a3].length || (n3 = r3.globals.maxValsInArrayIndex), v2.isNumber(r3.globals.seriesX[n3][s3]) && (e3 = (r3.globals.seriesX[n3][s3] - r3.globals.minX) / this.xRatio - i3 * this.seriesLen / 2), { barXPosition: e3 + i3 * this.visibleI, x: e3 };
    } }, { key: "getPreviousPath", value: function(t5, e3) {
      for (var i3 = this.w, a3 = "M 0 0", s3 = 0; s3 < i3.globals.previousPaths.length; s3++) {
        var r3 = i3.globals.previousPaths[s3];
        r3.paths && r3.paths.length > 0 && parseInt(r3.realIndex, 10) === parseInt(t5, 10) && void 0 !== i3.globals.previousPaths[s3].paths[e3] && (a3 = i3.globals.previousPaths[s3].paths[e3].d);
      }
      return a3;
    } }]), t4;
  }();
  var Ia = function(t4) {
    h2(a3, Pa);
    var e3 = n2(a3);
    function a3() {
      return i2(this, a3), e3.apply(this, arguments);
    }
    return s2(a3, [{ key: "draw", value: function(t5, e4) {
      var i3 = this, a4 = this.w;
      this.graphics = new Mi2(this.ctx), this.bar = new Pa(this.ctx, this.xyRatios);
      var s3 = new Pi2(this.ctx, a4);
      t5 = s3.getLogSeries(t5), this.yRatio = s3.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t5), "100%" === a4.config.chart.stackType && (t5 = a4.globals.comboCharts ? e4.map(function(t6) {
        return a4.globals.seriesPercent[t6];
      }) : a4.globals.seriesPercent.slice()), this.series = t5, this.barHelpers.initializeStackedPrevVars(this);
      for (var r3 = this.graphics.group({ class: "apexcharts-bar-series apexcharts-plot-series" }), n3 = 0, o3 = 0, l3 = function(s4, l4) {
        var h4 = void 0, c4 = void 0, d3 = void 0, g3 = void 0, p3 = a4.globals.comboCharts ? e4[s4] : s4, f3 = i3.barHelpers.getGroupIndex(p3), x3 = f3.groupIndex, b3 = f3.columnGroupIndex;
        i3.groupCtx = i3[a4.globals.seriesGroups[x3]];
        var m3 = [], y3 = [], w3 = 0;
        i3.yRatio.length > 1 && (i3.yaxisIndex = a4.globals.seriesYAxisReverseMap[p3][0], w3 = p3), i3.isReversed = a4.config.yaxis[i3.yaxisIndex] && a4.config.yaxis[i3.yaxisIndex].reversed;
        var k3 = i3.graphics.group({ class: "apexcharts-series", seriesName: v2.escapeString(a4.globals.seriesNames[p3]), rel: s4 + 1, "data:realIndex": p3 });
        i3.ctx.series.addCollapsedClassToSeries(k3, p3);
        var A3 = i3.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": p3 }), C3 = i3.graphics.group({ class: "apexcharts-bar-goals-markers" }), S3 = 0, L3 = 0, M3 = i3.initialPositions(n3, o3, h4, c4, d3, g3, w3);
        o3 = M3.y, S3 = M3.barHeight, c4 = M3.yDivision, g3 = M3.zeroW, n3 = M3.x, L3 = M3.barWidth, h4 = M3.xDivision, d3 = M3.zeroH, a4.globals.barHeight = S3, a4.globals.barWidth = L3, i3.barHelpers.initializeStackedXYVars(i3), 1 === i3.groupCtx.prevY.length && i3.groupCtx.prevY[0].every(function(t6) {
          return isNaN(t6);
        }) && (i3.groupCtx.prevY[0] = i3.groupCtx.prevY[0].map(function() {
          return d3;
        }), i3.groupCtx.prevYF[0] = i3.groupCtx.prevYF[0].map(function() {
          return 0;
        }));
        for (var P3 = 0; P3 < a4.globals.dataPoints; P3++) {
          var I3 = i3.barHelpers.getStrokeWidth(s4, P3, p3), T3 = { indexes: { i: s4, j: P3, realIndex: p3, translationsIndex: w3, bc: l4 }, strokeWidth: I3, x: n3, y: o3, elSeries: k3, columnGroupIndex: b3, seriesGroup: a4.globals.seriesGroups[x3] }, z3 = null;
          i3.isHorizontal ? (z3 = i3.drawStackedBarPaths(u2(u2({}, T3), {}, { zeroW: g3, barHeight: S3, yDivision: c4 })), L3 = i3.series[s4][P3] / i3.invertedYRatio) : (z3 = i3.drawStackedColumnPaths(u2(u2({}, T3), {}, { xDivision: h4, barWidth: L3, zeroH: d3 })), S3 = i3.series[s4][P3] / i3.yRatio[w3]);
          var X3 = i3.barHelpers.drawGoalLine({ barXPosition: z3.barXPosition, barYPosition: z3.barYPosition, goalX: z3.goalX, goalY: z3.goalY, barHeight: S3, barWidth: L3 });
          X3 && C3.add(X3), o3 = z3.y, n3 = z3.x, m3.push(n3), y3.push(o3);
          var R3 = i3.barHelpers.getPathFillColor(t5, s4, P3, p3), E3 = "", Y3 = a4.globals.isBarHorizontal ? "apexcharts-flip-x" : "apexcharts-flip-y";
          ("bottom" === i3.barHelpers.arrBorderRadius[p3][P3] && a4.globals.series[p3][P3] > 0 || "top" === i3.barHelpers.arrBorderRadius[p3][P3] && a4.globals.series[p3][P3] < 0) && (E3 = Y3), k3 = i3.renderSeries(u2(u2({ realIndex: p3, pathFill: R3.color }, R3.useRangeColor ? { lineFill: R3.color } : {}), {}, { j: P3, i: s4, columnGroupIndex: b3, pathFrom: z3.pathFrom, pathTo: z3.pathTo, strokeWidth: I3, elSeries: k3, x: n3, y: o3, series: t5, barHeight: S3, barWidth: L3, elDataLabelsWrap: A3, elGoalsMarkers: C3, type: "bar", visibleSeries: b3, classes: E3 }));
        }
        a4.globals.seriesXvalues[p3] = m3, a4.globals.seriesYvalues[p3] = y3, i3.groupCtx.prevY.push(i3.groupCtx.yArrj), i3.groupCtx.prevYF.push(i3.groupCtx.yArrjF), i3.groupCtx.prevYVal.push(i3.groupCtx.yArrjVal), i3.groupCtx.prevX.push(i3.groupCtx.xArrj), i3.groupCtx.prevXF.push(i3.groupCtx.xArrjF), i3.groupCtx.prevXVal.push(i3.groupCtx.xArrjVal), r3.add(k3);
      }, h3 = 0, c3 = 0; h3 < t5.length; h3++, c3++) l3(h3, c3);
      return r3;
    } }, { key: "initialPositions", value: function(t5, e4, i3, a4, s3, r3, n3) {
      var o3, l3, h3 = this.w;
      if (this.isHorizontal) {
        a4 = h3.globals.gridHeight / h3.globals.dataPoints;
        var c3 = h3.config.plotOptions.bar.barHeight;
        o3 = -1 === String(c3).indexOf("%") ? parseInt(c3, 10) : a4 * parseInt(c3, 10) / 100, r3 = h3.globals.padHorizontal + (this.isReversed ? h3.globals.gridWidth - this.baseLineInvertedY : this.baseLineInvertedY), e4 = (a4 - o3) / 2;
      } else {
        l3 = i3 = h3.globals.gridWidth / h3.globals.dataPoints;
        var d3 = h3.config.plotOptions.bar.columnWidth;
        h3.globals.isXNumeric && h3.globals.dataPoints > 1 ? l3 = (i3 = h3.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : -1 === String(d3).indexOf("%") ? l3 = parseInt(d3, 10) : l3 *= parseInt(d3, 10) / 100, s3 = this.isReversed ? this.baseLineY[n3] : h3.globals.gridHeight - this.baseLineY[n3], t5 = h3.globals.padHorizontal + (i3 - l3) / 2;
      }
      var u3 = h3.globals.barGroups.length || 1;
      return { x: t5, y: e4, yDivision: a4, xDivision: i3, barHeight: o3 / u3, barWidth: l3 / u3, zeroH: s3, zeroW: r3 };
    } }, { key: "drawStackedBarPaths", value: function(t5) {
      for (var e4, i3 = t5.indexes, a4 = t5.barHeight, s3 = t5.strokeWidth, r3 = t5.zeroW, n3 = t5.x, o3 = t5.y, l3 = t5.columnGroupIndex, h3 = t5.seriesGroup, c3 = t5.yDivision, d3 = t5.elSeries, u3 = this.w, g3 = o3 + l3 * a4, p3 = i3.i, f3 = i3.j, x3 = i3.realIndex, b3 = i3.translationsIndex, m3 = 0, v3 = 0; v3 < this.groupCtx.prevXF.length; v3++) m3 += this.groupCtx.prevXF[v3][f3];
      var y3 = p3;
      if (u3.config.series[x3].name && (y3 = h3.indexOf(u3.config.series[x3].name)), y3 > 0) {
        var w3 = r3;
        this.groupCtx.prevXVal[y3 - 1][f3] < 0 ? w3 = this.series[p3][f3] >= 0 ? this.groupCtx.prevX[y3 - 1][f3] + m3 - 2 * (this.isReversed ? m3 : 0) : this.groupCtx.prevX[y3 - 1][f3] : this.groupCtx.prevXVal[y3 - 1][f3] >= 0 && (w3 = this.series[p3][f3] >= 0 ? this.groupCtx.prevX[y3 - 1][f3] : this.groupCtx.prevX[y3 - 1][f3] - m3 + 2 * (this.isReversed ? m3 : 0)), e4 = w3;
      } else e4 = r3;
      n3 = null === this.series[p3][f3] ? e4 : e4 + this.series[p3][f3] / this.invertedYRatio - 2 * (this.isReversed ? this.series[p3][f3] / this.invertedYRatio : 0);
      var k3 = this.barHelpers.getBarpaths({ barYPosition: g3, barHeight: a4, x1: e4, x2: n3, strokeWidth: s3, isReversed: this.isReversed, series: this.series, realIndex: i3.realIndex, seriesGroup: h3, i: p3, j: f3, w: u3 });
      return this.barHelpers.barBackground({ j: f3, i: p3, y1: g3, y2: a4, elSeries: d3 }), o3 += c3, { pathTo: k3.pathTo, pathFrom: k3.pathFrom, goalX: this.barHelpers.getGoalValues("x", r3, null, p3, f3, b3), barXPosition: e4, barYPosition: g3, x: n3, y: o3 };
    } }, { key: "drawStackedColumnPaths", value: function(t5) {
      var e4 = t5.indexes, i3 = t5.x, a4 = t5.y, s3 = t5.xDivision, r3 = t5.barWidth, n3 = t5.zeroH, o3 = t5.columnGroupIndex, l3 = t5.seriesGroup, h3 = t5.elSeries, c3 = this.w, d3 = e4.i, u3 = e4.j, g3 = e4.bc, p3 = e4.realIndex, f3 = e4.translationsIndex;
      if (c3.globals.isXNumeric) {
        var x3 = c3.globals.seriesX[p3][u3];
        x3 || (x3 = 0), i3 = (x3 - c3.globals.minX) / this.xRatio - r3 / 2 * c3.globals.barGroups.length;
      }
      for (var b3, m3 = i3 + o3 * r3, v3 = 0, y3 = 0; y3 < this.groupCtx.prevYF.length; y3++) v3 += isNaN(this.groupCtx.prevYF[y3][u3]) ? 0 : this.groupCtx.prevYF[y3][u3];
      var w3 = d3;
      if (l3 && (w3 = l3.indexOf(c3.globals.seriesNames[p3])), w3 > 0 && !c3.globals.isXNumeric || w3 > 0 && c3.globals.isXNumeric && c3.globals.seriesX[p3 - 1][u3] === c3.globals.seriesX[p3][u3]) {
        var k3, A3, C3, S3 = Math.min(this.yRatio.length + 1, p3 + 1);
        if (void 0 !== this.groupCtx.prevY[w3 - 1] && this.groupCtx.prevY[w3 - 1].length) for (var L3 = 1; L3 < S3; L3++) {
          var M3;
          if (!isNaN(null === (M3 = this.groupCtx.prevY[w3 - L3]) || void 0 === M3 ? void 0 : M3[u3])) {
            C3 = this.groupCtx.prevY[w3 - L3][u3];
            break;
          }
        }
        for (var P3 = 1; P3 < S3; P3++) {
          var I3, T3;
          if ((null === (I3 = this.groupCtx.prevYVal[w3 - P3]) || void 0 === I3 ? void 0 : I3[u3]) < 0) {
            A3 = this.series[d3][u3] >= 0 ? C3 - v3 + 2 * (this.isReversed ? v3 : 0) : C3;
            break;
          }
          if ((null === (T3 = this.groupCtx.prevYVal[w3 - P3]) || void 0 === T3 ? void 0 : T3[u3]) >= 0) {
            A3 = this.series[d3][u3] >= 0 ? C3 : C3 + v3 - 2 * (this.isReversed ? v3 : 0);
            break;
          }
        }
        void 0 === A3 && (A3 = c3.globals.gridHeight), b3 = null !== (k3 = this.groupCtx.prevYF[0]) && void 0 !== k3 && k3.every(function(t6) {
          return 0 === t6;
        }) && this.groupCtx.prevYF.slice(1, w3).every(function(t6) {
          return t6.every(function(t7) {
            return isNaN(t7);
          });
        }) ? n3 : A3;
      } else b3 = n3;
      a4 = this.series[d3][u3] ? b3 - this.series[d3][u3] / this.yRatio[f3] + 2 * (this.isReversed ? this.series[d3][u3] / this.yRatio[f3] : 0) : b3;
      var z3 = this.barHelpers.getColumnPaths({ barXPosition: m3, barWidth: r3, y1: b3, y2: a4, yRatio: this.yRatio[f3], strokeWidth: this.strokeWidth, isReversed: this.isReversed, series: this.series, seriesGroup: l3, realIndex: e4.realIndex, i: d3, j: u3, w: c3 });
      return this.barHelpers.barBackground({ bc: g3, j: u3, i: d3, x1: m3, x2: r3, elSeries: h3 }), { pathTo: z3.pathTo, pathFrom: z3.pathFrom, goalY: this.barHelpers.getGoalValues("y", null, n3, d3, u3), barXPosition: m3, x: c3.globals.isXNumeric ? i3 : i3 + s3, y: a4 };
    } }]), a3;
  }();
  var Ta = function(t4) {
    h2(a3, Pa);
    var e3 = n2(a3);
    function a3() {
      return i2(this, a3), e3.apply(this, arguments);
    }
    return s2(a3, [{ key: "draw", value: function(t5, e4, i3) {
      var a4 = this, s3 = this.w, r3 = new Mi2(this.ctx), n3 = s3.globals.comboCharts ? e4 : s3.config.chart.type, o3 = new ji2(this.ctx);
      this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = s3.config.plotOptions.bar.horizontal, this.isOHLC = this.candlestickOptions && "ohlc" === this.candlestickOptions.type;
      var l3 = new Pi2(this.ctx, s3);
      t5 = l3.getLogSeries(t5), this.series = t5, this.yRatio = l3.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t5);
      for (var h3 = r3.group({ class: "apexcharts-".concat(n3, "-series apexcharts-plot-series") }), c3 = function(e5) {
        a4.isBoxPlot = "boxPlot" === s3.config.chart.type || "boxPlot" === s3.config.series[e5].type;
        var n4, l4, c4, d4, g3 = void 0, p3 = void 0, f3 = [], x3 = [], b3 = s3.globals.comboCharts ? i3[e5] : e5, m3 = a4.barHelpers.getGroupIndex(b3).columnGroupIndex, y3 = r3.group({ class: "apexcharts-series", seriesName: v2.escapeString(s3.globals.seriesNames[b3]), rel: e5 + 1, "data:realIndex": b3 });
        a4.ctx.series.addCollapsedClassToSeries(y3, b3), t5[e5].length > 0 && (a4.visibleI = a4.visibleI + 1);
        var w3, k3, A3 = 0;
        a4.yRatio.length > 1 && (a4.yaxisIndex = s3.globals.seriesYAxisReverseMap[b3][0], A3 = b3);
        var C3 = a4.barHelpers.initialPositions(b3);
        p3 = C3.y, w3 = C3.barHeight, l4 = C3.yDivision, d4 = C3.zeroW, g3 = C3.x, k3 = C3.barWidth, n4 = C3.xDivision, c4 = C3.zeroH, x3.push(g3 + k3 / 2);
        for (var S3 = r3.group({ class: "apexcharts-datalabels", "data:realIndex": b3 }), L3 = r3.group({ class: "apexcharts-bar-goals-markers" }), M3 = function(i4) {
          var r4 = a4.barHelpers.getStrokeWidth(e5, i4, b3), h4 = null, v3 = { indexes: { i: e5, j: i4, realIndex: b3, translationsIndex: A3 }, x: g3, y: p3, strokeWidth: r4, elSeries: y3 };
          h4 = a4.isHorizontal ? a4.drawHorizontalBoxPaths(u2(u2({}, v3), {}, { yDivision: l4, barHeight: w3, zeroW: d4 })) : a4.drawVerticalBoxPaths(u2(u2({}, v3), {}, { xDivision: n4, barWidth: k3, zeroH: c4 })), p3 = h4.y, g3 = h4.x;
          var C4 = a4.barHelpers.drawGoalLine({ barXPosition: h4.barXPosition, barYPosition: h4.barYPosition, goalX: h4.goalX, goalY: h4.goalY, barHeight: w3, barWidth: k3 });
          C4 && L3.add(C4), i4 > 0 && x3.push(g3 + k3 / 2), f3.push(p3), h4.pathTo.forEach(function(n5, l5) {
            var c5 = !a4.isBoxPlot && a4.candlestickOptions.wick.useFillColor ? h4.color[l5] : s3.globals.stroke.colors[e5], d5 = o3.fillPath({ seriesNumber: b3, dataPointIndex: i4, color: h4.color[l5], value: t5[e5][i4] });
            a4.renderSeries({ realIndex: b3, pathFill: d5, lineFill: c5, j: i4, i: e5, pathFrom: h4.pathFrom, pathTo: n5, strokeWidth: r4, elSeries: y3, x: g3, y: p3, series: t5, columnGroupIndex: m3, barHeight: w3, barWidth: k3, elDataLabelsWrap: S3, elGoalsMarkers: L3, visibleSeries: a4.visibleI, type: s3.config.chart.type });
          });
        }, P3 = 0; P3 < s3.globals.dataPoints; P3++) M3(P3);
        s3.globals.seriesXvalues[b3] = x3, s3.globals.seriesYvalues[b3] = f3, h3.add(y3);
      }, d3 = 0; d3 < t5.length; d3++) c3(d3);
      return h3;
    } }, { key: "drawVerticalBoxPaths", value: function(t5) {
      var e4 = t5.indexes, i3 = t5.x;
      t5.y;
      var a4 = t5.xDivision, s3 = t5.barWidth, r3 = t5.zeroH, n3 = t5.strokeWidth, o3 = this.w, l3 = new Mi2(this.ctx), h3 = e4.i, c3 = e4.j, d3 = o3.config.plotOptions.candlestick.colors, u3 = this.boxOptions.colors, g3 = e4.realIndex, p3 = function(t6) {
        return Array.isArray(t6) ? t6[g3] : t6;
      }, f3 = p3(d3.upward), x3 = p3(d3.downward), b3 = this.yRatio[e4.translationsIndex], m3 = this.getOHLCValue(g3, c3), v3 = r3, y3 = r3, w3 = m3.o < m3.c ? [f3] : [x3];
      this.isBoxPlot && (w3 = [p3(u3.lower), p3(u3.upper)]);
      var k3 = Math.min(m3.o, m3.c), A3 = Math.max(m3.o, m3.c), C3 = m3.m;
      o3.globals.isXNumeric && (i3 = (o3.globals.seriesX[g3][c3] - o3.globals.minX) / this.xRatio - s3 / 2);
      var S3 = i3 + s3 * this.visibleI;
      void 0 === this.series[h3][c3] || null === this.series[h3][c3] ? (k3 = r3, A3 = r3) : (k3 = r3 - k3 / b3, A3 = r3 - A3 / b3, v3 = r3 - m3.h / b3, y3 = r3 - m3.l / b3, C3 = r3 - m3.m / b3);
      var L3 = l3.move(S3, r3), M3 = l3.move(S3 + s3 / 2, k3);
      if (o3.globals.previousPaths.length > 0 && (M3 = this.getPreviousPath(g3, c3, true)), this.isOHLC) {
        var P3 = S3 + s3 / 2, I3 = r3 - m3.o / b3, T3 = r3 - m3.c / b3;
        L3 = [l3.move(P3, v3) + l3.line(P3, y3) + l3.move(P3, I3) + l3.line(S3, I3) + l3.move(P3, T3) + l3.line(S3 + s3, T3)];
      } else L3 = this.isBoxPlot ? [l3.move(S3, k3) + l3.line(S3 + s3 / 2, k3) + l3.line(S3 + s3 / 2, v3) + l3.line(S3 + s3 / 4, v3) + l3.line(S3 + s3 - s3 / 4, v3) + l3.line(S3 + s3 / 2, v3) + l3.line(S3 + s3 / 2, k3) + l3.line(S3 + s3, k3) + l3.line(S3 + s3, C3) + l3.line(S3, C3) + l3.line(S3, k3 + n3 / 2), l3.move(S3, C3) + l3.line(S3 + s3, C3) + l3.line(S3 + s3, A3) + l3.line(S3 + s3 / 2, A3) + l3.line(S3 + s3 / 2, y3) + l3.line(S3 + s3 - s3 / 4, y3) + l3.line(S3 + s3 / 4, y3) + l3.line(S3 + s3 / 2, y3) + l3.line(S3 + s3 / 2, A3) + l3.line(S3, A3) + l3.line(S3, C3) + "z"] : [l3.move(S3, A3) + l3.line(S3 + s3 / 2, A3) + l3.line(S3 + s3 / 2, v3) + l3.line(S3 + s3 / 2, A3) + l3.line(S3 + s3, A3) + l3.line(S3 + s3, k3) + l3.line(S3 + s3 / 2, k3) + l3.line(S3 + s3 / 2, y3) + l3.line(S3 + s3 / 2, k3) + l3.line(S3, k3) + l3.line(S3, A3 - n3 / 2)];
      return M3 += l3.move(S3, k3), o3.globals.isXNumeric || (i3 += a4), { pathTo: L3, pathFrom: M3, x: i3, y: A3, goalY: this.barHelpers.getGoalValues("y", null, r3, h3, c3, e4.translationsIndex), barXPosition: S3, color: w3 };
    } }, { key: "drawHorizontalBoxPaths", value: function(t5) {
      var e4 = t5.indexes;
      t5.x;
      var i3 = t5.y, a4 = t5.yDivision, s3 = t5.barHeight, r3 = t5.zeroW, n3 = t5.strokeWidth, o3 = this.w, l3 = new Mi2(this.ctx), h3 = e4.i, c3 = e4.j, d3 = this.boxOptions.colors.lower;
      this.isBoxPlot && (d3 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
      var u3 = this.invertedYRatio, g3 = e4.realIndex, p3 = this.getOHLCValue(g3, c3), f3 = r3, x3 = r3, b3 = Math.min(p3.o, p3.c), m3 = Math.max(p3.o, p3.c), v3 = p3.m;
      o3.globals.isXNumeric && (i3 = (o3.globals.seriesX[g3][c3] - o3.globals.minX) / this.invertedXRatio - s3 / 2);
      var y3 = i3 + s3 * this.visibleI;
      void 0 === this.series[h3][c3] || null === this.series[h3][c3] ? (b3 = r3, m3 = r3) : (b3 = r3 + b3 / u3, m3 = r3 + m3 / u3, f3 = r3 + p3.h / u3, x3 = r3 + p3.l / u3, v3 = r3 + p3.m / u3);
      var w3 = l3.move(r3, y3), k3 = l3.move(b3, y3 + s3 / 2);
      return o3.globals.previousPaths.length > 0 && (k3 = this.getPreviousPath(g3, c3, true)), w3 = [l3.move(b3, y3) + l3.line(b3, y3 + s3 / 2) + l3.line(f3, y3 + s3 / 2) + l3.line(f3, y3 + s3 / 2 - s3 / 4) + l3.line(f3, y3 + s3 / 2 + s3 / 4) + l3.line(f3, y3 + s3 / 2) + l3.line(b3, y3 + s3 / 2) + l3.line(b3, y3 + s3) + l3.line(v3, y3 + s3) + l3.line(v3, y3) + l3.line(b3 + n3 / 2, y3), l3.move(v3, y3) + l3.line(v3, y3 + s3) + l3.line(m3, y3 + s3) + l3.line(m3, y3 + s3 / 2) + l3.line(x3, y3 + s3 / 2) + l3.line(x3, y3 + s3 - s3 / 4) + l3.line(x3, y3 + s3 / 4) + l3.line(x3, y3 + s3 / 2) + l3.line(m3, y3 + s3 / 2) + l3.line(m3, y3) + l3.line(v3, y3) + "z"], k3 += l3.move(b3, y3), o3.globals.isXNumeric || (i3 += a4), { pathTo: w3, pathFrom: k3, x: m3, y: i3, goalX: this.barHelpers.getGoalValues("x", r3, null, h3, c3), barYPosition: y3, color: d3 };
    } }, { key: "getOHLCValue", value: function(t5, e4) {
      var i3 = this.w, a4 = new Pi2(this.ctx, i3), s3 = a4.getLogValAtSeriesIndex(i3.globals.seriesCandleH[t5][e4], t5), r3 = a4.getLogValAtSeriesIndex(i3.globals.seriesCandleO[t5][e4], t5), n3 = a4.getLogValAtSeriesIndex(i3.globals.seriesCandleM[t5][e4], t5), o3 = a4.getLogValAtSeriesIndex(i3.globals.seriesCandleC[t5][e4], t5), l3 = a4.getLogValAtSeriesIndex(i3.globals.seriesCandleL[t5][e4], t5);
      return { o: this.isBoxPlot ? s3 : r3, h: this.isBoxPlot ? r3 : s3, m: n3, l: this.isBoxPlot ? o3 : l3, c: this.isBoxPlot ? l3 : o3 };
    } }]), a3;
  }();
  var za = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "checkColorRange", value: function() {
      var t5 = this.w, e3 = false, i3 = t5.config.plotOptions[t5.config.chart.type];
      return i3.colorScale.ranges.length > 0 && i3.colorScale.ranges.map(function(t6, i4) {
        t6.from <= 0 && (e3 = true);
      }), e3;
    } }, { key: "getShadeColor", value: function(t5, e3, i3, a3) {
      var s3 = this.w, r3 = 1, n3 = s3.config.plotOptions[t5].shadeIntensity, o3 = this.determineColor(t5, e3, i3);
      s3.globals.hasNegs || a3 ? r3 = s3.config.plotOptions[t5].reverseNegativeShade ? o3.percent < 0 ? o3.percent / 100 * (1.25 * n3) : (1 - o3.percent / 100) * (1.25 * n3) : o3.percent <= 0 ? 1 - (1 + o3.percent / 100) * n3 : (1 - o3.percent / 100) * n3 : (r3 = 1 - o3.percent / 100, "treemap" === t5 && (r3 = (1 - o3.percent / 100) * (1.25 * n3)));
      var l3 = o3.color, h3 = new v2();
      if (s3.config.plotOptions[t5].enableShades) if ("dark" === this.w.config.theme.mode) {
        var c3 = h3.shadeColor(-1 * r3, o3.color);
        l3 = v2.hexToRgba(v2.isColorHex(c3) ? c3 : v2.rgb2hex(c3), s3.config.fill.opacity);
      } else {
        var d3 = h3.shadeColor(r3, o3.color);
        l3 = v2.hexToRgba(v2.isColorHex(d3) ? d3 : v2.rgb2hex(d3), s3.config.fill.opacity);
      }
      return { color: l3, colorProps: o3 };
    } }, { key: "determineColor", value: function(t5, e3, i3) {
      var a3 = this.w, s3 = a3.globals.series[e3][i3], r3 = a3.config.plotOptions[t5], n3 = r3.colorScale.inverse ? i3 : e3;
      r3.distributed && "treemap" === a3.config.chart.type && (n3 = i3);
      var o3 = a3.globals.colors[n3], l3 = null, h3 = Math.min.apply(Math, f2(a3.globals.series[e3])), c3 = Math.max.apply(Math, f2(a3.globals.series[e3]));
      r3.distributed || "heatmap" !== t5 || (h3 = a3.globals.minY, c3 = a3.globals.maxY), void 0 !== r3.colorScale.min && (h3 = r3.colorScale.min < a3.globals.minY ? r3.colorScale.min : a3.globals.minY, c3 = r3.colorScale.max > a3.globals.maxY ? r3.colorScale.max : a3.globals.maxY);
      var d3 = Math.abs(c3) + Math.abs(h3), u3 = 100 * s3 / (0 === d3 ? d3 - 1e-6 : d3);
      r3.colorScale.ranges.length > 0 && r3.colorScale.ranges.map(function(t6, e4) {
        if (s3 >= t6.from && s3 <= t6.to) {
          o3 = t6.color, l3 = t6.foreColor ? t6.foreColor : null, h3 = t6.from, c3 = t6.to;
          var i4 = Math.abs(c3) + Math.abs(h3);
          u3 = 100 * s3 / (0 === i4 ? i4 - 1e-6 : i4);
        }
      });
      return { color: o3, foreColor: l3, percent: u3 };
    } }, { key: "calculateDataLabels", value: function(t5) {
      var e3 = t5.text, i3 = t5.x, a3 = t5.y, s3 = t5.i, r3 = t5.j, n3 = t5.colorProps, o3 = t5.fontSize, l3 = this.w.config.dataLabels, h3 = new Mi2(this.ctx), c3 = new qi2(this.ctx), d3 = null;
      if (l3.enabled) {
        d3 = h3.group({ class: "apexcharts-data-labels" });
        var u3 = l3.offsetX, g3 = l3.offsetY, p3 = i3 + u3, f3 = a3 + parseFloat(l3.style.fontSize) / 3 + g3;
        c3.plotDataLabelsText({ x: p3, y: f3, text: e3, i: s3, j: r3, color: n3.foreColor, parent: d3, fontSize: o3, dataLabelsConfig: l3 });
      }
      return d3;
    } }, { key: "addListeners", value: function(t5) {
      var e3 = new Mi2(this.ctx);
      t5.node.addEventListener("mouseenter", e3.pathMouseEnter.bind(this, t5)), t5.node.addEventListener("mouseleave", e3.pathMouseLeave.bind(this, t5)), t5.node.addEventListener("mousedown", e3.pathMouseDown.bind(this, t5));
    } }]), t4;
  }();
  var Xa = function() {
    function t4(e3, a3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.xRatio = a3.xRatio, this.yRatio = a3.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new za(e3), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;
    }
    return s2(t4, [{ key: "draw", value: function(t5) {
      var e3 = this.w, i3 = new Mi2(this.ctx), a3 = i3.group({ class: "apexcharts-heatmap" });
      a3.attr("clip-path", "url(#gridRectMask".concat(e3.globals.cuid, ")"));
      var s3 = e3.globals.gridWidth / e3.globals.dataPoints, r3 = e3.globals.gridHeight / e3.globals.series.length, n3 = 0, o3 = false;
      this.negRange = this.helpers.checkColorRange();
      var l3 = t5.slice();
      e3.config.yaxis[0].reversed && (o3 = true, l3.reverse());
      for (var h3 = o3 ? 0 : l3.length - 1; o3 ? h3 < l3.length : h3 >= 0; o3 ? h3++ : h3--) {
        var c3 = i3.group({ class: "apexcharts-series apexcharts-heatmap-series", seriesName: v2.escapeString(e3.globals.seriesNames[h3]), rel: h3 + 1, "data:realIndex": h3 });
        if (this.ctx.series.addCollapsedClassToSeries(c3, h3), e3.config.chart.dropShadow.enabled) {
          var d3 = e3.config.chart.dropShadow;
          new Li2(this.ctx).dropShadow(c3, d3, h3);
        }
        for (var u3 = 0, g3 = e3.config.plotOptions.heatmap.shadeIntensity, p3 = 0, f3 = 0; f3 < e3.globals.dataPoints; f3++) if (e3.globals.seriesX.length && !e3.globals.allSeriesHasEqualX && e3.globals.minX + e3.globals.minXDiff * f3 < e3.globals.seriesX[h3][p3]) u3 += s3;
        else {
          if (p3 >= l3[h3].length) break;
          var x3 = this.helpers.getShadeColor(e3.config.chart.type, h3, p3, this.negRange), b3 = x3.color, m3 = x3.colorProps;
          if ("image" === e3.config.fill.type) b3 = new ji2(this.ctx).fillPath({ seriesNumber: h3, dataPointIndex: p3, opacity: e3.globals.hasNegs ? m3.percent < 0 ? 1 - (1 + m3.percent / 100) : g3 + m3.percent / 100 : m3.percent / 100, patternID: v2.randomId(), width: e3.config.fill.image.width ? e3.config.fill.image.width : s3, height: e3.config.fill.image.height ? e3.config.fill.image.height : r3 });
          var y3 = this.rectRadius, w3 = i3.drawRect(u3, n3, s3, r3, y3);
          if (w3.attr({ cx: u3, cy: n3 }), w3.node.classList.add("apexcharts-heatmap-rect"), c3.add(w3), w3.attr({ fill: b3, i: h3, index: h3, j: p3, val: t5[h3][p3], "stroke-width": this.strokeWidth, stroke: e3.config.plotOptions.heatmap.useFillColorAsStroke ? b3 : e3.globals.stroke.colors[0], color: b3 }), this.helpers.addListeners(w3), e3.config.chart.animations.enabled && !e3.globals.dataChanged) {
            var k3 = 1;
            e3.globals.resized || (k3 = e3.config.chart.animations.speed), this.animateHeatMap(w3, u3, n3, s3, r3, k3);
          }
          if (e3.globals.dataChanged) {
            var A3 = 1;
            if (this.dynamicAnim.enabled && e3.globals.shouldAnimate) {
              A3 = this.dynamicAnim.speed;
              var C3 = e3.globals.previousPaths[h3] && e3.globals.previousPaths[h3][p3] && e3.globals.previousPaths[h3][p3].color;
              C3 || (C3 = "rgba(255, 255, 255, 0)"), this.animateHeatColor(w3, v2.isColorHex(C3) ? C3 : v2.rgb2hex(C3), v2.isColorHex(b3) ? b3 : v2.rgb2hex(b3), A3);
            }
          }
          var S3 = (0, e3.config.dataLabels.formatter)(e3.globals.series[h3][p3], { value: e3.globals.series[h3][p3], seriesIndex: h3, dataPointIndex: p3, w: e3 }), L3 = this.helpers.calculateDataLabels({ text: S3, x: u3 + s3 / 2, y: n3 + r3 / 2, i: h3, j: p3, colorProps: m3, series: l3 });
          null !== L3 && c3.add(L3), u3 += s3, p3++;
        }
        n3 += r3, a3.add(c3);
      }
      var M3 = e3.globals.yAxisScale[0].result.slice();
      return e3.config.yaxis[0].reversed ? M3.unshift("") : M3.push(""), e3.globals.yAxisScale[0].result = M3, a3;
    } }, { key: "animateHeatMap", value: function(t5, e3, i3, a3, s3, r3) {
      var n3 = new y2(this.ctx);
      n3.animateRect(t5, { x: e3 + a3 / 2, y: i3 + s3 / 2, width: 0, height: 0 }, { x: e3, y: i3, width: a3, height: s3 }, r3, function() {
        n3.animationCompleted(t5);
      });
    } }, { key: "animateHeatColor", value: function(t5, e3, i3, a3) {
      t5.attr({ fill: e3 }).animate(a3).attr({ fill: i3 });
    } }]), t4;
  }();
  var Ra = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "drawYAxisTexts", value: function(t5, e3, i3, a3) {
      var s3 = this.w, r3 = s3.config.yaxis[0], n3 = s3.globals.yLabelFormatters[0];
      return new Mi2(this.ctx).drawText({ x: t5 + r3.labels.offsetX, y: e3 + r3.labels.offsetY, text: n3(a3, i3), textAnchor: "middle", fontSize: r3.labels.style.fontSize, fontFamily: r3.labels.style.fontFamily, foreColor: Array.isArray(r3.labels.style.colors) ? r3.labels.style.colors[i3] : r3.labels.style.colors });
    } }]), t4;
  }();
  var Ea = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
      var a3 = this.w;
      this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== a3.globals.stroke.colors ? a3.globals.stroke.colors : a3.globals.colors, this.defaultSize = Math.min(a3.globals.gridWidth, a3.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = a3.globals.gridWidth / 2, "radialBar" === a3.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(a3.config.plotOptions.pie.endAngle - a3.config.plotOptions.pie.startAngle), this.initialAngle = a3.config.plotOptions.pie.startAngle % this.fullAngle, a3.globals.radialSize = this.defaultSize / 2.05 - a3.config.stroke.width - (a3.config.chart.sparkline.enabled ? 0 : a3.config.chart.dropShadow.blur), this.donutSize = a3.globals.radialSize * parseInt(a3.config.plotOptions.pie.donut.size, 10) / 100;
      var s3 = a3.config.plotOptions.pie.customScale, r3 = a3.globals.gridWidth / 2, n3 = a3.globals.gridHeight / 2;
      this.translateX = r3 - r3 * s3, this.translateY = n3 - n3 * s3, this.dataLabelsGroup = new Mi2(this.ctx).group({ class: "apexcharts-datalabels-group", transform: "translate(".concat(this.translateX, ", ").concat(this.translateY, ") scale(").concat(s3, ")") }), this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];
    }
    return s2(t4, [{ key: "draw", value: function(t5) {
      var e3 = this, i3 = this.w, a3 = new Mi2(this.ctx), s3 = a3.group({ class: "apexcharts-pie" });
      if (i3.globals.noData) return s3;
      for (var r3 = 0, n3 = 0; n3 < t5.length; n3++) r3 += v2.negToZero(t5[n3]);
      var o3 = [], l3 = a3.group();
      0 === r3 && (r3 = 1e-5), t5.forEach(function(t6) {
        e3.maxY = Math.max(e3.maxY, t6);
      }), i3.config.yaxis[0].max && (this.maxY = i3.config.yaxis[0].max), "back" === i3.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(s3);
      for (var h3 = 0; h3 < t5.length; h3++) {
        var c3 = this.fullAngle * v2.negToZero(t5[h3]) / r3;
        o3.push(c3), "polarArea" === this.chartType ? (o3[h3] = this.fullAngle / t5.length, this.sliceSizes.push(i3.globals.radialSize * t5[h3] / this.maxY)) : this.sliceSizes.push(i3.globals.radialSize);
      }
      if (i3.globals.dataChanged) {
        for (var d3, u3 = 0, g3 = 0; g3 < i3.globals.previousPaths.length; g3++) u3 += v2.negToZero(i3.globals.previousPaths[g3]);
        for (var p3 = 0; p3 < i3.globals.previousPaths.length; p3++) d3 = this.fullAngle * v2.negToZero(i3.globals.previousPaths[p3]) / u3, this.prevSectorAngleArr.push(d3);
      }
      if (this.donutSize < 0 && (this.donutSize = 0), "donut" === this.chartType) {
        var f3 = a3.drawCircle(this.donutSize);
        f3.attr({ cx: this.centerX, cy: this.centerY, fill: i3.config.plotOptions.pie.donut.background ? i3.config.plotOptions.pie.donut.background : "transparent" }), l3.add(f3);
      }
      var x3 = this.drawArcs(o3, t5);
      if (this.sliceLabels.forEach(function(t6) {
        x3.add(t6);
      }), l3.attr({ transform: "translate(".concat(this.translateX, ", ").concat(this.translateY, ") scale(").concat(i3.config.plotOptions.pie.customScale, ")") }), l3.add(x3), s3.add(l3), this.donutDataLabels.show) {
        var b3 = this.renderInnerDataLabels(this.dataLabelsGroup, this.donutDataLabels, { hollowSize: this.donutSize, centerX: this.centerX, centerY: this.centerY, opacity: this.donutDataLabels.show });
        s3.add(b3);
      }
      return "front" === i3.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(s3), s3;
    } }, { key: "drawArcs", value: function(t5, e3) {
      var i3 = this.w, a3 = new Li2(this.ctx), s3 = new Mi2(this.ctx), r3 = new ji2(this.ctx), n3 = s3.group({ class: "apexcharts-slices" }), o3 = this.initialAngle, l3 = this.initialAngle, h3 = this.initialAngle, c3 = this.initialAngle;
      this.strokeWidth = i3.config.stroke.show ? i3.config.stroke.width : 0;
      for (var d3 = 0; d3 < t5.length; d3++) {
        var u3 = s3.group({ class: "apexcharts-series apexcharts-pie-series", seriesName: v2.escapeString(i3.globals.seriesNames[d3]), rel: d3 + 1, "data:realIndex": d3 });
        n3.add(u3), l3 = c3, h3 = (o3 = h3) + t5[d3], c3 = l3 + this.prevSectorAngleArr[d3];
        var g3 = h3 < o3 ? this.fullAngle + h3 - o3 : h3 - o3, p3 = r3.fillPath({ seriesNumber: d3, size: this.sliceSizes[d3], value: e3[d3] }), f3 = this.getChangedPath(l3, c3), x3 = s3.drawPath({ d: f3, stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d3] : this.lineColorArr, strokeWidth: 0, fill: p3, fillOpacity: i3.config.fill.opacity, classes: "apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(d3) });
        if (x3.attr({ index: 0, j: d3 }), a3.setSelectionFilter(x3, 0, d3), i3.config.chart.dropShadow.enabled) {
          var b3 = i3.config.chart.dropShadow;
          a3.dropShadow(x3, b3, d3);
        }
        this.addListeners(x3, this.donutDataLabels), Mi2.setAttrs(x3.node, { "data:angle": g3, "data:startAngle": o3, "data:strokeWidth": this.strokeWidth, "data:value": e3[d3] });
        var m3 = { x: 0, y: 0 };
        "pie" === this.chartType || "polarArea" === this.chartType ? m3 = v2.polarToCartesian(this.centerX, this.centerY, i3.globals.radialSize / 1.25 + i3.config.plotOptions.pie.dataLabels.offset, (o3 + g3 / 2) % this.fullAngle) : "donut" === this.chartType && (m3 = v2.polarToCartesian(this.centerX, this.centerY, (i3.globals.radialSize + this.donutSize) / 2 + i3.config.plotOptions.pie.dataLabels.offset, (o3 + g3 / 2) % this.fullAngle)), u3.add(x3);
        var y3 = 0;
        if (!this.initialAnim || i3.globals.resized || i3.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (y3 = g3 / this.fullAngle * i3.config.chart.animations.speed) && (y3 = 1), this.animDur = y3 + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i3.globals.dataChanged ? this.animatePaths(x3, { size: this.sliceSizes[d3], endAngle: h3, startAngle: o3, prevStartAngle: l3, prevEndAngle: c3, animateStartingPos: true, i: d3, animBeginArr: this.animBeginArr, shouldSetPrevPaths: true, dur: i3.config.chart.animations.dynamicAnimation.speed }) : this.animatePaths(x3, { size: this.sliceSizes[d3], endAngle: h3, startAngle: o3, i: d3, totalItems: t5.length - 1, animBeginArr: this.animBeginArr, dur: y3 }), i3.config.plotOptions.pie.expandOnClick && "polarArea" !== this.chartType && x3.node.addEventListener("mouseup", this.pieClicked.bind(this, d3)), void 0 !== i3.globals.selectedDataPoints[0] && i3.globals.selectedDataPoints[0].indexOf(d3) > -1 && this.pieClicked(d3), i3.config.dataLabels.enabled) {
          var w3 = m3.x, k3 = m3.y, A3 = 100 * g3 / this.fullAngle + "%";
          if (0 !== g3 && i3.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t5[d3]) {
            var C3 = i3.config.dataLabels.formatter;
            void 0 !== C3 && (A3 = C3(i3.globals.seriesPercent[d3][0], { seriesIndex: d3, w: i3 }));
            var S3 = i3.globals.dataLabels.style.colors[d3], L3 = s3.group({ class: "apexcharts-datalabels" }), M3 = s3.drawText({ x: w3, y: k3, text: A3, textAnchor: "middle", fontSize: i3.config.dataLabels.style.fontSize, fontFamily: i3.config.dataLabels.style.fontFamily, fontWeight: i3.config.dataLabels.style.fontWeight, foreColor: S3 });
            if (L3.add(M3), i3.config.dataLabels.dropShadow.enabled) {
              var P3 = i3.config.dataLabels.dropShadow;
              a3.dropShadow(M3, P3);
            }
            M3.node.classList.add("apexcharts-pie-label"), i3.config.chart.animations.animate && false === i3.globals.resized && (M3.node.classList.add("apexcharts-pie-label-delay"), M3.node.style.animationDelay = i3.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(L3);
          }
        }
      }
      return n3;
    } }, { key: "addListeners", value: function(t5, e3) {
      var i3 = new Mi2(this.ctx);
      t5.node.addEventListener("mouseenter", i3.pathMouseEnter.bind(this, t5)), t5.node.addEventListener("mouseleave", i3.pathMouseLeave.bind(this, t5)), t5.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t5.node, e3)), t5.node.addEventListener("mousedown", i3.pathMouseDown.bind(this, t5)), this.donutDataLabels.total.showAlways || (t5.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t5.node, e3)), t5.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t5.node, e3)));
    } }, { key: "animatePaths", value: function(t5, e3) {
      var i3 = this.w, a3 = e3.endAngle < e3.startAngle ? this.fullAngle + e3.endAngle - e3.startAngle : e3.endAngle - e3.startAngle, s3 = a3, r3 = e3.startAngle, n3 = e3.startAngle;
      void 0 !== e3.prevStartAngle && void 0 !== e3.prevEndAngle && (r3 = e3.prevEndAngle, s3 = e3.prevEndAngle < e3.prevStartAngle ? this.fullAngle + e3.prevEndAngle - e3.prevStartAngle : e3.prevEndAngle - e3.prevStartAngle), e3.i === i3.config.series.length - 1 && (a3 + n3 > this.fullAngle ? e3.endAngle = e3.endAngle - (a3 + n3) : a3 + n3 < this.fullAngle && (e3.endAngle = e3.endAngle + (this.fullAngle - (a3 + n3)))), a3 === this.fullAngle && (a3 = this.fullAngle - 0.01), this.animateArc(t5, r3, n3, a3, s3, e3);
    } }, { key: "animateArc", value: function(t5, e3, i3, a3, s3, r3) {
      var n3, o3 = this, l3 = this.w, h3 = new y2(this.ctx), c3 = r3.size;
      (isNaN(e3) || isNaN(s3)) && (e3 = i3, s3 = a3, r3.dur = 0);
      var d3 = a3, u3 = i3, g3 = e3 < i3 ? this.fullAngle + e3 - i3 : e3 - i3;
      l3.globals.dataChanged && r3.shouldSetPrevPaths && r3.prevEndAngle && (n3 = o3.getPiePath({ me: o3, startAngle: r3.prevStartAngle, angle: r3.prevEndAngle < r3.prevStartAngle ? this.fullAngle + r3.prevEndAngle - r3.prevStartAngle : r3.prevEndAngle - r3.prevStartAngle, size: c3 }), t5.attr({ d: n3 })), 0 !== r3.dur ? t5.animate(r3.dur, r3.animBeginArr[r3.i]).after(function() {
        "pie" !== o3.chartType && "donut" !== o3.chartType && "polarArea" !== o3.chartType || this.animate(l3.config.chart.animations.dynamicAnimation.speed).attr({ "stroke-width": o3.strokeWidth }), r3.i === l3.config.series.length - 1 && h3.animationCompleted(t5);
      }).during(function(l4) {
        d3 = g3 + (a3 - g3) * l4, r3.animateStartingPos && (d3 = s3 + (a3 - s3) * l4, u3 = e3 - s3 + (i3 - (e3 - s3)) * l4), n3 = o3.getPiePath({ me: o3, startAngle: u3, angle: d3, size: c3 }), t5.node.setAttribute("data:pathOrig", n3), t5.attr({ d: n3 });
      }) : (n3 = o3.getPiePath({ me: o3, startAngle: u3, angle: a3, size: c3 }), r3.isTrack || (l3.globals.animationEnded = true), t5.node.setAttribute("data:pathOrig", n3), t5.attr({ d: n3, "stroke-width": o3.strokeWidth }));
    } }, { key: "pieClicked", value: function(t5) {
      var e3, i3 = this.w, a3 = this, s3 = a3.sliceSizes[t5] + (i3.config.plotOptions.pie.expandOnClick ? 4 : 0), r3 = i3.globals.dom.Paper.findOne(".apexcharts-".concat(a3.chartType.toLowerCase(), "-slice-").concat(t5));
      if ("true" !== r3.attr("data:pieClicked")) {
        var n3 = i3.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");
        Array.prototype.forEach.call(n3, function(t6) {
          t6.setAttribute("data:pieClicked", "false");
          var e4 = t6.getAttribute("data:pathOrig");
          e4 && t6.setAttribute("d", e4);
        }), i3.globals.capturedDataPointIndex = t5, r3.attr("data:pieClicked", "true");
        var o3 = parseInt(r3.attr("data:startAngle"), 10), l3 = parseInt(r3.attr("data:angle"), 10);
        e3 = a3.getPiePath({ me: a3, startAngle: o3, angle: l3, size: s3 }), 360 !== l3 && r3.plot(e3);
      } else {
        r3.attr({ "data:pieClicked": "false" }), this.revertDataLabelsInner(r3.node, this.donutDataLabels);
        var h3 = r3.attr("data:pathOrig");
        r3.attr({ d: h3 });
      }
    } }, { key: "getChangedPath", value: function(t5, e3) {
      var i3 = "";
      return this.dynamicAnim && this.w.globals.dataChanged && (i3 = this.getPiePath({ me: this, startAngle: t5, angle: e3 - t5, size: this.size })), i3;
    } }, { key: "getPiePath", value: function(t5) {
      var e3, i3 = t5.me, a3 = t5.startAngle, s3 = t5.angle, r3 = t5.size, n3 = new Mi2(this.ctx), o3 = a3, l3 = Math.PI * (o3 - 90) / 180, h3 = s3 + a3;
      Math.ceil(h3) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (h3 = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - 0.01), Math.ceil(h3) > this.fullAngle && (h3 -= this.fullAngle);
      var c3 = Math.PI * (h3 - 90) / 180, d3 = i3.centerX + r3 * Math.cos(l3), u3 = i3.centerY + r3 * Math.sin(l3), g3 = i3.centerX + r3 * Math.cos(c3), p3 = i3.centerY + r3 * Math.sin(c3), f3 = v2.polarToCartesian(i3.centerX, i3.centerY, i3.donutSize, h3), x3 = v2.polarToCartesian(i3.centerX, i3.centerY, i3.donutSize, o3), b3 = s3 > 180 ? 1 : 0, m3 = ["M", d3, u3, "A", r3, r3, 0, b3, 1, g3, p3];
      return e3 = "donut" === i3.chartType ? [].concat(m3, ["L", f3.x, f3.y, "A", i3.donutSize, i3.donutSize, 0, b3, 0, x3.x, x3.y, "L", d3, u3, "z"]).join(" ") : "pie" === i3.chartType || "polarArea" === i3.chartType ? [].concat(m3, ["L", i3.centerX, i3.centerY, "L", d3, u3]).join(" ") : [].concat(m3).join(" "), n3.roundPathCorners(e3, 2 * this.strokeWidth);
    } }, { key: "drawPolarElements", value: function(t5) {
      var e3 = this.w, i3 = new ta(this.ctx), a3 = new Mi2(this.ctx), s3 = new Ra(this.ctx), r3 = a3.group(), n3 = a3.group(), o3 = i3.niceScale(0, Math.ceil(this.maxY), 0), l3 = o3.result.reverse(), h3 = o3.result.length;
      this.maxY = o3.niceMax;
      for (var c3 = e3.globals.radialSize, d3 = c3 / (h3 - 1), u3 = 0; u3 < h3 - 1; u3++) {
        var g3 = a3.drawCircle(c3);
        if (g3.attr({ cx: this.centerX, cy: this.centerY, fill: "none", "stroke-width": e3.config.plotOptions.polarArea.rings.strokeWidth, stroke: e3.config.plotOptions.polarArea.rings.strokeColor }), e3.config.yaxis[0].show) {
          var p3 = s3.drawYAxisTexts(this.centerX, this.centerY - c3 + parseInt(e3.config.yaxis[0].labels.style.fontSize, 10) / 2, u3, l3[u3]);
          n3.add(p3);
        }
        r3.add(g3), c3 -= d3;
      }
      this.drawSpokes(t5), t5.add(r3), t5.add(n3);
    } }, { key: "renderInnerDataLabels", value: function(t5, e3, i3) {
      var a3 = this.w, s3 = new Mi2(this.ctx), r3 = e3.total.show;
      t5.node.innerHTML = "", t5.node.style.opacity = i3.opacity;
      var n3, o3, l3 = i3.centerX, h3 = this.donutDataLabels.total.label ? i3.centerY : i3.centerY - i3.centerY / 6;
      n3 = void 0 === e3.name.color ? a3.globals.colors[0] : e3.name.color;
      var c3 = e3.name.fontSize, d3 = e3.name.fontFamily, u3 = e3.name.fontWeight;
      o3 = void 0 === e3.value.color ? a3.config.chart.foreColor : e3.value.color;
      var g3 = e3.value.formatter, p3 = "", f3 = "";
      if (r3 ? (n3 = e3.total.color, c3 = e3.total.fontSize, d3 = e3.total.fontFamily, u3 = e3.total.fontWeight, f3 = this.donutDataLabels.total.label ? e3.total.label : "", p3 = e3.total.formatter(a3)) : 1 === a3.globals.series.length && (p3 = g3(a3.globals.series[0], a3), f3 = a3.globals.seriesNames[0]), f3 && (f3 = e3.name.formatter(f3, e3.total.show, a3)), e3.name.show) {
        var x3 = s3.drawText({ x: l3, y: h3 + parseFloat(e3.name.offsetY), text: f3, textAnchor: "middle", foreColor: n3, fontSize: c3, fontWeight: u3, fontFamily: d3 });
        x3.node.classList.add("apexcharts-datalabel-label"), t5.add(x3);
      }
      if (e3.value.show) {
        var b3 = e3.name.show ? parseFloat(e3.value.offsetY) + 16 : e3.value.offsetY, m3 = s3.drawText({ x: l3, y: h3 + b3, text: p3, textAnchor: "middle", foreColor: o3, fontWeight: e3.value.fontWeight, fontSize: e3.value.fontSize, fontFamily: e3.value.fontFamily });
        m3.node.classList.add("apexcharts-datalabel-value"), t5.add(m3);
      }
      return t5;
    } }, { key: "printInnerLabels", value: function(t5, e3, i3, a3) {
      var s3, r3 = this.w;
      a3 ? s3 = void 0 === t5.name.color ? r3.globals.colors[parseInt(a3.parentNode.getAttribute("rel"), 10) - 1] : t5.name.color : r3.globals.series.length > 1 && t5.total.show && (s3 = t5.total.color);
      var n3 = r3.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"), o3 = r3.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
      i3 = (0, t5.value.formatter)(i3, r3), a3 || "function" != typeof t5.total.formatter || (i3 = t5.total.formatter(r3));
      var l3 = e3 === t5.total.label;
      e3 = this.donutDataLabels.total.label ? t5.name.formatter(e3, l3, r3) : "", null !== n3 && (n3.textContent = e3), null !== o3 && (o3.textContent = i3), null !== n3 && (n3.style.fill = s3);
    } }, { key: "printDataLabelsInner", value: function(t5, e3) {
      var i3 = this.w, a3 = t5.getAttribute("data:value"), s3 = i3.globals.seriesNames[parseInt(t5.parentNode.getAttribute("rel"), 10) - 1];
      i3.globals.series.length > 1 && this.printInnerLabels(e3, s3, a3, t5);
      var r3 = i3.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
      null !== r3 && (r3.style.opacity = 1);
    } }, { key: "drawSpokes", value: function(t5) {
      var e3 = this, i3 = this.w, a3 = new Mi2(this.ctx), s3 = i3.config.plotOptions.polarArea.spokes;
      if (0 !== s3.strokeWidth) {
        for (var r3 = [], n3 = 360 / i3.globals.series.length, o3 = 0; o3 < i3.globals.series.length; o3++) r3.push(v2.polarToCartesian(this.centerX, this.centerY, i3.globals.radialSize, i3.config.plotOptions.pie.startAngle + n3 * o3));
        r3.forEach(function(i4, r4) {
          var n4 = a3.drawLine(i4.x, i4.y, e3.centerX, e3.centerY, Array.isArray(s3.connectorColors) ? s3.connectorColors[r4] : s3.connectorColors);
          t5.add(n4);
        });
      }
    } }, { key: "revertDataLabelsInner", value: function() {
      var t5 = this.w;
      if (this.donutDataLabels.show) {
        var e3 = t5.globals.dom.Paper.findOne(".apexcharts-datalabels-group"), i3 = this.renderInnerDataLabels(e3, this.donutDataLabels, { hollowSize: this.donutSize, centerX: this.centerX, centerY: this.centerY, opacity: this.donutDataLabels.show });
        t5.globals.dom.Paper.findOne(".apexcharts-radialbar, .apexcharts-pie").add(i3);
      }
    } }]), t4;
  }();
  var Ya = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
      var a3 = this.w;
      this.graphics = new Mi2(this.ctx), this.lineColorArr = void 0 !== a3.globals.stroke.colors ? a3.globals.stroke.colors : a3.globals.colors, this.defaultSize = a3.globals.svgHeight < a3.globals.svgWidth ? a3.globals.gridHeight : a3.globals.gridWidth, this.isLog = a3.config.yaxis[0].logarithmic, this.logBase = a3.config.yaxis[0].logBase, this.coreUtils = new Pi2(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, a3.globals.maxY, 0) : a3.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, this.w.globals.minY, 0) : a3.globals.minY, this.polygons = a3.config.plotOptions.radar.polygons, this.strokeWidth = a3.config.stroke.show ? a3.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - a3.config.chart.dropShadow.blur, a3.config.xaxis.labels.show && (this.size = this.size - a3.globals.xAxisLabelsWidth / 1.75), void 0 !== a3.config.plotOptions.radar.size && (this.size = a3.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];
    }
    return s2(t4, [{ key: "draw", value: function(t5) {
      var e3 = this, i3 = this.w, a3 = new ji2(this.ctx), s3 = [], r3 = new qi2(this.ctx);
      t5.length && (this.dataPointsLen = t5[i3.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;
      var n3 = i3.globals.gridWidth / 2, o3 = i3.globals.gridHeight / 2, l3 = n3 + i3.config.plotOptions.radar.offsetX, h3 = o3 + i3.config.plotOptions.radar.offsetY, c3 = this.graphics.group({ class: "apexcharts-radar-series apexcharts-plot-series", transform: "translate(".concat(l3 || 0, ", ").concat(h3 || 0, ")") }), d3 = [], g3 = null, p3 = null;
      if (this.yaxisLabels = this.graphics.group({ class: "apexcharts-yaxis" }), t5.forEach(function(t6, n4) {
        var o4 = t6.length === i3.globals.dataPoints, l4 = e3.graphics.group().attr({ class: "apexcharts-series", "data:longestSeries": o4, seriesName: v2.escapeString(i3.globals.seriesNames[n4]), rel: n4 + 1, "data:realIndex": n4 });
        e3.dataRadiusOfPercent[n4] = [], e3.dataRadius[n4] = [], e3.angleArr[n4] = [], t6.forEach(function(t7, i4) {
          var a4 = Math.abs(e3.maxValue - e3.minValue);
          t7 -= e3.minValue, e3.isLog && (t7 = e3.coreUtils.getLogVal(e3.logBase, t7, 0)), e3.dataRadiusOfPercent[n4][i4] = t7 / a4, e3.dataRadius[n4][i4] = e3.dataRadiusOfPercent[n4][i4] * e3.size, e3.angleArr[n4][i4] = i4 * e3.disAngle;
        }), d3 = e3.getDataPointsPos(e3.dataRadius[n4], e3.angleArr[n4]);
        var h4 = e3.createPaths(d3, { x: 0, y: 0 });
        g3 = e3.graphics.group({ class: "apexcharts-series-markers-wrap apexcharts-element-hidden" }), p3 = e3.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": n4 }), i3.globals.delayedElements.push({ el: g3.node, index: n4 });
        var c4 = { i: n4, realIndex: n4, animationDelay: n4, initialSpeed: i3.config.chart.animations.speed, dataChangeSpeed: i3.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-radar", shouldClipToGrid: false, bindEventsOnPaths: false, stroke: i3.globals.stroke.colors[n4], strokeLineCap: i3.config.stroke.lineCap }, f4 = null;
        i3.globals.previousPaths.length > 0 && (f4 = e3.getPreviousPath(n4));
        for (var x3 = 0; x3 < h4.linePathsTo.length; x3++) {
          var b3 = e3.graphics.renderPaths(u2(u2({}, c4), {}, { pathFrom: null === f4 ? h4.linePathsFrom[x3] : f4, pathTo: h4.linePathsTo[x3], strokeWidth: Array.isArray(e3.strokeWidth) ? e3.strokeWidth[n4] : e3.strokeWidth, fill: "none", drawShadow: false }));
          l4.add(b3);
          var m3 = a3.fillPath({ seriesNumber: n4 }), y3 = e3.graphics.renderPaths(u2(u2({}, c4), {}, { pathFrom: null === f4 ? h4.areaPathsFrom[x3] : f4, pathTo: h4.areaPathsTo[x3], strokeWidth: 0, fill: m3, drawShadow: false }));
          if (i3.config.chart.dropShadow.enabled) {
            var w3 = new Li2(e3.ctx), k3 = i3.config.chart.dropShadow;
            w3.dropShadow(y3, Object.assign({}, k3, { noUserSpaceOnUse: true }), n4);
          }
          l4.add(y3);
        }
        t6.forEach(function(t7, a4) {
          var s4 = new Vi2(e3.ctx).getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: n4, dataPointIndex: a4 }), o5 = e3.graphics.drawMarker(d3[a4].x, d3[a4].y, s4);
          o5.attr("rel", a4), o5.attr("j", a4), o5.attr("index", n4), o5.node.setAttribute("default-marker-size", s4.pSize);
          var h5 = e3.graphics.group({ class: "apexcharts-series-markers" });
          h5 && h5.add(o5), g3.add(h5), l4.add(g3);
          var c5 = i3.config.dataLabels;
          if (c5.enabled) {
            var f5 = c5.formatter(i3.globals.series[n4][a4], { seriesIndex: n4, dataPointIndex: a4, w: i3 });
            r3.plotDataLabelsText({ x: d3[a4].x, y: d3[a4].y, text: f5, textAnchor: "middle", i: n4, j: n4, parent: p3, offsetCorrection: false, dataLabelsConfig: u2({}, c5) });
          }
          l4.add(p3);
        }), s3.push(l4);
      }), this.drawPolygons({ parent: c3 }), i3.config.xaxis.labels.show) {
        var f3 = this.drawXAxisTexts();
        c3.add(f3);
      }
      return s3.forEach(function(t6) {
        c3.add(t6);
      }), c3.add(this.yaxisLabels), c3;
    } }, { key: "drawPolygons", value: function(t5) {
      for (var e3 = this, i3 = this.w, a3 = t5.parent, s3 = new Ra(this.ctx), r3 = i3.globals.yAxisScale[0].result.reverse(), n3 = r3.length, o3 = [], l3 = this.size / (n3 - 1), h3 = 0; h3 < n3; h3++) o3[h3] = l3 * h3;
      o3.reverse();
      var c3 = [], d3 = [];
      o3.forEach(function(t6, i4) {
        var a4 = v2.getPolygonPos(t6, e3.dataPointsLen), s4 = "";
        a4.forEach(function(t7, a5) {
          if (0 === i4) {
            var r4 = e3.graphics.drawLine(t7.x, t7.y, 0, 0, Array.isArray(e3.polygons.connectorColors) ? e3.polygons.connectorColors[a5] : e3.polygons.connectorColors);
            d3.push(r4);
          }
          0 === a5 && e3.yaxisLabelsTextsPos.push({ x: t7.x, y: t7.y }), s4 += t7.x + "," + t7.y + " ";
        }), c3.push(s4);
      }), c3.forEach(function(t6, s4) {
        var r4 = e3.polygons.strokeColors, n4 = e3.polygons.strokeWidth, o4 = e3.graphics.drawPolygon(t6, Array.isArray(r4) ? r4[s4] : r4, Array.isArray(n4) ? n4[s4] : n4, i3.globals.radarPolygons.fill.colors[s4]);
        a3.add(o4);
      }), d3.forEach(function(t6) {
        a3.add(t6);
      }), i3.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function(t6, i4) {
        var a4 = s3.drawYAxisTexts(t6.x, t6.y, i4, r3[i4]);
        e3.yaxisLabels.add(a4);
      });
    } }, { key: "drawXAxisTexts", value: function() {
      var t5 = this, e3 = this.w, i3 = e3.config.xaxis.labels, a3 = this.graphics.group({ class: "apexcharts-xaxis" }), s3 = v2.getPolygonPos(this.size, this.dataPointsLen);
      return e3.globals.labels.forEach(function(r3, n3) {
        var o3 = e3.config.xaxis.labels.formatter, l3 = new qi2(t5.ctx);
        if (s3[n3]) {
          var h3 = t5.getTextPos(s3[n3], t5.size), c3 = o3(r3, { seriesIndex: -1, dataPointIndex: n3, w: e3 });
          l3.plotDataLabelsText({ x: h3.newX, y: h3.newY, text: c3, textAnchor: h3.textAnchor, i: n3, j: n3, parent: a3, className: "apexcharts-xaxis-label", color: Array.isArray(i3.style.colors) && i3.style.colors[n3] ? i3.style.colors[n3] : "#a8a8a8", dataLabelsConfig: u2({ textAnchor: h3.textAnchor, dropShadow: { enabled: false } }, i3), offsetCorrection: false }).on("click", function(i4) {
            if ("function" == typeof e3.config.chart.events.xAxisLabelClick) {
              var a4 = Object.assign({}, e3, { labelIndex: n3 });
              e3.config.chart.events.xAxisLabelClick(i4, t5.ctx, a4);
            }
          });
        }
      }), a3;
    } }, { key: "createPaths", value: function(t5, e3) {
      var i3 = this, a3 = [], s3 = [], r3 = [], n3 = [];
      if (t5.length) {
        s3 = [this.graphics.move(e3.x, e3.y)], n3 = [this.graphics.move(e3.x, e3.y)];
        var o3 = this.graphics.move(t5[0].x, t5[0].y), l3 = this.graphics.move(t5[0].x, t5[0].y);
        t5.forEach(function(e4, a4) {
          o3 += i3.graphics.line(e4.x, e4.y), l3 += i3.graphics.line(e4.x, e4.y), a4 === t5.length - 1 && (o3 += "Z", l3 += "Z");
        }), a3.push(o3), r3.push(l3);
      }
      return { linePathsFrom: s3, linePathsTo: a3, areaPathsFrom: n3, areaPathsTo: r3 };
    } }, { key: "getTextPos", value: function(t5, e3) {
      var i3 = "middle", a3 = t5.x, s3 = t5.y;
      return Math.abs(t5.x) >= 10 ? t5.x > 0 ? (i3 = "start", a3 += 10) : t5.x < 0 && (i3 = "end", a3 -= 10) : i3 = "middle", Math.abs(t5.y) >= e3 - 10 && (t5.y < 0 ? s3 -= 10 : t5.y > 0 && (s3 += 10)), { textAnchor: i3, newX: a3, newY: s3 };
    } }, { key: "getPreviousPath", value: function(t5) {
      for (var e3 = this.w, i3 = null, a3 = 0; a3 < e3.globals.previousPaths.length; a3++) {
        var s3 = e3.globals.previousPaths[a3];
        s3.paths.length > 0 && parseInt(s3.realIndex, 10) === parseInt(t5, 10) && void 0 !== e3.globals.previousPaths[a3].paths[0] && (i3 = e3.globals.previousPaths[a3].paths[0].d);
      }
      return i3;
    } }, { key: "getDataPointsPos", value: function(t5, e3) {
      var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
      t5 = t5 || [], e3 = e3 || [];
      for (var a3 = [], s3 = 0; s3 < i3; s3++) {
        var r3 = {};
        r3.x = t5[s3] * Math.sin(e3[s3]), r3.y = -t5[s3] * Math.cos(e3[s3]), a3.push(r3);
      }
      return a3;
    } }]), t4;
  }();
  var Ha = function(t4) {
    h2(r3, Ea);
    var a3 = n2(r3);
    function r3(t5) {
      var s3;
      i2(this, r3), (s3 = a3.call(this, t5)).ctx = t5, s3.w = t5.w, s3.animBeginArr = [0], s3.animDur = 0;
      var n3 = s3.w;
      return s3.startAngle = n3.config.plotOptions.radialBar.startAngle, s3.endAngle = n3.config.plotOptions.radialBar.endAngle, s3.totalAngle = Math.abs(n3.config.plotOptions.radialBar.endAngle - n3.config.plotOptions.radialBar.startAngle), s3.trackStartAngle = n3.config.plotOptions.radialBar.track.startAngle, s3.trackEndAngle = n3.config.plotOptions.radialBar.track.endAngle, s3.barLabels = s3.w.config.plotOptions.radialBar.barLabels, s3.donutDataLabels = s3.w.config.plotOptions.radialBar.dataLabels, s3.radialDataLabels = s3.donutDataLabels, s3.trackStartAngle || (s3.trackStartAngle = s3.startAngle), s3.trackEndAngle || (s3.trackEndAngle = s3.endAngle), 360 === s3.endAngle && (s3.endAngle = 359.99), s3.margin = parseInt(n3.config.plotOptions.radialBar.track.margin, 10), s3.onBarLabelClick = s3.onBarLabelClick.bind(e2(s3)), s3;
    }
    return s2(r3, [{ key: "draw", value: function(t5) {
      var e3 = this.w, i3 = new Mi2(this.ctx), a4 = i3.group({ class: "apexcharts-radialbar" });
      if (e3.globals.noData) return a4;
      var s3 = i3.group(), r4 = this.defaultSize / 2, n3 = e3.globals.gridWidth / 2, o3 = this.defaultSize / 2.05;
      e3.config.chart.sparkline.enabled || (o3 = o3 - e3.config.stroke.width - e3.config.chart.dropShadow.blur);
      var l3 = e3.globals.fill.colors;
      if (e3.config.plotOptions.radialBar.track.show) {
        var h3 = this.drawTracks({ size: o3, centerX: n3, centerY: r4, colorArr: l3, series: t5 });
        s3.add(h3);
      }
      var c3 = this.drawArcs({ size: o3, centerX: n3, centerY: r4, colorArr: l3, series: t5 }), d3 = 360;
      e3.config.plotOptions.radialBar.startAngle < 0 && (d3 = this.totalAngle);
      var u3 = (360 - d3) / 360;
      if (e3.globals.radialSize = o3 - o3 * u3, this.radialDataLabels.value.show) {
        var g3 = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
        e3.globals.radialSize += g3 * u3;
      }
      return s3.add(c3.g), "front" === e3.config.plotOptions.radialBar.hollow.position && (c3.g.add(c3.elHollow), c3.dataLabels && c3.g.add(c3.dataLabels)), a4.add(s3), a4;
    } }, { key: "drawTracks", value: function(t5) {
      var e3 = this.w, i3 = new Mi2(this.ctx), a4 = i3.group({ class: "apexcharts-tracks" }), s3 = new Li2(this.ctx), r4 = new ji2(this.ctx), n3 = this.getStrokeWidth(t5);
      t5.size = t5.size - n3 / 2;
      for (var o3 = 0; o3 < t5.series.length; o3++) {
        var l3 = i3.group({ class: "apexcharts-radialbar-track apexcharts-track" });
        a4.add(l3), l3.attr({ rel: o3 + 1 }), t5.size = t5.size - n3 - this.margin;
        var h3 = e3.config.plotOptions.radialBar.track, c3 = r4.fillPath({ seriesNumber: 0, size: t5.size, fillColors: Array.isArray(h3.background) ? h3.background[o3] : h3.background, solid: true }), d3 = this.trackStartAngle, u3 = this.trackEndAngle;
        Math.abs(u3) + Math.abs(d3) >= 360 && (u3 = 360 - Math.abs(this.startAngle) - 0.1);
        var g3 = i3.drawPath({ d: "", stroke: c3, strokeWidth: n3 * parseInt(h3.strokeWidth, 10) / 100, fill: "none", strokeOpacity: h3.opacity, classes: "apexcharts-radialbar-area" });
        if (h3.dropShadow.enabled) {
          var p3 = h3.dropShadow;
          s3.dropShadow(g3, p3);
        }
        l3.add(g3), g3.attr("id", "apexcharts-radialbarTrack-" + o3), this.animatePaths(g3, { centerX: t5.centerX, centerY: t5.centerY, endAngle: u3, startAngle: d3, size: t5.size, i: o3, totalItems: 2, animBeginArr: 0, dur: 0, isTrack: true });
      }
      return a4;
    } }, { key: "drawArcs", value: function(t5) {
      var e3 = this.w, i3 = new Mi2(this.ctx), a4 = new ji2(this.ctx), s3 = new Li2(this.ctx), r4 = i3.group(), n3 = this.getStrokeWidth(t5);
      t5.size = t5.size - n3 / 2;
      var o3 = e3.config.plotOptions.radialBar.hollow.background, l3 = t5.size - n3 * t5.series.length - this.margin * t5.series.length - n3 * parseInt(e3.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2, h3 = l3 - e3.config.plotOptions.radialBar.hollow.margin;
      void 0 !== e3.config.plotOptions.radialBar.hollow.image && (o3 = this.drawHollowImage(t5, r4, l3, o3));
      var c3 = this.drawHollow({ size: h3, centerX: t5.centerX, centerY: t5.centerY, fill: o3 || "transparent" });
      if (e3.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
        var d3 = e3.config.plotOptions.radialBar.hollow.dropShadow;
        s3.dropShadow(c3, d3);
      }
      var u3 = 1;
      !this.radialDataLabels.total.show && e3.globals.series.length > 1 && (u3 = 0);
      var g3 = null;
      if (this.radialDataLabels.show) {
        var p3 = e3.globals.dom.Paper.findOne(".apexcharts-datalabels-group");
        g3 = this.renderInnerDataLabels(p3, this.radialDataLabels, { hollowSize: l3, centerX: t5.centerX, centerY: t5.centerY, opacity: u3 });
      }
      "back" === e3.config.plotOptions.radialBar.hollow.position && (r4.add(c3), g3 && r4.add(g3));
      var f3 = false;
      e3.config.plotOptions.radialBar.inverseOrder && (f3 = true);
      for (var x3 = f3 ? t5.series.length - 1 : 0; f3 ? x3 >= 0 : x3 < t5.series.length; f3 ? x3-- : x3++) {
        var b3 = i3.group({ class: "apexcharts-series apexcharts-radial-series", seriesName: v2.escapeString(e3.globals.seriesNames[x3]) });
        r4.add(b3), b3.attr({ rel: x3 + 1, "data:realIndex": x3 }), this.ctx.series.addCollapsedClassToSeries(b3, x3), t5.size = t5.size - n3 - this.margin;
        var m3 = a4.fillPath({ seriesNumber: x3, size: t5.size, value: t5.series[x3] }), y3 = this.startAngle, w3 = void 0, k3 = v2.negToZero(t5.series[x3] > 100 ? 100 : t5.series[x3]) / 100, A3 = Math.round(this.totalAngle * k3) + this.startAngle, C3 = void 0;
        e3.globals.dataChanged && (w3 = this.startAngle, C3 = Math.round(this.totalAngle * v2.negToZero(e3.globals.previousPaths[x3]) / 100) + w3), Math.abs(A3) + Math.abs(y3) > 360 && (A3 -= 0.01), Math.abs(C3) + Math.abs(w3) > 360 && (C3 -= 0.01);
        var S3 = A3 - y3, L3 = Array.isArray(e3.config.stroke.dashArray) ? e3.config.stroke.dashArray[x3] : e3.config.stroke.dashArray, M3 = i3.drawPath({ d: "", stroke: m3, strokeWidth: n3, fill: "none", fillOpacity: e3.config.fill.opacity, classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + x3, strokeDashArray: L3 });
        if (Mi2.setAttrs(M3.node, { "data:angle": S3, "data:value": t5.series[x3] }), e3.config.chart.dropShadow.enabled) {
          var P3 = e3.config.chart.dropShadow;
          s3.dropShadow(M3, P3, x3);
        }
        if (s3.setSelectionFilter(M3, 0, x3), this.addListeners(M3, this.radialDataLabels), b3.add(M3), M3.attr({ index: 0, j: x3 }), this.barLabels.enabled) {
          var I3 = v2.polarToCartesian(t5.centerX, t5.centerY, t5.size, y3), T3 = this.barLabels.formatter(e3.globals.seriesNames[x3], { seriesIndex: x3, w: e3 }), z3 = ["apexcharts-radialbar-label"];
          this.barLabels.onClick || z3.push("apexcharts-no-click");
          var X3 = this.barLabels.useSeriesColors ? e3.globals.colors[x3] : e3.config.chart.foreColor;
          X3 || (X3 = e3.config.chart.foreColor);
          var R3 = I3.x + this.barLabels.offsetX, E3 = I3.y + this.barLabels.offsetY, Y3 = i3.drawText({ x: R3, y: E3, text: T3, textAnchor: "end", dominantBaseline: "middle", fontFamily: this.barLabels.fontFamily, fontWeight: this.barLabels.fontWeight, fontSize: this.barLabels.fontSize, foreColor: X3, cssClass: z3.join(" ") });
          Y3.on("click", this.onBarLabelClick), Y3.attr({ rel: x3 + 1 }), 0 !== y3 && Y3.attr({ "transform-origin": "".concat(R3, " ").concat(E3), transform: "rotate(".concat(y3, " 0 0)") }), b3.add(Y3);
        }
        var H3 = 0;
        !this.initialAnim || e3.globals.resized || e3.globals.dataChanged || (H3 = e3.config.chart.animations.speed), e3.globals.dataChanged && (H3 = e3.config.chart.animations.dynamicAnimation.speed), this.animDur = H3 / (1.2 * t5.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(M3, { centerX: t5.centerX, centerY: t5.centerY, endAngle: A3, startAngle: y3, prevEndAngle: C3, prevStartAngle: w3, size: t5.size, i: x3, totalItems: 2, animBeginArr: this.animBeginArr, dur: H3, shouldSetPrevPaths: true });
      }
      return { g: r4, elHollow: c3, dataLabels: g3 };
    } }, { key: "drawHollow", value: function(t5) {
      var e3 = new Mi2(this.ctx).drawCircle(2 * t5.size);
      return e3.attr({ class: "apexcharts-radialbar-hollow", cx: t5.centerX, cy: t5.centerY, r: t5.size, fill: t5.fill }), e3;
    } }, { key: "drawHollowImage", value: function(t5, e3, i3, a4) {
      var s3 = this.w, r4 = new ji2(this.ctx), n3 = v2.randomId(), o3 = s3.config.plotOptions.radialBar.hollow.image;
      if (s3.config.plotOptions.radialBar.hollow.imageClipped) r4.clippedImgArea({ width: i3, height: i3, image: o3, patternID: "pattern".concat(s3.globals.cuid).concat(n3) }), a4 = "url(#pattern".concat(s3.globals.cuid).concat(n3, ")");
      else {
        var l3 = s3.config.plotOptions.radialBar.hollow.imageWidth, h3 = s3.config.plotOptions.radialBar.hollow.imageHeight;
        if (void 0 === l3 && void 0 === h3) {
          var c3 = s3.globals.dom.Paper.image(o3, function(e4) {
            this.move(t5.centerX - e4.width / 2 + s3.config.plotOptions.radialBar.hollow.imageOffsetX, t5.centerY - e4.height / 2 + s3.config.plotOptions.radialBar.hollow.imageOffsetY);
          });
          e3.add(c3);
        } else {
          var d3 = s3.globals.dom.Paper.image(o3, function(e4) {
            this.move(t5.centerX - l3 / 2 + s3.config.plotOptions.radialBar.hollow.imageOffsetX, t5.centerY - h3 / 2 + s3.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l3, h3);
          });
          e3.add(d3);
        }
      }
      return a4;
    } }, { key: "getStrokeWidth", value: function(t5) {
      var e3 = this.w;
      return t5.size * (100 - parseInt(e3.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t5.series.length + 1) - this.margin;
    } }, { key: "onBarLabelClick", value: function(t5) {
      var e3 = parseInt(t5.target.getAttribute("rel"), 10) - 1, i3 = this.barLabels.onClick, a4 = this.w;
      i3 && i3(a4.globals.seriesNames[e3], { w: a4, seriesIndex: e3 });
    } }]), r3;
  }();
  var Oa = function(t4) {
    h2(a3, Pa);
    var e3 = n2(a3);
    function a3() {
      return i2(this, a3), e3.apply(this, arguments);
    }
    return s2(a3, [{ key: "draw", value: function(t5, e4) {
      var i3 = this.w, a4 = new Mi2(this.ctx);
      this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t5, this.seriesRangeStart = i3.globals.seriesRangeStart, this.seriesRangeEnd = i3.globals.seriesRangeEnd, this.barHelpers.initVariables(t5);
      for (var s3 = a4.group({ class: "apexcharts-rangebar-series apexcharts-plot-series" }), r3 = 0; r3 < t5.length; r3++) {
        var n3, o3, l3, h3, c3 = void 0, d3 = void 0, g3 = i3.globals.comboCharts ? e4[r3] : r3, p3 = this.barHelpers.getGroupIndex(g3).columnGroupIndex, f3 = a4.group({ class: "apexcharts-series", seriesName: v2.escapeString(i3.globals.seriesNames[g3]), rel: r3 + 1, "data:realIndex": g3 });
        this.ctx.series.addCollapsedClassToSeries(f3, g3), t5[r3].length > 0 && (this.visibleI = this.visibleI + 1);
        var x3 = 0, b3 = 0, m3 = 0;
        this.yRatio.length > 1 && (this.yaxisIndex = i3.globals.seriesYAxisReverseMap[g3][0], m3 = g3);
        var y3 = this.barHelpers.initialPositions(g3);
        d3 = y3.y, h3 = y3.zeroW, c3 = y3.x, b3 = y3.barWidth, x3 = y3.barHeight, n3 = y3.xDivision, o3 = y3.yDivision, l3 = y3.zeroH;
        for (var w3 = a4.group({ class: "apexcharts-datalabels", "data:realIndex": g3 }), k3 = a4.group({ class: "apexcharts-rangebar-goals-markers" }), A3 = 0; A3 < i3.globals.dataPoints; A3++) {
          var C3 = this.barHelpers.getStrokeWidth(r3, A3, g3), S3 = this.seriesRangeStart[r3][A3], L3 = this.seriesRangeEnd[r3][A3], M3 = null, P3 = null, I3 = null, T3 = { x: c3, y: d3, strokeWidth: C3, elSeries: f3 }, z3 = this.seriesLen;
          if (i3.config.plotOptions.bar.rangeBarGroupRows && (z3 = 1), void 0 === i3.config.series[r3].data[A3]) break;
          if (this.isHorizontal) {
            I3 = d3 + x3 * this.visibleI;
            var X3 = (o3 - x3 * z3) / 2;
            if (i3.config.series[r3].data[A3].x) {
              var R3 = this.detectOverlappingBars({ i: r3, j: A3, barYPosition: I3, srty: X3, barHeight: x3, yDivision: o3, initPositions: y3 });
              x3 = R3.barHeight, I3 = R3.barYPosition;
            }
            b3 = (M3 = this.drawRangeBarPaths(u2({ indexes: { i: r3, j: A3, realIndex: g3 }, barHeight: x3, barYPosition: I3, zeroW: h3, yDivision: o3, y1: S3, y2: L3 }, T3))).barWidth;
          } else {
            i3.globals.isXNumeric && (c3 = (i3.globals.seriesX[r3][A3] - i3.globals.minX) / this.xRatio - b3 / 2), P3 = c3 + b3 * this.visibleI;
            var E3 = (n3 - b3 * z3) / 2;
            if (i3.config.series[r3].data[A3].x) {
              var Y3 = this.detectOverlappingBars({ i: r3, j: A3, barXPosition: P3, srtx: E3, barWidth: b3, xDivision: n3, initPositions: y3 });
              b3 = Y3.barWidth, P3 = Y3.barXPosition;
            }
            x3 = (M3 = this.drawRangeColumnPaths(u2({ indexes: { i: r3, j: A3, realIndex: g3, translationsIndex: m3 }, barWidth: b3, barXPosition: P3, zeroH: l3, xDivision: n3 }, T3))).barHeight;
          }
          var H3 = this.barHelpers.drawGoalLine({ barXPosition: M3.barXPosition, barYPosition: I3, goalX: M3.goalX, goalY: M3.goalY, barHeight: x3, barWidth: b3 });
          H3 && k3.add(H3), d3 = M3.y, c3 = M3.x;
          var O3 = this.barHelpers.getPathFillColor(t5, r3, A3, g3);
          this.renderSeries({ realIndex: g3, pathFill: O3.color, lineFill: O3.useRangeColor ? O3.color : i3.globals.stroke.colors[g3], j: A3, i: r3, x: c3, y: d3, y1: S3, y2: L3, pathFrom: M3.pathFrom, pathTo: M3.pathTo, strokeWidth: C3, elSeries: f3, series: t5, barHeight: x3, barWidth: b3, barXPosition: P3, barYPosition: I3, columnGroupIndex: p3, elDataLabelsWrap: w3, elGoalsMarkers: k3, visibleSeries: this.visibleI, type: "rangebar" });
        }
        s3.add(f3);
      }
      return s3;
    } }, { key: "detectOverlappingBars", value: function(t5) {
      var e4 = t5.i, i3 = t5.j, a4 = t5.barYPosition, s3 = t5.barXPosition, r3 = t5.srty, n3 = t5.srtx, o3 = t5.barHeight, l3 = t5.barWidth, h3 = t5.yDivision, c3 = t5.xDivision, d3 = t5.initPositions, u3 = this.w, g3 = [], p3 = u3.config.series[e4].data[i3].rangeName, f3 = u3.config.series[e4].data[i3].x, x3 = Array.isArray(f3) ? f3.join(" ") : f3, b3 = u3.globals.labels.map(function(t6) {
        return Array.isArray(t6) ? t6.join(" ") : t6;
      }).indexOf(x3), m3 = u3.globals.seriesRange[e4].findIndex(function(t6) {
        return t6.x === x3 && t6.overlaps.length > 0;
      });
      return this.isHorizontal ? (a4 = u3.config.plotOptions.bar.rangeBarGroupRows ? r3 + h3 * b3 : r3 + o3 * this.visibleI + h3 * b3, m3 > -1 && !u3.config.plotOptions.bar.rangeBarOverlap && (g3 = u3.globals.seriesRange[e4][m3].overlaps).indexOf(p3) > -1 && (a4 = (o3 = d3.barHeight / g3.length) * this.visibleI + h3 * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + o3 * (this.visibleI + g3.indexOf(p3)) + h3 * b3)) : (b3 > -1 && !u3.globals.timescaleLabels.length && (s3 = u3.config.plotOptions.bar.rangeBarGroupRows ? n3 + c3 * b3 : n3 + l3 * this.visibleI + c3 * b3), m3 > -1 && !u3.config.plotOptions.bar.rangeBarOverlap && (g3 = u3.globals.seriesRange[e4][m3].overlaps).indexOf(p3) > -1 && (s3 = (l3 = d3.barWidth / g3.length) * this.visibleI + c3 * (100 - parseInt(this.barOptions.barWidth, 10)) / 100 / 2 + l3 * (this.visibleI + g3.indexOf(p3)) + c3 * b3)), { barYPosition: a4, barXPosition: s3, barHeight: o3, barWidth: l3 };
    } }, { key: "drawRangeColumnPaths", value: function(t5) {
      var e4 = t5.indexes, i3 = t5.x, a4 = t5.xDivision, s3 = t5.barWidth, r3 = t5.barXPosition, n3 = t5.zeroH, o3 = this.w, l3 = e4.i, h3 = e4.j, c3 = e4.realIndex, d3 = e4.translationsIndex, u3 = this.yRatio[d3], g3 = this.getRangeValue(c3, h3), p3 = Math.min(g3.start, g3.end), f3 = Math.max(g3.start, g3.end);
      void 0 === this.series[l3][h3] || null === this.series[l3][h3] ? p3 = n3 : (p3 = n3 - p3 / u3, f3 = n3 - f3 / u3);
      var x3 = Math.abs(f3 - p3), b3 = this.barHelpers.getColumnPaths({ barXPosition: r3, barWidth: s3, y1: p3, y2: f3, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, realIndex: c3, i: c3, j: h3, w: o3 });
      if (o3.globals.isXNumeric) {
        var m3 = this.getBarXForNumericXAxis({ x: i3, j: h3, realIndex: c3, barWidth: s3 });
        i3 = m3.x, r3 = m3.barXPosition;
      } else i3 += a4;
      return { pathTo: b3.pathTo, pathFrom: b3.pathFrom, barHeight: x3, x: i3, y: g3.start < 0 && g3.end < 0 ? p3 : f3, goalY: this.barHelpers.getGoalValues("y", null, n3, l3, h3, d3), barXPosition: r3 };
    } }, { key: "preventBarOverflow", value: function(t5) {
      var e4 = this.w;
      return t5 < 0 && (t5 = 0), t5 > e4.globals.gridWidth && (t5 = e4.globals.gridWidth), t5;
    } }, { key: "drawRangeBarPaths", value: function(t5) {
      var e4 = t5.indexes, i3 = t5.y, a4 = t5.y1, s3 = t5.y2, r3 = t5.yDivision, n3 = t5.barHeight, o3 = t5.barYPosition, l3 = t5.zeroW, h3 = this.w, c3 = e4.realIndex, d3 = e4.j, u3 = this.preventBarOverflow(l3 + a4 / this.invertedYRatio), g3 = this.preventBarOverflow(l3 + s3 / this.invertedYRatio), p3 = this.getRangeValue(c3, d3), f3 = Math.abs(g3 - u3), x3 = this.barHelpers.getBarpaths({ barYPosition: o3, barHeight: n3, x1: u3, x2: g3, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, i: c3, realIndex: c3, j: d3, w: h3 });
      return h3.globals.isXNumeric || (i3 += r3), { pathTo: x3.pathTo, pathFrom: x3.pathFrom, barWidth: f3, x: p3.start < 0 && p3.end < 0 ? u3 : g3, goalX: this.barHelpers.getGoalValues("x", l3, null, c3, d3), y: i3 };
    } }, { key: "getRangeValue", value: function(t5, e4) {
      var i3 = this.w;
      return { start: i3.globals.seriesRangeStart[t5][e4], end: i3.globals.seriesRangeEnd[t5][e4] };
    } }]), a3;
  }();
  var Fa = function() {
    function t4(e3) {
      i2(this, t4), this.w = e3.w, this.lineCtx = e3;
    }
    return s2(t4, [{ key: "sameValueSeriesFix", value: function(t5, e3) {
      var i3 = this.w;
      if (("gradient" === i3.config.fill.type || "gradient" === i3.config.fill.type[t5]) && new Pi2(this.lineCtx.ctx, i3).seriesHaveSameValues(t5)) {
        var a3 = e3[t5].slice();
        a3[a3.length - 1] = a3[a3.length - 1] + 1e-6, e3[t5] = a3;
      }
      return e3;
    } }, { key: "calculatePoints", value: function(t5) {
      var e3 = t5.series, i3 = t5.realIndex, a3 = t5.x, s3 = t5.y, r3 = t5.i, n3 = t5.j, o3 = t5.prevY, l3 = this.w, h3 = [], c3 = [], d3 = this.lineCtx.categoryAxisCorrection + l3.config.markers.offsetX;
      return l3.globals.isXNumeric && (d3 = (l3.globals.seriesX[i3][0] - l3.globals.minX) / this.lineCtx.xRatio + l3.config.markers.offsetX), 0 === n3 && (h3.push(d3), c3.push(v2.isNumber(e3[r3][0]) ? o3 + l3.config.markers.offsetY : null)), h3.push(a3 + l3.config.markers.offsetX), c3.push(v2.isNumber(e3[r3][n3 + 1]) ? s3 + l3.config.markers.offsetY : null), { x: h3, y: c3 };
    } }, { key: "checkPreviousPaths", value: function(t5) {
      for (var e3 = t5.pathFromLine, i3 = t5.pathFromArea, a3 = t5.realIndex, s3 = this.w, r3 = 0; r3 < s3.globals.previousPaths.length; r3++) {
        var n3 = s3.globals.previousPaths[r3];
        ("line" === n3.type || "area" === n3.type) && n3.paths.length > 0 && parseInt(n3.realIndex, 10) === parseInt(a3, 10) && ("line" === n3.type ? (this.lineCtx.appendPathFrom = false, e3 = s3.globals.previousPaths[r3].paths[0].d) : "area" === n3.type && (this.lineCtx.appendPathFrom = false, i3 = s3.globals.previousPaths[r3].paths[0].d, s3.config.stroke.show && s3.globals.previousPaths[r3].paths[1] && (e3 = s3.globals.previousPaths[r3].paths[1].d)));
      }
      return { pathFromLine: e3, pathFromArea: i3 };
    } }, { key: "determineFirstPrevY", value: function(t5) {
      var e3, i3, a3, s3 = t5.i, r3 = t5.realIndex, n3 = t5.series, o3 = t5.prevY, l3 = t5.lineYPosition, h3 = t5.translationsIndex, c3 = this.w, d3 = c3.config.chart.stacked && !c3.globals.comboCharts || c3.config.chart.stacked && c3.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || "bar" === (null === (e3 = this.w.config.series[r3]) || void 0 === e3 ? void 0 : e3.type) || "column" === (null === (i3 = this.w.config.series[r3]) || void 0 === i3 ? void 0 : i3.type));
      if (void 0 !== (null === (a3 = n3[s3]) || void 0 === a3 ? void 0 : a3[0])) o3 = (l3 = d3 && s3 > 0 ? this.lineCtx.prevSeriesY[s3 - 1][0] : this.lineCtx.zeroY) - n3[s3][0] / this.lineCtx.yRatio[h3] + 2 * (this.lineCtx.isReversed ? n3[s3][0] / this.lineCtx.yRatio[h3] : 0);
      else if (d3 && s3 > 0 && void 0 === n3[s3][0]) {
        for (var u3 = s3 - 1; u3 >= 0; u3--) if (null !== n3[u3][0] && void 0 !== n3[u3][0]) {
          o3 = l3 = this.lineCtx.prevSeriesY[u3][0];
          break;
        }
      }
      return { prevY: o3, lineYPosition: l3 };
    } }]), t4;
  }();
  var Da = function(t4) {
    for (var e3, i3, a3, s3, r3 = function(t5) {
      for (var e4 = [], i4 = t5[0], a4 = t5[1], s4 = e4[0] = Wa(i4, a4), r4 = 1, n4 = t5.length - 1; r4 < n4; r4++) i4 = a4, a4 = t5[r4 + 1], e4[r4] = 0.5 * (s4 + (s4 = Wa(i4, a4)));
      return e4[r4] = s4, e4;
    }(t4), n3 = t4.length - 1, o3 = [], l3 = 0; l3 < n3; l3++) a3 = Wa(t4[l3], t4[l3 + 1]), Math.abs(a3) < 1e-6 ? r3[l3] = r3[l3 + 1] = 0 : (s3 = (e3 = r3[l3] / a3) * e3 + (i3 = r3[l3 + 1] / a3) * i3) > 9 && (s3 = 3 * a3 / Math.sqrt(s3), r3[l3] = s3 * e3, r3[l3 + 1] = s3 * i3);
    for (var h3 = 0; h3 <= n3; h3++) s3 = (t4[Math.min(n3, h3 + 1)][0] - t4[Math.max(0, h3 - 1)][0]) / (6 * (1 + r3[h3] * r3[h3])), o3.push([s3 || 0, r3[h3] * s3 || 0]);
    return o3;
  };
  var _a = function(t4) {
    var e3 = Da(t4), i3 = t4[1], a3 = t4[0], s3 = [], r3 = e3[1], n3 = e3[0];
    s3.push(a3, [a3[0] + n3[0], a3[1] + n3[1], i3[0] - r3[0], i3[1] - r3[1], i3[0], i3[1]]);
    for (var o3 = 2, l3 = e3.length; o3 < l3; o3++) {
      var h3 = t4[o3], c3 = e3[o3];
      s3.push([h3[0] - c3[0], h3[1] - c3[1], h3[0], h3[1]]);
    }
    return s3;
  };
  var Na = function(t4, e3, i3) {
    var a3 = t4.slice(e3, i3);
    if (e3) {
      if (i3 - e3 > 1 && a3[1].length < 6) {
        var s3 = a3[0].length;
        a3[1] = [2 * a3[0][s3 - 2] - a3[0][s3 - 4], 2 * a3[0][s3 - 1] - a3[0][s3 - 3]].concat(a3[1]);
      }
      a3[0] = a3[0].slice(-2);
    }
    return a3;
  };
  function Wa(t4, e3) {
    return (e3[1] - t4[1]) / (e3[0] - t4[0]);
  }
  var Ba = function() {
    function t4(e3, a3, s3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.xyRatios = a3, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || s3, this.scatter = new Ui2(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Fa(this), this.markers = new Vi2(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;
    }
    return s2(t4, [{ key: "draw", value: function(t5, e3, i3, a3) {
      var s3, r3 = this.w, n3 = new Mi2(this.ctx), o3 = r3.globals.comboCharts ? e3 : r3.config.chart.type, l3 = n3.group({ class: "apexcharts-".concat(o3, "-series apexcharts-plot-series") }), h3 = new Pi2(this.ctx, r3);
      this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t5 = h3.getLogSeries(t5), this.yRatio = h3.getLogYRatios(this.yRatio), this.prevSeriesY = [];
      for (var c3 = [], d3 = 0; d3 < t5.length; d3++) {
        t5 = this.lineHelpers.sameValueSeriesFix(d3, t5);
        var g3 = r3.globals.comboCharts ? i3[d3] : d3, p3 = this.yRatio.length > 1 ? g3 : 0;
        this._initSerieVariables(t5, d3, g3);
        var f3 = [], x3 = [], b3 = [], m3 = r3.globals.padHorizontal + this.categoryAxisCorrection;
        this.ctx.series.addCollapsedClassToSeries(this.elSeries, g3), r3.globals.isXNumeric && r3.globals.seriesX.length > 0 && (m3 = (r3.globals.seriesX[g3][0] - r3.globals.minX) / this.xRatio), b3.push(m3);
        var v3, y3 = m3, w3 = void 0, k3 = y3, A3 = this.zeroY, C3 = this.zeroY;
        A3 = this.lineHelpers.determineFirstPrevY({ i: d3, realIndex: g3, series: t5, prevY: A3, lineYPosition: 0, translationsIndex: p3 }).prevY, "monotoneCubic" === r3.config.stroke.curve && null === t5[d3][0] ? f3.push(null) : f3.push(A3), v3 = A3;
        "rangeArea" === o3 && (w3 = C3 = this.lineHelpers.determineFirstPrevY({ i: d3, realIndex: g3, series: a3, prevY: C3, lineYPosition: 0, translationsIndex: p3 }).prevY, x3.push(null !== f3[0] ? C3 : null));
        var S3 = this._calculatePathsFrom({ type: o3, series: t5, i: d3, realIndex: g3, translationsIndex: p3, prevX: k3, prevY: A3, prevY2: C3 }), L3 = [f3[0]], M3 = [x3[0]], P3 = { type: o3, series: t5, realIndex: g3, translationsIndex: p3, i: d3, x: m3, y: 1, pX: y3, pY: v3, pathsFrom: S3, linePaths: [], areaPaths: [], seriesIndex: i3, lineYPosition: 0, xArrj: b3, yArrj: f3, y2Arrj: x3, seriesRangeEnd: a3 }, I3 = this._iterateOverDataPoints(u2(u2({}, P3), {}, { iterations: "rangeArea" === o3 ? t5[d3].length - 1 : void 0, isRangeStart: true }));
        if ("rangeArea" === o3) {
          for (var T3 = this._calculatePathsFrom({ series: a3, i: d3, realIndex: g3, prevX: k3, prevY: C3 }), z3 = this._iterateOverDataPoints(u2(u2({}, P3), {}, { series: a3, xArrj: [m3], yArrj: L3, y2Arrj: M3, pY: w3, areaPaths: I3.areaPaths, pathsFrom: T3, iterations: a3[d3].length - 1, isRangeStart: false })), X3 = I3.linePaths.length / 2, R3 = 0; R3 < X3; R3++) I3.linePaths[R3] = z3.linePaths[R3 + X3] + I3.linePaths[R3];
          I3.linePaths.splice(X3), I3.pathFromLine = z3.pathFromLine + I3.pathFromLine;
        } else I3.pathFromArea += "z";
        this._handlePaths({ type: o3, realIndex: g3, i: d3, paths: I3 }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), c3.push(this.elSeries);
      }
      if (void 0 !== (null === (s3 = r3.config.series[0]) || void 0 === s3 ? void 0 : s3.zIndex) && c3.sort(function(t6, e4) {
        return Number(t6.node.getAttribute("zIndex")) - Number(e4.node.getAttribute("zIndex"));
      }), r3.config.chart.stacked) for (var E3 = c3.length - 1; E3 >= 0; E3--) l3.add(c3[E3]);
      else for (var Y3 = 0; Y3 < c3.length; Y3++) l3.add(c3[Y3]);
      return l3;
    } }, { key: "_initSerieVariables", value: function(t5, e3, i3) {
      var a3 = this.w, s3 = new Mi2(this.ctx);
      this.xDivision = a3.globals.gridWidth / (a3.globals.dataPoints - ("on" === a3.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a3.config.stroke.width) ? a3.config.stroke.width[i3] : a3.config.stroke.width;
      var r3 = 0;
      if (this.yRatio.length > 1 && (this.yaxisIndex = a3.globals.seriesYAxisReverseMap[i3], r3 = i3), this.isReversed = a3.config.yaxis[this.yaxisIndex] && a3.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a3.globals.gridHeight - this.baseLineY[r3] - (this.isReversed ? a3.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[r3] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a3.globals.gridHeight || "end" === a3.config.plotOptions.area.fillTo) && (this.areaBottomY = a3.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s3.group({ class: "apexcharts-series", zIndex: void 0 !== a3.config.series[i3].zIndex ? a3.config.series[i3].zIndex : i3, seriesName: v2.escapeString(a3.globals.seriesNames[i3]) }), this.elPointsMain = s3.group({ class: "apexcharts-series-markers-wrap", "data:realIndex": i3 }), a3.globals.hasNullValues) {
        var n3 = this.markers.plotChartMarkers({ pointsPos: { x: [0], y: [a3.globals.gridHeight + a3.globals.markers.largestSize] }, seriesIndex: e3, j: 0, pSize: 0.1, alwaysDrawMarker: true, isVirtualPoint: true });
        null !== n3 && this.elPointsMain.add(n3);
      }
      this.elDataLabelsWrap = s3.group({ class: "apexcharts-datalabels", "data:realIndex": i3 });
      var o3 = t5[e3].length === a3.globals.dataPoints;
      this.elSeries.attr({ "data:longestSeries": o3, rel: e3 + 1, "data:realIndex": i3 }), this.appendPathFrom = true;
    } }, { key: "_calculatePathsFrom", value: function(t5) {
      var e3, i3, a3, s3, r3 = t5.type, n3 = t5.series, o3 = t5.i, l3 = t5.realIndex, h3 = t5.translationsIndex, c3 = t5.prevX, d3 = t5.prevY, u3 = t5.prevY2, g3 = this.w, p3 = new Mi2(this.ctx);
      if (null === n3[o3][0]) {
        for (var f3 = 0; f3 < n3[o3].length; f3++) if (null !== n3[o3][f3]) {
          c3 = this.xDivision * f3, d3 = this.zeroY - n3[o3][f3] / this.yRatio[h3], e3 = p3.move(c3, d3), i3 = p3.move(c3, this.areaBottomY);
          break;
        }
      } else e3 = p3.move(c3, d3), "rangeArea" === r3 && (e3 = p3.move(c3, u3) + p3.line(c3, d3)), i3 = p3.move(c3, this.areaBottomY) + p3.line(c3, d3);
      if (a3 = p3.move(0, this.areaBottomY) + p3.line(0, this.areaBottomY), s3 = p3.move(0, this.areaBottomY) + p3.line(0, this.areaBottomY), g3.globals.previousPaths.length > 0) {
        var x3 = this.lineHelpers.checkPreviousPaths({ pathFromLine: a3, pathFromArea: s3, realIndex: l3 });
        a3 = x3.pathFromLine, s3 = x3.pathFromArea;
      }
      return { prevX: c3, prevY: d3, linePath: e3, areaPath: i3, pathFromLine: a3, pathFromArea: s3 };
    } }, { key: "_handlePaths", value: function(t5) {
      var e3 = t5.type, i3 = t5.realIndex, a3 = t5.i, s3 = t5.paths, r3 = this.w, n3 = new Mi2(this.ctx), o3 = new ji2(this.ctx);
      this.prevSeriesY.push(s3.yArrj), r3.globals.seriesXvalues[i3] = s3.xArrj, r3.globals.seriesYvalues[i3] = s3.yArrj;
      var l3 = r3.config.forecastDataPoints;
      if (l3.count > 0 && "rangeArea" !== e3) {
        var h3 = r3.globals.seriesXvalues[i3][r3.globals.seriesXvalues[i3].length - l3.count - 1], c3 = n3.drawRect(h3, 0, r3.globals.gridWidth, r3.globals.gridHeight, 0);
        r3.globals.dom.elForecastMask.appendChild(c3.node);
        var d3 = n3.drawRect(0, 0, h3, r3.globals.gridHeight, 0);
        r3.globals.dom.elNonForecastMask.appendChild(d3.node);
      }
      this.pointsChart || r3.globals.delayedElements.push({ el: this.elPointsMain.node, index: i3 });
      var g3 = { i: a3, realIndex: i3, animationDelay: a3, initialSpeed: r3.config.chart.animations.speed, dataChangeSpeed: r3.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(e3) };
      if ("area" === e3) for (var p3 = o3.fillPath({ seriesNumber: i3 }), f3 = 0; f3 < s3.areaPaths.length; f3++) {
        var x3 = n3.renderPaths(u2(u2({}, g3), {}, { pathFrom: s3.pathFromArea, pathTo: s3.areaPaths[f3], stroke: "none", strokeWidth: 0, strokeLineCap: null, fill: p3 }));
        this.elSeries.add(x3);
      }
      if (r3.config.stroke.show && !this.pointsChart) {
        var b3 = null;
        if ("line" === e3) b3 = o3.fillPath({ seriesNumber: i3, i: a3 });
        else if ("solid" === r3.config.stroke.fill.type) b3 = r3.globals.stroke.colors[i3];
        else {
          var m3 = r3.config.fill;
          r3.config.fill = r3.config.stroke.fill, b3 = o3.fillPath({ seriesNumber: i3, i: a3 }), r3.config.fill = m3;
        }
        for (var v3 = 0; v3 < s3.linePaths.length; v3++) {
          var y3 = b3;
          "rangeArea" === e3 && (y3 = o3.fillPath({ seriesNumber: i3 }));
          var w3 = u2(u2({}, g3), {}, { pathFrom: s3.pathFromLine, pathTo: s3.linePaths[v3], stroke: b3, strokeWidth: this.strokeWidth, strokeLineCap: r3.config.stroke.lineCap, fill: "rangeArea" === e3 ? y3 : "none" }), k3 = n3.renderPaths(w3);
          if (this.elSeries.add(k3), k3.attr("fill-rule", "evenodd"), l3.count > 0 && "rangeArea" !== e3) {
            var A3 = n3.renderPaths(w3);
            A3.node.setAttribute("stroke-dasharray", l3.dashArray), l3.strokeWidth && A3.node.setAttribute("stroke-width", l3.strokeWidth), this.elSeries.add(A3), A3.attr("clip-path", "url(#forecastMask".concat(r3.globals.cuid, ")")), k3.attr("clip-path", "url(#nonForecastMask".concat(r3.globals.cuid, ")"));
          }
        }
      }
    } }, { key: "_iterateOverDataPoints", value: function(t5) {
      var e3, i3, a3 = this, s3 = t5.type, r3 = t5.series, n3 = t5.iterations, o3 = t5.realIndex, l3 = t5.translationsIndex, h3 = t5.i, c3 = t5.x, d3 = t5.y, u3 = t5.pX, g3 = t5.pY, p3 = t5.pathsFrom, f3 = t5.linePaths, x3 = t5.areaPaths, b3 = t5.seriesIndex, m3 = t5.lineYPosition, y3 = t5.xArrj, w3 = t5.yArrj, k3 = t5.y2Arrj, A3 = t5.isRangeStart, C3 = t5.seriesRangeEnd, S3 = this.w, L3 = new Mi2(this.ctx), M3 = this.yRatio, P3 = p3.prevY, I3 = p3.linePath, T3 = p3.areaPath, z3 = p3.pathFromLine, X3 = p3.pathFromArea, R3 = v2.isNumber(S3.globals.minYArr[o3]) ? S3.globals.minYArr[o3] : S3.globals.minY;
      n3 || (n3 = S3.globals.dataPoints > 1 ? S3.globals.dataPoints - 1 : S3.globals.dataPoints);
      var E3 = function(t6, e4) {
        return e4 - t6 / M3[l3] + 2 * (a3.isReversed ? t6 / M3[l3] : 0);
      }, Y3 = d3, H3 = S3.config.chart.stacked && !S3.globals.comboCharts || S3.config.chart.stacked && S3.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || "bar" === (null === (e3 = this.w.config.series[o3]) || void 0 === e3 ? void 0 : e3.type) || "column" === (null === (i3 = this.w.config.series[o3]) || void 0 === i3 ? void 0 : i3.type)), O3 = S3.config.stroke.curve;
      Array.isArray(O3) && (O3 = Array.isArray(b3) ? O3[b3[h3]] : O3[h3]);
      for (var F3, D3 = 0, _3 = 0; _3 < n3 && 0 !== r3[h3].length; _3++) {
        var N3 = void 0 === r3[h3][_3 + 1] || null === r3[h3][_3 + 1];
        if (S3.globals.isXNumeric) {
          var W3 = S3.globals.seriesX[o3][_3 + 1];
          void 0 === S3.globals.seriesX[o3][_3 + 1] && (W3 = S3.globals.seriesX[o3][n3 - 1]), c3 = (W3 - S3.globals.minX) / this.xRatio;
        } else c3 += this.xDivision;
        if (H3) if (h3 > 0 && S3.globals.collapsedSeries.length < S3.config.series.length - 1) {
          m3 = this.prevSeriesY[function(t6) {
            for (var e4 = t6; e4 > 0; e4--) {
              if (!(S3.globals.collapsedSeriesIndices.indexOf((null == b3 ? void 0 : b3[e4]) || e4) > -1)) return e4;
              e4--;
            }
            return 0;
          }(h3 - 1)][_3 + 1];
        } else m3 = this.zeroY;
        else m3 = this.zeroY;
        N3 ? d3 = E3(R3, m3) : (d3 = E3(r3[h3][_3 + 1], m3), "rangeArea" === s3 && (Y3 = E3(C3[h3][_3 + 1], m3))), y3.push(null === r3[h3][_3 + 1] ? null : c3), !N3 || "smooth" !== S3.config.stroke.curve && "monotoneCubic" !== S3.config.stroke.curve ? (w3.push(d3), k3.push(Y3)) : (w3.push(null), k3.push(null));
        var B3 = this.lineHelpers.calculatePoints({ series: r3, x: c3, y: d3, realIndex: o3, i: h3, j: _3, prevY: P3 }), G3 = this._createPaths({ type: s3, series: r3, i: h3, realIndex: o3, j: _3, x: c3, y: d3, y2: Y3, xArrj: y3, yArrj: w3, y2Arrj: k3, pX: u3, pY: g3, pathState: D3, segmentStartX: F3, linePath: I3, areaPath: T3, linePaths: f3, areaPaths: x3, curve: O3, isRangeStart: A3 });
        x3 = G3.areaPaths, f3 = G3.linePaths, u3 = G3.pX, g3 = G3.pY, D3 = G3.pathState, F3 = G3.segmentStartX, T3 = G3.areaPath, I3 = G3.linePath, !this.appendPathFrom || S3.globals.hasNullValues || "monotoneCubic" === O3 && "rangeArea" === s3 || (z3 += L3.line(c3, this.areaBottomY), X3 += L3.line(c3, this.areaBottomY)), this.handleNullDataPoints(r3, B3, h3, _3, o3), this._handleMarkersAndLabels({ type: s3, pointsPos: B3, i: h3, j: _3, realIndex: o3, isRangeStart: A3 });
      }
      return { yArrj: w3, xArrj: y3, pathFromArea: X3, areaPaths: x3, pathFromLine: z3, linePaths: f3, linePath: I3, areaPath: T3 };
    } }, { key: "_handleMarkersAndLabels", value: function(t5) {
      var e3 = t5.type, i3 = t5.pointsPos, a3 = t5.isRangeStart, s3 = t5.i, r3 = t5.j, n3 = t5.realIndex, o3 = this.w, l3 = new qi2(this.ctx);
      if (this.pointsChart) this.scatter.draw(this.elSeries, r3, { realIndex: n3, pointsPos: i3, zRatio: this.zRatio, elParent: this.elPointsMain });
      else {
        o3.globals.series[s3].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
        var h3 = this.markers.plotChartMarkers({ pointsPos: i3, seriesIndex: n3, j: r3 + 1 });
        null !== h3 && this.elPointsMain.add(h3);
      }
      var c3 = l3.drawDataLabel({ type: e3, isRangeStart: a3, pos: i3, i: n3, j: r3 + 1 });
      null !== c3 && this.elDataLabelsWrap.add(c3);
    } }, { key: "_createPaths", value: function(t5) {
      var e3 = t5.type, i3 = t5.series, a3 = t5.i;
      t5.realIndex;
      var s3, r3 = t5.j, n3 = t5.x, o3 = t5.y, l3 = t5.xArrj, h3 = t5.yArrj, c3 = t5.y2, d3 = t5.y2Arrj, u3 = t5.pX, g3 = t5.pY, p3 = t5.pathState, f3 = t5.segmentStartX, x3 = t5.linePath, b3 = t5.areaPath, m3 = t5.linePaths, v3 = t5.areaPaths, y3 = t5.curve, w3 = t5.isRangeStart, k3 = new Mi2(this.ctx), A3 = this.areaBottomY, C3 = "rangeArea" === e3, S3 = "rangeArea" === e3 && w3;
      switch (y3) {
        case "monotoneCubic":
          var L3 = w3 ? h3 : d3;
          switch (p3) {
            case 0:
              if (null === L3[r3 + 1]) break;
              p3 = 1;
            case 1:
              if (!(C3 ? l3.length === i3[a3].length : r3 === i3[a3].length - 2)) break;
            case 2:
              var M3 = w3 ? l3 : l3.slice().reverse(), P3 = w3 ? L3 : L3.slice().reverse(), I3 = (s3 = P3, M3.map(function(t6, e4) {
                return [t6, s3[e4]];
              }).filter(function(t6) {
                return null !== t6[1];
              })), T3 = I3.length > 1 ? _a(I3) : I3, z3 = [];
              C3 && (S3 ? v3 = I3 : z3 = v3.reverse());
              var X3 = 0, R3 = 0;
              if (function(t6, e4) {
                for (var i4 = function(t7) {
                  var e5 = [], i5 = 0;
                  return t7.forEach(function(t8) {
                    null !== t8 ? i5++ : i5 > 0 && (e5.push(i5), i5 = 0);
                  }), i5 > 0 && e5.push(i5), e5;
                }(t6), a4 = [], s4 = 0, r4 = 0; s4 < i4.length; r4 += i4[s4++]) a4[s4] = Na(e4, r4, r4 + i4[s4]);
                return a4;
              }(P3, T3).forEach(function(t6) {
                X3++;
                var e4 = function(t7) {
                  for (var e5 = "", i5 = 0; i5 < t7.length; i5++) {
                    var a5 = t7[i5], s4 = a5.length;
                    s4 > 4 ? (e5 += "C".concat(a5[0], ", ").concat(a5[1]), e5 += ", ".concat(a5[2], ", ").concat(a5[3]), e5 += ", ".concat(a5[4], ", ").concat(a5[5])) : s4 > 2 && (e5 += "S".concat(a5[0], ", ").concat(a5[1]), e5 += ", ".concat(a5[2], ", ").concat(a5[3]));
                  }
                  return e5;
                }(t6), i4 = R3, a4 = (R3 += t6.length) - 1;
                S3 ? x3 = k3.move(I3[i4][0], I3[i4][1]) + e4 : C3 ? x3 = k3.move(z3[i4][0], z3[i4][1]) + k3.line(I3[i4][0], I3[i4][1]) + e4 + k3.line(z3[a4][0], z3[a4][1]) : (x3 = k3.move(I3[i4][0], I3[i4][1]) + e4, b3 = x3 + k3.line(I3[a4][0], A3) + k3.line(I3[i4][0], A3) + "z", v3.push(b3)), m3.push(x3);
              }), C3 && X3 > 1 && !S3) {
                var E3 = m3.slice(X3).reverse();
                m3.splice(X3), E3.forEach(function(t6) {
                  return m3.push(t6);
                });
              }
              p3 = 0;
          }
          break;
        case "smooth":
          var Y3 = 0.35 * (n3 - u3);
          if (null === i3[a3][r3]) p3 = 0;
          else switch (p3) {
            case 0:
              if (f3 = u3, x3 = S3 ? k3.move(u3, d3[r3]) + k3.line(u3, g3) : k3.move(u3, g3), b3 = k3.move(u3, g3), null === i3[a3][r3 + 1] || void 0 === i3[a3][r3 + 1]) {
                m3.push(x3), v3.push(b3);
                break;
              }
              if (p3 = 1, r3 < i3[a3].length - 2) {
                var H3 = k3.curve(u3 + Y3, g3, n3 - Y3, o3, n3, o3);
                x3 += H3, b3 += H3;
                break;
              }
            case 1:
              if (null === i3[a3][r3 + 1]) x3 += S3 ? k3.line(u3, c3) : k3.move(u3, g3), b3 += k3.line(u3, A3) + k3.line(f3, A3) + "z", m3.push(x3), v3.push(b3), p3 = -1;
              else {
                var O3 = k3.curve(u3 + Y3, g3, n3 - Y3, o3, n3, o3);
                x3 += O3, b3 += O3, r3 >= i3[a3].length - 2 && (S3 && (x3 += k3.curve(n3, o3, n3, o3, n3, c3) + k3.move(n3, c3)), b3 += k3.curve(n3, o3, n3, o3, n3, A3) + k3.line(f3, A3) + "z", m3.push(x3), v3.push(b3), p3 = -1);
              }
          }
          u3 = n3, g3 = o3;
          break;
        default:
          var F3 = function(t6, e4, i4) {
            var a4 = [];
            switch (t6) {
              case "stepline":
                a4 = k3.line(e4, null, "H") + k3.line(null, i4, "V");
                break;
              case "linestep":
                a4 = k3.line(null, i4, "V") + k3.line(e4, null, "H");
                break;
              case "straight":
                a4 = k3.line(e4, i4);
            }
            return a4;
          };
          if (null === i3[a3][r3]) p3 = 0;
          else switch (p3) {
            case 0:
              if (f3 = u3, x3 = S3 ? k3.move(u3, d3[r3]) + k3.line(u3, g3) : k3.move(u3, g3), b3 = k3.move(u3, g3), null === i3[a3][r3 + 1] || void 0 === i3[a3][r3 + 1]) {
                m3.push(x3), v3.push(b3);
                break;
              }
              if (p3 = 1, r3 < i3[a3].length - 2) {
                var D3 = F3(y3, n3, o3);
                x3 += D3, b3 += D3;
                break;
              }
            case 1:
              if (null === i3[a3][r3 + 1]) x3 += S3 ? k3.line(u3, c3) : k3.move(u3, g3), b3 += k3.line(u3, A3) + k3.line(f3, A3) + "z", m3.push(x3), v3.push(b3), p3 = -1;
              else {
                var _3 = F3(y3, n3, o3);
                x3 += _3, b3 += _3, r3 >= i3[a3].length - 2 && (S3 && (x3 += k3.line(n3, c3)), b3 += k3.line(n3, A3) + k3.line(f3, A3) + "z", m3.push(x3), v3.push(b3), p3 = -1);
              }
          }
          u3 = n3, g3 = o3;
      }
      return { linePaths: m3, areaPaths: v3, pX: u3, pY: g3, pathState: p3, segmentStartX: f3, linePath: x3, areaPath: b3 };
    } }, { key: "handleNullDataPoints", value: function(t5, e3, i3, a3, s3) {
      var r3 = this.w;
      if (null === t5[i3][a3] && r3.config.markers.showNullDataPoints || 1 === t5[i3].length) {
        var n3 = this.strokeWidth - r3.config.markers.strokeWidth / 2;
        n3 > 0 || (n3 = 0);
        var o3 = this.markers.plotChartMarkers({ pointsPos: e3, seriesIndex: s3, j: a3 + 1, pSize: n3, alwaysDrawMarker: true });
        null !== o3 && this.elPointsMain.add(o3);
      }
    } }]), t4;
  }();
  window.TreemapSquared = {}, window.TreemapSquared.generate = /* @__PURE__ */ function() {
    function t4(e4, i4, a4, s4) {
      this.xoffset = e4, this.yoffset = i4, this.height = s4, this.width = a4, this.shortestEdge = function() {
        return Math.min(this.height, this.width);
      }, this.getCoordinates = function(t5) {
        var e5, i5 = [], a5 = this.xoffset, s5 = this.yoffset, n4 = r3(t5) / this.height, o3 = r3(t5) / this.width;
        if (this.width >= this.height) for (e5 = 0; e5 < t5.length; e5++) i5.push([a5, s5, a5 + n4, s5 + t5[e5] / n4]), s5 += t5[e5] / n4;
        else for (e5 = 0; e5 < t5.length; e5++) i5.push([a5, s5, a5 + t5[e5] / o3, s5 + o3]), a5 += t5[e5] / o3;
        return i5;
      }, this.cutArea = function(e5) {
        var i5;
        if (this.width >= this.height) {
          var a5 = e5 / this.height, s5 = this.width - a5;
          i5 = new t4(this.xoffset + a5, this.yoffset, s5, this.height);
        } else {
          var r4 = e5 / this.width, n4 = this.height - r4;
          i5 = new t4(this.xoffset, this.yoffset + r4, this.width, n4);
        }
        return i5;
      };
    }
    function e3(e4, a4, s4, n4, o3) {
      n4 = void 0 === n4 ? 0 : n4, o3 = void 0 === o3 ? 0 : o3;
      var l3 = i3(function(t5, e5) {
        var i4, a5 = [], s5 = e5 / r3(t5);
        for (i4 = 0; i4 < t5.length; i4++) a5[i4] = t5[i4] * s5;
        return a5;
      }(e4, a4 * s4), [], new t4(n4, o3, a4, s4), []);
      return function(t5) {
        var e5, i4, a5 = [];
        for (e5 = 0; e5 < t5.length; e5++) for (i4 = 0; i4 < t5[e5].length; i4++) a5.push(t5[e5][i4]);
        return a5;
      }(l3);
    }
    function i3(t5, e4, s4, n4) {
      var o3, l3, h3;
      if (0 !== t5.length) return o3 = s4.shortestEdge(), function(t6, e5, i4) {
        var s5;
        if (0 === t6.length) return true;
        (s5 = t6.slice()).push(e5);
        var r4 = a3(t6, i4), n5 = a3(s5, i4);
        return r4 >= n5;
      }(e4, l3 = t5[0], o3) ? (e4.push(l3), i3(t5.slice(1), e4, s4, n4)) : (h3 = s4.cutArea(r3(e4), n4), n4.push(s4.getCoordinates(e4)), i3(t5, [], h3, n4)), n4;
      n4.push(s4.getCoordinates(e4));
    }
    function a3(t5, e4) {
      var i4 = Math.min.apply(Math, t5), a4 = Math.max.apply(Math, t5), s4 = r3(t5);
      return Math.max(Math.pow(e4, 2) * a4 / Math.pow(s4, 2), Math.pow(s4, 2) / (Math.pow(e4, 2) * i4));
    }
    function s3(t5) {
      return t5 && t5.constructor === Array;
    }
    function r3(t5) {
      var e4, i4 = 0;
      for (e4 = 0; e4 < t5.length; e4++) i4 += t5[e4];
      return i4;
    }
    function n3(t5) {
      var e4, i4 = 0;
      if (s3(t5[0])) for (e4 = 0; e4 < t5.length; e4++) i4 += n3(t5[e4]);
      else i4 = r3(t5);
      return i4;
    }
    return function t5(i4, a4, r4, o3, l3) {
      o3 = void 0 === o3 ? 0 : o3, l3 = void 0 === l3 ? 0 : l3;
      var h3, c3, d3 = [], u3 = [];
      if (s3(i4[0])) {
        for (c3 = 0; c3 < i4.length; c3++) d3[c3] = n3(i4[c3]);
        for (h3 = e3(d3, a4, r4, o3, l3), c3 = 0; c3 < i4.length; c3++) u3.push(t5(i4[c3], h3[c3][2] - h3[c3][0], h3[c3][3] - h3[c3][1], h3[c3][0], h3[c3][1]));
      } else u3 = e3(i4, a4, r4, o3, l3);
      return u3;
    };
  }();
  var Ga = function() {
    function t4(e3, a3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new za(e3), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];
    }
    return s2(t4, [{ key: "draw", value: function(t5) {
      var e3 = this, i3 = this.w, a3 = new Mi2(this.ctx), s3 = new ji2(this.ctx), r3 = a3.group({ class: "apexcharts-treemap" });
      if (i3.globals.noData) return r3;
      var n3 = [];
      return t5.forEach(function(t6) {
        var e4 = t6.map(function(t7) {
          return Math.abs(t7);
        });
        n3.push(e4);
      }), this.negRange = this.helpers.checkColorRange(), i3.config.series.forEach(function(t6, i4) {
        t6.data.forEach(function(t7) {
          Array.isArray(e3.labels[i4]) || (e3.labels[i4] = []), e3.labels[i4].push(t7.x);
        });
      }), window.TreemapSquared.generate(n3, i3.globals.gridWidth, i3.globals.gridHeight).forEach(function(n4, o3) {
        var l3 = a3.group({ class: "apexcharts-series apexcharts-treemap-series", seriesName: v2.escapeString(i3.globals.seriesNames[o3]), rel: o3 + 1, "data:realIndex": o3 });
        if (i3.config.chart.dropShadow.enabled) {
          var h3 = i3.config.chart.dropShadow;
          new Li2(e3.ctx).dropShadow(r3, h3, o3);
        }
        var c3 = a3.group({ class: "apexcharts-data-labels" }), d3 = { xMin: 1 / 0, yMin: 1 / 0, xMax: -1 / 0, yMax: -1 / 0 };
        n4.forEach(function(r4, n5) {
          var h4 = r4[0], c4 = r4[1], u4 = r4[2], g4 = r4[3];
          d3.xMin = Math.min(d3.xMin, h4), d3.yMin = Math.min(d3.yMin, c4), d3.xMax = Math.max(d3.xMax, u4), d3.yMax = Math.max(d3.yMax, g4);
          var p4 = e3.helpers.getShadeColor(i3.config.chart.type, o3, n5, e3.negRange), f4 = p4.color, x4 = s3.fillPath({ color: f4, seriesNumber: o3, dataPointIndex: n5 }), b4 = a3.drawRect(h4, c4, u4 - h4, g4 - c4, i3.config.plotOptions.treemap.borderRadius, "#fff", 1, e3.strokeWidth, i3.config.plotOptions.treemap.useFillColorAsStroke ? f4 : i3.globals.stroke.colors[o3]);
          b4.attr({ cx: h4, cy: c4, index: o3, i: o3, j: n5, width: u4 - h4, height: g4 - c4, fill: x4 }), b4.node.classList.add("apexcharts-treemap-rect"), e3.helpers.addListeners(b4);
          var m4 = { x: h4 + (u4 - h4) / 2, y: c4 + (g4 - c4) / 2, width: 0, height: 0 }, v3 = { x: h4, y: c4, width: u4 - h4, height: g4 - c4 };
          if (i3.config.chart.animations.enabled && !i3.globals.dataChanged) {
            var y4 = 1;
            i3.globals.resized || (y4 = i3.config.chart.animations.speed), e3.animateTreemap(b4, m4, v3, y4);
          }
          if (i3.globals.dataChanged) {
            var w4 = 1;
            e3.dynamicAnim.enabled && i3.globals.shouldAnimate && (w4 = e3.dynamicAnim.speed, i3.globals.previousPaths[o3] && i3.globals.previousPaths[o3][n5] && i3.globals.previousPaths[o3][n5].rect && (m4 = i3.globals.previousPaths[o3][n5].rect), e3.animateTreemap(b4, m4, v3, w4));
          }
          var k4 = e3.getFontSize(r4), A4 = i3.config.dataLabels.formatter(e3.labels[o3][n5], { value: i3.globals.series[o3][n5], seriesIndex: o3, dataPointIndex: n5, w: i3 });
          "truncate" === i3.config.plotOptions.treemap.dataLabels.format && (k4 = parseInt(i3.config.dataLabels.style.fontSize, 10), A4 = e3.truncateLabels(A4, k4, h4, c4, u4, g4));
          var C4 = null;
          i3.globals.series[o3][n5] && (C4 = e3.helpers.calculateDataLabels({ text: A4, x: (h4 + u4) / 2, y: (c4 + g4) / 2 + e3.strokeWidth / 2 + k4 / 3, i: o3, j: n5, colorProps: p4, fontSize: k4, series: t5 })), i3.config.dataLabels.enabled && C4 && e3.rotateToFitLabel(C4, k4, A4, h4, c4, u4, g4), l3.add(b4), null !== C4 && l3.add(C4);
        });
        var u3 = i3.config.plotOptions.treemap.seriesTitle;
        if (i3.config.series.length > 1 && u3 && u3.show) {
          var g3 = i3.config.series[o3].name || "";
          if (g3 && d3.xMin < 1 / 0 && d3.yMin < 1 / 0) {
            var p3 = u3.offsetX, f3 = u3.offsetY, x3 = u3.borderColor, b3 = u3.borderWidth, m3 = u3.borderRadius, y3 = u3.style, w3 = y3.color || i3.config.chart.foreColor, k3 = { left: y3.padding.left, right: y3.padding.right, top: y3.padding.top, bottom: y3.padding.bottom }, A3 = a3.getTextRects(g3, y3.fontSize, y3.fontFamily), C3 = A3.width + k3.left + k3.right, S3 = A3.height + k3.top + k3.bottom, L3 = d3.xMin + (p3 || 0), M3 = d3.yMin + (f3 || 0), P3 = a3.drawRect(L3, M3, C3, S3, m3, y3.background, 1, b3, x3), I3 = a3.drawText({ x: L3 + k3.left, y: M3 + k3.top + 0.75 * A3.height, text: g3, fontSize: y3.fontSize, fontFamily: y3.fontFamily, fontWeight: y3.fontWeight, foreColor: w3, cssClass: y3.cssClass || "" });
            l3.add(P3), l3.add(I3);
          }
        }
        l3.add(c3), r3.add(l3);
      }), r3;
    } }, { key: "getFontSize", value: function(t5) {
      var e3 = this.w;
      var i3 = function t6(e4) {
        var i4, a3 = 0;
        if (Array.isArray(e4[0])) for (i4 = 0; i4 < e4.length; i4++) a3 += t6(e4[i4]);
        else for (i4 = 0; i4 < e4.length; i4++) a3 += e4[i4].length;
        return a3;
      }(this.labels) / function t6(e4) {
        var i4, a3 = 0;
        if (Array.isArray(e4[0])) for (i4 = 0; i4 < e4.length; i4++) a3 += t6(e4[i4]);
        else for (i4 = 0; i4 < e4.length; i4++) a3 += 1;
        return a3;
      }(this.labels);
      return function(t6, a3) {
        var s3 = t6 * a3, r3 = Math.pow(s3, 0.5);
        return Math.min(r3 / i3, parseInt(e3.config.dataLabels.style.fontSize, 10));
      }(t5[2] - t5[0], t5[3] - t5[1]);
    } }, { key: "rotateToFitLabel", value: function(t5, e3, i3, a3, s3, r3, n3) {
      var o3 = new Mi2(this.ctx), l3 = o3.getTextRects(i3, e3);
      if (l3.width + this.w.config.stroke.width + 5 > r3 - a3 && l3.width <= n3 - s3) {
        var h3 = o3.rotateAroundCenter(t5.node);
        t5.node.setAttribute("transform", "rotate(-90 ".concat(h3.x, " ").concat(h3.y, ") translate(").concat(l3.height / 3, ")"));
      }
    } }, { key: "truncateLabels", value: function(t5, e3, i3, a3, s3, r3) {
      var n3 = new Mi2(this.ctx), o3 = n3.getTextRects(t5, e3).width + this.w.config.stroke.width + 5 > s3 - i3 && r3 - a3 > s3 - i3 ? r3 - a3 : s3 - i3, l3 = n3.getTextBasedOnMaxWidth({ text: t5, maxWidth: o3, fontSize: e3 });
      return t5.length !== l3.length && o3 / e3 < 5 ? "" : l3;
    } }, { key: "animateTreemap", value: function(t5, e3, i3, a3) {
      var s3 = new y2(this.ctx);
      s3.animateRect(t5, e3, i3, a3, function() {
        s3.animationCompleted(t5);
      });
    } }]), t4;
  }();
  var ja = 86400;
  var Va = 10 / ja;
  var Ua = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;
    }
    return s2(t4, [{ key: "calculateTimeScaleTicks", value: function(t5, e3) {
      var i3 = this, a3 = this.w;
      if (a3.globals.allSeriesCollapsed) return a3.globals.labels = [], a3.globals.timescaleLabels = [], [];
      var s3 = new zi2(this.ctx), r3 = (e3 - t5) / 864e5;
      this.determineInterval(r3), a3.globals.disableZoomIn = false, a3.globals.disableZoomOut = false, r3 < Va ? a3.globals.disableZoomIn = true : r3 > 5e4 && (a3.globals.disableZoomOut = true);
      var n3 = s3.getTimeUnitsfromTimestamp(t5, e3, this.utc), o3 = a3.globals.gridWidth / r3, l3 = o3 / 24, h3 = l3 / 60, c3 = h3 / 60, d3 = Math.floor(24 * r3), g3 = Math.floor(1440 * r3), p3 = Math.floor(r3 * ja), f3 = Math.floor(r3), x3 = Math.floor(r3 / 30), b3 = Math.floor(r3 / 365), m3 = { minMillisecond: n3.minMillisecond, minSecond: n3.minSecond, minMinute: n3.minMinute, minHour: n3.minHour, minDate: n3.minDate, minMonth: n3.minMonth, minYear: n3.minYear }, v3 = { firstVal: m3, currentMillisecond: m3.minMillisecond, currentSecond: m3.minSecond, currentMinute: m3.minMinute, currentHour: m3.minHour, currentMonthDate: m3.minDate, currentDate: m3.minDate, currentMonth: m3.minMonth, currentYear: m3.minYear, daysWidthOnXAxis: o3, hoursWidthOnXAxis: l3, minutesWidthOnXAxis: h3, secondsWidthOnXAxis: c3, numberOfSeconds: p3, numberOfMinutes: g3, numberOfHours: d3, numberOfDays: f3, numberOfMonths: x3, numberOfYears: b3 };
      switch (this.tickInterval) {
        case "years":
          this.generateYearScale(v3);
          break;
        case "months":
        case "half_year":
          this.generateMonthScale(v3);
          break;
        case "months_days":
        case "months_fortnight":
        case "days":
        case "week_days":
          this.generateDayScale(v3);
          break;
        case "hours":
          this.generateHourScale(v3);
          break;
        case "minutes_fives":
        case "minutes":
          this.generateMinuteScale(v3);
          break;
        case "seconds_tens":
        case "seconds_fives":
        case "seconds":
          this.generateSecondScale(v3);
      }
      var y3 = this.timeScaleArray.map(function(t6) {
        var e4 = { position: t6.position, unit: t6.unit, year: t6.year, day: t6.day ? t6.day : 1, hour: t6.hour ? t6.hour : 0, month: t6.month + 1 };
        return "month" === t6.unit ? u2(u2({}, e4), {}, { day: 1, value: t6.value + 1 }) : "day" === t6.unit || "hour" === t6.unit ? u2(u2({}, e4), {}, { value: t6.value }) : "minute" === t6.unit ? u2(u2({}, e4), {}, { value: t6.value, minute: t6.value }) : "second" === t6.unit ? u2(u2({}, e4), {}, { value: t6.value, minute: t6.minute, second: t6.second }) : t6;
      });
      return y3.filter(function(t6) {
        var e4 = 1, s4 = Math.ceil(a3.globals.gridWidth / 120), r4 = t6.value;
        void 0 !== a3.config.xaxis.tickAmount && (s4 = a3.config.xaxis.tickAmount), y3.length > s4 && (e4 = Math.floor(y3.length / s4));
        var n4 = false, o4 = false;
        switch (i3.tickInterval) {
          case "years":
            "year" === t6.unit && (n4 = true);
            break;
          case "half_year":
            e4 = 7, "year" === t6.unit && (n4 = true);
            break;
          case "months":
            e4 = 1, "year" === t6.unit && (n4 = true);
            break;
          case "months_fortnight":
            e4 = 15, "year" !== t6.unit && "month" !== t6.unit || (n4 = true), 30 === r4 && (o4 = true);
            break;
          case "months_days":
            e4 = 10, "month" === t6.unit && (n4 = true), 30 === r4 && (o4 = true);
            break;
          case "week_days":
            e4 = 8, "month" === t6.unit && (n4 = true);
            break;
          case "days":
            e4 = 1, "month" === t6.unit && (n4 = true);
            break;
          case "hours":
            "day" === t6.unit && (n4 = true);
            break;
          case "minutes_fives":
          case "seconds_fives":
            r4 % 5 != 0 && (o4 = true);
            break;
          case "seconds_tens":
            r4 % 10 != 0 && (o4 = true);
        }
        if ("hours" === i3.tickInterval || "minutes_fives" === i3.tickInterval || "seconds_tens" === i3.tickInterval || "seconds_fives" === i3.tickInterval) {
          if (!o4) return true;
        } else if ((r4 % e4 == 0 || n4) && !o4) return true;
      });
    } }, { key: "recalcDimensionsBasedOnFormat", value: function(t5, e3) {
      var i3 = this.w, a3 = this.formatDates(t5), s3 = this.removeOverlappingTS(a3);
      i3.globals.timescaleLabels = s3.slice(), new pa(this.ctx).plotCoords();
    } }, { key: "determineInterval", value: function(t5) {
      var e3 = 24 * t5, i3 = 60 * e3;
      switch (true) {
        case t5 / 365 > 5:
          this.tickInterval = "years";
          break;
        case t5 > 800:
          this.tickInterval = "half_year";
          break;
        case t5 > 180:
          this.tickInterval = "months";
          break;
        case t5 > 90:
          this.tickInterval = "months_fortnight";
          break;
        case t5 > 60:
          this.tickInterval = "months_days";
          break;
        case t5 > 30:
          this.tickInterval = "week_days";
          break;
        case t5 > 2:
          this.tickInterval = "days";
          break;
        case e3 > 2.4:
          this.tickInterval = "hours";
          break;
        case i3 > 15:
          this.tickInterval = "minutes_fives";
          break;
        case i3 > 5:
          this.tickInterval = "minutes";
          break;
        case i3 > 1:
          this.tickInterval = "seconds_tens";
          break;
        case 60 * i3 > 20:
          this.tickInterval = "seconds_fives";
          break;
        default:
          this.tickInterval = "seconds";
      }
    } }, { key: "generateYearScale", value: function(t5) {
      var e3 = t5.firstVal, i3 = t5.currentMonth, a3 = t5.currentYear, s3 = t5.daysWidthOnXAxis, r3 = t5.numberOfYears, n3 = e3.minYear, o3 = 0, l3 = new zi2(this.ctx), h3 = "year";
      if (e3.minDate > 1 || e3.minMonth > 0) {
        var c3 = l3.determineRemainingDaysOfYear(e3.minYear, e3.minMonth, e3.minDate);
        o3 = (l3.determineDaysOfYear(e3.minYear) - c3 + 1) * s3, n3 = e3.minYear + 1, this.timeScaleArray.push({ position: o3, value: n3, unit: h3, year: n3, month: v2.monthMod(i3 + 1) });
      } else 1 === e3.minDate && 0 === e3.minMonth && this.timeScaleArray.push({ position: o3, value: n3, unit: h3, year: a3, month: v2.monthMod(i3 + 1) });
      for (var d3 = n3, u3 = o3, g3 = 0; g3 < r3; g3++) d3++, u3 = l3.determineDaysOfYear(d3 - 1) * s3 + u3, this.timeScaleArray.push({ position: u3, value: d3, unit: h3, year: d3, month: 1 });
    } }, { key: "generateMonthScale", value: function(t5) {
      var e3 = t5.firstVal, i3 = t5.currentMonthDate, a3 = t5.currentMonth, s3 = t5.currentYear, r3 = t5.daysWidthOnXAxis, n3 = t5.numberOfMonths, o3 = a3, l3 = 0, h3 = new zi2(this.ctx), c3 = "month", d3 = 0;
      if (e3.minDate > 1) {
        l3 = (h3.determineDaysOfMonths(a3 + 1, e3.minYear) - i3 + 1) * r3, o3 = v2.monthMod(a3 + 1);
        var u3 = s3 + d3, g3 = v2.monthMod(o3), p3 = o3;
        0 === o3 && (c3 = "year", p3 = u3, g3 = 1, u3 += d3 += 1), this.timeScaleArray.push({ position: l3, value: p3, unit: c3, year: u3, month: g3 });
      } else this.timeScaleArray.push({ position: l3, value: o3, unit: c3, year: s3, month: v2.monthMod(a3) });
      for (var f3 = o3 + 1, x3 = l3, b3 = 0, m3 = 1; b3 < n3; b3++, m3++) {
        0 === (f3 = v2.monthMod(f3)) ? (c3 = "year", d3 += 1) : c3 = "month";
        var y3 = this._getYear(s3, f3, d3);
        x3 = h3.determineDaysOfMonths(f3, y3) * r3 + x3;
        var w3 = 0 === f3 ? y3 : f3;
        this.timeScaleArray.push({ position: x3, value: w3, unit: c3, year: y3, month: 0 === f3 ? 1 : f3 }), f3++;
      }
    } }, { key: "generateDayScale", value: function(t5) {
      var e3 = t5.firstVal, i3 = t5.currentMonth, a3 = t5.currentYear, s3 = t5.hoursWidthOnXAxis, r3 = t5.numberOfDays, n3 = new zi2(this.ctx), o3 = "day", l3 = e3.minDate + 1, h3 = l3, c3 = function(t6, e4, i4) {
        return t6 > n3.determineDaysOfMonths(e4 + 1, i4) ? (h3 = 1, o3 = "month", u3 = e4 += 1, e4) : e4;
      }, d3 = (24 - e3.minHour) * s3, u3 = l3, g3 = c3(h3, i3, a3);
      0 === e3.minHour && 1 === e3.minDate ? (d3 = 0, u3 = v2.monthMod(e3.minMonth), o3 = "month", h3 = e3.minDate) : 1 !== e3.minDate && 0 === e3.minHour && 0 === e3.minMinute && (d3 = 0, l3 = e3.minDate, u3 = l3, g3 = c3(h3 = l3, i3, a3), 1 !== u3 && (o3 = "day")), this.timeScaleArray.push({ position: d3, value: u3, unit: o3, year: this._getYear(a3, g3, 0), month: v2.monthMod(g3), day: h3 });
      for (var p3 = d3, f3 = 0; f3 < r3; f3++) {
        o3 = "day", g3 = c3(h3 += 1, g3, this._getYear(a3, g3, 0));
        var x3 = this._getYear(a3, g3, 0);
        p3 = 24 * s3 + p3;
        var b3 = 1 === h3 ? v2.monthMod(g3) : h3;
        this.timeScaleArray.push({ position: p3, value: b3, unit: o3, year: x3, month: v2.monthMod(g3), day: b3 });
      }
    } }, { key: "generateHourScale", value: function(t5) {
      var e3 = t5.firstVal, i3 = t5.currentDate, a3 = t5.currentMonth, s3 = t5.currentYear, r3 = t5.minutesWidthOnXAxis, n3 = t5.numberOfHours, o3 = new zi2(this.ctx), l3 = "hour", h3 = function(t6, e4) {
        return t6 > o3.determineDaysOfMonths(e4 + 1, s3) && (f3 = 1, e4 += 1), { month: e4, date: f3 };
      }, c3 = function(t6, e4) {
        return t6 > o3.determineDaysOfMonths(e4 + 1, s3) ? e4 += 1 : e4;
      }, d3 = 60 - (e3.minMinute + e3.minSecond / 60), u3 = d3 * r3, g3 = e3.minHour + 1, p3 = g3;
      60 === d3 && (u3 = 0, p3 = g3 = e3.minHour);
      var f3 = i3;
      p3 >= 24 && (p3 = 0, l3 = "day", g3 = f3 += 1);
      var x3 = h3(f3, a3).month;
      x3 = c3(f3, x3), g3 > 31 && (g3 = f3 = 1), this.timeScaleArray.push({ position: u3, value: g3, unit: l3, day: f3, hour: p3, year: s3, month: v2.monthMod(x3) }), p3++;
      for (var b3 = u3, m3 = 0; m3 < n3; m3++) {
        if (l3 = "hour", p3 >= 24) p3 = 0, l3 = "day", x3 = h3(f3 += 1, x3).month, x3 = c3(f3, x3);
        var y3 = this._getYear(s3, x3, 0);
        b3 = 60 * r3 + b3;
        var w3 = 0 === p3 ? f3 : p3;
        this.timeScaleArray.push({ position: b3, value: w3, unit: l3, hour: p3, day: f3, year: y3, month: v2.monthMod(x3) }), p3++;
      }
    } }, { key: "generateMinuteScale", value: function(t5) {
      for (var e3 = t5.currentMillisecond, i3 = t5.currentSecond, a3 = t5.currentMinute, s3 = t5.currentHour, r3 = t5.currentDate, n3 = t5.currentMonth, o3 = t5.currentYear, l3 = t5.minutesWidthOnXAxis, h3 = t5.secondsWidthOnXAxis, c3 = t5.numberOfMinutes, d3 = a3 + 1, u3 = r3, g3 = n3, p3 = o3, f3 = s3, x3 = (60 - i3 - e3 / 1e3) * h3, b3 = 0; b3 < c3; b3++) d3 >= 60 && (d3 = 0, 24 === (f3 += 1) && (f3 = 0)), this.timeScaleArray.push({ position: x3, value: d3, unit: "minute", hour: f3, minute: d3, day: u3, year: this._getYear(p3, g3, 0), month: v2.monthMod(g3) }), x3 += l3, d3++;
    } }, { key: "generateSecondScale", value: function(t5) {
      for (var e3 = t5.currentMillisecond, i3 = t5.currentSecond, a3 = t5.currentMinute, s3 = t5.currentHour, r3 = t5.currentDate, n3 = t5.currentMonth, o3 = t5.currentYear, l3 = t5.secondsWidthOnXAxis, h3 = t5.numberOfSeconds, c3 = i3 + 1, d3 = a3, u3 = r3, g3 = n3, p3 = o3, f3 = s3, x3 = (1e3 - e3) / 1e3 * l3, b3 = 0; b3 < h3; b3++) c3 >= 60 && (c3 = 0, ++d3 >= 60 && (d3 = 0, 24 === ++f3 && (f3 = 0))), this.timeScaleArray.push({ position: x3, value: c3, unit: "second", hour: f3, minute: d3, second: c3, day: u3, year: this._getYear(p3, g3, 0), month: v2.monthMod(g3) }), x3 += l3, c3++;
    } }, { key: "createRawDateString", value: function(t5, e3) {
      var i3 = t5.year;
      return 0 === t5.month && (t5.month = 1), i3 += "-" + ("0" + t5.month.toString()).slice(-2), "day" === t5.unit ? i3 += "day" === t5.unit ? "-" + ("0" + e3).slice(-2) : "-01" : i3 += "-" + ("0" + (t5.day ? t5.day : "1")).slice(-2), "hour" === t5.unit ? i3 += "hour" === t5.unit ? "T" + ("0" + e3).slice(-2) : "T00" : i3 += "T" + ("0" + (t5.hour ? t5.hour : "0")).slice(-2), "minute" === t5.unit ? i3 += ":" + ("0" + e3).slice(-2) : i3 += ":" + (t5.minute ? ("0" + t5.minute).slice(-2) : "00"), "second" === t5.unit ? i3 += ":" + ("0" + e3).slice(-2) : i3 += ":00", this.utc && (i3 += ".000Z"), i3;
    } }, { key: "formatDates", value: function(t5) {
      var e3 = this, i3 = this.w;
      return t5.map(function(t6) {
        var a3 = t6.value.toString(), s3 = new zi2(e3.ctx), r3 = e3.createRawDateString(t6, a3), n3 = s3.getDate(s3.parseDate(r3));
        if (e3.utc || (n3 = s3.getDate(s3.parseDateWithTimezone(r3))), void 0 === i3.config.xaxis.labels.format) {
          var o3 = "dd MMM", l3 = i3.config.xaxis.labels.datetimeFormatter;
          "year" === t6.unit && (o3 = l3.year), "month" === t6.unit && (o3 = l3.month), "day" === t6.unit && (o3 = l3.day), "hour" === t6.unit && (o3 = l3.hour), "minute" === t6.unit && (o3 = l3.minute), "second" === t6.unit && (o3 = l3.second), a3 = s3.formatDate(n3, o3);
        } else a3 = s3.formatDate(n3, i3.config.xaxis.labels.format);
        return { dateString: r3, position: t6.position, value: a3, unit: t6.unit, year: t6.year, month: t6.month };
      });
    } }, { key: "removeOverlappingTS", value: function(t5) {
      var e3, i3 = this, a3 = new Mi2(this.ctx), s3 = false;
      t5.length > 0 && t5[0].value && t5.every(function(e4) {
        return e4.value.length === t5[0].value.length;
      }) && (s3 = true, e3 = a3.getTextRects(t5[0].value).width);
      var r3 = 0, n3 = t5.map(function(n4, o3) {
        if (o3 > 0 && i3.w.config.xaxis.labels.hideOverlappingLabels) {
          var l3 = s3 ? e3 : a3.getTextRects(t5[r3].value).width, h3 = t5[r3].position;
          return n4.position > h3 + l3 + 10 ? (r3 = o3, n4) : null;
        }
        return n4;
      });
      return n3 = n3.filter(function(t6) {
        return null !== t6;
      });
    } }, { key: "_getYear", value: function(t5, e3, i3) {
      return t5 + Math.floor(e3 / 12) + i3;
    } }]), t4;
  }();
  var qa = function() {
    function t4(e3, a3) {
      i2(this, t4), this.ctx = a3, this.w = a3.w, this.el = e3;
    }
    return s2(t4, [{ key: "setupElements", value: function() {
      var t5 = this.w, e3 = t5.globals, i3 = t5.config, a3 = i3.chart.type;
      e3.axisCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble", "radar", "heatmap", "treemap"].includes(a3), e3.xyCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble"].includes(a3), e3.isBarHorizontal = ["bar", "rangeBar", "boxPlot"].includes(a3) && i3.plotOptions.bar.horizontal, e3.chartClass = ".apexcharts".concat(e3.chartID), e3.dom.baseEl = this.el, e3.dom.elWrap = document.createElement("div"), Mi2.setAttrs(e3.dom.elWrap, { id: e3.chartClass.substring(1), class: "apexcharts-canvas ".concat(e3.chartClass.substring(1)) }), this.el.appendChild(e3.dom.elWrap), e3.dom.Paper = window.SVG().addTo(e3.dom.elWrap), e3.dom.Paper.attr({ class: "apexcharts-svg", "xmlns:data": "ApexChartsNS", transform: "translate(".concat(i3.chart.offsetX, ", ").concat(i3.chart.offsetY, ")") }), e3.dom.Paper.node.style.background = "dark" !== i3.theme.mode || i3.chart.background ? "light" !== i3.theme.mode || i3.chart.background ? i3.chart.background : "#fff" : "#343A3F", this.setSVGDimensions(), e3.dom.elLegendForeign = document.createElementNS(e3.SVGNS, "foreignObject"), Mi2.setAttrs(e3.dom.elLegendForeign, { x: 0, y: 0, width: e3.svgWidth, height: e3.svgHeight }), e3.dom.elLegendWrap = document.createElement("div"), e3.dom.elLegendWrap.classList.add("apexcharts-legend"), e3.dom.elWrap.appendChild(e3.dom.elLegendWrap), e3.dom.Paper.node.appendChild(e3.dom.elLegendForeign), e3.dom.elGraphical = e3.dom.Paper.group().attr({ class: "apexcharts-inner apexcharts-graphical" }), e3.dom.elDefs = e3.dom.Paper.defs(), e3.dom.Paper.add(e3.dom.elGraphical), e3.dom.elGraphical.add(e3.dom.elDefs);
    } }, { key: "plotChartType", value: function(t5, e3) {
      var i3 = this.w, a3 = this.ctx, s3 = i3.config, r3 = i3.globals, n3 = { line: { series: [], i: [] }, area: { series: [], i: [] }, scatter: { series: [], i: [] }, bubble: { series: [], i: [] }, bar: { series: [], i: [] }, candlestick: { series: [], i: [] }, boxPlot: { series: [], i: [] }, rangeBar: { series: [], i: [] }, rangeArea: { series: [], seriesRangeEnd: [], i: [] } }, o3 = s3.chart.type || "line", l3 = null, h3 = 0;
      r3.series.forEach(function(e4, a4) {
        var s4 = "column" === t5[a4].type ? "bar" : t5[a4].type || ("column" === o3 ? "bar" : o3);
        n3[s4] ? ("rangeArea" === s4 ? (n3[s4].series.push(r3.seriesRangeStart[a4]), n3[s4].seriesRangeEnd.push(r3.seriesRangeEnd[a4])) : n3[s4].series.push(e4), n3[s4].i.push(a4), "bar" === s4 && (i3.globals.columnSeries = n3.bar)) : ["heatmap", "treemap", "pie", "donut", "polarArea", "radialBar", "radar"].includes(s4) ? l3 = s4 : console.warn("You have specified an unrecognized series type (".concat(s4, ").")), o3 !== s4 && "scatter" !== s4 && h3++;
      }), h3 > 0 && (l3 && console.warn("Chart or series type ".concat(l3, " cannot appear with other chart or series types.")), n3.bar.series.length > 0 && s3.plotOptions.bar.horizontal && (h3 -= n3.bar.series.length, n3.bar = { series: [], i: [] }, i3.globals.columnSeries = { series: [], i: [] }, console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"))), r3.comboCharts || (r3.comboCharts = h3 > 0);
      var c3 = new Ba(a3, e3), d3 = new Ta(a3, e3);
      a3.pie = new Ea(a3);
      var u3 = new Ha(a3);
      a3.rangeBar = new Oa(a3, e3);
      var g3 = new Ya(a3), p3 = [];
      if (r3.comboCharts) {
        var x3, b3, m3 = new Pi2(a3);
        if (n3.area.series.length > 0) (x3 = p3).push.apply(x3, f2(m3.drawSeriesByGroup(n3.area, r3.areaGroups, "area", c3)));
        if (n3.bar.series.length > 0) if (s3.chart.stacked) {
          var v3 = new Ia(a3, e3);
          p3.push(v3.draw(n3.bar.series, n3.bar.i));
        } else a3.bar = new Pa(a3, e3), p3.push(a3.bar.draw(n3.bar.series, n3.bar.i));
        if (n3.rangeArea.series.length > 0 && p3.push(c3.draw(n3.rangeArea.series, "rangeArea", n3.rangeArea.i, n3.rangeArea.seriesRangeEnd)), n3.line.series.length > 0) (b3 = p3).push.apply(b3, f2(m3.drawSeriesByGroup(n3.line, r3.lineGroups, "line", c3)));
        if (n3.candlestick.series.length > 0 && p3.push(d3.draw(n3.candlestick.series, "candlestick", n3.candlestick.i)), n3.boxPlot.series.length > 0 && p3.push(d3.draw(n3.boxPlot.series, "boxPlot", n3.boxPlot.i)), n3.rangeBar.series.length > 0 && p3.push(a3.rangeBar.draw(n3.rangeBar.series, n3.rangeBar.i)), n3.scatter.series.length > 0) {
          var y3 = new Ba(a3, e3, true);
          p3.push(y3.draw(n3.scatter.series, "scatter", n3.scatter.i));
        }
        if (n3.bubble.series.length > 0) {
          var w3 = new Ba(a3, e3, true);
          p3.push(w3.draw(n3.bubble.series, "bubble", n3.bubble.i));
        }
      } else switch (s3.chart.type) {
        case "line":
          p3 = c3.draw(r3.series, "line");
          break;
        case "area":
          p3 = c3.draw(r3.series, "area");
          break;
        case "bar":
          if (s3.chart.stacked) p3 = new Ia(a3, e3).draw(r3.series);
          else a3.bar = new Pa(a3, e3), p3 = a3.bar.draw(r3.series);
          break;
        case "candlestick":
          p3 = new Ta(a3, e3).draw(r3.series, "candlestick");
          break;
        case "boxPlot":
          p3 = new Ta(a3, e3).draw(r3.series, s3.chart.type);
          break;
        case "rangeBar":
          p3 = a3.rangeBar.draw(r3.series);
          break;
        case "rangeArea":
          p3 = c3.draw(r3.seriesRangeStart, "rangeArea", void 0, r3.seriesRangeEnd);
          break;
        case "heatmap":
          p3 = new Xa(a3, e3).draw(r3.series);
          break;
        case "treemap":
          p3 = new Ga(a3, e3).draw(r3.series);
          break;
        case "pie":
        case "donut":
        case "polarArea":
          p3 = a3.pie.draw(r3.series);
          break;
        case "radialBar":
          p3 = u3.draw(r3.series);
          break;
        case "radar":
          p3 = g3.draw(r3.series);
          break;
        default:
          p3 = c3.draw(r3.series);
      }
      return p3;
    } }, { key: "setSVGDimensions", value: function() {
      var t5 = this.w, e3 = t5.globals, i3 = t5.config;
      i3.chart.width = i3.chart.width || "100%", i3.chart.height = i3.chart.height || "auto", e3.svgWidth = i3.chart.width, e3.svgHeight = i3.chart.height;
      var a3 = v2.getDimensions(this.el), s3 = i3.chart.width.toString().split(/[0-9]+/g).pop();
      "%" === s3 ? v2.isNumber(a3[0]) && (0 === a3[0].width && (a3 = v2.getDimensions(this.el.parentNode)), e3.svgWidth = a3[0] * parseInt(i3.chart.width, 10) / 100) : "px" !== s3 && "" !== s3 || (e3.svgWidth = parseInt(i3.chart.width, 10));
      var r3 = String(i3.chart.height).toString().split(/[0-9]+/g).pop();
      if ("auto" !== e3.svgHeight && "" !== e3.svgHeight) if ("%" === r3) {
        var n3 = v2.getDimensions(this.el.parentNode);
        e3.svgHeight = n3[1] * parseInt(i3.chart.height, 10) / 100;
      } else e3.svgHeight = parseInt(i3.chart.height, 10);
      else e3.svgHeight = e3.axisCharts ? e3.svgWidth / 1.61 : e3.svgWidth / 1.2;
      if (e3.svgWidth = Math.max(e3.svgWidth, 0), e3.svgHeight = Math.max(e3.svgHeight, 0), Mi2.setAttrs(e3.dom.Paper.node, { width: e3.svgWidth, height: e3.svgHeight }), "%" !== r3) {
        var o3 = i3.chart.sparkline.enabled ? 0 : e3.axisCharts ? i3.chart.parentHeightOffset : 0;
        e3.dom.Paper.node.parentNode.parentNode.style.minHeight = "".concat(e3.svgHeight + o3, "px");
      }
      e3.dom.elWrap.style.width = "".concat(e3.svgWidth, "px"), e3.dom.elWrap.style.height = "".concat(e3.svgHeight, "px");
    } }, { key: "shiftGraphPosition", value: function() {
      var t5 = this.w.globals, e3 = t5.translateY, i3 = t5.translateX;
      Mi2.setAttrs(t5.dom.elGraphical.node, { transform: "translate(".concat(i3, ", ").concat(e3, ")") });
    } }, { key: "resizeNonAxisCharts", value: function() {
      var t5 = this.w, e3 = t5.globals, i3 = 0, a3 = t5.config.chart.sparkline.enabled ? 1 : 15;
      a3 += t5.config.grid.padding.bottom, ["top", "bottom"].includes(t5.config.legend.position) && t5.config.legend.show && !t5.config.legend.floating && (i3 = new xa(this.ctx).legendHelpers.getLegendDimensions().clwh + 7);
      var s3 = t5.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"), r3 = 2.05 * t5.globals.radialSize;
      if (s3 && !t5.config.chart.sparkline.enabled && 0 !== t5.config.plotOptions.radialBar.startAngle) {
        var n3 = v2.getBoundingClientRect(s3);
        r3 = n3.bottom;
        var o3 = n3.bottom - n3.top;
        r3 = Math.max(2.05 * t5.globals.radialSize, o3);
      }
      var l3 = Math.ceil(r3 + e3.translateY + i3 + a3);
      e3.dom.elLegendForeign && e3.dom.elLegendForeign.setAttribute("height", l3), t5.config.chart.height && String(t5.config.chart.height).includes("%") || (e3.dom.elWrap.style.height = "".concat(l3, "px"), Mi2.setAttrs(e3.dom.Paper.node, { height: l3 }), e3.dom.Paper.node.parentNode.parentNode.style.minHeight = "".concat(l3, "px"));
    } }, { key: "coreCalculations", value: function() {
      new ea(this.ctx).init();
    } }, { key: "resetGlobals", value: function() {
      var t5 = this, e3 = function() {
        return t5.w.config.series.map(function() {
          return [];
        });
      }, i3 = new Bi2(), a3 = this.w.globals;
      i3.initGlobalVars(a3), a3.seriesXvalues = e3(), a3.seriesYvalues = e3();
    } }, { key: "isMultipleY", value: function() {
      return !!(Array.isArray(this.w.config.yaxis) && this.w.config.yaxis.length > 1) && (this.w.globals.isMultipleYAxis = true, true);
    } }, { key: "xySettings", value: function() {
      var t5 = this.w, e3 = null;
      if (t5.globals.axisCharts) {
        if ("back" === t5.config.xaxis.crosshairs.position && new na(this.ctx).drawXCrosshairs(), "back" === t5.config.yaxis[0].crosshairs.position && new na(this.ctx).drawYCrosshairs(), "datetime" === t5.config.xaxis.type && void 0 === t5.config.xaxis.labels.formatter) {
          this.ctx.timeScale = new Ua(this.ctx);
          var i3 = [];
          isFinite(t5.globals.minX) && isFinite(t5.globals.maxX) && !t5.globals.isBarHorizontal ? i3 = this.ctx.timeScale.calculateTimeScaleTicks(t5.globals.minX, t5.globals.maxX) : t5.globals.isBarHorizontal && (i3 = this.ctx.timeScale.calculateTimeScaleTicks(t5.globals.minY, t5.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i3);
        }
        e3 = new Pi2(this.ctx).getCalculatedRatios();
      }
      return e3;
    } }, { key: "updateSourceChart", value: function(t5) {
      this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({ chart: { selection: { xaxis: { min: t5.w.globals.minX, max: t5.w.globals.maxX } } } }, false, false);
    } }, { key: "setupBrushHandler", value: function() {
      var t5 = this, e3 = this.ctx, i3 = this.w;
      if (i3.config.chart.brush.enabled && "function" != typeof i3.config.chart.events.selection) {
        var a3 = Array.isArray(i3.config.chart.brush.targets) ? i3.config.chart.brush.targets : [i3.config.chart.brush.target];
        a3.forEach(function(i4) {
          var a4 = e3.constructor.getChartByID(i4);
          a4.w.globals.brushSource = t5.ctx, "function" != typeof a4.w.config.chart.events.zoomed && (a4.w.config.chart.events.zoomed = function() {
            return t5.updateSourceChart(a4);
          }), "function" != typeof a4.w.config.chart.events.scrolled && (a4.w.config.chart.events.scrolled = function() {
            return t5.updateSourceChart(a4);
          });
        }), i3.config.chart.events.selection = function(t6, i4) {
          a3.forEach(function(t7) {
            e3.constructor.getChartByID(t7).ctx.updateHelpers._updateOptions({ xaxis: { min: i4.xaxis.min, max: i4.xaxis.max } }, false, false, false, false);
          });
        };
      }
    } }]), t4;
  }();
  var Za = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "_updateOptions", value: function(t5) {
      var e3 = this, i3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s3 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
      return new Promise(function(n3) {
        var o3 = [e3.ctx];
        s3 && (o3 = e3.ctx.getSyncedCharts()), e3.ctx.w.globals.isExecCalled && (o3 = [e3.ctx], e3.ctx.w.globals.isExecCalled = false), o3.forEach(function(s4, l3) {
          var h3 = s4.w;
          if (h3.globals.shouldAnimate = a3, i3 || (h3.globals.resized = true, h3.globals.dataChanged = true, a3 && s4.series.getPreviousPaths()), t5 && "object" === b2(t5) && (s4.config = new Wi2(t5), t5 = Pi2.extendArrayProps(s4.config, t5, h3), s4.w.globals.chartID !== e3.ctx.w.globals.chartID && delete t5.series, h3.config = v2.extend(h3.config, t5), r3 && (h3.globals.lastXAxis = t5.xaxis ? v2.clone(t5.xaxis) : [], h3.globals.lastYAxis = t5.yaxis ? v2.clone(t5.yaxis) : [], h3.globals.initialConfig = v2.extend({}, h3.config), h3.globals.initialSeries = v2.clone(h3.config.series), t5.series))) {
            for (var c3 = 0; c3 < h3.globals.collapsedSeriesIndices.length; c3++) {
              var d3 = h3.config.series[h3.globals.collapsedSeriesIndices[c3]];
              h3.globals.collapsedSeries[c3].data = h3.globals.axisCharts ? d3.data.slice() : d3;
            }
            for (var u3 = 0; u3 < h3.globals.ancillaryCollapsedSeriesIndices.length; u3++) {
              var g3 = h3.config.series[h3.globals.ancillaryCollapsedSeriesIndices[u3]];
              h3.globals.ancillaryCollapsedSeries[u3].data = h3.globals.axisCharts ? g3.data.slice() : g3;
            }
            s4.series.emptyCollapsedSeries(h3.config.series);
          }
          return s4.update(t5).then(function() {
            l3 === o3.length - 1 && n3(s4);
          });
        });
      });
    } }, { key: "_updateSeries", value: function(t5, e3) {
      var i3 = this, a3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
      return new Promise(function(s3) {
        var r3, n3 = i3.w;
        return n3.globals.shouldAnimate = e3, n3.globals.dataChanged = true, e3 && i3.ctx.series.getPreviousPaths(), n3.globals.axisCharts ? (0 === (r3 = t5.map(function(t6, e4) {
          return i3._extendSeries(t6, e4);
        })).length && (r3 = [{ data: [] }]), n3.config.series = r3) : n3.config.series = t5.slice(), a3 && (n3.globals.initialConfig.series = v2.clone(n3.config.series), n3.globals.initialSeries = v2.clone(n3.config.series)), i3.ctx.update().then(function() {
          s3(i3.ctx);
        });
      });
    } }, { key: "_extendSeries", value: function(t5, e3) {
      var i3 = this.w, a3 = i3.config.series[e3];
      return u2(u2({}, i3.config.series[e3]), {}, { name: t5.name ? t5.name : null == a3 ? void 0 : a3.name, color: t5.color ? t5.color : null == a3 ? void 0 : a3.color, type: t5.type ? t5.type : null == a3 ? void 0 : a3.type, group: t5.group ? t5.group : null == a3 ? void 0 : a3.group, hidden: void 0 !== t5.hidden ? t5.hidden : null == a3 ? void 0 : a3.hidden, data: t5.data ? t5.data : null == a3 ? void 0 : a3.data, zIndex: void 0 !== t5.zIndex ? t5.zIndex : e3 });
    } }, { key: "toggleDataPointSelection", value: function(t5, e3) {
      var i3 = this.w, a3 = null, s3 = ".apexcharts-series[data\\:realIndex='".concat(t5, "']");
      return i3.globals.axisCharts ? a3 = i3.globals.dom.Paper.findOne("".concat(s3, " path[j='").concat(e3, "'], ").concat(s3, " circle[j='").concat(e3, "'], ").concat(s3, " rect[j='").concat(e3, "']")) : void 0 === e3 && (a3 = i3.globals.dom.Paper.findOne("".concat(s3, " path[j='").concat(t5, "']")), "pie" !== i3.config.chart.type && "polarArea" !== i3.config.chart.type && "donut" !== i3.config.chart.type || this.ctx.pie.pieClicked(t5)), a3 ? (new Mi2(this.ctx).pathMouseDown(a3, null), a3.node ? a3.node : null) : (console.warn("toggleDataPointSelection: Element not found"), null);
    } }, { key: "forceXAxisUpdate", value: function(t5) {
      var e3 = this.w;
      if (["min", "max"].forEach(function(i4) {
        void 0 !== t5.xaxis[i4] && (e3.config.xaxis[i4] = t5.xaxis[i4], e3.globals.lastXAxis[i4] = t5.xaxis[i4]);
      }), t5.xaxis.categories && t5.xaxis.categories.length && (e3.config.xaxis.categories = t5.xaxis.categories), e3.config.xaxis.convertedCatToNumeric) {
        var i3 = new Ni2(t5);
        t5 = i3.convertCatToNumericXaxis(t5, this.ctx);
      }
      return t5;
    } }, { key: "forceYAxisUpdate", value: function(t5) {
      return t5.chart && t5.chart.stacked && "100%" === t5.chart.stackType && (Array.isArray(t5.yaxis) ? t5.yaxis.forEach(function(e3, i3) {
        t5.yaxis[i3].min = 0, t5.yaxis[i3].max = 100;
      }) : (t5.yaxis.min = 0, t5.yaxis.max = 100)), t5;
    } }, { key: "revertDefaultAxisMinMax", value: function(t5) {
      var e3 = this, i3 = this.w, a3 = i3.globals.lastXAxis, s3 = i3.globals.lastYAxis;
      t5 && t5.xaxis && (a3 = t5.xaxis), t5 && t5.yaxis && (s3 = t5.yaxis), i3.config.xaxis.min = a3.min, i3.config.xaxis.max = a3.max;
      var r3 = function(t6) {
        void 0 !== s3[t6] && (i3.config.yaxis[t6].min = s3[t6].min, i3.config.yaxis[t6].max = s3[t6].max);
      };
      i3.config.yaxis.map(function(t6, a4) {
        i3.globals.zoomed || void 0 !== s3[a4] ? r3(a4) : void 0 !== e3.ctx.opts.yaxis[a4] && (t6.min = e3.ctx.opts.yaxis[a4].min, t6.max = e3.ctx.opts.yaxis[a4].max);
      });
    } }]), t4;
  }();
  !function() {
    function t4() {
      for (var t5 = arguments.length > 0 && arguments[0] !== h3 ? arguments[0] : [], s4 = arguments.length > 1 ? arguments[1] : h3, r3 = arguments.length > 2 ? arguments[2] : h3, n3 = arguments.length > 3 ? arguments[3] : h3, o3 = arguments.length > 4 ? arguments[4] : h3, l3 = arguments.length > 5 ? arguments[5] : h3, h3 = arguments.length > 6 ? arguments[6] : h3, c3 = t5.slice(s4, r3 || h3), d3 = n3.slice(o3, l3 || h3), u3 = 0, g3 = { pos: [0, 0], start: [0, 0] }, p3 = { pos: [0, 0], start: [0, 0] }; ; ) {
        if (c3[u3] = e3.call(g3, c3[u3]), d3[u3] = e3.call(p3, d3[u3]), c3[u3][0] != d3[u3][0] || "M" == c3[u3][0] || "A" == c3[u3][0] && (c3[u3][4] != d3[u3][4] || c3[u3][5] != d3[u3][5]) ? (Array.prototype.splice.apply(c3, [u3, 1].concat(a3.call(g3, c3[u3]))), Array.prototype.splice.apply(d3, [u3, 1].concat(a3.call(p3, d3[u3])))) : (c3[u3] = i3.call(g3, c3[u3]), d3[u3] = i3.call(p3, d3[u3])), ++u3 == c3.length && u3 == d3.length) break;
        u3 == c3.length && c3.push(["C", g3.pos[0], g3.pos[1], g3.pos[0], g3.pos[1], g3.pos[0], g3.pos[1]]), u3 == d3.length && d3.push(["C", p3.pos[0], p3.pos[1], p3.pos[0], p3.pos[1], p3.pos[0], p3.pos[1]]);
      }
      return { start: c3, dest: d3 };
    }
    function e3(t5) {
      switch (t5[0]) {
        case "z":
        case "Z":
          t5[0] = "L", t5[1] = this.start[0], t5[2] = this.start[1];
          break;
        case "H":
          t5[0] = "L", t5[2] = this.pos[1];
          break;
        case "V":
          t5[0] = "L", t5[2] = t5[1], t5[1] = this.pos[0];
          break;
        case "T":
          t5[0] = "Q", t5[3] = t5[1], t5[4] = t5[2], t5[1] = this.reflection[1], t5[2] = this.reflection[0];
          break;
        case "S":
          t5[0] = "C", t5[6] = t5[4], t5[5] = t5[3], t5[4] = t5[2], t5[3] = t5[1], t5[2] = this.reflection[1], t5[1] = this.reflection[0];
      }
      return t5;
    }
    function i3(t5) {
      var e4 = t5.length;
      return this.pos = [t5[e4 - 2], t5[e4 - 1]], -1 != "SCQT".indexOf(t5[0]) && (this.reflection = [2 * this.pos[0] - t5[e4 - 4], 2 * this.pos[1] - t5[e4 - 3]]), t5;
    }
    function a3(t5) {
      var e4 = [t5];
      switch (t5[0]) {
        case "M":
          return this.pos = this.start = [t5[1], t5[2]], e4;
        case "L":
          t5[5] = t5[3] = t5[1], t5[6] = t5[4] = t5[2], t5[1] = this.pos[0], t5[2] = this.pos[1];
          break;
        case "Q":
          t5[6] = t5[4], t5[5] = t5[3], t5[4] = 1 * t5[4] / 3 + 2 * t5[2] / 3, t5[3] = 1 * t5[3] / 3 + 2 * t5[1] / 3, t5[2] = 1 * this.pos[1] / 3 + 2 * t5[2] / 3, t5[1] = 1 * this.pos[0] / 3 + 2 * t5[1] / 3;
          break;
        case "A":
          e4 = function(t6, e5) {
            var i4, a4, s4, r3, n3, o3, l3, h3, c3, d3, u3, g3, p3, f3, x3, b3, m3, v3, y3, w3, k3, A3, C3, S3, L3, M3, P3 = Math.abs(e5[1]), I3 = Math.abs(e5[2]), T3 = e5[3] % 360, z3 = e5[4], X3 = e5[5], R3 = e5[6], E3 = e5[7], Y3 = new bt2(t6), H3 = new bt2(R3, E3), O3 = [];
            if (0 === P3 || 0 === I3 || Y3.x === H3.x && Y3.y === H3.y) return [["C", Y3.x, Y3.y, H3.x, H3.y, H3.x, H3.y]];
            i4 = new bt2((Y3.x - H3.x) / 2, (Y3.y - H3.y) / 2).transform(new vt2().rotate(T3)), a4 = i4.x * i4.x / (P3 * P3) + i4.y * i4.y / (I3 * I3), a4 > 1 && (P3 *= a4 = Math.sqrt(a4), I3 *= a4);
            s4 = new vt2().rotate(T3).scale(1 / P3, 1 / I3).rotate(-T3), Y3 = Y3.transform(s4), H3 = H3.transform(s4), r3 = [H3.x - Y3.x, H3.y - Y3.y], o3 = r3[0] * r3[0] + r3[1] * r3[1], n3 = Math.sqrt(o3), r3[0] /= n3, r3[1] /= n3, l3 = o3 < 4 ? Math.sqrt(1 - o3 / 4) : 0, z3 === X3 && (l3 *= -1);
            h3 = new bt2((H3.x + Y3.x) / 2 + l3 * -r3[1], (H3.y + Y3.y) / 2 + l3 * r3[0]), c3 = new bt2(Y3.x - h3.x, Y3.y - h3.y), d3 = new bt2(H3.x - h3.x, H3.y - h3.y), u3 = Math.acos(c3.x / Math.sqrt(c3.x * c3.x + c3.y * c3.y)), c3.y < 0 && (u3 *= -1);
            g3 = Math.acos(d3.x / Math.sqrt(d3.x * d3.x + d3.y * d3.y)), d3.y < 0 && (g3 *= -1);
            X3 && u3 > g3 && (g3 += 2 * Math.PI);
            !X3 && u3 < g3 && (g3 -= 2 * Math.PI);
            for (f3 = Math.ceil(2 * Math.abs(u3 - g3) / Math.PI), b3 = [], m3 = u3, p3 = (g3 - u3) / f3, x3 = 4 * Math.tan(p3 / 4) / 3, k3 = 0; k3 <= f3; k3++) y3 = Math.cos(m3), v3 = Math.sin(m3), w3 = new bt2(h3.x + y3, h3.y + v3), b3[k3] = [new bt2(w3.x + x3 * v3, w3.y - x3 * y3), w3, new bt2(w3.x - x3 * v3, w3.y + x3 * y3)], m3 += p3;
            for (b3[0][0] = b3[0][1].clone(), b3[b3.length - 1][2] = b3[b3.length - 1][1].clone(), s4 = new vt2().rotate(T3).scale(P3, I3).rotate(-T3), k3 = 0, A3 = b3.length; k3 < A3; k3++) b3[k3][0] = b3[k3][0].transform(s4), b3[k3][1] = b3[k3][1].transform(s4), b3[k3][2] = b3[k3][2].transform(s4);
            for (k3 = 1, A3 = b3.length; k3 < A3; k3++) C3 = (w3 = b3[k3 - 1][2]).x, S3 = w3.y, L3 = (w3 = b3[k3][0]).x, M3 = w3.y, R3 = (w3 = b3[k3][1]).x, E3 = w3.y, O3.push(["C", C3, S3, L3, M3, R3, E3]);
            return O3;
          }(this.pos, t5), t5 = e4[0];
      }
      return t5[0] = "C", this.pos = [t5[5], t5[6]], this.reflection = [2 * t5[5] - t5[3], 2 * t5[6] - t5[4]], e4;
    }
    function s3() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e4 = arguments.length > 1 ? arguments[1] : void 0;
      if (false === e4) return false;
      for (var i4 = e4, a4 = t5.length; i4 < a4; ++i4) if ("M" == t5[i4][0]) return i4;
      return false;
    }
    Q2(Ee2, { morph: function(e4, i4, a4, r3, n3) {
      for (var o3 = this.parse(e4), l3 = this.parse(i4), h3 = 0, c3 = 0, d3 = false, u3 = false; false !== h3 || false !== c3; ) {
        var g3;
        d3 = s3(o3, false !== h3 && h3 + 1), u3 = s3(l3, false !== c3 && c3 + 1), false === h3 && (h3 = 0 == (g3 = new Ee2(p3.start).bbox()).height || 0 == g3.width ? o3.push(o3[0]) - 1 : o3.push(["M", g3.x + g3.width / 2, g3.y + g3.height / 2]) - 1), false === c3 && (c3 = 0 == (g3 = new Ee2(p3.dest).bbox()).height || 0 == g3.width ? l3.push(l3[0]) - 1 : l3.push(["M", g3.x + g3.width / 2, g3.y + g3.height / 2]) - 1);
        var p3 = t4(o3, h3, d3, l3, c3, u3);
        o3 = o3.slice(0, h3).concat(p3.start, false === d3 ? [] : o3.slice(d3)), l3 = l3.slice(0, c3).concat(p3.dest, false === u3 ? [] : l3.slice(u3)), h3 = false !== d3 && h3 + p3.start.length, c3 = false !== u3 && c3 + p3.dest.length;
      }
      this._array = o3, this.destination = new Ee2(), this.destination._array = l3;
      var f3 = this.fromArray(o3.map(function(t5, e5) {
        var i5 = l3[e5].map(function(i6, s4) {
          return 0 === s4 ? i6 : r3.step(t5[s4], l3[e5][s4], a4, n3[e5], n3);
        });
        return i5;
      }));
      return f3;
    } });
  }();
  var $a = (t4) => (t4.changedTouches && (t4 = t4.changedTouches[0]), { x: t4.clientX, y: t4.clientY });
  var Ja = class {
    constructor(t4) {
      t4.remember("_draggable", this), this.el = t4, this.drag = this.drag.bind(this), this.startDrag = this.startDrag.bind(this), this.endDrag = this.endDrag.bind(this);
    }
    init(t4) {
      t4 ? (this.el.on("mousedown.drag", this.startDrag), this.el.on("touchstart.drag", this.startDrag, { passive: false })) : (this.el.off("mousedown.drag"), this.el.off("touchstart.drag"));
    }
    startDrag(t4) {
      const e3 = !t4.type.indexOf("mouse");
      if (e3 && 1 !== t4.which && 0 !== t4.buttons) return;
      if (this.el.dispatch("beforedrag", { event: t4, handler: this }).defaultPrevented) return;
      t4.preventDefault(), t4.stopPropagation(), this.init(false), this.box = this.el.bbox(), this.lastClick = this.el.point($a(t4));
      const i3 = (e3 ? "mouseup" : "touchend") + ".drag";
      zt2(window, (e3 ? "mousemove" : "touchmove") + ".drag", this.drag, this, { passive: false }), zt2(window, i3, this.endDrag, this, { passive: false }), this.el.fire("dragstart", { event: t4, handler: this, box: this.box });
    }
    drag(t4) {
      const { box: e3, lastClick: i3 } = this, a3 = this.el.point($a(t4)), s3 = a3.x - i3.x, r3 = a3.y - i3.y;
      if (!s3 && !r3) return e3;
      const n3 = e3.x + s3, o3 = e3.y + r3;
      this.box = new kt2(n3, o3, e3.w, e3.h), this.lastClick = a3, this.el.dispatch("dragmove", { event: t4, handler: this, box: this.box }).defaultPrevented || this.move(n3, o3);
    }
    move(t4, e3) {
      "svg" === this.el.type ? gi2.prototype.move.call(this.el, t4, e3) : this.el.move(t4, e3);
    }
    endDrag(t4) {
      this.drag(t4), this.el.fire("dragend", { event: t4, handler: this, box: this.box }), Xt2(window, "mousemove.drag"), Xt2(window, "touchmove.drag"), Xt2(window, "mouseup.drag"), Xt2(window, "touchend.drag"), this.init(true);
    }
  };
  function Qa(t4, e3, i3, a3 = null) {
    return function(s3) {
      s3.preventDefault(), s3.stopPropagation();
      var r3 = s3.pageX || s3.touches[0].pageX, n3 = s3.pageY || s3.touches[0].pageY;
      e3.fire(t4, { x: r3, y: n3, event: s3, index: a3, points: i3 });
    };
  }
  function Ka([t4, e3], { a: i3, b: a3, c: s3, d: r3, e: n3, f: o3 }) {
    return [t4 * i3 + e3 * s3 + n3, t4 * a3 + e3 * r3 + o3];
  }
  Q2(Gt2, { draggable(t4 = true) {
    return (this.remember("_draggable") || new Ja(this)).init(t4), this;
  } });
  var ts = class {
    constructor(t4) {
      this.el = t4, t4.remember("_selectHandler", this), this.selection = new gi2(), this.order = ["lt", "t", "rt", "r", "rb", "b", "lb", "l", "rot"], this.mutationHandler = this.mutationHandler.bind(this);
      const e3 = F2();
      this.observer = new e3.MutationObserver(this.mutationHandler);
    }
    init(t4) {
      this.createHandle = t4.createHandle || this.createHandleFn, this.createRot = t4.createRot || this.createRotFn, this.updateHandle = t4.updateHandle || this.updateHandleFn, this.updateRot = t4.updateRot || this.updateRotFn, this.el.root().put(this.selection), this.updatePoints(), this.createSelection(), this.createResizeHandles(), this.updateResizeHandles(), this.createRotationHandle(), this.updateRotationHandle(), this.observer.observe(this.el.node, { attributes: true });
    }
    active(t4, e3) {
      if (!t4) return this.selection.clear().remove(), void this.observer.disconnect();
      this.init(e3);
    }
    createSelection() {
      this.selection.polygon(this.handlePoints).addClass("svg_select_shape");
    }
    updateSelection() {
      this.selection.get(0).plot(this.handlePoints);
    }
    createResizeHandles() {
      this.handlePoints.forEach((t4, e3, i3) => {
        const a3 = this.order[e3];
        this.createHandle.call(this, this.selection, t4, e3, i3, a3), this.selection.get(e3 + 1).addClass("svg_select_handle svg_select_handle_" + a3).on("mousedown.selection touchstart.selection", Qa(a3, this.el, this.handlePoints, e3));
      });
    }
    createHandleFn(t4) {
      t4.polyline();
    }
    updateHandleFn(t4, e3, i3, a3) {
      const s3 = a3.at(i3 - 1), r3 = a3[(i3 + 1) % a3.length], n3 = e3, o3 = [n3[0] - s3[0], n3[1] - s3[1]], l3 = [n3[0] - r3[0], n3[1] - r3[1]], h3 = Math.sqrt(o3[0] * o3[0] + o3[1] * o3[1]), c3 = Math.sqrt(l3[0] * l3[0] + l3[1] * l3[1]), d3 = [o3[0] / h3, o3[1] / h3], u3 = [l3[0] / c3, l3[1] / c3], g3 = [n3[0] - 10 * d3[0], n3[1] - 10 * d3[1]], p3 = [n3[0] - 10 * u3[0], n3[1] - 10 * u3[1]];
      t4.plot([g3, n3, p3]);
    }
    updateResizeHandles() {
      this.handlePoints.forEach((t4, e3, i3) => {
        const a3 = this.order[e3];
        this.updateHandle.call(this, this.selection.get(e3 + 1), t4, e3, i3, a3);
      });
    }
    createRotFn(t4) {
      t4.line(), t4.circle(5);
    }
    getPoint(t4) {
      return this.handlePoints[this.order.indexOf(t4)];
    }
    getPointHandle(t4) {
      return this.selection.get(this.order.indexOf(t4) + 1);
    }
    updateRotFn(t4, e3) {
      const i3 = this.getPoint("t");
      t4.get(0).plot(i3[0], i3[1], e3[0], e3[1]), t4.get(1).center(e3[0], e3[1]);
    }
    createRotationHandle() {
      const t4 = this.selection.group().addClass("svg_select_handle_rot").on("mousedown.selection touchstart.selection", Qa("rot", this.el, this.handlePoints));
      this.createRot.call(this, t4);
    }
    updateRotationHandle() {
      const t4 = this.selection.findOne("g.svg_select_handle_rot");
      this.updateRot(t4, this.rotationPoint, this.handlePoints);
    }
    updatePoints() {
      const t4 = this.el.bbox(), e3 = this.el.parent().screenCTM().inverseO().multiplyO(this.el.screenCTM());
      this.handlePoints = this.getHandlePoints(t4).map((t5) => Ka(t5, e3)), this.rotationPoint = Ka(this.getRotationPoint(t4), e3);
    }
    getHandlePoints({ x: t4, x2: e3, y: i3, y2: a3, cx: s3, cy: r3 } = this.el.bbox()) {
      return [[t4, i3], [s3, i3], [e3, i3], [e3, r3], [e3, a3], [s3, a3], [t4, a3], [t4, r3]];
    }
    getRotationPoint({ y: t4, cx: e3 } = this.el.bbox()) {
      return [e3, t4 - 20];
    }
    mutationHandler() {
      this.updatePoints(), this.updateSelection(), this.updateResizeHandles(), this.updateRotationHandle();
    }
  };
  var es = (t4) => function(e3 = true, i3 = {}) {
    "object" == typeof e3 && (i3 = e3, e3 = true);
    let a3 = this.remember("_" + t4.name);
    return a3 || (e3.prototype instanceof ts ? (a3 = new e3(this), e3 = true) : a3 = new t4(this), this.remember("_" + t4.name, a3)), a3.active(e3, i3), this;
  };
  function is(t4, e3, i3, a3 = null) {
    return function(s3) {
      s3.preventDefault(), s3.stopPropagation();
      var r3 = s3.pageX || s3.touches[0].pageX, n3 = s3.pageY || s3.touches[0].pageY;
      e3.fire(t4, { x: r3, y: n3, event: s3, index: a3, points: i3 });
    };
  }
  function as([t4, e3], { a: i3, b: a3, c: s3, d: r3, e: n3, f: o3 }) {
    return [t4 * i3 + e3 * s3 + n3, t4 * a3 + e3 * r3 + o3];
  }
  Q2(Gt2, { select: es(ts) }), Q2([Ge2, je2, xe2], { pointSelect: es(class {
    constructor(t4) {
      this.el = t4, t4.remember("_pointSelectHandler", this), this.selection = new gi2(), this.order = ["lt", "t", "rt", "r", "rb", "b", "lb", "l", "rot"], this.mutationHandler = this.mutationHandler.bind(this);
      const e3 = F2();
      this.observer = new e3.MutationObserver(this.mutationHandler);
    }
    init(t4) {
      this.createHandle = t4.createHandle || this.createHandleFn, this.updateHandle = t4.updateHandle || this.updateHandleFn, this.el.root().put(this.selection), this.updatePoints(), this.createSelection(), this.createPointHandles(), this.updatePointHandles(), this.observer.observe(this.el.node, { attributes: true });
    }
    active(t4, e3) {
      if (!t4) return this.selection.clear().remove(), void this.observer.disconnect();
      this.init(e3);
    }
    createSelection() {
      this.selection.polygon(this.points).addClass("svg_select_shape_pointSelect");
    }
    updateSelection() {
      this.selection.get(0).plot(this.points);
    }
    createPointHandles() {
      this.points.forEach((t4, e3, i3) => {
        this.createHandle.call(this, this.selection, t4, e3, i3), this.selection.get(e3 + 1).addClass("svg_select_handle_point").on("mousedown.selection touchstart.selection", Qa("point", this.el, this.points, e3));
      });
    }
    createHandleFn(t4) {
      t4.circle(5);
    }
    updateHandleFn(t4, e3) {
      t4.center(e3[0], e3[1]);
    }
    updatePointHandles() {
      this.points.forEach((t4, e3, i3) => {
        this.updateHandle.call(this, this.selection.get(e3 + 1), t4, e3, i3);
      });
    }
    updatePoints() {
      const t4 = this.el.parent().screenCTM().inverseO().multiplyO(this.el.screenCTM());
      this.points = this.el.array().map((e3) => Ka(e3, t4));
    }
    mutationHandler() {
      this.updatePoints(), this.updateSelection(), this.updatePointHandles();
    }
  }) });
  var ss = class {
    constructor(t4) {
      this.el = t4, t4.remember("_selectHandler", this), this.selection = new gi2(), this.order = ["lt", "t", "rt", "r", "rb", "b", "lb", "l", "rot"], this.mutationHandler = this.mutationHandler.bind(this);
      const e3 = F2();
      this.observer = new e3.MutationObserver(this.mutationHandler);
    }
    init(t4) {
      this.createHandle = t4.createHandle || this.createHandleFn, this.createRot = t4.createRot || this.createRotFn, this.updateHandle = t4.updateHandle || this.updateHandleFn, this.updateRot = t4.updateRot || this.updateRotFn, this.el.root().put(this.selection), this.updatePoints(), this.createSelection(), this.createResizeHandles(), this.updateResizeHandles(), this.createRotationHandle(), this.updateRotationHandle(), this.observer.observe(this.el.node, { attributes: true });
    }
    active(t4, e3) {
      if (!t4) return this.selection.clear().remove(), void this.observer.disconnect();
      this.init(e3);
    }
    createSelection() {
      this.selection.polygon(this.handlePoints).addClass("svg_select_shape");
    }
    updateSelection() {
      this.selection.get(0).plot(this.handlePoints);
    }
    createResizeHandles() {
      this.handlePoints.forEach((t4, e3, i3) => {
        const a3 = this.order[e3];
        this.createHandle.call(this, this.selection, t4, e3, i3, a3), this.selection.get(e3 + 1).addClass("svg_select_handle svg_select_handle_" + a3).on("mousedown.selection touchstart.selection", is(a3, this.el, this.handlePoints, e3));
      });
    }
    createHandleFn(t4) {
      t4.polyline();
    }
    updateHandleFn(t4, e3, i3, a3) {
      const s3 = a3.at(i3 - 1), r3 = a3[(i3 + 1) % a3.length], n3 = e3, o3 = [n3[0] - s3[0], n3[1] - s3[1]], l3 = [n3[0] - r3[0], n3[1] - r3[1]], h3 = Math.sqrt(o3[0] * o3[0] + o3[1] * o3[1]), c3 = Math.sqrt(l3[0] * l3[0] + l3[1] * l3[1]), d3 = [o3[0] / h3, o3[1] / h3], u3 = [l3[0] / c3, l3[1] / c3], g3 = [n3[0] - 10 * d3[0], n3[1] - 10 * d3[1]], p3 = [n3[0] - 10 * u3[0], n3[1] - 10 * u3[1]];
      t4.plot([g3, n3, p3]);
    }
    updateResizeHandles() {
      this.handlePoints.forEach((t4, e3, i3) => {
        const a3 = this.order[e3];
        this.updateHandle.call(this, this.selection.get(e3 + 1), t4, e3, i3, a3);
      });
    }
    createRotFn(t4) {
      t4.line(), t4.circle(5);
    }
    getPoint(t4) {
      return this.handlePoints[this.order.indexOf(t4)];
    }
    getPointHandle(t4) {
      return this.selection.get(this.order.indexOf(t4) + 1);
    }
    updateRotFn(t4, e3) {
      const i3 = this.getPoint("t");
      t4.get(0).plot(i3[0], i3[1], e3[0], e3[1]), t4.get(1).center(e3[0], e3[1]);
    }
    createRotationHandle() {
      const t4 = this.selection.group().addClass("svg_select_handle_rot").on("mousedown.selection touchstart.selection", is("rot", this.el, this.handlePoints));
      this.createRot.call(this, t4);
    }
    updateRotationHandle() {
      const t4 = this.selection.findOne("g.svg_select_handle_rot");
      this.updateRot(t4, this.rotationPoint, this.handlePoints);
    }
    updatePoints() {
      const t4 = this.el.bbox(), e3 = this.el.parent().screenCTM().inverseO().multiplyO(this.el.screenCTM());
      this.handlePoints = this.getHandlePoints(t4).map((t5) => as(t5, e3)), this.rotationPoint = as(this.getRotationPoint(t4), e3);
    }
    getHandlePoints({ x: t4, x2: e3, y: i3, y2: a3, cx: s3, cy: r3 } = this.el.bbox()) {
      return [[t4, i3], [s3, i3], [e3, i3], [e3, r3], [e3, a3], [s3, a3], [t4, a3], [t4, r3]];
    }
    getRotationPoint({ y: t4, cx: e3 } = this.el.bbox()) {
      return [e3, t4 - 20];
    }
    mutationHandler() {
      this.updatePoints(), this.updateSelection(), this.updateResizeHandles(), this.updateRotationHandle();
    }
  };
  var rs = (t4) => function(e3 = true, i3 = {}) {
    "object" == typeof e3 && (i3 = e3, e3 = true);
    let a3 = this.remember("_" + t4.name);
    return a3 || (e3.prototype instanceof ss ? (a3 = new e3(this), e3 = true) : a3 = new t4(this), this.remember("_" + t4.name, a3)), a3.active(e3, i3), this;
  };
  Q2(Gt2, { select: rs(ss) }), Q2([Ge2, je2, xe2], { pointSelect: rs(class {
    constructor(t4) {
      this.el = t4, t4.remember("_pointSelectHandler", this), this.selection = new gi2(), this.order = ["lt", "t", "rt", "r", "rb", "b", "lb", "l", "rot"], this.mutationHandler = this.mutationHandler.bind(this);
      const e3 = F2();
      this.observer = new e3.MutationObserver(this.mutationHandler);
    }
    init(t4) {
      this.createHandle = t4.createHandle || this.createHandleFn, this.updateHandle = t4.updateHandle || this.updateHandleFn, this.el.root().put(this.selection), this.updatePoints(), this.createSelection(), this.createPointHandles(), this.updatePointHandles(), this.observer.observe(this.el.node, { attributes: true });
    }
    active(t4, e3) {
      if (!t4) return this.selection.clear().remove(), void this.observer.disconnect();
      this.init(e3);
    }
    createSelection() {
      this.selection.polygon(this.points).addClass("svg_select_shape_pointSelect");
    }
    updateSelection() {
      this.selection.get(0).plot(this.points);
    }
    createPointHandles() {
      this.points.forEach((t4, e3, i3) => {
        this.createHandle.call(this, this.selection, t4, e3, i3), this.selection.get(e3 + 1).addClass("svg_select_handle_point").on("mousedown.selection touchstart.selection", is("point", this.el, this.points, e3));
      });
    }
    createHandleFn(t4) {
      t4.circle(5);
    }
    updateHandleFn(t4, e3) {
      t4.center(e3[0], e3[1]);
    }
    updatePointHandles() {
      this.points.forEach((t4, e3, i3) => {
        this.updateHandle.call(this, this.selection.get(e3 + 1), t4, e3, i3);
      });
    }
    updatePoints() {
      const t4 = this.el.parent().screenCTM().inverseO().multiplyO(this.el.screenCTM());
      this.points = this.el.array().map((e3) => as(e3, t4));
    }
    mutationHandler() {
      this.updatePoints(), this.updateSelection(), this.updatePointHandles();
    }
  }) });
  var ns = (t4) => (t4.changedTouches && (t4 = t4.changedTouches[0]), { x: t4.clientX, y: t4.clientY });
  var os = (t4) => {
    let e3 = 1 / 0, i3 = 1 / 0, a3 = -1 / 0, s3 = -1 / 0;
    for (let r3 = 0; r3 < t4.length; r3++) {
      const n3 = t4[r3];
      e3 = Math.min(e3, n3[0]), i3 = Math.min(i3, n3[1]), a3 = Math.max(a3, n3[0]), s3 = Math.max(s3, n3[1]);
    }
    return new kt2(e3, i3, a3 - e3, s3 - i3);
  };
  var ls = class {
    constructor(t4) {
      this.el = t4, t4.remember("_ResizeHandler", this), this.lastCoordinates = null, this.eventType = "", this.lastEvent = null, this.handleResize = this.handleResize.bind(this), this.resize = this.resize.bind(this), this.endResize = this.endResize.bind(this), this.rotate = this.rotate.bind(this), this.movePoint = this.movePoint.bind(this);
    }
    active(t4, e3) {
      this.preserveAspectRatio = e3.preserveAspectRatio ?? false, this.aroundCenter = e3.aroundCenter ?? false, this.grid = e3.grid ?? 0, this.degree = e3.degree ?? 0, this.el.off(".resize"), t4 && (this.el.on(["lt.resize", "rt.resize", "rb.resize", "lb.resize", "t.resize", "r.resize", "b.resize", "l.resize", "rot.resize", "point.resize"], this.handleResize), this.lastEvent && ("rot" === this.eventType ? this.rotate(this.lastEvent) : "point" === this.eventType ? this.movePoint(this.lastEvent) : this.resize(this.lastEvent)));
    }
    handleResize(t4) {
      this.eventType = t4.type;
      const { event: e3, index: i3, points: a3 } = t4.detail, s3 = !e3.type.indexOf("mouse");
      if (s3 && 1 !== (e3.which || e3.buttons)) return;
      if (this.el.dispatch("beforeresize", { event: t4, handler: this }).defaultPrevented) return;
      this.box = this.el.bbox(), this.startPoint = this.el.point(ns(e3)), this.index = i3, this.points = a3.slice();
      const r3 = (s3 ? "mousemove" : "touchmove") + ".resize", n3 = (s3 ? "mouseup" : "touchcancel.resize touchend") + ".resize";
      "point" === t4.type ? zt2(window, r3, this.movePoint) : "rot" === t4.type ? zt2(window, r3, this.rotate) : zt2(window, r3, this.resize), zt2(window, n3, this.endResize);
    }
    resize(t4) {
      this.lastEvent = t4;
      const e3 = this.snapToGrid(this.el.point(ns(t4)));
      let i3 = e3.x - this.startPoint.x, a3 = e3.y - this.startPoint.y;
      this.preserveAspectRatio && this.aroundCenter && (i3 *= 2, a3 *= 2);
      const s3 = this.box.x + i3, r3 = this.box.y + a3, n3 = this.box.x2 + i3, o3 = this.box.y2 + a3;
      let l3 = new kt2(this.box);
      if (this.eventType.includes("l") && (l3.x = Math.min(s3, this.box.x2), l3.x2 = Math.max(s3, this.box.x2)), this.eventType.includes("r") && (l3.x = Math.min(n3, this.box.x), l3.x2 = Math.max(n3, this.box.x)), this.eventType.includes("t") && (l3.y = Math.min(r3, this.box.y2), l3.y2 = Math.max(r3, this.box.y2)), this.eventType.includes("b") && (l3.y = Math.min(o3, this.box.y), l3.y2 = Math.max(o3, this.box.y)), l3.width = l3.x2 - l3.x, l3.height = l3.y2 - l3.y, this.preserveAspectRatio) {
        const t5 = l3.width / this.box.width, e4 = l3.height / this.box.height, i4 = ["lt", "t", "rt", "r", "rb", "b", "lb", "l"], a4 = (i4.indexOf(this.eventType) + 4) % i4.length, s4 = this.aroundCenter ? [this.box.cx, this.box.cy] : this.points[a4];
        let r4 = this.eventType.includes("t") || this.eventType.includes("b") ? e4 : t5;
        r4 = 2 === this.eventType.length ? Math.max(t5, e4) : r4, l3 = function(t6, e5, i5) {
          const a5 = [[t6.x, t6.y], [t6.x + t6.width, t6.y], [t6.x + t6.width, t6.y + t6.height], [t6.x, t6.y + t6.height]].map(([t7, a6]) => {
            const s5 = t7 - e5[0], r5 = (a6 - e5[1]) * i5;
            return [s5 * i5 + e5[0], r5 + e5[1]];
          });
          return os(a5);
        }(this.box, s4, r4);
      }
      this.el.dispatch("resize", { box: new kt2(l3), angle: 0, eventType: this.eventType, event: t4, handler: this }).defaultPrevented || this.el.size(l3.width, l3.height).move(l3.x, l3.y);
    }
    movePoint(t4) {
      this.lastEvent = t4;
      const { x: e3, y: i3 } = this.snapToGrid(this.el.point(ns(t4))), a3 = this.el.array().slice();
      a3[this.index] = [e3, i3], this.el.dispatch("resize", { box: os(a3), angle: 0, eventType: this.eventType, event: t4, handler: this }).defaultPrevented || this.el.plot(a3);
    }
    rotate(t4) {
      this.lastEvent = t4;
      const e3 = this.startPoint, i3 = this.el.point(ns(t4)), { cx: a3, cy: s3 } = this.box, r3 = e3.x - a3, n3 = e3.y - s3, o3 = i3.x - a3, l3 = i3.y - s3, h3 = Math.sqrt(r3 * r3 + n3 * n3) * Math.sqrt(o3 * o3 + l3 * l3);
      if (0 === h3) return;
      let c3 = Math.acos((r3 * o3 + n3 * l3) / h3) / Math.PI * 180;
      if (!c3) return;
      i3.x < e3.x && (c3 = -c3);
      const d3 = new vt2(this.el), { x: u3, y: g3 } = new bt2(a3, s3).transformO(d3), { rotate: p3 } = d3.decompose(), f3 = this.snapToAngle(p3 + c3) - p3;
      this.el.dispatch("resize", { box: this.box, angle: f3, eventType: this.eventType, event: t4, handler: this }).defaultPrevented || this.el.transform(d3.rotateO(f3, u3, g3));
    }
    endResize(t4) {
      "rot" !== this.eventType && "point" !== this.eventType && this.resize(t4), this.lastEvent = null, this.eventType = "", Xt2(window, "mousemove.resize touchmove.resize"), Xt2(window, "mouseup.resize touchend.resize");
    }
    snapToGrid(t4) {
      return this.grid && (t4.x = Math.round(t4.x / this.grid) * this.grid, t4.y = Math.round(t4.y / this.grid) * this.grid), t4;
    }
    snapToAngle(t4) {
      return this.degree && (t4 = Math.round(t4 / this.degree) * this.degree), t4;
    }
  };
  Q2(Gt2, { resize: function(t4 = true, e3 = {}) {
    "object" == typeof t4 && (e3 = t4, t4 = true);
    let i3 = this.remember("_ResizeHandler");
    return i3 || (t4.prototype instanceof ls ? (i3 = new t4(this), t4 = true) : i3 = new ls(this), this.remember("_resizeHandler", i3)), i3.active(t4, e3), this;
  } }), void 0 === window.SVG && (window.SVG = yi2), void 0 === window.Apex && (window.Apex = {});
  var hs = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "initModules", value: function() {
      this.ctx.publicMethods = ["updateOptions", "updateSeries", "appendData", "appendSeries", "isSeriesHidden", "highlightSeries", "toggleSeries", "showSeries", "hideSeries", "setLocale", "resetSeries", "zoomX", "toggleDataPointSelection", "dataURI", "exportToCSV", "addXaxisAnnotation", "addYaxisAnnotation", "addPointAnnotation", "clearAnnotations", "removeAnnotation", "paper", "destroy"], this.ctx.eventList = ["click", "mousedown", "mousemove", "mouseleave", "touchstart", "touchmove", "touchleave", "mouseup", "touchend"], this.ctx.animations = new y2(this.ctx), this.ctx.axes = new ra(this.ctx), this.ctx.core = new qa(this.ctx.el, this.ctx), this.ctx.config = new Wi2({}), this.ctx.data = new $i2(this.ctx), this.ctx.grid = new Ki2(this.ctx), this.ctx.graphics = new Mi2(this.ctx), this.ctx.coreUtils = new Pi2(this.ctx), this.ctx.crosshairs = new na(this.ctx), this.ctx.events = new aa(this.ctx), this.ctx.exports = new Ji2(this.ctx), this.ctx.fill = new ji2(this.ctx), this.ctx.localization = new sa(this.ctx), this.ctx.options = new Oi2(), this.ctx.responsive = new oa(this.ctx), this.ctx.series = new Zi2(this.ctx), this.ctx.theme = new la(this.ctx), this.ctx.formatters = new Xi2(this.ctx), this.ctx.titleSubtitle = new ha(this.ctx), this.ctx.legend = new xa(this.ctx), this.ctx.toolbar = new ba(this.ctx), this.ctx.tooltip = new Sa(this.ctx), this.ctx.dimensions = new pa(this.ctx), this.ctx.updateHelpers = new Za(this.ctx), this.ctx.zoomPanSelection = new ma(this.ctx), this.ctx.w.globals.tooltip = new Sa(this.ctx);
    } }]), t4;
  }();
  var cs = function() {
    function t4(e3) {
      i2(this, t4), this.ctx = e3, this.w = e3.w;
    }
    return s2(t4, [{ key: "clear", value: function(t5) {
      var e3 = t5.isUpdating;
      this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({ isUpdating: e3 });
    } }, { key: "killSVG", value: function(t5) {
      t5.each(function() {
        this.removeClass("*"), this.off();
      }, true), t5.clear();
    } }, { key: "clearDomElements", value: function(t5) {
      var e3 = this, i3 = t5.isUpdating, a3 = this.w.globals.dom.Paper.node;
      a3.parentNode && a3.parentNode.parentNode && !i3 && (a3.parentNode.parentNode.style.minHeight = "unset");
      var s3 = this.w.globals.dom.baseEl;
      s3 && this.ctx.eventList.forEach(function(t6) {
        s3.removeEventListener(t6, e3.ctx.events.documentEvent);
      });
      var r3 = this.w.globals.dom;
      if (null !== this.ctx.el) for (; this.ctx.el.firstChild; ) this.ctx.el.removeChild(this.ctx.el.firstChild);
      this.killSVG(r3.Paper), r3.Paper.remove(), r3.elWrap = null, r3.elGraphical = null, r3.elLegendWrap = null, r3.elLegendForeign = null, r3.baseEl = null, r3.elGridRect = null, r3.elGridRectMask = null, r3.elGridRectBarMask = null, r3.elGridRectMarkerMask = null, r3.elForecastMask = null, r3.elNonForecastMask = null, r3.elDefs = null;
    } }]), t4;
  }();
  var ds = /* @__PURE__ */ new WeakMap();
  var us = function() {
    function t4(e3, a3) {
      i2(this, t4), this.opts = a3, this.ctx = this, this.w = new Gi2(a3).init(), this.el = e3, this.w.globals.cuid = v2.randomId(), this.w.globals.chartID = this.w.config.chart.id ? v2.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new hs(this).initModules(), this.lastUpdateOptions = null, this.create = v2.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);
    }
    return s2(t4, [{ key: "render", value: function() {
      var t5 = this;
      return new Promise(function(e3, i3) {
        if (v2.elementExists(t5.el)) {
          void 0 === Apex._chartInstances && (Apex._chartInstances = []), t5.w.config.chart.id && Apex._chartInstances.push({ id: t5.w.globals.chartID, group: t5.w.config.chart.group, chart: t5 }), t5.setLocale(t5.w.config.chart.defaultLocale);
          var a3 = t5.w.config.chart.events.beforeMount;
          "function" == typeof a3 && a3(t5, t5.w), t5.events.fireEvent("beforeMount", [t5, t5.w]), window.addEventListener("resize", t5.windowResizeHandler), function(t6, e4) {
            var i4 = false;
            if (t6.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
              var a4 = t6.getBoundingClientRect();
              "none" !== t6.style.display && 0 !== a4.width || (i4 = true);
            }
            var s4 = new ResizeObserver(function(a5) {
              i4 && e4.call(t6, a5), i4 = true;
            });
            t6.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t6.children).forEach(function(t7) {
              return s4.observe(t7);
            }) : s4.observe(t6), ds.set(e4, s4);
          }(t5.el.parentNode, t5.parentResizeHandler);
          var s3 = t5.el.getRootNode && t5.el.getRootNode(), r3 = v2.is("ShadowRoot", s3), n3 = t5.el.ownerDocument, o3 = r3 ? s3.getElementById("apexcharts-css") : n3.getElementById("apexcharts-css");
          if (!o3) {
            var l3;
            (o3 = document.createElement("style")).id = "apexcharts-css", o3.textContent = '@keyframes opaque {\n  0% {\n    opacity: 0\n  }\n\n  to {\n    opacity: 1\n  }\n}\n\n@keyframes resizeanim {\n\n  0%,\n  to {\n    opacity: 0\n  }\n}\n\n.apexcharts-canvas {\n  position: relative;\n  direction: ltr !important;\n  user-select: none\n}\n\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5)\n}\n\n.apexcharts-inner {\n  position: relative\n}\n\n.apexcharts-text tspan {\n  font-family: inherit\n}\n\nrect.legend-mouseover-inactive,\n.legend-mouseover-inactive rect,\n.legend-mouseover-inactive path,\n.legend-mouseover-inactive circle,\n.legend-mouseover-inactive line,\n.legend-mouseover-inactive text.apexcharts-yaxis-title-text,\n.legend-mouseover-inactive text.apexcharts-yaxis-label {\n  transition: .15s ease all;\n  opacity: .2\n}\n\n.apexcharts-legend-text {\n  padding-left: 15px;\n  margin-left: -15px;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, .96)\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30, 30, 30, .8)\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #eceff1;\n  border-bottom: 1px solid #ddd\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, .7);\n  border-bottom: 1px solid #333\n}\n\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  margin-left: 5px;\n  font-weight: 600\n}\n\n.apexcharts-tooltip-text-goals-label:empty,\n.apexcharts-tooltip-text-goals-value:empty,\n.apexcharts-tooltip-text-y-label:empty,\n.apexcharts-tooltip-text-y-value:empty,\n.apexcharts-tooltip-text-z-value:empty,\n.apexcharts-tooltip-title:empty {\n  display: none\n}\n\n.apexcharts-tooltip-text-goals-label,\n.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px\n}\n\n.apexcharts-tooltip-goals-group,\n.apexcharts-tooltip-text-goals-label,\n.apexcharts-tooltip-text-goals-value {\n  display: flex\n}\n\n.apexcharts-tooltip-text-goals-label:not(:empty),\n.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px\n}\n\n.apexcharts-tooltip-marker {\n  display: inline-block;\n  position: relative;\n  width: 16px;\n  height: 16px;\n  font-size: 16px;\n  line-height: 16px;\n  margin-right: 4px;\n  text-align: center;\n  vertical-align: middle;\n  color: inherit;\n}\n\n.apexcharts-tooltip-marker::before {\n  content: "";\n  display: inline-block;\n  width: 100%;\n  text-align: center;\n  color: currentcolor;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  font-size: 26px;\n  font-family: Arial, Helvetica, sans-serif;\n  line-height: 14px;\n  font-weight: 900;\n}\n\n.apexcharts-tooltip-marker[shape="circle"]::before {\n  content: "\\25CF";\n}\n\n.apexcharts-tooltip-marker[shape="square"]::before,\n.apexcharts-tooltip-marker[shape="rect"]::before {\n  content: "\\25A0";\n  transform: translate(-1px, -2px);\n}\n\n.apexcharts-tooltip-marker[shape="line"]::before {\n  content: "\\2500";\n}\n\n.apexcharts-tooltip-marker[shape="diamond"]::before {\n  content: "\\25C6";\n  font-size: 28px;\n}\n\n.apexcharts-tooltip-marker[shape="triangle"]::before {\n  content: "\\25B2";\n  font-size: 22px;\n}\n\n.apexcharts-tooltip-marker[shape="cross"]::before {\n  content: "\\2715";\n  font-size: 18px;\n}\n\n.apexcharts-tooltip-marker[shape="plus"]::before {\n  content: "\\2715";\n  transform: rotate(45deg) translate(-1px, -1px);\n  font-size: 18px;\n}\n\n.apexcharts-tooltip-marker[shape="star"]::before {\n  content: "\\2605";\n  font-size: 18px;\n}\n\n.apexcharts-tooltip-marker[shape="sparkle"]::before {\n  content: "\\2726";\n  font-size: 20px;\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,\n.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px\n}\n\n.apexcharts-custom-tooltip,\n.apexcharts-tooltip-box {\n  padding: 4px 8px\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: 700\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: 700;\n  display: block;\n  margin-bottom: 5px\n}\n\n.apexcharts-xaxistooltip,\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #eceff1;\n  border: 1px solid #90a4ae\n}\n\n.apexcharts-xaxistooltip {\n  padding: 9px 10px;\n  transition: .15s ease all\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, .7);\n  border: 1px solid rgba(0, 0, 0, .5);\n  color: #fff\n}\n\n.apexcharts-xaxistooltip:after,\n.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-left: -6px\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-left: -7px\n}\n\n.apexcharts-xaxistooltip-bottom:after,\n.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%\n}\n\n.apexcharts-xaxistooltip-top:after,\n.apexcharts-xaxistooltip-top:before {\n  top: 100%\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-yaxistooltip {\n  padding: 4px 10px\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, .7);\n  border: 1px solid rgba(0, 0, 0, .5);\n  color: #fff\n}\n\n.apexcharts-yaxistooltip:after,\n.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-top: -6px\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-top: -7px\n}\n\n.apexcharts-yaxistooltip-left:after,\n.apexcharts-yaxistooltip-left:before {\n  left: 100%\n}\n\n.apexcharts-yaxistooltip-right:after,\n.apexcharts-yaxistooltip-right:before {\n  right: 100%\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0, 0, 0, .5)\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none\n}\n\n.apexcharts-xcrosshairs,\n.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: .15s ease all\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,\n.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0\n}\n\n.apexcharts-selection-rect {\n  cursor: move\n}\n\n.svg_select_shape {\n  stroke-width: 1;\n  stroke-dasharray: 10 10;\n  stroke: black;\n  stroke-opacity: 0.1;\n  pointer-events: none;\n  fill: none;\n}\n\n.svg_select_handle {\n  stroke-width: 3;\n  stroke: black;\n  fill: none;\n}\n\n.svg_select_handle_r {\n  cursor: e-resize;\n}\n\n.svg_select_handle_l {\n  cursor: w-resize;\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-menu-icon,\n.apexcharts-pan-icon,\n.apexcharts-reset-icon,\n.apexcharts-selection-icon,\n.apexcharts-toolbar-custom-icon,\n.apexcharts-zoom-icon,\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6e8192;\n  text-align: center\n}\n\n.apexcharts-menu-icon svg,\n.apexcharts-reset-icon svg,\n.apexcharts-zoom-icon svg,\n.apexcharts-zoomin-icon svg,\n.apexcharts-zoomout-icon svg {\n  fill: #6e8192\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(.76)\n}\n\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\n  fill: #f3f4f5\n}\n\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\n  fill: #008ffb\n}\n\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\n  fill: #333\n}\n\n.apexcharts-menu-icon,\n.apexcharts-selection-icon {\n  position: relative\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px\n}\n\n.apexcharts-menu-icon,\n.apexcharts-reset-icon,\n.apexcharts-zoom-icon {\n  transform: scale(.85)\n}\n\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  transform: scale(.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px\n}\n\n.apexcharts-pan-icon {\n  transform: scale(.62);\n  position: relative;\n  left: 1px;\n  top: 0\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6e8192;\n  stroke-width: 2\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008ffb\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0 6px 2px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: .15s ease all;\n  pointer-events: none\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: .15s ease all\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0, 0, 0, .7);\n  color: #fff\n}\n\n@media screen and (min-width:768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1\n  }\n}\n\n.apexcharts-canvas .apexcharts-element-hidden,\n.apexcharts-datalabel.apexcharts-element-hidden,\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-hidden-element-shown {\n  opacity: 1;\n  transition: 0.25s ease all;\n}\n\n.apexcharts-datalabel,\n.apexcharts-datalabel-label,\n.apexcharts-datalabel-value,\n.apexcharts-datalabels,\n.apexcharts-pie-label {\n  cursor: default;\n  pointer-events: none\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: .3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease\n}\n\n.apexcharts-radialbar-label {\n  cursor: pointer;\n}\n\n.apexcharts-annotation-rect,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-gridline,\n.apexcharts-line,\n.apexcharts-point-annotation-label,\n.apexcharts-radar-series path:not(.apexcharts-marker),\n.apexcharts-radar-series polygon,\n.apexcharts-toolbar svg,\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-xaxis-annotation-label,\n.apexcharts-yaxis-annotation-label,\n.apexcharts-zoom-rect,\n.no-pointer-events {\n  pointer-events: none\n}\n\n.apexcharts-tooltip-active .apexcharts-marker {\n  transition: .15s ease all\n}\n\n.apexcharts-radar-series .apexcharts-yaxis {\n  pointer-events: none;\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden\n}\n\n.contract-trigger:before,\n.resize-triggers,\n.resize-triggers>div {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0\n}\n\n.resize-triggers>div {\n  height: 100%;\n  width: 100%;\n  background: #eee;\n  overflow: auto\n}\n\n.contract-trigger:before {\n  overflow: hidden;\n  width: 200%;\n  height: 200%\n}\n\n.apexcharts-bar-goals-markers {\n  pointer-events: none\n}\n\n.apexcharts-bar-shadows {\n  pointer-events: none\n}\n\n.apexcharts-rangebar-goals-markers {\n  pointer-events: none\n}\n\n.apexcharts-disable-transitions * {\n  transition: none !important;\n}';
            var h3 = (null === (l3 = t5.opts.chart) || void 0 === l3 ? void 0 : l3.nonce) || t5.w.config.chart.nonce;
            h3 && o3.setAttribute("nonce", h3), r3 ? s3.prepend(o3) : n3.head.appendChild(o3);
          }
          var c3 = t5.create(t5.w.config.series, {});
          if (!c3) return e3(t5);
          t5.mount(c3).then(function() {
            "function" == typeof t5.w.config.chart.events.mounted && t5.w.config.chart.events.mounted(t5, t5.w), t5.events.fireEvent("mounted", [t5, t5.w]), e3(c3);
          }).catch(function(t6) {
            i3(t6);
          });
        } else i3(new Error("Element not found"));
      });
    } }, { key: "create", value: function(t5, e3) {
      var i3 = this, a3 = this.w;
      new hs(this).initModules();
      var s3 = this.w.globals;
      if (s3.noData = false, s3.animationEnded = false, !v2.elementExists(this.el)) return s3.animationEnded = true, null;
      (this.responsive.checkResponsiveConfig(e3), a3.config.xaxis.convertedCatToNumeric) && new Ni2(a3.config).convertCatToNumericXaxis(a3.config, this.ctx);
      if (this.core.setupElements(), "treemap" === a3.config.chart.type && (a3.config.grid.show = false, a3.config.yaxis[0].show = false), 0 === s3.svgWidth) return s3.animationEnded = true, null;
      var r3 = t5;
      t5.forEach(function(t6, e4) {
        t6.hidden && (r3 = i3.legend.legendHelpers.getSeriesAfterCollapsing({ realIndex: e4 }));
      });
      var n3 = Pi2.checkComboSeries(r3, a3.config.chart.type);
      s3.comboCharts = n3.comboCharts, s3.comboBarCount = n3.comboBarCount;
      var o3 = r3.every(function(t6) {
        return t6.data && 0 === t6.data.length;
      });
      (0 === r3.length || o3 && s3.collapsedSeries.length < 1) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(r3), this.theme.init(), new Vi2(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), s3.noData && s3.collapsedSeries.length !== s3.series.length && !a3.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), s3.axisCharts && (this.core.coreCalculations(), "category" !== a3.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = a3.globals.minX, this.ctx.toolbar.maxX = a3.globals.maxX), this.formatters.heatmapLabelFormatters(), new Pi2(this).getLargestMarkerSize(), this.dimensions.plotCoords();
      var l3 = this.core.xySettings();
      this.grid.createGridMask();
      var h3 = this.core.plotChartType(r3, l3), c3 = new qi2(this);
      return c3.bringForward(), a3.config.dataLabels.background.enabled && c3.dataLabelsBackground(), this.core.shiftGraphPosition(), a3.globals.dataPoints > 50 && a3.globals.dom.elWrap.classList.add("apexcharts-disable-transitions"), { elGraph: h3, xyRatios: l3, dimensions: { plot: { left: a3.globals.translateX, top: a3.globals.translateY, width: a3.globals.gridWidth, height: a3.globals.gridHeight } } };
    } }, { key: "mount", value: function() {
      var t5 = this, e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i3 = this, a3 = i3.w;
      return new Promise(function(s3, r3) {
        if (null === i3.el) return r3(new Error("Not enough data to display or target element not found"));
        (null === e3 || a3.globals.allSeriesCollapsed) && i3.series.handleNoData(), i3.grid = new Ki2(i3);
        var n3, o3, l3 = i3.grid.drawGrid();
        (i3.annotations = new Fi2(i3), i3.annotations.drawImageAnnos(), i3.annotations.drawTextAnnos(), "back" === a3.config.grid.position) && (l3 && a3.globals.dom.elGraphical.add(l3.el), null != l3 && null !== (n3 = l3.elGridBorders) && void 0 !== n3 && n3.node && a3.globals.dom.elGraphical.add(l3.elGridBorders));
        if (Array.isArray(e3.elGraph)) for (var h3 = 0; h3 < e3.elGraph.length; h3++) a3.globals.dom.elGraphical.add(e3.elGraph[h3]);
        else a3.globals.dom.elGraphical.add(e3.elGraph);
        "front" === a3.config.grid.position && (l3 && a3.globals.dom.elGraphical.add(l3.el), null != l3 && null !== (o3 = l3.elGridBorders) && void 0 !== o3 && o3.node && a3.globals.dom.elGraphical.add(l3.elGridBorders));
        "front" === a3.config.xaxis.crosshairs.position && i3.crosshairs.drawXCrosshairs(), "front" === a3.config.yaxis[0].crosshairs.position && i3.crosshairs.drawYCrosshairs(), "treemap" !== a3.config.chart.type && i3.axes.drawAxis(a3.config.chart.type, l3);
        var c3 = new Qi2(t5.ctx, l3), d3 = new ia(t5.ctx, l3);
        if (null !== l3 && (c3.xAxisLabelCorrections(l3.xAxisTickWidth), d3.setYAxisTextAlignments(), a3.config.yaxis.map(function(t6, e4) {
          -1 === a3.globals.ignoreYAxisIndexes.indexOf(e4) && d3.yAxisTitleRotate(e4, t6.opposite);
        })), i3.annotations.drawAxesAnnotations(), !a3.globals.noData) {
          if (a3.config.tooltip.enabled && !a3.globals.noData && i3.w.globals.tooltip.drawTooltip(e3.xyRatios), a3.globals.axisCharts && (a3.globals.isXNumeric || a3.config.xaxis.convertedCatToNumeric || a3.globals.isRangeBar)) (a3.config.chart.zoom.enabled || a3.config.chart.selection && a3.config.chart.selection.enabled || a3.config.chart.pan && a3.config.chart.pan.enabled) && i3.zoomPanSelection.init({ xyRatios: e3.xyRatios });
          else {
            var u3 = a3.config.chart.toolbar.tools;
            ["zoom", "zoomin", "zoomout", "selection", "pan", "reset"].forEach(function(t6) {
              u3[t6] = false;
            });
          }
          a3.config.chart.toolbar.show && !a3.globals.allSeriesCollapsed && i3.toolbar.createToolbar();
        }
        a3.globals.memory.methodsToExec.length > 0 && a3.globals.memory.methodsToExec.forEach(function(t6) {
          t6.method(t6.params, false, t6.context);
        }), a3.globals.axisCharts || a3.globals.noData || i3.core.resizeNonAxisCharts(), s3(i3);
      });
    } }, { key: "destroy", value: function() {
      window.removeEventListener("resize", this.windowResizeHandler), function(t6, e3) {
        var i3 = ds.get(e3);
        i3 && (i3.disconnect(), ds.delete(e3));
      }(this.el.parentNode, this.parentResizeHandler);
      var t5 = this.w.config.chart.id;
      t5 && Apex._chartInstances.forEach(function(e3, i3) {
        e3.id === v2.escapeString(t5) && Apex._chartInstances.splice(i3, 1);
      }), new cs(this.ctx).clear({ isUpdating: false });
    } }, { key: "updateOptions", value: function(t5) {
      var e3 = this, i3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s3 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r3 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], n3 = this.w;
      return n3.globals.selection = void 0, this.lastUpdateOptions && JSON.stringify(this.lastUpdateOptions) === JSON.stringify(t5) ? this : (this.lastUpdateOptions = v2.clone(t5), t5.series && (this.series.resetSeries(false, true, false), t5.series.length && t5.series[0].data && (t5.series = t5.series.map(function(t6, i4) {
        return e3.updateHelpers._extendSeries(t6, i4);
      })), this.updateHelpers.revertDefaultAxisMinMax()), t5.xaxis && (t5 = this.updateHelpers.forceXAxisUpdate(t5)), t5.yaxis && (t5 = this.updateHelpers.forceYAxisUpdate(t5)), n3.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t5.theme && (t5 = this.theme.updateThemeOptions(t5)), this.updateHelpers._updateOptions(t5, i3, a3, s3, r3));
    } }, { key: "updateSeries", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
      return this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t5, e3, i3);
    } }, { key: "appendSeries", value: function(t5) {
      var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a3 = this.w.config.series.slice();
      return a3.push(t5), this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a3, e3, i3);
    } }, { key: "appendData", value: function(t5) {
      var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = this;
      i3.w.globals.dataChanged = true, i3.series.getPreviousPaths();
      for (var a3 = i3.w.config.series.slice(), s3 = 0; s3 < a3.length; s3++) if (null !== t5[s3] && void 0 !== t5[s3]) for (var r3 = 0; r3 < t5[s3].data.length; r3++) a3[s3].data.push(t5[s3].data[r3]);
      return i3.w.config.series = a3, e3 && (i3.w.globals.initialSeries = v2.clone(i3.w.config.series)), this.update();
    } }, { key: "update", value: function(t5) {
      var e3 = this;
      return new Promise(function(i3, a3) {
        if (e3.lastUpdateOptions && JSON.stringify(e3.lastUpdateOptions) === JSON.stringify(t5)) return i3(e3);
        e3.lastUpdateOptions = v2.clone(t5), new cs(e3.ctx).clear({ isUpdating: true });
        var s3 = e3.create(e3.w.config.series, t5);
        if (!s3) return i3(e3);
        e3.mount(s3).then(function() {
          "function" == typeof e3.w.config.chart.events.updated && e3.w.config.chart.events.updated(e3, e3.w), e3.events.fireEvent("updated", [e3, e3.w]), e3.w.globals.isDirty = true, i3(e3);
        }).catch(function(t6) {
          a3(t6);
        });
      });
    } }, { key: "getSyncedCharts", value: function() {
      var t5 = this.getGroupedCharts(), e3 = [this];
      return t5.length && (e3 = [], t5.forEach(function(t6) {
        e3.push(t6);
      })), e3;
    } }, { key: "getGroupedCharts", value: function() {
      var t5 = this;
      return Apex._chartInstances.filter(function(t6) {
        if (t6.group) return true;
      }).map(function(e3) {
        return t5.w.config.chart.group === e3.group ? e3.chart : t5;
      });
    } }, { key: "toggleSeries", value: function(t5) {
      return this.series.toggleSeries(t5);
    } }, { key: "highlightSeriesOnLegendHover", value: function(t5, e3) {
      return this.series.toggleSeriesOnHover(t5, e3);
    } }, { key: "showSeries", value: function(t5) {
      this.series.showSeries(t5);
    } }, { key: "hideSeries", value: function(t5) {
      this.series.hideSeries(t5);
    } }, { key: "highlightSeries", value: function(t5) {
      this.series.highlightSeries(t5);
    } }, { key: "isSeriesHidden", value: function(t5) {
      this.series.isSeriesHidden(t5);
    } }, { key: "resetSeries", value: function() {
      var t5 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
      this.series.resetSeries(t5, e3);
    } }, { key: "addEventListener", value: function(t5, e3) {
      this.events.addEventListener(t5, e3);
    } }, { key: "removeEventListener", value: function(t5, e3) {
      this.events.removeEventListener(t5, e3);
    } }, { key: "addXaxisAnnotation", value: function(t5) {
      var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
      i3 && (a3 = i3), a3.annotations.addXaxisAnnotationExternal(t5, e3, a3);
    } }, { key: "addYaxisAnnotation", value: function(t5) {
      var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
      i3 && (a3 = i3), a3.annotations.addYaxisAnnotationExternal(t5, e3, a3);
    } }, { key: "addPointAnnotation", value: function(t5) {
      var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
      i3 && (a3 = i3), a3.annotations.addPointAnnotationExternal(t5, e3, a3);
    } }, { key: "clearAnnotations", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, e3 = this;
      t5 && (e3 = t5), e3.annotations.clearAnnotations(e3);
    } }, { key: "removeAnnotation", value: function(t5) {
      var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, i3 = this;
      e3 && (i3 = e3), i3.annotations.removeAnnotation(i3, t5);
    } }, { key: "getChartArea", value: function() {
      return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
    } }, { key: "getSeriesTotalXRange", value: function(t5, e3) {
      return this.coreUtils.getSeriesTotalsXRange(t5, e3);
    } }, { key: "getHighestValueInSeries", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
      return new ea(this.ctx).getMinYMaxY(t5).highestY;
    } }, { key: "getLowestValueInSeries", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
      return new ea(this.ctx).getMinYMaxY(t5).lowestY;
    } }, { key: "getSeriesTotal", value: function() {
      return this.w.globals.seriesTotals;
    } }, { key: "toggleDataPointSelection", value: function(t5, e3) {
      return this.updateHelpers.toggleDataPointSelection(t5, e3);
    } }, { key: "zoomX", value: function(t5, e3) {
      this.ctx.toolbar.zoomUpdateOptions(t5, e3);
    } }, { key: "setLocale", value: function(t5) {
      this.localization.setCurrentLocaleValues(t5);
    } }, { key: "dataURI", value: function(t5) {
      return new Ji2(this.ctx).dataURI(t5);
    } }, { key: "getSvgString", value: function(t5) {
      return new Ji2(this.ctx).getSvgString(t5);
    } }, { key: "exportToCSV", value: function() {
      var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      return new Ji2(this.ctx).exportToCSV(t5);
    } }, { key: "paper", value: function() {
      return this.w.globals.dom.Paper;
    } }, { key: "_parentResizeCallback", value: function() {
      this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();
    } }, { key: "_windowResize", value: function() {
      var t5 = this;
      clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function() {
        t5.w.globals.resized = true, t5.w.globals.dataChanged = false, t5.ctx.update();
      }, 150);
    } }, { key: "_windowResizeHandler", value: function() {
      var t5 = this.w.config.chart.redrawOnWindowResize;
      "function" == typeof t5 && (t5 = t5()), t5 && this._windowResize();
    } }], [{ key: "getChartByID", value: function(t5) {
      var e3 = v2.escapeString(t5);
      if (Apex._chartInstances) {
        var i3 = Apex._chartInstances.filter(function(t6) {
          return t6.id === e3;
        })[0];
        return i3 && i3.chart;
      }
    } }, { key: "initOnLoad", value: function() {
      for (var e3 = document.querySelectorAll("[data-apexcharts]"), i3 = 0; i3 < e3.length; i3++) {
        new t4(e3[i3], JSON.parse(e3[i3].getAttribute("data-options"))).render();
      }
    } }, { key: "exec", value: function(t5, e3) {
      var i3 = this.getChartByID(t5);
      if (i3) {
        i3.w.globals.isExecCalled = true;
        var a3 = null;
        if (-1 !== i3.publicMethods.indexOf(e3)) {
          for (var s3 = arguments.length, r3 = new Array(s3 > 2 ? s3 - 2 : 0), n3 = 2; n3 < s3; n3++) r3[n3 - 2] = arguments[n3];
          a3 = i3[e3].apply(i3, r3);
        }
        return a3;
      }
    } }, { key: "merge", value: function(t5, e3) {
      return v2.extend(t5, e3);
    } }]), t4;
  }();

  // lib/lesli_assets_js/application.js
  var import_browser = __toESM(require_browser2());
  window.dayjs = import_dayjs.default;
  window.debug = import_browser.default;
  window.Alpine = module_default;
  window.ApexCharts = us;
  module_default.start();
  import_browser.default.info("Ruby on Rails SaaS Development Framework", "Lesli");
})();
/*
Lesli

Copyright (c) 2025, Lesli Technologies, S. A.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see http://www.gnu.org/licenses/.

Lesli · Ruby on Rails SaaS Development Framework.

Made with ♥ by LesliTech
Building a better future, one line of code at a time.

@contact  hello@lesli.tech
@website  https://www.lesli.tech
@license  GPLv3 http://www.gnu.org/licenses/gpl-3.0.en.html

// · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~
// · 
*/
/*! Bundled license information:

lesli-js/src/debug/utils.js:
lesli-js/debug/browser.js:
  (*
  Lesli
  
  Copyright (c) 2021, Lesli Technologies, S. A.
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
  
  Lesli JS - JavaScript utilities for JavaScript applications
  
  Powered by LesliTech
  Building a better future, one line of code at a time.
  
  @contact  <hello@lesli.tech>
  @website  <https://lesli.tech>
  @license  GPLv3 http://www.gnu.org/licenses/gpl-3.0.en.html
  
  // · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~
  // · 
  *)

lesli-js/src/debug/browser.js:
  (*
  Lesli
  
  Copyright (c) 2020, Lesli Technologies, S. A.
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
  
  Lesli JS - JavaScript utilities for JavaScript applications
  
  Powered by LesliTech
  Building a better future, one line of code at a time.
  
  @contact  <hello@lesli.tech>
  @website  <https://lesli.tech>
  @license  GPLv3 http://www.gnu.org/licenses/gpl-3.0.en.html
  
  // · ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~     ~·~
  // · 
  *)

trix/dist/trix.esm.min.js:
  (*! @license DOMPurify 3.2.5 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.5/LICENSE *)

apexcharts/dist/apexcharts.esm.js:
  (*!
   * ApexCharts v4.7.0
   * (c) 2018-2025 ApexCharts
   * Released under the MIT License.
   *)
  (*!
  * @svgdotjs/svg.select.js - An extension of svg.js which allows to select elements with mouse
  * @version 4.0.1
  * https://github.com/svgdotjs/svg.select.js
  *
  * @copyright Ulrich-Matthias Schäfer
  * @license MIT
  *
  * BUILT: Mon Jul 01 2024 15:04:42 GMT+0200 (Central European Summer Time)
  *)
  (*!
  * @svgdotjs/svg.resize.js - An extension for svg.js which allows to resize elements which are selected
  * @version 2.0.4
  * https://github.com/svgdotjs/svg.resize.js
  *
  * @copyright [object Object]
  * @license MIT
  *
  * BUILT: Fri Sep 13 2024 12:43:14 GMT+0200 (Central European Summer Time)
  *)
*/
